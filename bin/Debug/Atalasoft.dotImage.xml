<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Atalasoft.dotImage</name>
  </assembly>
  <members>
    <member name="T:Atalasoft.Annotate.AnnotateInteractMode">
      <summary> Specifies the user interaction mode for the <see cref="T:Atalasoft.Annotate.UI.AnnotationController" /></summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotateInteractMode.None">
      <summary> Mouse events are ignored. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotateInteractMode.View">
      <summary> Annotations cannot be modified. Hot spot annotations are not rendered but react to mouse events.
            </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotateInteractMode.Author">
      <summary> Annotations can be selected, moved and resized using the mouse. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotateSpace">
      <summary>Used to specify the coordinate space used by various methods.</summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotateSpace.View">
      <summary> Use the view space of the control. View space is always represented in pixels
            with its origin at the top-left of the control. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotateSpace.Document">
      <summary> Use the document space of the viewer with its origin at the top-left of the document. Coordinates are
            specified in document <see cref="T:Atalasoft.DotAnnotate.IAnnotate.Units" />. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotateSpace.Annotation">
      <summary> Use annotation space coordinates. The origin is at the location of the annotation specified in document
            <see cref="T:Atalasoft.DotAnnotate.IAnnotate.Units" />. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotateSpaceConverter">
      <summary>
            The <strong>AnnotateSpaceConverter</strong> class provides helper methods for
            converting from one coordinate space to another.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.#ctor(Atalasoft.Annotate.UI.IAnnotate,Atalasoft.Annotate.AnnotationData)">
      <summary> Creates a new instance of <STRONG>AnnotateSpaceConverter</STRONG> specifying the <see cref="T:Atalasoft.Annotate.UI.IAnnotate" />
            parent and <see cref="T:Atalasoft.Annotate.AnnotationData" /> objects that will be used for the conversion methods. </summary>
      <param name="parent"> The <see cref="T:Atalasoft.Annotate.UI.IAnnotate" /> parent used for converting between view, document and annotation
            spaces. This can be <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB) if only converting between document and
            annotation space. </param>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.AnnotationData" /> object used for converting. This can be <STRONG>null</STRONG>
            (<STRONG>Nothing</STRONG> in VB) if only converting between view and document space. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.AnnotationSpaceToDocumentSpace(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.PointFCollection)">
      <summary> Returns a new <see cref="T:Atalasoft.Annotate.PointFCollection" /> converted from annotation space to document space. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.AnnotationData" /> object used for converting. This can be <STRONG>null</STRONG>
            (<STRONG>Nothing</STRONG> in VB) if only converting between view and document space. </param>
      <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection" /> containing the points to convert. </param>
      <returns> A new <see cref="T:Atalasoft.Annotate.PointFCollection" /> with the converted points. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.AnnotationSpaceToDocumentSpace(Atalasoft.Annotate.AnnotationData,System.Drawing.PointF)">
      <summary> Converts a point from annotation space to document space. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.AnnotationData" /> object used for converting. This can be <STRONG>null</STRONG>
            (<STRONG>Nothing</STRONG> in VB) if only converting between view and document space. </param>
      <param name="point"> The point to convert. </param>
      <returns> The point converted to document space. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.AnnotationSpaceToDocumentSpace(Atalasoft.Annotate.AnnotationData,System.Drawing.PointF[])">
      <summary> Converts a point from annotation space to document space. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.AnnotationData" /> object used for converting. This can be <STRONG>null</STRONG>
            (<STRONG>Nothing</STRONG> in VB) if only converting between view and document space. </param>
      <param name="points"> The points to convert. </param>
      <returns> The point converted to document space. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.AnnotationSpaceToDocumentSpace(Atalasoft.Annotate.PointFCollection)">
      <summary> Returns a new <see cref="T:Atalasoft.Annotate.PointFCollection" /> converted from annotation space to document space. </summary>
      <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection" /> containing the points to convert. </param>
      <returns> A new <see cref="T:Atalasoft.Annotate.PointFCollection" /> with the converted points. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.AnnotationSpaceToDocumentSpace(System.Drawing.PointF)">
      <summary> Converts a point from annotation space to document space. </summary>
      <param name="point"> The point to convert. </param>
      <returns> The point converted to document space. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.AnnotationSpaceToDocumentSpace(System.Drawing.PointF[])">
      <summary> Converts an array of points from annotation space to document space. </summary>
      <param name="points"> The points to convert. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.AnnotationSpaceToViewSpace(Atalasoft.Annotate.UI.IAnnotate,Atalasoft.Annotate.AnnotationData,System.Drawing.PointF)">
      <summary> Converts from annotation space to view space. </summary>
      <param name="parent"> The <see cref="T:Atalasoft.Annotate.UI.IAnnotate" /> parent used for converting between view, document and annotation
            spaces. This can be <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB) if only converting between document and
            annotation space. </param>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.AnnotationData" /> object used for converting. This can be <STRONG>null</STRONG>
            (<STRONG>Nothing</STRONG> in VB) if only converting between view and document space. </param>
      <param name="point"> The point to convert. </param>
      <returns> The point converted into view space. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.AnnotationSpaceToViewSpace(Atalasoft.Annotate.UI.IAnnotate,Atalasoft.Annotate.AnnotationData,System.Drawing.PointF[])">
      <summary> Converts from annotation space to view space. </summary>
      <param name="parent"> The <see cref="T:Atalasoft.Annotate.UI.IAnnotate" /> parent used for converting between view, document and annotation
            spaces. This can be <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB) if only converting between document and
            annotation space. </param>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.AnnotationData" /> object used for converting. This can be <STRONG>null</STRONG>
            (<STRONG>Nothing</STRONG> in VB) if only converting between view and document space. </param>
      <param name="points"> An array of PointF that will be converted. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.AnnotationSpaceToViewSpace(System.Drawing.PointF)">
      <summary> Converts from annotation space to view space. </summary>
      <param name="point"> The point to convert. </param>
      <returns> The point converted into view space. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.AnnotationSpaceToViewSpace(System.Drawing.PointF[])">
      <summary> Converts an array of points from annotation space to view space. </summary>
      <param name="points"> An array of PointF that will be converted. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.Dispose">
      <summary> Releases resources used for conversion. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.Dispose(System.Boolean)">
      <summary> Releases resources used by this object. </summary>
      <param name="disposing"> Indicates if this method was called from the public <see cref="M:Atalasoft.Annotate.AnnotateSpaceConverter.Dispose" /> method. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.DocumentSpaceToAnnotationSpace(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.PointFCollection)">
      <summary> Returns a new <see cref="T:Atalasoft.Annotate.PointFCollection" /> with the points converted from document space to annotation
            space. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.AnnotationData" /> object used for converting. This can be <STRONG>null</STRONG>
            (<STRONG>Nothing</STRONG> in VB) if only converting between view and document space. </param>
      <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection" /> containing the points to convert. </param>
      <returns> A new <see cref="T:Atalasoft.Annotate.PointFCollection" /> with the converted points. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.DocumentSpaceToAnnotationSpace(Atalasoft.Annotate.AnnotationData,System.Drawing.PointF)">
      <summary> Converts a point from document space to annotation space. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.AnnotationData" /> object used for converting. This can be <STRONG>null</STRONG>
            (<STRONG>Nothing</STRONG> in VB) if only converting between view and document space. </param>
      <param name="point"> The point to convert. </param>
      <returns> The point converted to annotation space. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.DocumentSpaceToAnnotationSpace(Atalasoft.Annotate.AnnotationData,System.Drawing.PointF[])">
      <summary> Converts an array of points from document space to annotation space. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.AnnotationData" /> object used for converting. This can be <STRONG>null</STRONG>
            (<STRONG>Nothing</STRONG> in VB) if only converting between view and document space. </param>
      <param name="points"> The points to convert. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.DocumentSpaceToAnnotationSpace(Atalasoft.Annotate.PointFCollection)">
      <summary> Returns a new <see cref="T:Atalasoft.Annotate.PointFCollection" /> with the points converted from document space to annotation
            space. </summary>
      <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection" /> containing the points to convert. </param>
      <returns> A new <see cref="T:Atalasoft.Annotate.PointFCollection" /> with the converted points. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.DocumentSpaceToAnnotationSpace(System.Drawing.PointF)">
      <summary> Converts a point from document space to annotation space. </summary>
      <param name="point"> The point to convert. </param>
      <returns> The point converted to annotation space. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.DocumentSpaceToAnnotationSpace(System.Drawing.PointF[])">
      <summary> Converts an array of points from document space to annotation space. </summary>
      <param name="points"> The points to convert. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.DocumentSpaceToViewSpace(Atalasoft.Annotate.UI.IAnnotate,System.Drawing.PointF)">
      <summary> Converts a point from document space to view space. </summary>
      <param name="parent"> The <see cref="T:Atalasoft.Annotate.UI.IAnnotate" /> parent used for converting between view, document and annotation
            spaces. This can be <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB) if only converting between document and
            annotation space. </param>
      <param name="point"> The point to convert. </param>
      <returns> The point converted to view space. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.DocumentSpaceToViewSpace(Atalasoft.Annotate.UI.IAnnotate,System.Drawing.RectangleF)">
      <summary> Converts a rectangle from document space to view space. </summary>
      <param name="parent"> The <see cref="T:Atalasoft.Annotate.UI.IAnnotate" /> parent used for converting between view, document and annotation
            spaces. This can be <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB) if only converting between document and
            annotation space. </param>
      <param name="rectangle"> The rectangle to convert. </param>
      <returns> The rectangle converted to view space. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.DocumentSpaceToViewSpace(System.Drawing.PointF)">
      <summary> Converts a point from document space to view space. </summary>
      <param name="point"> The point to convert. </param>
      <returns> The point converted to view space. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.DocumentSpaceToViewSpace(System.Drawing.PointF[])">
      <summary> Converts an array of points from document space to view space. </summary>
      <param name="points"> The points to convert. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.DocumentSpaceToViewSpace(System.Drawing.RectangleF)">
      <summary> Converts a rectangle from document space to view space. </summary>
      <param name="rectangle"> The rectangle to convert. </param>
      <returns> The rectangle converted to view space. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.Finalize"></member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.ViewSpaceToAnnotationSpace(Atalasoft.Annotate.UI.IAnnotate,Atalasoft.Annotate.AnnotationData,System.Drawing.PointF)">
      <summary> Converts a point from view space to annotation space. </summary>
      <param name="parent"> The <see cref="T:Atalasoft.Annotate.UI.IAnnotate" /> parent used for converting between view, document and annotation
            spaces. This can be <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB) if only converting between document and
            annotation space. </param>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.AnnotationData" /> object used for converting. This can be <STRONG>null</STRONG>
            (<STRONG>Nothing</STRONG> in VB) if only converting between view and document space. </param>
      <param name="point"> The point to convert. </param>
      <returns> The point value in annotation space. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.ViewSpaceToAnnotationSpace(System.Drawing.PointF)">
      <summary> Converts a point from view space to annotation space. </summary>
      <param name="point"> The point to convert. </param>
      <returns> The point value in annotation space. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.ViewSpaceToAnnotationSpace(System.Drawing.PointF[])">
      <summary> Converts an array of <STRONG>PointF</STRONG> from view space to annotation space. </summary>
      <param name="points"> An array of points to convert. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.ViewSpaceToDocumentSpace(Atalasoft.Annotate.UI.IAnnotate,System.Drawing.PointF)">
      <summary> Converts a point from view space to document space. </summary>
      <param name="parent"> The <see cref="T:Atalasoft.Annotate.UI.IAnnotate" /> parent used for converting between view, document and annotation
            spaces. This can be <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB) if only converting between document and
            annotation space. </param>
      <param name="point"> The point to convert. </param>
      <returns> The point converted to document space. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.ViewSpaceToDocumentSpace(Atalasoft.Annotate.UI.IAnnotate,System.Drawing.RectangleF)">
      <summary> Converts a rectangle from view space to document space. </summary>
      <param name="parent"> The <see cref="T:Atalasoft.Annotate.UI.IAnnotate" /> parent used for converting between view, document and annotation
            spaces. This can be <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB) if only converting between document and
            annotation space. </param>
      <param name="rectangle"> The rectangle to convert. </param>
      <returns> The rectangle converted to document space. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.ViewSpaceToDocumentSpace(System.Drawing.PointF)">
      <summary> Converts a point from view space to document space. </summary>
      <param name="point"> The point to convert. </param>
      <returns> The point converted to document space. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.ViewSpaceToDocumentSpace(System.Drawing.PointF[])">
      <summary> Converts an array of points from view space to document space. </summary>
      <param name="points"> An array of PointF that will be converted. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotateSpaceConverter.ViewSpaceToDocumentSpace(System.Drawing.RectangleF)">
      <summary> Converts a rectangle from view space to document space. </summary>
      <param name="rectangle"> The rectangle to convert. </param>
      <returns> The rectangle converted to document space. </returns>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationBinder">
      <summary>
            A <see cref="T:System.Runtime.Serialization.SerializationBinder" /> that remaps a default set of Atalasoft assembly and type names for annotations.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationBinder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Annotate.AnnotationBinder" /> class</summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationBinder.BindToType(System.String,System.String)">
      <summary>
            Controls the binding of a serialized object to a type.
            </summary>
      <param name="assemblyName">Specifies the <see cref="!:Assembly" /> name of the serialized object.</param>
      <param name="typeName">Specifies the <see cref="T:System.Type" /> name of the serialized object.</param>
      <returns>The type of the object the formatter creates a new instance of.</returns>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationBrush">
      <summary> This class describes a brush object used for drawing annotations. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationBrush.#ctor(Atalasoft.Annotate.AnnotationImage)">
      <summary> Creates a texture brush using the specified image. </summary>
      <param name="image"> The image used for the texture. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationBrush.#ctor(Atalasoft.Annotate.AnnotationImage,System.Drawing.Drawing2D.WrapMode)">
      <summary> Creates a new texture brush with the specified image and wrap mode. </summary>
      <param name="image"> The image used for the texture. </param>
      <param name="wrapMode"> The wrap mode that specifies how the texture is tiled. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationBrush.#ctor(Atalasoft.Annotate.AnnotationImage,System.Drawing.Drawing2D.WrapMode,System.Drawing.Rectangle)">
      <summary> Creates a texture brush with the specified image, wrap mode and bounding rectangle. </summary>
      <param name="image"> The image used for the texture. </param>
      <param name="wrapMode"> The wrap mode that specifies how the texture is tiled. </param>
      <param name="dstRect"> A bounding rectangle for the texture. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationBrush.#ctor(Atalasoft.Annotate.AnnotationImage,System.Drawing.Drawing2D.WrapMode,System.Drawing.RectangleF)">
      <summary> Creates a texture brush with the specified image, wrap mode and bounding rectangle. </summary>
      <param name="image"> The image used for the texture. </param>
      <param name="wrapMode"> The wrap mode that specifies how the texture is tiled. </param>
      <param name="dstRect"> A bounding rectangle for the texture. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationBrush.#ctor(Atalasoft.Annotate.AnnotationImage,System.Drawing.Rectangle)">
      <summary> Creates a texture brush using the specified image and bounding rectangle. </summary>
      <param name="image"> The image used for the texture. </param>
      <param name="dstRect"> A bounding rectangle for the texture. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationBrush.#ctor(Atalasoft.Annotate.AnnotationImage,System.Drawing.RectangleF)">
      <summary> Creates a texture brush using the specified image and bounding rectangle. </summary>
      <param name="image"> The image used for the texture. </param>
      <param name="dstRect"> A bounding rectangle for the texture. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationBrush.#ctor(System.Drawing.Color)">
      <summary> Creates a solid brush with the specified color. </summary>
      <param name="color"> The color of the brush. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationBrush.#ctor(System.Drawing.Drawing2D.HatchStyle,System.Drawing.Color)">
      <summary> Creates a hatch brush with the specified hatch style and forecolor. </summary>
      <param name="hatchStyle"> The hatch style used by this brush. </param>
      <param name="foreColor"> The forecolor of the brush. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationBrush.#ctor(System.Drawing.Drawing2D.HatchStyle,System.Drawing.Color,System.Drawing.Color)">
      <summary> Creates a hatch brush with the specified hatch style, forecolor and background color. </summary>
      <param name="hatchStyle"> The hatch style used by this brush. </param>
      <param name="foreColor"> The forecolor of the brush. </param>
      <param name="backColor"> The background color of the brush. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationBrush.#ctor(System.Drawing.Point,System.Drawing.Point,System.Drawing.Color,System.Drawing.Color)">
      <summary> Creates a linear gradient brush using the specified start point, end point, start color and end color.
            </summary>
      <param name="point1"> The starting point of the gradient. </param>
      <param name="point2"> The ending point of the gradient. </param>
      <param name="color1"> The starting color of the gradient. </param>
      <param name="color2"> The ending color of the gradient. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationBrush.#ctor(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Color,System.Drawing.Color)">
      <summary> Creates a linear gradient brush using the specified start point, end point, start color and end color.
            </summary>
      <param name="point1"> The starting point of the gradient. </param>
      <param name="point2"> The ending point of the gradient. </param>
      <param name="color1"> The starting color of the gradient. </param>
      <param name="color2"> The ending color of the gradient. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationBrush.#ctor(System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Drawing.Drawing2D.LinearGradientMode)">
      <summary> Creates a linear gradient brush with the bounding rectangle, starting and ending colors, and the gradient
            orientation. </summary>
      <param name="rect"> The bounding rectangle of the linear gradient. </param>
      <param name="color1"> The starting color of the gradient. </param>
      <param name="color2"> The ending color of the gradient. </param>
      <param name="linearGradientMode"> The orientation of the gradient. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationBrush.#ctor(System.Drawing.RectangleF,System.Drawing.Color,System.Drawing.Color,System.Drawing.Drawing2D.LinearGradientMode)">
      <summary> Creates a linear gradient brush with the bounding rectangle, starting and ending colors, and the gradient
            orientation. </summary>
      <param name="rect"> The bounding rectangle of the linear gradient. </param>
      <param name="color1"> The starting color of the gradient. </param>
      <param name="color2"> The ending color of the gradient. </param>
      <param name="linearGradientMode"> The orientation of the gradient. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationBrush.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a brush from serialized information. </summary>
      <param name="info"> The SerializationInfo containing the brush data. </param>
      <param name="context"> A StreamingContext for this data. </param>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationBrush.AnnotationControllerNotification">
      <summary>Raised after a property of the AnnotationBrush if modified.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationBrush.Clone">
      <summary> Creates a copy of the <STRONG>AnnotationBrush</STRONG> object. </summary>
      <returns> A copy of this brush. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationBrush.Color">
      <summary> Gets or sets the color of a solid brush. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationBrush.Equals(System.Object)">
      <summary> Used to compare two <STRONG>AnnotationBrush</STRONG> objects. </summary>
      <param name="obj"> The <STRONG>AnnotationBrush</STRONG> this object is compared to. </param>
      <returns>
        <STRONG>True</STRONG> if the brush parameters are the same. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationBrush.FillType">
      <summary>Gets or sets the type of brush used.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationBrush.GetHashCode">
      <summary> Returns an identifier for this object. </summary>
      <returns> An identifier for this object. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationBrush.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about the brush. </summary>
      <param name="info"> A SerializationInfo object that will be filled with brush information. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationBrush.HatchBackColor">
      <summary> Gets or sets the hatch background color of a hatch brush. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationBrush.HatchForeColor">
      <summary> Gets or sets the hatch forecolor of a hatch brush. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationBrush.HatchStyle">
      <summary> Gets or sets the hatch style of a hatch brush. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationBrush.Image">
      <summary>Gets or sets the image used for a texture brush.</summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationBrush.LinearColors">
      <summary> Gets or sets the colors used by a linear gradient brush. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationBrush.LinearGradientMode">
      <summary> The orientation of a linear gradient brush. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationBrush.OnAnnotationControllerNotification(Atalasoft.Annotate.AnnotationControllerNotificationEventArgs)">
      <summary> Called after a property has been changed. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs" /> specifying the property that was
            modified. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationBrush.OnPropertyChanged(Atalasoft.Annotate.AnnotationPropertyChangedEventArgs)">
      <summary> Called when a property value has changed and raises the <see cref="E:Atalasoft.Annotate.AnnotationBrush.PropertyChanged" />
            event. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationLocationChangedEventArgs" /> containing information for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationBrush.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)">
      <summary> Called before a property has been changed. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationPropertyChangingEventArgs" /> specifying the property that is being
            modified. </param>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationBrush.PropertyChanged">
      <summary> Raised when a property value has changed. </summary>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationBrush.PropertyChanging">
      <summary>Raised just before a property is about to be modified.</summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationBrush.Rectangle">
      <summary>The bounding rectangle a texture or linear gradient brush.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationBrush.ToString">
      <summary> Returns a information about this AnnotationBrush. </summary>
      <returns> A string containing information about this object. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationBrush.WrapMode">
      <summary> Gets or sets the wrap mode of a texture brush. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationConfinementMode">
      <summary> Specifies the type of confinement used for the annotations when they are being moved or resized using the
            mouse. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationConfinementMode.None">
      <summary> There is no limitation to the annotation location. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationConfinementMode.ClientArea">
      <summary> Annotations can be located outside of the document but not outside of the client
            area of the viewer. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationConfinementMode.DocumentBounds">
      <summary> Annotations are confined to the document bounds. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationControllerNotification">
      <summary> Specifies the type of notification being sent to the <see cref="T:Atalasoft.Annotate.UI.AnnotationController" />. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationControllerNotification.Invalidate">
      <summary> Informs the controller that it needs to invalidate the control. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationControllerNotification.AddControl">
      <summary> Tells the controller to add a <strong>Control</strong> to the viewer. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationControllerNotification.RemoveControl">
      <summary> Removes a previously added control from the viewer. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationControllerNotification.SelectionChange">
      <summary> The <strong>Selection</strong> property of an annotation has changed. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationControllerNotification.PropertyChange">
      <summary> A property of the control has changed. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationControllerNotification.LayerContentChange">
      <summary> The content of a layer has changed. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationControllerNotification.ZoomChanged">
      <summary> The zoom level of the viewer has changed. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs">
      <summary> This class provides information when the <see cref="T:Atalasoft.Annotate.UI.AnnotationController" /> is sent a notification from
            another object. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs.#ctor(Atalasoft.Annotate.AnnotationControllerNotification)">
      <summary> Creates a new instance of <STRONG>AnnotationControllerNotificationEventArgs</STRONG> specifying the type
            of notification being sent. </summary>
      <param name="notification"> The notification to send. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs.#ctor(Atalasoft.Annotate.AnnotationControllerNotification,Atalasoft.Annotate.AnnotationRegion)">
      <summary> Creates a new instance of <STRONG>AnnotationControllerNotificationEventArgs</STRONG> specifying the
            notification and invalidation region to send. </summary>
      <param name="notification"> The notification to send. </param>
      <param name="invalidateRegion"> A region to invalidate. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs.#ctor(Atalasoft.Annotate.AnnotationControllerNotification,Atalasoft.Annotate.AnnotationRegion,Atalasoft.Annotate.UI.AnnotationUndo)">
      <summary> Creates a new instance of <STRONG>AnnotationControllerNotificationEventArgs</STRONG> specifying the
            notification, invalidation region and undo to send. </summary>
      <param name="notification"> The notification to send. </param>
      <param name="invalidateRegion"> A region to invalidate. </param>
      <param name="undo"> An undo to add to the undo collection. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs.#ctor(Atalasoft.Annotate.AnnotationControllerNotification,Atalasoft.Annotate.AnnotationRegion,Atalasoft.Annotate.UI.AnnotationUndo,Atalasoft.Annotate.UndoManagerAction)">
      <summary> Creates a new instance of <STRONG>AnnotationControllerNotificationEventArgs</STRONG> specifying the
            notification, invalidation region, undo and a special undo action. </summary>
      <param name="notification"> The notification to send. </param>
      <param name="invalidateRegion"> A region to invalidate. </param>
      <param name="undo"> An undo to add to the undo collection. </param>
      <param name="undoAction"> A special undo action to take. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs.#ctor(Atalasoft.Annotate.AnnotationControllerNotification,Atalasoft.Annotate.UI.AnnotationUndo)">
      <summary> Creates a new instance of <STRONG>AnnotationControllerNotificationEventArgs</STRONG> specifying the
            notification and undo to send. </summary>
      <param name="notification"> The notification to send. </param>
      <param name="undo"> An undo to add to the undo collection. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs.#ctor(Atalasoft.Annotate.AnnotationControllerNotification,Atalasoft.Annotate.UI.AnnotationUndo,Atalasoft.Annotate.UndoManagerAction)">
      <summary> Creates a new instance of <STRONG>AnnotationControllerNotificationEventArgs</STRONG> specifying the
            notification, undo and special undo action. </summary>
      <param name="notification"> The notification to send. </param>
      <param name="undo"> An undo to add to the undo collection. </param>
      <param name="undoAction"> A special undo action that should be taken. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs.#ctor(Atalasoft.Annotate.AnnotationControllerNotification,Atalasoft.Utils.CollectionChangedEventArgs,Atalasoft.Annotate.UI.AnnotationUndo)">
      <summary> Creates a new instance of <STRONG>AnnotationControllerNotificationEventArgs</STRONG> specifying the
            notification, <see cref="T:Atalasoft.Utils.CollectionChangedEventArgs" /> and an undo. </summary>
      <param name="notification"> The notification to send. </param>
      <param name="collectionChangedArgs"> An <see cref="T:Atalasoft.Utils.CollectionChangedEventArgs" /> indicating a change to a
            collection. </param>
      <param name="undo"> An undo to add to the undo collection. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs.#ctor(Atalasoft.Annotate.AnnotationControllerNotification,System.Windows.Forms.Control)">
      <summary> Creates a new instance of <STRONG>AnnotationControllerNotificationEventArgs</STRONG> specifying the
            notification and a control to process. </summary>
      <param name="notification"> The notification to send. </param>
      <param name="control"> A control to process. </param>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs.CollectionChangedArgs">
      <summary> Gets the <see cref="T:Atalasoft.Utils.CollectionChangedEventArgs" /> containing information about the collection
            change. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs.Control">
      <summary> Gets a <STRONG>System.Windows.Forms.Control</STRONG> object used with this notification. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs.InvalidateRegion">
      <summary> Gets or sets a region used for invalidating the parent control. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs.Notification">
      <summary> Gets the type of notification performed on the object. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs.Undo">
      <summary> Gets the <see cref="T:Atalasoft.Annotate.UI.AnnotationUndo" /> to store into the <see cref="T:Atalasoft.Annotate.UI.AnnotationUndoManager" />. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs.UndoAction">
      <summary> Gets a special undo action to send to the undo manager. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationControllerNotificationEventHandler">
      <summary> This delegate is used for the <see cref="E:Atalasoft.Annotate.AnnotationData.AnnotationControllerNotification" /> event to send
            information to the <see cref="T:Atalasoft.Annotate.UI.AnnotationController" />. </summary>
      <param name="sender"> The object sending this notification. </param>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs" /> containing information for this event.
            </param>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationData">
      <summary>
            This is the main annotation data class used to hold base information required by all annotations.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.#ctor">
      <summary>
            Default constructor of AnnotationData.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Default serialization constructor of AnnotationData.
            </summary>
      <param name="info">SerializationInfo containing annotation data.</param>
      <param name="context">StreamingContext object for this class.</param>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationData.AnnotationBounds">
      <summary>
            Gets the rectangle bounds of the annotation, including any pen or shadow, before
            any matricies are applied.
            </summary>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationData.AnnotationControllerNotification">
      <summary>Raised after a property has been changed.</summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationData.Bounds">
      <summary>Gets the bounding rectangle of the annotation.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.CalculateAnnotationBounds(Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
      <summary> This method will calculate the bounding rectangle without applying the annotation transforms. </summary>
      <param name="pen"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used by the annotation, if any. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the shadow, if any. </param>
      <param name="shadowOffset"> The position offset used for the shadow. </param>
      <returns> The bounding rectangle of the annotation without its transforms applied. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.CalculateAnnotationBounds(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
      <summary> This method will calculate the bounding rectangle without applying the annotation transforms. </summary>
      <param name="bounds"> A bounding rectangle to which the pen and shadow will be applied. </param>
      <param name="pen"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used on this rectangle, if any. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the shadow of this rectangle, if any. </param>
      <param name="shadowOffset"> The position offset of the shadow. </param>
      <returns> The rectangle that includes the pen and shadow offsets. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.CalculateBounds(Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
      <summary> This method will calculate the bounding rectangle for the annotation, taking the pen width, shadow and
            annotation transforms into account. </summary>
      <param name="pen"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used by the annotation, if any. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the shadow, if any. </param>
      <param name="shadowOffset"> The position offset used for the shadow. </param>
      <returns> The bounding rectangle of the annotation in document space. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.CalculateBounds(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
      <summary> This method will add the annotation pen width, shadow and transforms to the provided rectangle bounds.
            </summary>
      <param name="bounds"> The bounding rectangle to which the pen, shadow and transforms will be applied. </param>
      <param name="pen"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> being applied to the bounds. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the shadow. </param>
      <param name="shadowOffset"> The position offset used for the shadow. </param>
      <returns> The rectangle in document space. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationData.CanMirror">
      <summary>
            Gets or sets a value indicating if the annotation can mirror.
            </summary>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationData.CanMirrorChanged">
      <summary>
            Raised when the
            <a href="DotAnnotate~Atalasoft.Annotate.AnnotationData~CanMirror.html">CanMirror</a>
            property is changed.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationData.CanMove">
      <summary>
            Gets or sets a value indicating if the annotation can be moved.
            </summary>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationData.CanMoveChanged">
      <summary>
            Raised when the
            <a href="DotAnnotate~Atalasoft.Annotate.AnnotationData~CanMove.html">CanMove</a>
            property is changed.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationData.CanResize">
      <summary>
            Gets or sets a value indicating if the annotation can be resized.
            </summary>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationData.CanResizeChanged">
      <summary>
            Raised when the
            <a href="DotAnnotate~Atalasoft.Annotate.AnnotationData~CanResize.html">CanResize</a>
            property has changed.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationData.CanRotate">
      <summary>
            Gets or sets a value indicating if the annotation can be rotated.
            </summary>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationData.CanRotateChanged">
      <summary>
            Raised when the
            <a href="DotAnnotate~Atalasoft.Annotate.AnnotationData~CanRotate.html">CanRotate</a>
            property has changed.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationData.CanSelect">
      <summary>
            Gets or sets a value indicating if the annotation can be selected.
            </summary>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationData.CanSelectChanged">
      <summary>
            Raised when the
            <a href="DotAnnotate~Atalasoft.Annotate.AnnotationData~CanSelect.html">CanSelect</a>
            property has changed.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.Clone">
      <summary> Returns a copy of this annotation data. </summary>
      <returns> A copy of this data. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.CloneBaseData(Atalasoft.Annotate.AnnotationData)">
      <summary> Fills the data object with cloned property values. </summary>
      <param name="data"> A class that derives from <STRONG>AnnotationData</STRONG>. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.CloneBaseDataFrom(Atalasoft.Annotate.AnnotationData)"></member>
    <member name="P:Atalasoft.Annotate.AnnotationData.CreationTime">
      <summary>
            Gets or sets the creation time of the annotation.
            </summary>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationData.CreationTimeChanged">
      <summary>
            Raised when the
            <a href="DotAnnotate~Atalasoft.Annotate.AnnotationData~CreationTime.html">CreationTime</a>
            property has changed.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.Dispose">
      <summary> Releases resources used by the annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.Dispose(System.Boolean)">
      <summary> Called to release resources used by the annotation. </summary>
      <param name="disposing"> A value indicating whether this method was called from the public <see cref="M:Atalasoft.Annotate.AnnotationData.Dispose" /> method or the class finalizer. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.Equals(System.Object)">
      <summary> Compares the current annotation with another. </summary>
      <param name="obj"> The object to compare against. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.Finalize"></member>
    <member name="M:Atalasoft.Annotate.AnnotationData.GetAllExtraProperties">
      <summary> Returns a <STRONG>Dictionary</STRONG> containing the key value pairs for extra properties. </summary>
      <returns> A <STRONG>Dictionary</STRONG> containing the key value pairs. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.GetExtraProperty(System.String)">
      <summary> Returns the value stored with <see cref="M:Atalasoft.Annotate.AnnotationData.SetExtraProperty(System.String,System.String)" />. </summary>
      <param name="key"> Key name of the value requested. </param>
      <returns> The object with the given key name, null if it doesn't exist. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.GetHashCode">
      <summary> Returns an identifier for this object. </summary>
      <returns> A value representing this object. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.GetLineCapBounds">
      <summary> Called to get the rectangle bounds of the line cap used in an <see cref="T:Atalasoft.Annotate.AnnotationLineCap" />. </summary>
      <returns> The bounds for the line cap. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills the SerializationInfo object with properties values for the base <STRONG>AnnotationData</STRONG>
            class. </summary>
      <param name="info"> The SerializationInfo object where data will be stored. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.GetRenderTransform">
      <summary> Returns a <STRONG>System.Drawing.Drawing2D.Matrix</STRONG> containing the matrices applied to the
            annotation. </summary>
      <returns> A Matrix containing all of the matrices applied to the annotation. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationData.IgnoreDataChanges">
      <summary>
            Gets or sets a value indicating whether any properties changes should be passed to the undo manager.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationData.IsMirroredHorizontally">
      <summary> Gets a value indicating whether the annotation is mirrored horizontally. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationData.IsMirroredVertically">
      <summary> Gets a value indicating whether the annotation is mirrored vertically. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationData.Location">
      <summary>
            Gets or sets the location of this annotation.
            </summary>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationData.LocationChanged">
      <summary>
            Raised when the
            <a href="DotAnnotate~Atalasoft.Annotate.AnnotationData~Location.html">Location</a>
            property has changed.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.Mirror(Atalasoft.Annotate.MirrorDirection,System.Boolean)">
      <summary> Flips (mirrors) the annotation horizontally or vertically. </summary>
      <param name="direction"> The direction to mirror the annotation. </param>
      <param name="maintainPosition"> Determines whether the mirror is performed in place or if the annotation pivots
            along its location. </param>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationData.Mirrored">
      <summary>
            Raised when the annotation is mirrored, either by the user dragging a grip across
            its opposite or when the
            <a href="DotAnnotate~Atalasoft.Annotate.AnnotationData~Mirror.html">Mirror</a> method
            is called.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationData.ModifiedTime">
      <summary>
            Gets or sets the time in which this annotation was modified.
            </summary>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationData.ModifiedTimeChanged">
      <summary>
            Raised when the
            <a href="DotAnnotate~Atalasoft.Annotate.AnnotationData~ModifiedTime.html">ModifiedTime</a>
            property has changed.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationData.Name">
      <summary>
            Gets or sets a name for this annotation.
            </summary>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationData.NameChanged">
      <summary>
            Raised when the
            <a href="DotAnnotate~Atalasoft.Annotate.AnnotationData~Name.html">Name</a> property has
            changed.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.OnAnnotationControllerNotification(Atalasoft.Annotate.AnnotationControllerNotificationEventArgs)">
      <summary> Called after a property value has been changed. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs" /> containing information about this
            change. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.OnCanMirrorChanged(System.EventArgs)">
      <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.CanMirror" /> property value has changed. </summary>
      <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.OnCanMoveChanged(System.EventArgs)">
      <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.CanMove" /> property value has changed. </summary>
      <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.OnCanResizeChanged(System.EventArgs)">
      <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.CanResize" /> property has changed. </summary>
      <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.OnCanRotateChanged(System.EventArgs)">
      <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.CanRotate" /> property value has changed. </summary>
      <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.OnCanSelectChanged(System.EventArgs)">
      <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.CanSelect" /> property value has changed. </summary>
      <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.OnCreationTimeChanged(System.EventArgs)">
      <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.CreationTime" /> property value has changed. </summary>
      <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.OnLocationChanged(Atalasoft.Annotate.AnnotationLocationChangedEventArgs)">
      <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.Location" /> property value has changed. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationLocationChangedEventArgs" /> containing information about this event.
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.OnMirrored(Atalasoft.Annotate.MirrorEventArgs)">
      <summary> Called when the annotation has been mirrored. </summary>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.MirrorEventArgs" /> containing information about this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.OnModifiedTimeChanged(System.EventArgs)">
      <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.ModifiedTime" /> property has changed. </summary>
      <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.OnNameChanged(System.EventArgs)">
      <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.Name" /> property has changed. </summary>
      <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.OnPropertyChanged(Atalasoft.Annotate.AnnotationPropertyChangedEventArgs)">
      <summary> Called when a property has been changed and raises the <see cref="E:Atalasoft.Annotate.AnnotationData.PropertyChanged" /> event.
            </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationLocationChangedEventArgs" /> containing information for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)">
      <summary> Called just before a property value is changed. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationPropertyChangingEventArgs" /> containing information about this change.
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.OnRotationChanged(System.EventArgs)">
      <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.Rotation" /> property has changed. </summary>
      <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.OnSecurityChanged(System.EventArgs)">
      <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.Security" /> property has changed. </summary>
      <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.OnSizeChanged(Atalasoft.Annotate.AnnotationSizeChangedEventArgs)">
      <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.Size" /> property has changed. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationSizeChangedEventArgs" /> containing information about this change. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.OnStateChanged(System.EventArgs)">
      <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.State" /> property has changed and raises the <see cref="E:Atalasoft.Annotate.AnnotationData.StateChanged" /> event. </summary>
      <param name="e"> An <STRONG>EventArgs</STRONG> passed to the <see cref="E:Atalasoft.Annotate.AnnotationData.StateChanged" /> event.
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.OnTooltipChanged(System.EventArgs)">
      <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.ToolTip" /> property has changed. </summary>
      <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.OnTransformChanged(System.EventArgs)">
      <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.Transform" /> property has changed. </summary>
      <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.OnUserNameChanged(System.EventArgs)">
      <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.UserName" /> property has changed and raises the <see cref="E:Atalasoft.Annotate.AnnotationData.UserNameChanged" /> event. </summary>
      <param name="e"> An <STRONG>EventArgs</STRONG> passed to the <see cref="E:Atalasoft.Annotate.AnnotationData.UserNameChanged" /> event.
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.OnVisibleChanged(System.EventArgs)">
      <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.Visible" /> property has changed. </summary>
      <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationData.PropertyChanged">
      <summary> Raised when a property value has changed. </summary>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationData.PropertyChanging">
      <summary>Raised before a property is changed.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.RemoveBrushEvents(Atalasoft.Annotate.AnnotationBrush)">
      <summary> This is a helper method to remove the <see cref="E:Atalasoft.Annotate.AnnotationBrush.PropertyChanging" /> and <see cref="E:Atalasoft.Annotate.AnnotationBrush.AnnotationControllerNotification" /> event handlers for an <see cref="T:Atalasoft.Annotate.AnnotationBrush" />.
            </summary>
      <param name="brush"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> to remove event handlers from. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.RemoveFontEvents(Atalasoft.Annotate.AnnotationFont)">
      <summary> This is a helper method to remove the <see cref="E:Atalasoft.Annotate.AnnotationFont.PropertyChanging" /> and <see cref="E:Atalasoft.Annotate.AnnotationFont.AnnotationControllerNotification" /> event handlers for an <see cref="T:Atalasoft.Annotate.AnnotationFont" />.
            </summary>
      <param name="font"> The font to remove events from. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.RemovePenEvents(Atalasoft.Annotate.AnnotationPen)">
      <summary> This is a helper method to remove the <see cref="E:Atalasoft.Annotate.AnnotationPen.PropertyChanging" /> and <see cref="E:Atalasoft.Annotate.AnnotationPen.AnnotationControllerNotification" /> event handlers for an <see cref="T:Atalasoft.Annotate.AnnotationPen" />.
            </summary>
      <param name="pen"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> to remove the event handlers from. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.RemoveSecurityEvents(Atalasoft.Annotate.IAnnotationLock)">
      <summary> This is a helper method to remove the <see cref="E:Atalasoft.Annotate.IAnnotationLock.PropertyChanging" /> and <see cref="E:Atalasoft.Annotate.IAnnotationLock.AnnotationControllerNotification" /> event handlers for an <see cref="T:Atalasoft.Annotate.IAnnotationLock" />.
            </summary>
      <param name="security"> The class implementing <see cref="T:Atalasoft.Annotate.IAnnotationLock" /> that will have event handlers removed.
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.Rotate(System.Single)">
      <summary> Applies rotation to the annotation from its current rotation amount. </summary>
      <param name="degrees"> The amount of rotation being added to this annotation. </param>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationData.Rotation">
      <summary>
            Gets or sets the current amount of rotation for this annotation.
            </summary>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationData.RotationChanged">
      <summary>
            Raised when the
            <a href="DotAnnotate~Atalasoft.Annotate.AnnotationData~Rotation.html">Rotation</a>
            property has changed.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationData.Security">
      <summary>
            Gets or sets the security lock used for this annotation.
            </summary>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationData.SecurityChanged">
      <summary>
            Raised when the
            <a href="DotAnnotate~Atalasoft.Annotate.AnnotationData~Security.html">Security</a>
            property has changed.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationData.Selected">
      <summary> Get or set whether this <STRONG>AnnotationData</STRONG> object is selected </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.SetBrushEvents(Atalasoft.Annotate.AnnotationBrush)">
      <summary> This is a helper method used to set event handlers for the <see cref="E:Atalasoft.Annotate.AnnotationBrush.PropertyChanging" />
            and <see cref="E:Atalasoft.Annotate.AnnotationBrush.AnnotationControllerNotification" /> event handlers in an <see cref="T:Atalasoft.Annotate.AnnotationBrush" />. </summary>
      <param name="brush"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> to set event handlers for. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.SetExtraProperty(System.String,System.String)">
      <summary> Sets a custom value within an annotation that can be retrieved using <see cref="M:Atalasoft.Annotate.AnnotationData.GetExtraProperty(System.String)" />. </summary>
      <param name="key"> Key name of the property to be set to. </param>
      <param name="val"> Object value of the property being set. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.SetFontEvents(Atalasoft.Annotate.AnnotationFont)">
      <summary> This is a helper method used to set event handlers for the <see cref="E:Atalasoft.Annotate.AnnotationFont.PropertyChanging" />
            and <see cref="E:Atalasoft.Annotate.AnnotationFont.AnnotationControllerNotification" /> event handlers in an <see cref="T:Atalasoft.Annotate.AnnotationFont" />.
            </summary>
      <param name="font"> The <see cref="T:Atalasoft.Annotate.AnnotationFont" /> to set event handlers for. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.SetPenEvents(Atalasoft.Annotate.AnnotationPen)">
      <summary> This is a helper method used to set event handlers for the <see cref="E:Atalasoft.Annotate.AnnotationPen.PropertyChanging" />
            and <see cref="E:Atalasoft.Annotate.AnnotationPen.AnnotationControllerNotification" /> event handlers in an <see cref="T:Atalasoft.Annotate.AnnotationPen" />.
            </summary>
      <param name="pen"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> to set event handlers for. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationData.SetSecurityEvents(Atalasoft.Annotate.IAnnotationLock)">
      <summary> This is a helper method used to set event handlers for the <see cref="E:Atalasoft.Annotate.IAnnotationLock.PropertyChanging" />
            and <see cref="E:Atalasoft.Annotate.IAnnotationLock.AnnotationControllerNotification" /> event handlers in an <see cref="T:Atalasoft.Annotate.IAnnotationLock" />. </summary>
      <param name="security"> The class implementing <see cref="T:Atalasoft.Annotate.IAnnotationLock" /> to set event handlers for. </param>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationData.Size">
      <summary>
            Gets or sets the size of the annotation.
            </summary>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationData.SizeChanged">
      <summary>
            Raised when the
            <a href="DotAnnotate~Atalasoft.Annotate.AnnotationData~Size.html">Size</a> property has
            changed.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationData.State">
      <summary> Get or set the <see cref="T:Atalasoft.Annotate.AnnotationState" /> of this <STRONG>AnnotationData</STRONG> object </summary>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationData.StateChanged">
      <summary> This event is raised when the <see cref="P:Atalasoft.Annotate.AnnotationData.State" /> property value has changed. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationData.ToolTip">
      <summary>
            Gets or sets the text displayed in the annotation tooltip.
            </summary>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationData.TooltipChanged">
      <summary> Raised when the <see cref="P:Atalasoft.Annotate.AnnotationData.ToolTip" /> property has changed. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationData.Transform">
      <summary>Gets the transformation matrix used for rendering this annotation.</summary>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationData.TransformChanged">
      <summary>
            Raised when the
            <a href="DotAnnotate~Atalasoft.Annotate.AnnotationData~Transform.html">Transform</a>
            property has changed.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationData.UserName">
      <summary> Gets or sets the username for the annotation.  Internally this is used with PDF annotations. </summary>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationData.UserNameChanged">
      <summary> This event is raised when the <see cref="P:Atalasoft.Annotate.AnnotationData.UserName" /> property has changed. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationData.Visible">
      <summary>
            Gets or sets a value indicating if the annotation is visible.
            </summary>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationData.VisibleChanged">
      <summary>
            Raised when the
            <a href="DotAnnotate~Atalasoft.Annotate.AnnotationData~Visible.html">Visible</a>
            property has changed.
            </summary>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationDataCollection">
      <summary>This class can be used to hold a collection of AnnotationData objects.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection.#ctor">
      <summary> Creates a new instance of <STRONG>AnnotationDataCollection</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>AnnotationDataCollection</STRONG> from serialized information.
            </summary>
      <param name="info"> The SerializationInfo that contains information for this object. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception cref="T:System.ArgumentNullException"> Thrown if the info parameter is null. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection.Add(Atalasoft.Annotate.AnnotationData)">
      <summary> Adds an <see cref="T:Atalasoft.Annotate.AnnotationData" /> object to the collection. </summary>
      <param name="data"> The class derived from <see cref="T:Atalasoft.Annotate.AnnotationData" /> to add. </param>
      <exception> Thrown if the data parameter is null. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection.AddRange(Atalasoft.Annotate.AnnotationData[])">
      <summary> Adds an array of <see cref="T:Atalasoft.Annotate.AnnotationData" /> objects to the collection. </summary>
      <param name="data"> An array of <see cref="T:Atalasoft.Annotate.AnnotationData" /> objects to add. </param>
      <exception> Thrown if the data parameter is null or zero length. </exception>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationDataCollection.AnnotationControllerNotification">
      <summary> Raised when the annotation sends a notification to the <see cref="T:Atalasoft.Annotate.UI.AnnotationController" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection.Clone">
      <summary> Create a copy of the <STRONG>AnnotationDataCollection</STRONG>. </summary>
      <returns> An <STRONG>AnnotationDataCollection</STRONG> containing a clone of every <see cref="T:Atalasoft.Annotate.AnnotationData" />
            object. </returns>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationDataCollection.CollectionChanged">
      <summary> Raised when the collection has changed. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection.Contains(Atalasoft.Annotate.AnnotationData)">
      <summary> Determines whether the <STRONG>AnnotationDataCollection </STRONG>contains the specified element </summary>
      <param name="data"> The element to locate in the CollectionBase </param>
      <returns>
        <STRONG>true</STRONG> if the <STRONG>AnnotationDataCollection </STRONG>contains the specified
            <I>value</I>; otherwise, <B>false</B>. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection.CopyTo(Atalasoft.Annotate.AnnotationData[],System.Int32)">
      <summary> Copies items into the specified array. </summary>
      <param name="array"> The array to copy items into. </param>
      <param name="index"> The index of the target array to being copying. </param>
      <exception> Thrown if the array is null (Nothing in VB). </exception>
      <exception> Thrown if the index is invalid. </exception>
      <exception> Thrown if the array is not large enough to perform this task. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection.Equals(System.Object)">
      <summary> Compares one collection to another to see if they are equal. </summary>
      <param name="obj"> The <STRONG>AnnotationDataCollection</STRONG> being compared to. </param>
      <returns>
        <STRONG>True</STRONG> if the collections hold equal data. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection.GetHashCode"></member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with serialized data for this collection. </summary>
      <param name="info"> The SerializationInfo object where the data will be stored. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info parameter is null. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection.IndexOf(Atalasoft.Annotate.AnnotationData)">
      <summary> Returns the index of an item in the collection. </summary>
      <param name="data"> The item to search for. </param>
      <returns> The index of the item or -1 if the item does not exist in the collection. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection.Insert(System.Int32,Atalasoft.Annotate.AnnotationData)">
      <summary> Inserts an <see cref="T:Atalasoft.Annotate.AnnotationData" /> object into the collection at a specified index. </summary>
      <param name="index"> The position within the collection to place this object. </param>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.AnnotationData" /> object to insert. </param>
      <exception cref="T:System.ArgumentNullException"> Thrown if the data parameter is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if the index parameter if out of range for this collection. </exception>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationDataCollection.Item(System.Int32)">
      <summary>Gets an AnnotationData object form the collection at the specified index.</summary>
      <param name="index">The index of the item to retrieve.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">Thrown if the index parameter is out of range for this collection.</exception>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection.OnClear">
      <summary> Called when the Clear method has been invoked. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection.OnClearComplete">
      <summary> Called when the collection is cleared. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection.OnCollectionChanged(Atalasoft.Utils.CollectionChangedEventArgs)">
      <summary> Called when there is a change in the collection. </summary>
      <param name="args"> An <see cref="T:Atalasoft.Utils.CollectionChangedEventArgs" /> containing information about the change.
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection.OnDeserialization(System.Object)">
      <summary> Called after an object has been fully deserialized by a serialization formatter.<!--DXMETADATA end --><!--DXMETADATA start type="TaggedComment" source="Item" id="##OVERLOADS" format="%%comment%%" --><!--DXMETADATA end
            --><!--DXMETADATA start type="FilteredItemList" scrap="OVERLOAD_LIST" namespace="method" source="Item" filter=""
            format="%%scrap:name=_COLLAPSIBLE_HEADER,idprefix=overloadlist,caption=$$OverloadList$$%%%%filtereditemlist%%</div>"
            --><!--DXMETADATA end --><!--DXMETADATA start type="FilteredItemList" scrap="SYNTAX" namespace="language"
            filter="type=all" NoHeader="True" NoFooter="True"
            format="%%scrap:name=_COLLAPSIBLE_HEADER,idprefix=syntax,caption=$$Syntax$$%%%%FilteredItemList%%" --></summary>
      <param name="sender"> This parameter is not used and will be <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB).
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection.OnInsertComplete(System.Int32,System.Object)">
      <summary> Called when an add or insert has completed. </summary>
      <param name="index"> The index in the collection where the item was placed. </param>
      <param name="value"> The object that was added to the collection. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection.OnRemoveComplete(System.Int32,System.Object)">
      <summary> Called when a remove has completed. </summary>
      <param name="index"> The index of the item that was removed. </param>
      <param name="value"> The object that was removed. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
      <summary> Called when a set has completed. </summary>
      <param name="index"> The index in the collection where the item was changed. </param>
      <param name="oldValue"> The previous object at the specified index. </param>
      <param name="newValue"> The new object at the specified index. </param>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationDataCollection.PropertyChanging">
      <summary> Raised before a property is changed. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection.Remove(Atalasoft.Annotate.AnnotationData)">
      <summary> Removes an <see cref="T:Atalasoft.Annotate.AnnotationData" /> object from the collection. </summary>
      <param name="data"> The object to remove. </param>
      <exception cref="T:System.ArgumentNullException"> Thrown if the data parameter is null. </exception>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationDataCollection`1">
      <summary> This class can be used to hold a collection of <see cref="T:Atalasoft.Annotate.AnnotationData" /> objects. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection`1.#ctor">
      <summary>Creates a new instance of AnnotationDataCollection.</summary>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationDataCollection`1.AnnotationControllerNotification">
      <summary>Raised after a property has been changed.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection`1.ClearItems"></member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection`1.Clone"></member>
    <member name="E:Atalasoft.Annotate.AnnotationDataCollection`1.CollectionChanged">
      <summary>Raised when the collection has changed.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection`1.InsertItem(System.Int32,`0)"></member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection`1.OnCollectionChanged(Atalasoft.Utils.CollectionChangedEventArgs)">
      <summary>Called when there is a change in the collection.</summary>
      <param name="args">
            An
            <a href="DotAnnotate~Atalasoft.Annotate.Atalasoft.Utils.CollectionChangedEventArgs.html">Atalasoft.Utils.CollectionChangedEventArgs</a>
            containing information about the change.
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection`1.OnDeserialization(System.Object)"></member>
    <member name="E:Atalasoft.Annotate.AnnotationDataCollection`1.PropertyChanging">
      <summary>Raised before a property is changed.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection`1.RemoveItem(System.Int32)"></member>
    <member name="M:Atalasoft.Annotate.AnnotationDataCollection`1.SetItem(System.Int32,`0)"></member>
    <member name="T:Atalasoft.Annotate.AnnotationDataFormat">
      <summary> Specifies the format used for serialized annotation data. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationDataFormat.Xmp">
      <summary> The data is serialized using the <see cref="T:Atalasoft.Annotate.Formatters.XmpFormatter" />. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationDataFormat.Wang">
      <summary> The data is serialized using the <see cref="T:Atalasoft.Annotate.Formatters.WangFormatter" />. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationEventArgs">
      <summary> This class provides information for events that involve an annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationEventArgs.#ctor(Atalasoft.Annotate.UI.AnnotationUI)">
      <summary> Creates a new instance of <STRONG>AnnotationEventArgs</STRONG>. </summary>
      <param name="annotation"> The annotation this event relates to. </param>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationEventArgs.Annotation">
      <summary> Gets the annotation this event relates to. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationEventHandler">
      <summary> This delegate is used for various events that apply to an annotation. </summary>
      <param name="sender"> The object sending the event. </param>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationEventArgs" /> containing the annotation for the event. </param>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationFont">
      <summary>
            This class represents a font used with annotations.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationFont.#ctor">
      <summary> Creates a new instance of <STRONG>AnnotationFont</STRONG> of type Arial and size 12. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationFont.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>AnnotationFont</STRONG> from serialized data. </summary>
      <param name="info"> A SerializationInfo object containing font data. </param>
      <param name="context"> A StreamingContext for this data. </param>
      <exception cref="T:System.ArgumentNullException"> Thrown if the 'info' argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationFont.#ctor(System.String,System.Single)">
      <summary> Creates a new instance of <STRONG>AnnotationFont</STRONG> specifying the font name and size. </summary>
      <param name="fontName"> The name of the font. </param>
      <param name="size"> The size of the font. </param>
      <exception cref="T:System.ArgumentNullException"> Thrown if the 'fontName' is null (Nothing in VB) or an empty string. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if the 'size' argument is less than or equal to 0. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationFont.#ctor(System.String,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary> Creates a new instance of <STRONG>AnnotationFont</STRONG> specifying the font parameters. </summary>
      <param name="fontName"> The name of the font. </param>
      <param name="size"> The size of the font. </param>
      <param name="bold"> Indicates if this font is bold. </param>
      <param name="italic"> Indicates if this font is italic. </param>
      <param name="underline"> Indicates if this font is underlined. </param>
      <param name="strikeout"> Indicates if this font has a strikeout. </param>
      <exception cref="T:System.ArgumentNullException"> Thrown if the 'fontName' argument is null (Nothing in VB) or an empty string. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if the 'size' argument is less than or equal to 0. </exception>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationFont.AnnotationControllerNotification">
      <summary> Raised after a property of the <STRONG>AnnotationFont </STRONG>is modified. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationFont.Bold">
      <summary> Gets or sets a value indicating whether the font is <STRONG>bold</STRONG>. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationFont.CharSet">
      <summary> Gets or sets the character set for this font. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationFont.Clone">
      <summary> Creates a copy of this <STRONG>AnnotationFont</STRONG>. </summary>
      <returns> A clone of this object. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationFont.Equals(System.Object)">
      <summary> Compares the <STRONG>AnnotationFont</STRONG> with another to see if they are equal. </summary>
      <param name="obj"> The <STRONG>AnnotationFont</STRONG> to compare against. </param>
      <returns>
        <STRONG>True</STRONG> if they are equal. </returns>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationFont.FallbackFontName">
      <summary> The <STRONG>FallbackFontName</STRONG> is used when a deserialized or requested font does not exist on the
            system. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationFont.GetHashCode"></member>
    <member name="M:Atalasoft.Annotate.AnnotationFont.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this <STRONG>AnnotationFont</STRONG>. </summary>
      <param name="info"> A SerializationInfo object where data will be filled. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception cref="T:System.ArgumentNullException"> Thrown if the 'info' object is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationFont.Italic">
      <summary> Gets or sets a value indicating whether the font is <EM>italic</EM>. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationFont.Name">
      <summary> Gets or sets the name of the font. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationFont.OnAnnotationControllerNotification(Atalasoft.Annotate.AnnotationControllerNotificationEventArgs)">
      <summary> Called to notify the <see cref="T:Atalasoft.Annotate.UI.AnnotationController" /> about a property change. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs" /> specifying the property that was
            modified. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationFont.OnPropertyChanged(Atalasoft.Annotate.AnnotationPropertyChangedEventArgs)">
      <summary> Called when a property value has changed and raises the <see cref="E:Atalasoft.Annotate.AnnotationFont.PropertyChanged" />
            event. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationLocationChangedEventArgs" /> containing information for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationFont.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)">
      <summary> Called before a property has been changed. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationPropertyChangingEventArgs" /> specifying the property that is being
            modified. </param>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationFont.PropertyChanged">
      <summary> Raised when a property value has changed. </summary>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationFont.PropertyChanging">
      <summary> Raised just before a property is about to be modified. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationFont.Size">
      <summary> Gets or sets the size of the font in points. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationFont.Strikeout">
      <summary> Gets or sets a value indicating whether the font has a strikeout. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationFont.ToString">
      <summary> Returns a string representation of this object. </summary>
      <returns> A string containing the font name, size and attributes. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationFont.Underline">
      <summary> Gets or sets a value indicating whether the font is <U>underlined</U>. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationGripAction">
      <summary> Specifies the action that will be taken by the <see cref="T:Atalasoft.Annotate.UI.AnnotationController" /> when a grip is dragged
            with the mouse. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationGripAction.Resizing">
      <summary> The grip is used to resize the annotation. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationGripAction.Moving">
      <summary> The grip is used to move the annotation. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationGripAction.Rotating">
      <summary> The grip is used for rotating the annotation. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationGripAction.Indepenent">
      <summary>
            The grip is used for custom movement determined by the annotation.
            </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationGripAction.Independent">
      <summary> The grip is used for custom movement determined by the annotation. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationGripMode">
      <summary> Specifies the type of grips being used for an annotation. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationGripMode.Rectangular">
      <summary> Rectangle grips are used. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationGripMode.Points">
      <summary> Point grips are used. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationGripState">
      <summary> Specifies the state of a grip. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationGripState.Default">
      <summary> The grip is shown normally. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationGripState.MouseOver">
      <summary> The mouse is over the grip. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationGripState.MouseDown">
      <summary> The mouse is pressing the grip. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationImage">
      <summary> This class represents an image object used by <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> and <see cref="T:Atalasoft.Annotate.EmbeddedImageData" /> classes. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationImage.#ctor">
      <summary> Creates a new empty instance of <STRONG>AnnotationImage</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationImage.#ctor(Atalasoft.Imaging.AtalaImage)">
      <summary> Creates a new instance of <STRONG>AnnotationImage</STRONG> specifying the
            <STRONG>Atalasoft.Imaging.AtalaImage</STRONG> object used. </summary>
      <param name="image"> A <STRONG>Atalasoft.Imaging.AtalaImage</STRONG> object for this class. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationImage.#ctor(System.Drawing.Image)">
      <summary> Creates a new instance of <STRONG>AnnotationImage</STRONG> specifying the
            <STRONG>System.Drawing.Image</STRONG> object used. </summary>
      <param name="image"> A <STRONG>System.Drawing.Image</STRONG> object for this class. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationImage.#ctor(System.Int32,System.Int32,System.Int32,System.Byte[])">
      <summary> Creates a new instance of <STRONG>AnnotationImage</STRONG> specifying the width, height, bit count and
            image data. </summary>
      <param name="width"> The width of the image. </param>
      <param name="height"> The height of the image. </param>
      <param name="bitCount"> The bit count of the image. </param>
      <param name="imageData"> A byte array containing the image data. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationImage.#ctor(System.Int32,System.Int32,System.Int32,System.Byte[],System.Byte[])">
      <summary> Creates a new instance of <STRONG>AnnotationImage</STRONG> specifying the width, height, bit count, image
            and palette data. </summary>
      <param name="width"> The width of the image. </param>
      <param name="height"> The height of the image. </param>
      <param name="bitCount"> The bit count of the image. </param>
      <param name="imageData"> A byte array containing the image data. </param>
      <param name="palette"> A byte array containing the palette data. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationImage.#ctor(System.Int32,System.Int32,System.Int32,System.Byte[],System.Byte[],System.Single,System.Single)">
      <summary> Creates a new instance of <STRONG>AnnotationImage</STRONG> specifying the image properties. </summary>
      <param name="width"> The width of the image. </param>
      <param name="height">
        <para>The height of the image.</para>
      </param>
      <param name="bitCount"> The bit count of the image. </param>
      <param name="imageData"> A byte array containing the image data. </param>
      <param name="palette"> A byte array containing the palette data or null if a palette is not required. </param>
      <param name="dpiX"> The horizontal resolution of the image. </param>
      <param name="dpiY"> The vertical resolution of the image. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationImage.#ctor(System.IO.Stream)">
      <summary> Creates a new instance of <STRONG>AnnotationImage</STRONG> from the specified stream. </summary>
      <param name="stream"> A stream containing the image to load. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationImage.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>AnnotationImage</STRONG> from serialized data. </summary>
      <param name="info"> The SerializationInfo object containing <STRONG>AnnotationImage</STRONG> information. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationImage.#ctor(System.String)">
      <summary> Creates a new instance of <STRONG>AnnotationImage</STRONG> from the specified file. </summary>
      <param name="fileName"> The filename of the image to load. </param>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationImage.BitCount">
      <summary> Gets the bit count (or bits-per-pixel) of the image. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationImage.Clone">
      <summary> Creates a copy of this <STRONG>AnnotationImage</STRONG>. </summary>
      <returns> A copy of this image. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationImage.Dispose">
      <summary> Releases resources used by this class. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationImage.Dispose(System.Boolean)">
      <summary> Releases resources used by this class. </summary>
      <param name="disposing"> Indicates if this method was called from the public <see cref="M:Atalasoft.Annotate.AnnotationImage.Dispose" />
            method. </param>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationImage.Disposed">
      <summary> Gets a value indicating whether this object has been disposed. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationImage.DpiX">
      <summary> Gets the horizontal resolution of the image. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationImage.DpiY">
      <summary> Gets the vertical resolution of the image. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationImage.Equals(System.Object)">
      <summary> Compares this <STRONG>AnnotationImage</STRONG> with another to see if they are equal. </summary>
      <param name="obj"> The <STRONG>AnnotationImage</STRONG> to compare against. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationImage.Finalize"></member>
    <member name="M:Atalasoft.Annotate.AnnotationImage.GetHashCode"></member>
    <member name="M:Atalasoft.Annotate.AnnotationImage.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with image data. </summary>
      <param name="info"> The SerializationInfo object where data will the stored. </param>
      <param name="context"> A StreamingContext for this image. </param>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationImage.Height">
      <summary> Gets the height of the image in pixels. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationImage.ImageData">
      <summary> Gets the image data. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationImage.ImageObject">
      <summary> Gets the actual image object for this <STRONG>AnnotationImage</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationImage.OnCreateImageObject">
      <summary> Called when the <STRONG>ImageObject</STRONG> property is being requested. </summary>
      <returns> The object that will be set for the <see cref="P:Atalasoft.Annotate.AnnotationImage.ImageObject" /> property. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationImage.Palette">
      <summary> Gets the image palette, if any. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationImage.Width">
      <summary> Gets the width of the image in pixels. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationLineCap">
      <summary> This class is used to define a line cap used for <see cref="T:Atalasoft.Annotate.AnnotationPen" /> objects. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationLineCap.#ctor">
      <summary> Creates a new instance of <STRONG>AnnotationLineCap</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationLineCap.#ctor(Atalasoft.Annotate.AnnotationLineCapStyle,System.Drawing.SizeF)">
      <summary> Creates a new instance of <STRONG>AnnotationLineCap</STRONG> specifying the style and size. </summary>
      <param name="style"> The style of the line cap. </param>
      <param name="size"> The size of the line cap. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationLineCap.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>AnnotationLineCap</STRONG> from serialized information. </summary>
      <param name="info"> A <STRONG>SerializationInfo</STRONG> object containing information about this object. </param>
      <param name="context"> A <STRONG>StreamingContext</STRONG> for this information. </param>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationLineCap.AnnotationControllerNotification">
      <summary> Raised when a notification must be sent to the <see cref="T:Atalasoft.Annotate.UI.AnnotationController" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationLineCap.Clone">
      <summary> Creates a copy of this <STRONG>AnnotationLineCap</STRONG>. </summary>
      <returns> A copy of the <STRONG>AnnotationLineCap</STRONG>. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationLineCap.Equals(System.Object)">
      <summary> Compares one <STRONG>AnnotationLineCap</STRONG> with another to determine of that contain the same
            property values. </summary>
      <param name="obj"> The <STRONG>AnnotationLineCap</STRONG> to compare against. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationLineCap.GetHashCode">
      <summary> Returns an identifier for this object. </summary>
      <returns> A value representing this object. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationLineCap.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills the SerializationInfo object with properties values for the <STRONG>AnnoationLineCap</STRONG> class.
            </summary>
      <param name="info"> The SerializationInfo object where data will be stored. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationLineCap.OnAnnotationControllerNotification(Atalasoft.Annotate.AnnotationControllerNotificationEventArgs)">
      <summary> Called when a notification is being sent to the <see cref="T:Atalasoft.Annotate.UI.AnnotationController" />. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs" /> containing information for this event.
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationLineCap.OnPropertyChanged(Atalasoft.Annotate.AnnotationPropertyChangedEventArgs)">
      <summary> Called when a property value has changed. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationPropertyChangedEventArgs" /> containing information about this change.
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationLineCap.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)">
      <summary> Called when a property value changes. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationPropertyChangingEventArgs" /> containing information about the changed
            property. </param>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationLineCap.PropertyChanged">
      <summary> Raised when a property value has changed. </summary>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationLineCap.PropertyChanging">
      <summary> Raised when a property value has changed. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationLineCap.RenderOffset">
      <summary> Gets the offset from the line point to the top-left of the bounding rectangle for the line cap. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationLineCap.Size">
      <summary> Gets or sets the size of the line cap. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationLineCap.Style">
      <summary> Gets or sets the style of the line cap. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationLineCapStyle">
      <summary> Specifies the type of line cap for a <see cref="T:Atalasoft.Annotate.AnnotationLineCap" /> object. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationLineCapStyle.None">
      <summary> No line cap is drawn. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationLineCapStyle.Arrow">
      <summary> A simple thin line arrow. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationLineCapStyle.FilledArrow">
      <summary> A filled arrow. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationLineCapStyle.ClosedArrow">
      <summary> A closed arrow that is not filled. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationLineCapStyle.Ellipse">
      <summary> An ellipse is drawn. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationLineCapStyle.FilledEllipse">
      <summary> A filled ellipse is drawn. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationLineCapStyle.Rectangle">
      <summary> A rectangle is drawn. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationLineCapStyle.FilledRectangle">
      <summary> A filled rectangle is drawn. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationLineCapStyle.Diamond">
      <summary> A diamond is drawn. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationLineCapStyle.FilledDiamond">
      <summary> A filled diamond is drawn. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationLineCapStyle.ReversedArrow">
      <summary> An arrow pointing in toward the line is drawn </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationLineCapStyle.ReversedClosedArrow">
      <summary> A closed arrow pointing in toward the line is drawn </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationLineCapStyle.ReversedFilledArrow">
      <summary> A filled, closed array is drawn pointing in toward the line is drawn </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationLineCapStyle.Butt">
      <summary> A line perpendicular to the line is drawn </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationLineCapStyle.Slash">
      <summary> A hash line is drawn </summary>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationLocationChangedEventArgs">
      <summary> This class is used to hold information for the <see cref="E:Atalasoft.Annotate.AnnotationData.LocationChanged" /> event.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationLocationChangedEventArgs.#ctor(System.Drawing.PointF,System.Drawing.PointF)">
      <summary> Creates a new instance of <STRONG>AnnotationLocationChangedEventArgs</STRONG>. </summary>
      <param name="oldLocation"> The previous location of the annotation. </param>
      <param name="newLocation"> The new location of the annotation. </param>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationLocationChangedEventArgs.NewLocation">
      <summary> Gets the new location of the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationLocationChangedEventArgs.OldLocation">
      <summary> Gets the previous location of the annotation. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationLocationChangedEventHandler">
      <summary> This delegate is used for the <see cref="E:Atalasoft.Annotate.AnnotationData.LocationChanged" /> event. </summary>
      <param name="sender"> The annotation sending this event. </param>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationLocationChangedEventArgs" /> containing information about this event.
            </param>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationLock">
      <summary> This class is the default security used for annotations. It uses simple string encryption to secure
            annotations and keep users from being able to modify the data. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationLock.#ctor">
      <summary> Creates a new instance of <STRONG>AnnotationLock</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationLock.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>AnnotationLock</STRONG> from serialized data. </summary>
      <param name="info"> The SerializationInfo containing the serialized data. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationLock.#ctor(System.String)">
      <summary> Creates a new instance of <STRONG>AnnotationLock</STRONG> whose key is the given string value </summary>
      <param name="encryptedKey"> The key used for the lock encryption. </param>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationLock.AnnotationControllerNotification">
      <summary>Raised after a property of the AnnotationBrush if modified.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationLock.Clone">
      <summary> Creates a copy of this lock. </summary>
      <returns> A copy of this <STRONG>AnnotationLock</STRONG>. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationLock.EncryptionKey">
      <summary>Gets the encrypted key for the lock.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationLock.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with <STRONG>AnnotationLock</STRONG> information. </summary>
      <param name="info"> The SerializationInfo object where the data will be stored. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationLock.Lock">
      <summary>Locks the annotation without specifying a password.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationLock.Lock(System.String)">
      <summary>Locks the annotation using the specified password.</summary>
      <param name="password">
            The password used to generate the <see cref="P:Atalasoft.Annotate.AnnotationLock.EncryptionKey" />.
            </param>
      <returns>
            Use the <see cref="M:Atalasoft.Annotate.AnnotationLock.Unlock" /> method with the same password to disable the lock.
            </returns>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationLock.Locked">
      <summary>Gets a value indicating whether or not the annotation is currently locked.</summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationLock.LockedImage">
      <summary>Gets or sets the image displayed on the annotation when it's been locked.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationLock.OnAnnotationControllerNotification(Atalasoft.Annotate.AnnotationControllerNotificationEventArgs)">
      <summary> Called to notify the <see cref="T:Atalasoft.Annotate.UI.AnnotationController" /> after a property has been changed. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs" /> specifying the property that was
            modified. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationLock.OnPropertyChanged(Atalasoft.Annotate.AnnotationPropertyChangedEventArgs)">
      <summary> Called when a property value has changed and raises the <see cref="E:Atalasoft.Annotate.AnnotationLock.PropertyChanged" />
            event. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationLocationChangedEventArgs" /> containing information for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationLock.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)">
      <summary> Called before a property has been changed. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationPropertyChangingEventArgs" /> specifying the property that is being
            modified. </param>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationLock.PropertyChanged">
      <summary> Raised when a property value has changed. </summary>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationLock.PropertyChanging">
      <summary>Raised just before a property is about to be modified.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationLock.Unlock">
      <summary>This method will disable the lock on a locked annotation.</summary>
      <returns>
        <strong>True</strong> if the annotation was unlocked.</returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationLock.Unlock(System.String)">
      <summary>
            This method will disable the lock on an annotation that was previously locked
            with a password.
            </summary>
      <param name="password">
            The password required to unlock the annotation. This must be the same password
            used with the <see cref="M:Atalasoft.Annotate.AnnotationLock.Lock" /> method.
            </param>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationPen">
      <summary> This class represents a pen object used for drawing lines of annotations.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationPen.#ctor(Atalasoft.Annotate.AnnotationBrush)">
      <summary> Creates a new instance of <STRONG>AnnotationPen</STRONG> from an <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> object.
            </summary>
      <param name="brush"> An <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the pen object. </param>
      <exception> Thrown if the brush parameter is null. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationPen.#ctor(Atalasoft.Annotate.AnnotationBrush,System.Single)">
      <summary> Creates a new instance of <STRONG>AnnotationPen</STRONG> specifying the <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> and
            pen width. </summary>
      <param name="brush"> An <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the pen object. </param>
      <param name="width"> The width of the pen. This value must be greater than zero. </param>
      <exception cref="T:System.ArgumentNullException">Thrown if the brush parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the width parameter is not greater than zero.</exception>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationPen.#ctor(System.Drawing.Color)">
      <summary> Creates a new instance of <STRONG>AnnotationPen</STRONG> specifying the color of the pen. </summary>
      <param name="color"> The color for this pen. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationPen.#ctor(System.Drawing.Color,System.Single)">
      <summary> Creates a new instance of <STRONG>AnnotationPen</STRONG> specifying the color and width of the pen.
            </summary>
      <param name="color"> The color for the pen. </param>
      <param name="width"> The width of the pen. This value must be greater than zero. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the width parameter is not greater than zero.</exception>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationPen.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>AnnotationPen</STRONG> from serialized data. </summary>
      <param name="info"> The SerializationInfo object containing information about the pen. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationPen.Alignment">
      <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.AnnotationPenAlignment" /> for the pen. </summary>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationPen.AnnotationControllerNotification">
      <summary> Raised after a property of the <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> if modified. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationPen.Brush">
      <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to describe this pen. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationPen.Clone">
      <summary> Creates a copy of this <STRONG>AnnotationPen</STRONG>. </summary>
      <returns> A copy of the <STRONG>AnnotationPen</STRONG> object. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationPen.Color">
      <summary> Gets or sets the color for the pen. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationPen.DashCap">
      <summary> Gets or sets the <see cref="P:Atalasoft.Annotate.AnnotationPen.DashCap" />  used at the end of the dashes that make up dashed lines drawn
            with this pen. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationPen.DashOffset">
      <summary> Gets or sets the distance from the start of a line to the beginning of a dash pattern. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationPen.DashPattern">
      <summary> Gets or sets the dash pattern used </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationPen.DashStyle">
      <summary> Gets or sets the style used for dashed lines drawn with this pen. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationPen.EndCap">
      <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.AnnotationLineCap" /> used at the end of lines drawn with this pen. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationPen.Equals(System.Object)">
      <summary> Compares this <STRONG>AnnotationPen</STRONG> with another to test if they are equal. </summary>
      <param name="obj"> The <STRONG>AnnotationPen</STRONG> to compare against. </param>
      <returns>
        <STRONG>True</STRONG> if they are equal. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationPen.GetHashCode">
      <summary> Returns an identifier for this object. </summary>
      <returns> A value representing this object. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationPen.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this <STRONG>AnnotationPen</STRONG>. </summary>
      <param name="info"> The SerializationInfo object where the information will be stored. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationPen.LineJoin">
      <summary> Gets or sets the join style for the ends of two consecutive lines drawn with this pen. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationPen.MiterLimit">
      <summary> Gets or sets the limit of the thickness of the join on a mitered corner. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationPen.OnAnnotationControllerNotification(Atalasoft.Annotate.AnnotationControllerNotificationEventArgs)">
      <summary> Called to notify the <see cref="T:Atalasoft.Annotate.UI.AnnotationController" /> after a property has been changed. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs" /> specifying the property that was
            modified. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationPen.OnPropertyChanged(Atalasoft.Annotate.AnnotationPropertyChangedEventArgs)">
      <summary> Called when a property value has changed and raises the <see cref="E:Atalasoft.Annotate.AnnotationPen.PropertyChanged" /> event.
            </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationLocationChangedEventArgs" /> containing information for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationPen.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)">
      <summary> Called before a property is changed. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationPropertyChangingEventArgs" /> specifying the property that is being
            modified. </param>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationPen.PropertyChanged">
      <summary> Raised when a property value has changed. </summary>
    </member>
    <member name="E:Atalasoft.Annotate.AnnotationPen.PropertyChanging">
      <summary> Raised just before a property is about to be modified. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationPen.RemoveLineCapEvents(Atalasoft.Annotate.AnnotationLineCap)">
      <summary> This is a helper method used to remove event handler for an <see cref="T:Atalasoft.Annotate.AnnotationLineCap" /> object.
            </summary>
      <param name="lineCap"> The <see cref="T:Atalasoft.Annotate.AnnotationLineCap" /> to process. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationPen.SetLineCapEvents(Atalasoft.Annotate.AnnotationLineCap)">
      <summary> This is a helper method used to add event handling to an <see cref="T:Atalasoft.Annotate.AnnotationLineCap" />. </summary>
      <param name="lineCap"> The <see cref="T:Atalasoft.Annotate.AnnotationLineCap" /> to process. </param>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationPen.StartCap">
      <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.AnnotationLineCap" /> used at the beginning of lines drawn with this pen. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationPen.ToString">
      <summary> Returns a string representation of this object. </summary>
      <returns> A string representation of this object. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationPen.Width">
      <summary> Gets or sets the width of the pen. </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if this property is set to a value less than or equal to zero.</exception>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationPenAlignment">
      <summary> Specifies the alignment of the <see cref="T:Atalasoft.Annotate.AnnotationPen" />. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationPenAlignment.Center">
      <summary> The pen is centered over the line. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationPenAlignment.Inset">
      <summary> The pen is drawn inside the line. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationPropertyChangedEventArgs">
      <summary> Contains information for a property changed event. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationPropertyChangedEventArgs.#ctor(System.String,System.Object,System.Object)">
      <summary> Creates a new instance of <STRONG>AnnotationPropertyChangedEventArgs</STRONG>. </summary>
      <param name="propertyName"> The name of the property that has been changed. </param>
      <param name="oldValue"> The previous value of the property. </param>
      <param name="newValue"> The new value of the property. </param>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationPropertyChangedEventArgs.NewValue">
      <summary> Gets the new value of the property. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationPropertyChangedEventArgs.OldValue">
      <summary> Gets the old value of the property. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationPropertyChangedEventArgs.PropertyName">
      <summary> Gets the name of the property. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationPropertyChangedEventHandler">
      <summary> This delegate is used for the <STRONG>PropertyChanged</STRONG> event. </summary>
      <param name="sender"> The object that is affected. </param>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationPropertyChangedEventArgs" /> containing information for the property change.
            </param>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationPropertyChangingEventArgs">
      <summary>
            This class hold information about a
            <a href="DotAnnotate~Atalasoft.Annotate.AnnotationData~PropertyChanging_EV.html">PropertyChanging</a>
            event.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationPropertyChangingEventArgs.#ctor(System.Object,System.String,System.Object,System.Object)">
      <summary> Creates a new instance of <STRONG>AnnotationPropertyChangingEventArgs</STRONG>. </summary>
      <param name="sender"> The object sending this event. </param>
      <param name="propertyName"> The name of the property being changed. </param>
      <param name="currentValue"> The current value of the property. </param>
      <param name="newValue"> The new value of the property. </param>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationPropertyChangingEventArgs.Cancel">
      <summary> Gets or sets a value indicating whether this change should be accepted. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationPropertyChangingEventArgs.CurrentValue">
      <summary> Gets the current value of the property. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationPropertyChangingEventArgs.NewValue">
      <summary> Gets or sets the new value for the property. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationPropertyChangingEventArgs.PropertyName">
      <summary> Gets the name of the property that is being changed. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationPropertyChangingEventArgs.Sender">
      <summary> Gets the object that raised the event. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationPropertyChangingEventHandler">
      <summary> This delegate is used for the <see cref="E:Atalasoft.Annotate.AnnotationData.PropertyChanging" /> event. </summary>
      <param name="sender"> The object sending the event. </param>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationPropertyChangingEventArgs" /> containing information about this event.
            </param>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationRegion">
      <summary> This class defines a display region used for hit testing. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationRegion.#ctor">
      <summary> Creates a new instance of <STRONG>AnnotationRegion</STRONG> with an empty region. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationRegion.#ctor(System.Drawing.Drawing2D.GraphicsPath)">
      <summary> Creates a new instance of <STRONG>AnnotationRegion</STRONG> specifying a <STRONG>GraphicsPath</STRONG> for
            the region. </summary>
      <param name="path"> The <STRONG>GraphicsPath</STRONG> used by the region.  This <STRONG>GraphicsPath</STRONG>
            becomes the property of the <STRONG>AnnotationRegion</STRONG> and will automatically be disposed when the
            <STRONG>AnnotationRegion</STRONG> is disposed. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationRegion.#ctor(System.Drawing.RectangleF)">
      <summary> Creates a new instance of <STRONG>AnnotationRegion</STRONG> from a rectangle. </summary>
      <param name="rectangle"> A rectangle used to define the initial region. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationRegion.Dispose">
      <summary> Releases region resources. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationRegion.Dispose(System.Boolean)">
      <summary> Releases resources used by the region. </summary>
      <param name="disposing"> A value indicating whether this method was call from the public <see cref="M:Atalasoft.Annotate.AnnotationRegion.Dispose" /> method. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationRegion.Finalize"></member>
    <member name="M:Atalasoft.Annotate.AnnotationRegion.GetRegion">
      <summary> Returns a .NET Region for this object. </summary>
      <returns> A .NET Region object containing the <STRONG>AnnotationRegion</STRONG> area. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationRegion.Invalidate(System.Windows.Forms.Control)">
      <summary> Applies this region to a control's invalidation region. </summary>
      <param name="control"> The control to apply the invalidate to. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationRegion.IsVisible(System.Drawing.PointF)">
      <summary> Tests if a point is inside this region. </summary>
      <param name="point"> The point to test. </param>
      <returns>
        <STRONG>True</STRONG> if the point is within this region. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationRegion.Path">
      <summary> The <STRONG>GraphicsPath</STRONG> used by the <STRONG>AnnotationRegion</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationRegion.Transform(System.Drawing.Drawing2D.Matrix)">
      <summary> Applies a transformation matrix to this region. </summary>
      <param name="matrix"> The matrix to apply. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationRegion.Union(Atalasoft.Annotate.AnnotationRegion)">
      <summary> Performs a union of the supplied <STRONG>AnnotationRegion</STRONG> and the existing region. </summary>
      <param name="region"> The <STRONG>AnnotationRegion</STRONG> to apply. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationRegion.Union(System.Drawing.Drawing2D.GraphicsPath)">
      <summary> Performs a union of the supplied <STRONG>GraphcisPath </STRONG>and the existing region. </summary>
      <param name="path"> The <STRONG>GraphicsPath</STRONG> to apply. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationRegion.Union(System.Drawing.Rectangle)">
      <summary> Performs a union of the supplied rectangle and the existing region. </summary>
      <param name="rectangle"> The rectangle to apply. </param>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationRegion.Union(System.Drawing.RectangleF)">
      <summary> Performs a union of the supplied <STRONG>RectangleF</STRONG> and the existing region. </summary>
      <param name="rectangle"> The RectangleF to apply. </param>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationSizeChangedEventArgs">
      <summary> This class is used to hold information about the <see cref="E:Atalasoft.Annotate.AnnotationData.SizeChanged" /> event.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.AnnotationSizeChangedEventArgs.#ctor(System.Drawing.SizeF,System.Drawing.SizeF)">
      <summary> Creates a new instance of <STRONG>AnnotationSizeChangedEventArgs</STRONG>. </summary>
      <param name="oldSize"> The previous size of the annotation. </param>
      <param name="newSize"> The new size of the annotation. </param>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationSizeChangedEventArgs.NewSize">
      <summary> Gets the new size of the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.AnnotationSizeChangedEventArgs.OldSize">
      <summary> Gets the previous size of the annotation. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationSizeChangedEventHandler">
      <summary> This delegate is used for the <see cref="E:Atalasoft.Annotate.AnnotationData.SizeChanged" /> event. </summary>
      <param name="sender"> The annotation sending the event. </param>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationSizeChangedEventArgs" /> containing information about this event. </param>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationState">
      <summary> Specifies the current state of the annotation. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationState.Moving">
      <summary> The annotation is being moved by the user. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationState.Resizing">
      <summary> The annotation is being resized by the user. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationState.Creating">
      <summary> The annotation is being created by the user. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationState.Idle">
      <summary> The annotation is sitting idle. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationState.Loading">
      <summary> The annotation is loading from XMP or WANG data. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationState.Rotating">
      <summary> The annotation is being rotated by the user. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationState.GripMoving">
      <summary> Indicates that a grip is moving. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.AnnotationUnit">
      <summary> Specifies the unit of measure used for annotations. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationUnit.Custom">
      <summary> A custom value in pixels per unit. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationUnit.Pixel">
      <summary> Pixels. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationUnit.Inch">
      <summary> Inches. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationUnit.Micrometer">
      <summary> Micrometers. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationUnit.Centimeter">
      <summary> Centimeters. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationUnit.Foot">
      <summary> Feet. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationUnit.Yard">
      <summary> Yards. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationUnit.Meter">
      <summary> Meters. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationUnit.Mile">
      <summary> Miles. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.AnnotationUnit.Kilometer">
      <summary> Kilometers. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.CalloutData">
      <summary> Callout data used with the <see cref="T:Atalasoft.Annotate.UI.CalloutAnnotation" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.CalloutData.#ctor">
      <summary> Creates a new instance of <STRONG>CalloutData</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.CalloutData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>CalloutData</STRONG> from serialized information. </summary>
      <param name="info"> A SerializationInfo object containing the annotation data information. </param>
      <param name="context"> A StreamingContext for this data. </param>
    </member>
    <member name="M:Atalasoft.Annotate.CalloutData.#ctor(System.String)">
      <summary> Creates a new instance of <STRONG>CalloutData</STRONG> specifying the text for the annotation. </summary>
      <param name="text"> The text for the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.CalloutData.#ctor(System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,System.Single)">
      <summary> Creates a new instance of <STRONG>CalloutData</STRONG> specifying the text, font, font brush and padding
            for the annotation. </summary>
      <param name="text"> The text for the annotation. </param>
      <param name="font"> The font used to render the text. </param>
      <param name="fontBrush"> The brush used to render the text. </param>
      <param name="padding"> The padding around the text. </param>
    </member>
    <member name="M:Atalasoft.Annotate.CalloutData.#ctor(System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,System.Single,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationPen,System.Single)">
      <summary> Creates a new instance of <STRONG>CalloutData</STRONG> specifying the text, font, font brush, padding,
            outline and line pen. </summary>
      <param name="text"> The text for the annotation. </param>
      <param name="font"> The font used to render the text. </param>
      <param name="fontBrush"> The brush used to render the text. </param>
      <param name="padding"> The padding around the text. </param>
      <param name="fill"> The brush used to fill the text area of the annotation. </param>
      <param name="outline"> The pen used to render an outline around the text area of the annotation. </param>
      <param name="leader"> The pen used to render the line of the annotation. </param>
      <param name="leaderFlatLength"> The distance from the leader will stick out from the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.CalloutData.#ctor(System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,System.Single,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationPen,System.Single,System.Drawing.PointF,System.Boolean)">
      <summary> Creates a new instance of <STRONG>CalloutData</STRONG> specifying its parameters. </summary>
      <param name="text"> The text for the annotation. </param>
      <param name="font"> The font used to render the text. </param>
      <param name="fontBrush"> The brush used to render the text. </param>
      <param name="padding"> The padding around the text. </param>
      <param name="fill"> The brush used to fill the text area of the annotation. </param>
      <param name="outline"> The pen used to render an outline around the text area of the annotation. </param>
      <param name="leader"> The pen used to render the line of the annotation. </param>
      <param name="leaderFlatLength"> The distance the leader will stick out from the annotation. </param>
      <param name="targetPosition"> The document position the line will point to. </param>
      <param name="autoSize"> Indicates whether the annotation will automatically resize to fit the text. </param>
    </member>
    <member name="P:Atalasoft.Annotate.CalloutData.Alignment">
      <summary> Gets or sets the horizontal alignment of the text. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.CalloutData.AllowEditing">
      <summary>
        <para>Gets or sets a value indicating whether the annotation's text data should be editable or
            read-only.</para>
      </summary>
    </member>
    <member name="P:Atalasoft.Annotate.CalloutData.AnnotationBounds"></member>
    <member name="P:Atalasoft.Annotate.CalloutData.AutoSize">
      <summary> Gets or sets a value indicating whether the annotation will automatically resize to fit the text.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.CalloutData.Bounds"></member>
    <member name="M:Atalasoft.Annotate.CalloutData.Clone"></member>
    <member name="M:Atalasoft.Annotate.CalloutData.CloneBaseData(Atalasoft.Annotate.AnnotationData)"></member>
    <member name="P:Atalasoft.Annotate.CalloutData.Fill">
      <summary> Gets or sets the brush used to fill the text area of the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.CalloutData.Font">
      <summary> Gets or sets the font used to render the text. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.CalloutData.FontBrush">
      <summary> Gets or sets the brush used to render the text. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.CalloutData.FormatFlags">
      <summary> Gets or sets a <STRONG>StringFormatFlags</STRONG> enumeration that contains formatting information.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.CalloutData.GetLeaderPoints">
      <summary> Returns an array of points used for rendering the callout leader line. </summary>
      <returns> An array of points for the leader line. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.CalloutData.GetLineCapBounds"></member>
    <member name="M:Atalasoft.Annotate.CalloutData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="P:Atalasoft.Annotate.CalloutData.Leader">
      <summary> Gets or sets the pen used for the leader of the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.CalloutData.LeaderFlatLength">
      <summary> Gets or sets the length of the leader line. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.CalloutData.LineAlignment">
      <summary> Gets or sets the line alignment. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.CalloutData.Outline">
      <summary> Gets or sets the pen used to outline the text area of the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.CalloutData.Padding">
      <summary> Gets or sets the amount of padding to add around the text. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.CalloutData.TargetPosition">
      <summary> Gets or sets the position on the document the leader will point to. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.CalloutData.Text">
      <summary> Gets or sets the text of the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.CalloutData.Trimming">
      <summary> Get or sets the type of character trimming to perform on the text. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.ChangePositionMethod">
      <summary> Specifies the reordering to perform on a layer or annotation. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.ChangePositionMethod.MoveToFront">
      <summary> Moves the item to the beginning of the collection. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.ChangePositionMethod.MoveUp">
      <summary> Moves the item one position closer to the beginning of the collection. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.ChangePositionMethod.MoveBack">
      <summary> Moves the item one position closer to the end of the collection. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.ChangePositionMethod.MoveToBack">
      <summary> Moves the item to the end of the collection. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.CommentData">
      <summary> The <STRONG>CommentData</STRONG> class is used for adding comments to other annotations, but it can also
            be used standalone. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.CommentData.#ctor">
      <summary> Creates a new instance of <STRONG>CommentData</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.CommentData.#ctor(Atalasoft.Annotate.WangAttributeData)">
      <summary> Creates a new instance of <STRONG>CommentData</STRONG> from WANG annotation information. </summary>
      <param name="data"> A <see cref="T:Atalasoft.Annotate.WangAttributeData" /> object containing information about this annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.CommentData.#ctor(System.Drawing.RectangleF)">
      <summary> Creates a new instance of <STRONG>CommentData</STRONG> specifying the annotation location and size.
            </summary>
      <param name="bounds"> The location and size of the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.CommentData.#ctor(System.Drawing.RectangleF,System.String)">
      <summary> Creates a new instance of <STRONG>CommentData</STRONG> specifying the annotation text. </summary>
      <param name="bounds"> The location and size of the annotation. </param>
      <param name="text"> The text for this annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.CommentData.#ctor(System.Drawing.RectangleF,System.String,Atalasoft.Annotate.AnnotationFont)">
      <summary> Creates a new instance of <STRONG>CommentData</STRONG> specifying the text and font. </summary>
      <param name="bounds"> The location and size of the annotation. </param>
      <param name="text"> The text for this annotation. </param>
      <param name="font"> The font used for rendering the text. </param>
    </member>
    <member name="M:Atalasoft.Annotate.CommentData.#ctor(System.Drawing.RectangleF,System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen)">
      <summary> Creates a new instance of <STRONG>CommentData</STRONG> specifying the text, font, font brush, fill and
            outline for the annotation. </summary>
      <param name="bounds"> The location and size of the annotation. </param>
      <param name="text"> The text for this annotation. </param>
      <param name="font"> The font used for rendering the text. </param>
      <param name="fontBrush"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for rendering the text. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the background of the annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to render the outline of the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.CommentData.#ctor(System.Drawing.RectangleF,System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF,Atalasoft.Annotate.ShadowMode)">
      <summary> Creates a new instance of <STRONG>CommentData</STRONG> specifying the properties for this object.
            </summary>
      <param name="bounds"> The location and size of the annotation. </param>
      <param name="text"> The text for this annotation. </param>
      <param name="font"> The font used for rendering the text. </param>
      <param name="fontBrush"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for rendering the text. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the background of the annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to render the outline of the annotation. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the drop shadow. </param>
      <param name="shadowOffset"> The offset for the shadow. </param>
      <param name="shadowMode"> Defines the type of shadow to apply. </param>
    </member>
    <member name="M:Atalasoft.Annotate.CommentData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>CommentData</STRONG> from serialized information. </summary>
      <param name="info"> The <STRONG>SerializationInfo</STRONG> object containing information for this object. </param>
      <param name="context"> A <STRONG>StreamingContext</STRONG> for the information. </param>
    </member>
    <member name="M:Atalasoft.Annotate.CommentData.#ctor(System.String)">
      <summary> Creates a new instance of <STRONG>CommentData</STRONG> specifying the annotation text. </summary>
      <param name="text"> The text for this annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.CommentData.#ctor(System.String,Atalasoft.Annotate.AnnotationFont)">
      <summary> Creates a new instance of <STRONG>CommentData</STRONG> specifying the text and font. </summary>
      <param name="text"> The text for this annotation. </param>
      <param name="font"> The font used for rendering the text. </param>
    </member>
    <member name="M:Atalasoft.Annotate.CommentData.#ctor(System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen)">
      <summary> Creates a new instance of <STRONG>CommentData</STRONG> specifying the text, font, font brush, fill and
            outline for the annotation. </summary>
      <param name="text"> The text for this annotation. </param>
      <param name="font"> The font used for rendering the text. </param>
      <param name="fontBrush"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for rendering the text. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the background of the annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to render the outline of the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.CommentData.#ctor(System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF,Atalasoft.Annotate.ShadowMode)">
      <summary> Creates a new instance of <STRONG>CommentData</STRONG> specifying the properties for this object.
            </summary>
      <param name="text"> The text for this annotation. </param>
      <param name="font"> The font used for rendering the text. </param>
      <param name="fontBrush"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for rendering the text. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the background of the annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to render the outline of the annotation. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the drop shadow. </param>
      <param name="shadowOffset"> The offset for the shadow. </param>
      <param name="shadowMode"> Defines the type of shadow to apply. </param>
    </member>
    <member name="M:Atalasoft.Annotate.CommentData.Clone"></member>
    <member name="M:Atalasoft.Annotate.CommentData.CloneBaseData(Atalasoft.Annotate.AnnotationData)"></member>
    <member name="M:Atalasoft.Annotate.CommentData.Equals(System.Object)"></member>
    <member name="M:Atalasoft.Annotate.CommentData.GetHashCode"></member>
    <member name="P:Atalasoft.Annotate.CommentData.Guid"></member>
    <member name="P:Atalasoft.Annotate.CommentData.Parent"></member>
    <member name="P:Atalasoft.Annotate.CommentData.Replies">
      <summary> Gets a list of <STRONG>CommentData</STRONG> replies. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.CreateAnnotationMode">
      <summary> Specifies the annotation creation mode when calling <see cref="T:Atalasoft.Annotate.UI.AnnotationController" />. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.CreateAnnotationMode.Default">
      <summary> Annotations are created by click and drag or with multiple clicks. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.CreateAnnotationMode.SingleClickLocation">
      <summary> Annotations are added with a single click and the annotation location is set to
            the document position that was clicked. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.CreateAnnotationMode.DoubleClickLocation">
      <summary> Annotations are added with a double-click and the annotation location is set to
            the document position that was clicked. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.CreateAnnotationMode.SingleClickCenter">
      <summary> Annotations are added with a single click and the annotation is centered on the
            document position that was clicked. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.CreateAnnotationMode.DoubleClickCenter">
      <summary> Annotations are added with a double-click and the annotation is centered on the
            document position that was clicked. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.DocumentRotation">
      <summary> Specifies the amount of rotation to apply to the document and annotations by the <see cref="M:Atalasoft.Annotate.UI.AnnotationController.RotateDocument(Atalasoft.Annotate.DocumentRotation,System.Int32)" /> method. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.DocumentRotation.Rotate90">
      <summary> Rotates 90 degrees clockwise. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.DocumentRotation.Rotate180">
      <summary> Rotates 180 degrees clockwise. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.DocumentRotation.Rotate270">
      <summary> Rotates 270 degrees clockwise. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.EllipseData">
      <summary>
            Ellipse annotation data.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.EllipseData.#ctor">
      <summary> Creates a new instance of <STRONG>EllipseData</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.EllipseData.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationBrush)">
      <summary> Creates a new instance of <STRONG>EllipseData</STRONG> specifying the bounding rectangle and fill.
            </summary>
      <param name="rectangle"> The bounding rectangle of the ellipse. </param>
      <param name="fill"> The fill used by the ellipse. </param>
    </member>
    <member name="M:Atalasoft.Annotate.EllipseData.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
      <summary> Creates a new instance of <STRONG>EllipseData</STRONG> specifying the bounding rectangle, fill, outline
            and shadow options. </summary>
      <param name="rectangle"> The bounding rectangle of the ellipse. </param>
      <param name="fill"> The fill used by the ellipse. </param>
      <param name="outline"> The outline used by the ellipse. </param>
      <param name="shadow"> A value indicating whether or not the ellipse has a shadow. </param>
      <param name="shadowOffset"> The amount of offset applied to the shadow. </param>
    </member>
    <member name="M:Atalasoft.Annotate.EllipseData.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationBrush,System.Boolean)">
      <summary> Creates a new instance of <STRONG>EllipseData</STRONG> specifying the rectangle, fill and translucent
            properties. </summary>
      <param name="rectangle"> The rectangle for this annotation. </param>
      <param name="fill"> The AnnotationBrush used to fill this annotation. </param>
      <param name="translucent"> A value indicating whether this annotation will act as a highlighter. </param>
    </member>
    <member name="M:Atalasoft.Annotate.EllipseData.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationPen)">
      <summary> Creates a new instance of <STRONG>EllipseData</STRONG> specifying the bounding rectangle and outline.
            </summary>
      <param name="rectangle"> The bounding rectangle of the ellipse. </param>
      <param name="outline"> The outline used by the ellipse. </param>
    </member>
    <member name="M:Atalasoft.Annotate.EllipseData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>EllipseData</STRONG> from serialized information. </summary>
      <param name="info"> The serialization information containing the ellipse data. </param>
      <param name="context"> A context containing information about this object. </param>
    </member>
    <member name="P:Atalasoft.Annotate.EllipseData.Bounds"></member>
    <member name="M:Atalasoft.Annotate.EllipseData.Clone">
      <summary> Creates a copy of the <STRONG>EllipseData</STRONG>. </summary>
      <returns> A copy of this object. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.EllipseData.CloneBaseData(Atalasoft.Annotate.AnnotationData)"></member>
    <member name="M:Atalasoft.Annotate.EllipseData.Equals(System.Object)">
      <summary> Determines if another <STRONG>EllipseData</STRONG> object has the same property settings. </summary>
      <param name="obj"> An <STRONG>EllipseData</STRONG> object to compare. </param>
      <returns> True if the object provided has the same property values. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.EllipseData.Fill">
      <summary> Gets or sets the fill used for the annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.EllipseData.GetHashCode"></member>
    <member name="M:Atalasoft.Annotate.EllipseData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with <STRONG>EllipseData</STRONG> information. </summary>
      <param name="info"> The SerializationInfo object to fill with data. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Annotate.EllipseData.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)"></member>
    <member name="P:Atalasoft.Annotate.EllipseData.Outline">
      <summary> Gets or sets the outline of the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.EllipseData.Shadow">
      <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used draw the drop shadow. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.EllipseData.ShadowOffset">
      <summary> Gets or sets the shadow offset. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.EllipseData.Translucent">
      <summary> Gets or sets a value indicating whether this annotation is used as a highlighter. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.EmbeddedImageData">
      <summary> Data for the <see cref="T:Atalasoft.Annotate.UI.EmbeddedImageAnnotation" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.EmbeddedImageData.#ctor">
      <summary> Creates a new instance of <STRONG>EmbeddedImageData</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.EmbeddedImageData.#ctor(Atalasoft.Annotate.AnnotationImage)">
      <summary> Creates a new instance of <STRONG>EmbeddedImageData</STRONG> specifying the image. </summary>
      <param name="image"> The image for the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.EmbeddedImageData.#ctor(Atalasoft.Annotate.AnnotationImage,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
      <summary> Creates a new instance of <STRONG>EmbeddedImageData</STRONG> specifying the image, shadow and shadow
            offset. </summary>
      <param name="image"> The image to embed. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the drop shadow. </param>
      <param name="shadowOffset"> The offset used to specifying the position of the drop shadow. </param>
    </member>
    <member name="M:Atalasoft.Annotate.EmbeddedImageData.#ctor(Atalasoft.Annotate.AnnotationImage,System.Drawing.PointF)">
      <summary> Creates a new instance of <STRONG>EmbeddedImageData</STRONG> specifying the image, whether or not to
            maintain the aspect ratio and the initial location of this object. </summary>
      <param name="image"> The image for the annotation. </param>
      <param name="location"> The initial location of this annotation on the document. </param>
    </member>
    <member name="M:Atalasoft.Annotate.EmbeddedImageData.#ctor(Atalasoft.Annotate.AnnotationImage,System.Drawing.PointF,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
      <summary> Creates a new instance of <STRONG>EmbeddedImageData</STRONG> specifying the image, initial location,
            shadow and shadow offset. </summary>
      <param name="image"> The image to embed. </param>
      <param name="location"> The initial location of this annotation on the document. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the drop shadow. </param>
      <param name="shadowOffset"> The offset used to specifying the position of the drop shadow. </param>
    </member>
    <member name="M:Atalasoft.Annotate.EmbeddedImageData.#ctor(Atalasoft.Annotate.WangAttributeData)">
      <summary> Creates a new instance of <STRONG>EmbeddedImageData</STRONG> from WANG data. </summary>
      <param name="data"> A <see cref="T:Atalasoft.Annotate.WangAttributeData" /> object containing information about this annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.EmbeddedImageData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>EmbeddedImageData</STRONG> from serialized information. </summary>
      <param name="info"> The SerializationInfo containing information for this object. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Annotate.EmbeddedImageData.Bounds"></member>
    <member name="M:Atalasoft.Annotate.EmbeddedImageData.Clone">
      <summary> Creates a copy of this object. </summary>
      <returns> A copy of this <STRONG>EmbeddedImageData</STRONG>. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.EmbeddedImageData.CloneBaseData(Atalasoft.Annotate.AnnotationData)"></member>
    <member name="M:Atalasoft.Annotate.EmbeddedImageData.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:Atalasoft.Annotate.EmbeddedImageData" /> and optionally releases the managed resources</summary>
      <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources</param>
    </member>
    <member name="M:Atalasoft.Annotate.EmbeddedImageData.Equals(System.Object)">
      <summary> Determines if another <STRONG>EmbeddedImageData</STRONG> object has the same property settings. </summary>
      <param name="obj"> An <STRONG>EmbeddedImageData</STRONG> object to compare. </param>
      <returns> True if the object provided has the same property values. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.EmbeddedImageData.GetHashCode"></member>
    <member name="M:Atalasoft.Annotate.EmbeddedImageData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this data. </summary>
      <param name="info"> The SerializationInfo object where the information will be stored. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Annotate.EmbeddedImageData.GetWangAttributeData">
      <summary> Returns a <see cref="T:Atalasoft.Annotate.WangAttributeData" /> object containing information about this annotation. </summary>
      <returns> A <see cref="T:Atalasoft.Annotate.WangAttributeData" /> for this annotation. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.EmbeddedImageData.Image">
      <summary> Gets or sets the image of the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.EmbeddedImageData.Shadow">
      <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used draw the drop shadow. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.EmbeddedImageData.ShadowOffset">
      <summary> Gets or sets the shadow offset. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.FillType">
      <summary>
            Specifies the type of fill used by an
            <a href="DotAnnotate~Atalasoft.Annotate.AnnotationBrush.html">AnnotationBrush</a>.
            </summary>
    </member>
    <member name="F:Atalasoft.Annotate.FillType.Solid">
      <summary> A solid fill. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.FillType.Hatch">
      <summary> A hatch brush. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.FillType.Texture">
      <summary> A texture brush. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.FillType.LinearGradient">
      <summary> A linear gradient brush. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.FreehandData">
      <summary> Data for a <see cref="T:Atalasoft.Annotate.UI.FreehandAnnotation" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.FreehandData.#ctor">
      <summary> Creates a new instance of <STRONG>FreehandData</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.FreehandData.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,System.Boolean)">
      <summary> Creates a new instance of <STRONG>FreehandData</STRONG> with no initial points, specifying the fill,
            outline and translucency </summary>
      <param name="fill"> The fill for the freehand. </param>
      <param name="outline"> The outline for the freehand. </param>
      <param name="translucent"> Indicates if the annotation will be translucent, giving it a highlighter effect. </param>
    </member>
    <member name="M:Atalasoft.Annotate.FreehandData.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,System.Drawing.PointF[])">
      <summary>
        <para>
          <FONT color="#ff0000">This overload is obsolete and may be removed in a future
            release.</FONT>
        </para>
        <para>Creates a new instance of <STRONG>FreehandData</STRONG> specifying the outline, fill and initial
            points.</para>
      </summary>
      <param name="fill"> The fill for the freehand. </param>
      <param name="outline"> The outline for the freehand. </param>
      <param name="points"> The initial point for the freehand. </param>
      <exception cref="T:System.ArgumentNullException">Thrown if a parameter is null.</exception>
    </member>
    <member name="M:Atalasoft.Annotate.FreehandData.#ctor(Atalasoft.Annotate.AnnotationPen)">
      <summary> Creates a new instance of <STRONG>FreehandData</STRONG> specifying the outline. </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to render the lines or curves. </param>
    </member>
    <member name="M:Atalasoft.Annotate.FreehandData.#ctor(Atalasoft.Annotate.AnnotationPen,System.Drawing.PointF[])">
      <summary>
        <para>
          <FONT color="#ff0000">This overload is obsolete and may be removed in a future
            release.</FONT>
        </para>
        <para>Creates a new instance of <STRONG>FreehandData</STRONG> specifying the outline and initial points.</para>
      </summary>
      <param name="outline"> The outline for the freehand. </param>
      <param name="points"> The initial point for the freehand. </param>
      <exception cref="T:System.ArgumentNullException">Thrown if a parameter is null.</exception>
    </member>
    <member name="M:Atalasoft.Annotate.FreehandData.#ctor(Atalasoft.Annotate.PointFCollection,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,System.Boolean)">
      <summary> Creates a new instance of <STRONG>FreehandData</STRONG> specifying the initial points, fill, outline and
            translucency </summary>
      <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection" /> containing the freehand points. These points must be in
            annotation space. </param>
      <param name="fill"> The fill for the freehand. </param>
      <param name="outline"> The outline for the freehand. </param>
      <param name="translucent"> Indicates if the annotation will be translucent, giving it a highlighter effect. </param>
    </member>
    <member name="M:Atalasoft.Annotate.FreehandData.#ctor(Atalasoft.Annotate.WangAttributeData)">
      <summary> Creates a new instance of <STRONG>FreehandData</STRONG> from WANG attribute data. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.WangAttributeData" /> containing information about this object. </param>
    </member>
    <member name="M:Atalasoft.Annotate.FreehandData.#ctor(System.Drawing.PointF[])">
      <summary> Creates a new instance of <STRONG>FreehandData</STRONG> specifying the initial points. </summary>
      <param name="points"> The initial points for the freehand.  These points must be in annotation space. </param>
      <exception> Thrown if the points parameter is null. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.FreehandData.#ctor(System.Drawing.PointF[],Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,System.Boolean)">
      <summary> Creates a new instance of <STRONG>FreehandData</STRONG> specifying the initial points, fill, outline and
            translucency </summary>
      <param name="points"> The initial points for the freehand.  These points must be in annotation space. </param>
      <param name="fill"> The fill for the freehand. </param>
      <param name="outline"> The outline for the freehand. </param>
      <param name="translucent"> Indicates if the annotation will be translucent, giving it a highlighter effect. </param>
    </member>
    <member name="M:Atalasoft.Annotate.FreehandData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>FreehandData</STRONG> from serialized information. </summary>
      <param name="info"> The serialization information for this object. </param>
      <param name="context"> The streaming context for this object. </param>
      <exception cref="T:System.ArgumentNullException">Thrown if a parameter is null.</exception>
    </member>
    <member name="P:Atalasoft.Annotate.FreehandData.Bounds"></member>
    <member name="M:Atalasoft.Annotate.FreehandData.Clone">
      <summary> Create a copy of this annotation. </summary>
      <returns> A copy of this <STRONG>FreehandData</STRONG>. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.FreehandData.CloneBaseData(Atalasoft.Annotate.AnnotationData)"></member>
    <member name="P:Atalasoft.Annotate.FreehandData.ClosedShape">
      <summary> Gets or sets a value indicating whether the freehand is a closed shape. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.FreehandData.Equals(System.Object)">
      <summary> Determines if another <STRONG>FreehandData</STRONG> object has the same property settings. </summary>
      <param name="obj"> An <STRONG>FreehandData</STRONG> object to compare. </param>
      <returns> True if the object provided has the same property values. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.FreehandData.Fill">
      <summary> Gets or sets the fill for the freehand. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.FreehandData.GetHashCode"></member>
    <member name="M:Atalasoft.Annotate.FreehandData.GetLineCapBounds"></member>
    <member name="M:Atalasoft.Annotate.FreehandData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this annotation. </summary>
      <param name="info"> The SerializationInfo object where information will be stored. </param>
      <param name="context"> A StreamingContext for the information. </param>
    </member>
    <member name="M:Atalasoft.Annotate.FreehandData.GetWangAttributeData">
      <summary> Returns a <see cref="T:Atalasoft.Annotate.WangAttributeData" /> with information about this annotation. </summary>
      <returns> A <see cref="T:Atalasoft.Annotate.WangAttributeData" /> for this annotation. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.FreehandData.LineType">
      <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.FreehandLineType" /> used for the lines or curves of this annotation.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.FreehandData.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)"></member>
    <member name="P:Atalasoft.Annotate.FreehandData.Outline">
      <summary> Gets or sets the outline for this freehand. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.FreehandData.Translucent">
      <summary> Gets or sets a value indicating whether this annotation is used as a highlighter. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.FreehandLineType">
      <summary> Specifies the line type used for freehand annotations. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.FreehandLineType.Straight">
      <summary> The points are joined with straight lines. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.FreehandLineType.Curves">
      <summary> The points are joined with curved lines. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.FreehandLineType.Beziers">
      <summary> The points are used for Bezier curves. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.HotSpotData">
      <summary> Data for a <see cref="T:Atalasoft.Annotate.UI.HotSpotAnnotation" /> object. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.HotSpotData.#ctor">
      <summary> Creates a new instance of <STRONG>HotSpotData</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.HotSpotData.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationBrush)">
      <summary> Creates a new instance of <STRONG>HotSpotData</STRONG> specifying the rectangle bounds fill. </summary>
      <param name="rectangle"> The bounding rectangle for this object. </param>
      <param name="fill"> The fill used when not active. </param>
    </member>
    <member name="M:Atalasoft.Annotate.HotSpotData.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen)">
      <summary> Creates a new instance of <STRONG>HotSpotData</STRONG> specifying the rectangle bounds, fill and outline.
            </summary>
      <param name="rectangle"> The bounding rectangle for this object. </param>
      <param name="fill"> The fill used when not active. </param>
      <param name="outline"> The outline used when not active. </param>
    </member>
    <member name="M:Atalasoft.Annotate.HotSpotData.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen)">
      <summary> Creates a new instance of <STRONG>HotSpotData</STRONG> specifying the rectangle bounds, active and
            inactive fill, and outline. </summary>
      <param name="rectangle"> The bounding rectangle for this object. </param>
      <param name="fill"> The fill used when not active. </param>
      <param name="outline"> The outline used when not active. </param>
      <param name="activeFill"> The fill used when the annotation is active. </param>
      <param name="activeOutline"> The outline used when the annotation is active. </param>
    </member>
    <member name="M:Atalasoft.Annotate.HotSpotData.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationPen)">
      <summary> Creates a new instance of <STRONG>HotSpotData</STRONG> specifying the rectangle bounds and outline.
            </summary>
      <param name="rectangle"> The bounding rectangle for this object. </param>
      <param name="outline"> The outline used when not active. </param>
    </member>
    <member name="M:Atalasoft.Annotate.HotSpotData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>HotSpotData</STRONG> from serialized information. </summary>
      <param name="info"> The serialization information of this object. </param>
      <param name="context"> A context containing information about this object. </param>
    </member>
    <member name="P:Atalasoft.Annotate.HotSpotData.Active">
      <summary> Gets or sets a value indicating whether the hotspot is active. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.HotSpotData.ActiveFill">
      <summary> Gets or sets the fill used when the HotSpot is active. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.HotSpotData.ActiveOutline">
      <summary> Gets or sets the outline used when the HotSpot is active. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.HotSpotData.Bounds"></member>
    <member name="M:Atalasoft.Annotate.HotSpotData.Clone">
      <summary> Creates a copy of this <STRONG>HotSpotData</STRONG>. </summary>
      <returns> A copy of this object. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.HotSpotData.CloneBaseData(Atalasoft.Annotate.AnnotationData)"></member>
    <member name="M:Atalasoft.Annotate.HotSpotData.Equals(System.Object)">
      <summary> Determines if another <STRONG>HotSpotData</STRONG> object has the same property settings. </summary>
      <param name="obj"> An <STRONG>HotSpotData</STRONG> object to compare. </param>
      <returns> True if the object provided has the same property values. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.HotSpotData.Fill">
      <summary> Gets or sets the fill used when the HotSpot is not active. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.HotSpotData.GetHashCode"></member>
    <member name="M:Atalasoft.Annotate.HotSpotData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this <STRONG>HotSpotData</STRONG>. </summary>
      <param name="info"> The SerializationInfo object where data will be stored. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Annotate.HotSpotData.Outline">
      <summary> Gets or sets the outline used when the HotSpot is inactive. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.HotSpotFreehandData">
      <summary>
            Data for a hot spot freehand annotation.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.HotSpotFreehandData.#ctor">
      <summary> Creates a new instance of <STRONG>HotSpotFreehandData</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.HotSpotFreehandData.#ctor(Atalasoft.Annotate.AnnotationBrush)">
      <summary> Creates a new instance of <STRONG>HotSpotFreehandData</STRONG> specifying the fill. </summary>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the fill. </param>
    </member>
    <member name="M:Atalasoft.Annotate.HotSpotFreehandData.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush)">
      <summary> Creates a new instance of <STRONG>HotSpotFreehandData</STRONG> specifying the fill and active fill.
            </summary>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the fill. </param>
      <param name="activeFill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the fill when the hotspot is active. </param>
    </member>
    <member name="M:Atalasoft.Annotate.HotSpotFreehandData.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF[])">
      <summary> Creates a new instance of <STRONG>HotSpotFreehandData</STRONG> specifying the outline, fill and initial
            points. </summary>
      <param name="fill"> The fill for the hotspot. </param>
      <param name="activeFill"> The fill used when the hotspot is active. </param>
      <param name="points"> The initial points for the hotspot.  These points must be in annotation space. </param>
      <exception cref="T:System.ArgumentNullException"> Thrown if a parameter is null. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.HotSpotFreehandData.#ctor(Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF[])">
      <summary> Creates a new instance of <STRONG>HotSpotFreehandData</STRONG> specifying the outline, fill and initial
            points. </summary>
      <param name="fill"> The fill for the hotspot. </param>
      <param name="points"> The initial point for the hotspot.  These points must be in annotation space. </param>
      <exception> Thrown if a parameter is null. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.HotSpotFreehandData.#ctor(System.Drawing.PointF[])">
      <summary> Creates a new instance of <STRONG>HotSpotFreehandData</STRONG> specifying the initial points. </summary>
      <param name="points"> The initial points for the hotspot.  These points must be in annotation space. </param>
      <exception> Thrown if the points parameter is null. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.HotSpotFreehandData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>HotSpotFreehandData</STRONG> from serialized information. </summary>
      <param name="info"> The serialization information for this object. </param>
      <param name="context"> The streaming context for this object. </param>
      <exception cref="T:System.ArgumentNullException">Thrown if a parameter is null.</exception>
    </member>
    <member name="P:Atalasoft.Annotate.HotSpotFreehandData.Active">
      <summary> Gets or sets a value indicating whether the hotspot is active. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.HotSpotFreehandData.ActiveFill">
      <summary> Gets or sets the fill used when the HotSpot is active. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.HotSpotFreehandData.Clone"></member>
    <member name="M:Atalasoft.Annotate.HotSpotFreehandData.CloneBaseData(Atalasoft.Annotate.AnnotationData)"></member>
    <member name="M:Atalasoft.Annotate.HotSpotFreehandData.Equals(System.Object)">
      <summary> Determines if another <STRONG>HotSpotFreehandData</STRONG> object has the same property settings.
            </summary>
      <param name="obj"> An <STRONG>HotSpotFreehandData</STRONG> object to compare. </param>
      <returns> True if the object provided has the same property values. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.HotSpotFreehandData.Fill">
      <summary> Gets or sets the fill used when the HotSpot is not active. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.HotSpotFreehandData.GetHashCode"></member>
    <member name="M:Atalasoft.Annotate.HotSpotFreehandData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="P:Atalasoft.Annotate.HotSpotFreehandData.LineType">
      <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.FreehandLineType" /> used for the lines or curves of this annotation.
            </summary>
    </member>
    <member name="T:Atalasoft.Annotate.IAnnotationLock">
      <summary>
            The interface used to define the security when locking annotations is required.
            </summary>
    </member>
    <member name="E:Atalasoft.Annotate.IAnnotationLock.AnnotationControllerNotification">
      <summary>Raised after a property of the AnnotationBrush if modified.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.IAnnotationLock.Clone">
      <summary>Creates a copy of this IAnnotationLock.</summary>
      <returns>A copy of the security lock.</returns>
    </member>
    <member name="P:Atalasoft.Annotate.IAnnotationLock.EncryptionKey">
      <summary>
            Gets or sets the encrypted key used to lock or unlock the annotation.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.IAnnotationLock.Lock">
      <summary>
            Locks the annotation without a password.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.IAnnotationLock.Lock(System.String)">
      <summary>
            Locks the annotation with a password.
            </summary>
      <param name="password">A password that will be required to unlock the annotation.</param>
    </member>
    <member name="P:Atalasoft.Annotate.IAnnotationLock.Locked">
      <summary>
            Gets a value indicating whether the object is currently locked.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.IAnnotationLock.LockedImage">
      <summary>
            Gets or sets the image used to indicate that an annotation is locked.
            </summary>
    </member>
    <member name="E:Atalasoft.Annotate.IAnnotationLock.PropertyChanged">
      <summary> Raised when a property has been changed. </summary>
    </member>
    <member name="E:Atalasoft.Annotate.IAnnotationLock.PropertyChanging">
      <summary>Raised just before a property is about to be modified.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.IAnnotationLock.Unlock">
      <summary>
            Unlocks an annotation previously locked with the Lock method.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.IAnnotationLock.Unlock(System.String)">
      <summary>
            Unlocks an annotation that has be locked with a password.
            </summary>
      <param name="password">The password required to unlock the annotation.</param>
      <returns>True if the unlock was successful.</returns>
    </member>
    <member name="T:Atalasoft.Annotate.IAttachableAnnotation">
      <summary> This interface is implemented by annotation data classes, such as <see cref="T:Atalasoft.Annotate.CommentData" />, that can be
            attached to other annotations. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.IAttachableAnnotation.Guid">
      <summary> Gets a <STRONG>Guid</STRONG> used to identify the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.IAttachableAnnotation.Parent">
      <summary> Gets or sets the annotation this annotation is attached to, if any. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.IHighlighter">
      <summary> This interface is used by <see cref="T:Atalasoft.Annotate.AnnotationData" /> objects to indicate that they have highlighter
            support. This information is used by the <see cref="T:Atalasoft.DotImage.Annotate.AnnotateViewer" /> when burning annotations. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.IHighlighter.Translucent">
      <summary> Gets a value indicating whether the annotation is a highlighter. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.IWangCompatible">
      <summary>
            This interface is used to indicate that an AnnotationData object is WANG
            compatible.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.IWangCompatible.GetWangAttributeData">
      <summary> Returns a <see cref="T:Atalasoft.Annotate.WangAttributeData" /> object containing information about the annotation to be
            formatted as WANG data. </summary>
      <returns> A <see cref="T:Atalasoft.Annotate.WangAttributeData" /> object containing the information required to generate WANG data.
            </returns>
    </member>
    <member name="T:Atalasoft.Annotate.LayerData">
      <summary> The <STRONG>LayerData</STRONG> class is used to hold a collection of <see cref="T:Atalasoft.Annotate.AnnotationData" /> objects,
            including other <STRONG>LayerData</STRONG> objects, allowing the annotations to be organized into layers. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.LayerData.#ctor">
      <summary>Creates a new instance of <strong>LayerData</strong>.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.LayerData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>LayerData</STRONG> from serialized data. </summary>
      <param name="info"> The SerializationInfo object containing information about this <STRONG>LayerData</STRONG>.
            </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Annotate.LayerData.Bounds"></member>
    <member name="M:Atalasoft.Annotate.LayerData.Clone">
      <summary> Creates a copy of this <STRONG>LayerData</STRONG> object. </summary>
      <returns> A copy of this object. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.LayerData.CloneBaseData(Atalasoft.Annotate.AnnotationData)"></member>
    <member name="M:Atalasoft.Annotate.LayerData.Equals(System.Object)">
      <summary> Determines if another <STRONG>LayerData</STRONG> object has the same property settings. </summary>
      <param name="obj"> An <STRONG>LayerData</STRONG> object to compare. </param>
      <returns> True if the object provided has the same property values. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.LayerData.GetAttachments(Atalasoft.Annotate.AnnotationData)">
      <summary> Returns an <STRONG>IEumerable</STRONG> of <see cref="T:Atalasoft.Annotate.AnnotationData" /> for all annotations attached to the
            specified parent. </summary>
      <param name="parent"> The parent annotation. </param>
      <returns> An <STRONG>IEumerable</STRONG> of <see cref="T:Atalasoft.Annotate.AnnotationData" /> for all annotations attached to the
            specified parent. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.LayerData.GetHashCode"></member>
    <member name="M:Atalasoft.Annotate.LayerData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this <STRONG>LayerData</STRONG>. </summary>
      <param name="info"> The SerializationInfo where information will be stored. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Annotate.LayerData.GroupAnnotation">
      <summary> Gets or sets a value indicating whether the annotations in this layer are acting as a single group.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.LayerData.Items">
      <summary> Gets an <see cref="T:Atalasoft.Annotate.AnnotationDataCollection" /> used to hold the data for this layer. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.LayerData.Mirror(Atalasoft.Annotate.MirrorDirection,System.Boolean)"></member>
    <member name="M:Atalasoft.Annotate.LayerData.OnAnnotationControllerNotification(Atalasoft.Annotate.AnnotationControllerNotificationEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.LayerData.OnDeserialization(System.Object)">
      <summary> Called after an object has been fully deserialized by a serialization formatter.<!--DXMETADATA end --></summary>
      <param name="sender"> This parameter is not used and will be <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB).
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.LayerData.OnLocationChanged(Atalasoft.Annotate.AnnotationLocationChangedEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.LayerData.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.LayerData.OnRotationChanged(System.EventArgs)"></member>
    <member name="M:Atalasoft.Annotate.LayerData.OnSizeChanged(Atalasoft.Annotate.AnnotationSizeChangedEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.LayerData.Rotate(System.Single)"></member>
    <member name="P:Atalasoft.Annotate.LayerData.SerializeCollection">
      <summary> Gets or sets a value indicating whether the <see cref="T:Atalasoft.Annotate.AnnotationDataCollection" /> is serialized along
            with the <STRONG>LayerData</STRONG> object. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.LineData">
      <summary> This class holds data for the <see cref="T:Atalasoft.Annotate.UI.LineAnnotation" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.LineData.#ctor">
      <summary> Creates a new instance of <STRONG>LineData</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.LineData.#ctor(Atalasoft.Annotate.AnnotationPen)">
      <summary> Creates a new instance of <STRONG>LineData</STRONG> specifying the outline. </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the line. </param>
    </member>
    <member name="M:Atalasoft.Annotate.LineData.#ctor(Atalasoft.Annotate.AnnotationPen,System.Boolean)">
      <summary> Creates a new instance of <STRONG>LineData</STRONG> specifying the outline and translucency. </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the line. </param>
      <param name="translucent"> Indicates if the annotation will be translucent, giving it a highlighter effect. </param>
    </member>
    <member name="M:Atalasoft.Annotate.LineData.#ctor(Atalasoft.Annotate.AnnotationPen,System.Drawing.PointF,System.Drawing.PointF)">
      <summary>
        <para>
          <STRONG>This overload is obsolete and may be removed in a future
            release.</STRONG>
        </para>
        <para>Creates a new instance of <STRONG>LineData</STRONG> specifying the outline, starting and ending points.</para>
      </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the line. </param>
      <param name="startPoint"> The starting point of the line. </param>
      <param name="endPoint"> The ending point of the line. </param>
    </member>
    <member name="M:Atalasoft.Annotate.LineData.#ctor(Atalasoft.Annotate.AnnotationPen,System.Drawing.PointF,System.Drawing.PointF,System.Boolean)">
      <summary>
        <para>
          <STRONG>This overload is obsolete and may be removed in a future
            release.</STRONG>
        </para>
        <para>Creates a new instance of <STRONG>LineData</STRONG> specifying the outline, starting and ending points.</para>
      </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the line. </param>
      <param name="startPoint"> The starting point of the line. </param>
      <param name="endPoint"> The ending point of the line. </param>
      <param name="translucent"> A value indicating if this annotation should act as a highlighter. </param>
    </member>
    <member name="M:Atalasoft.Annotate.LineData.#ctor(Atalasoft.Annotate.WangAttributeData)">
      <summary> Creates a new instance of <STRONG>LineData</STRONG> from a <see cref="T:Atalasoft.Annotate.WangAttributeData" /> object.
            </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.WangAttributeData" /> containing information about this annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.LineData.#ctor(System.Drawing.PointF,System.Drawing.PointF,Atalasoft.Annotate.AnnotationPen,System.Boolean)">
      <summary> Creates a new instance of <STRONG>LineData</STRONG> specifying the start point, end point, outline and
            translucency. </summary>
      <param name="startPoint"> The starting point of the line. </param>
      <param name="endPoint"> The ending point of the line. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the line. </param>
      <param name="translucent"> Indicates if the annotation will be translucent, giving it a highlighter effect. </param>
    </member>
    <member name="M:Atalasoft.Annotate.LineData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>LineData</STRONG> from serialized information. </summary>
      <param name="info"> The SerializationInfo object containing information for this <STRONG>LineData</STRONG>. </param>
      <param name="context"> The StreamingContext of this information. </param>
    </member>
    <member name="P:Atalasoft.Annotate.LineData.Bounds"></member>
    <member name="M:Atalasoft.Annotate.LineData.Clone">
      <summary>Creates a copy of this LineData.</summary>
      <returns>A copy of this object.</returns>
    </member>
    <member name="M:Atalasoft.Annotate.LineData.CloneBaseData(Atalasoft.Annotate.AnnotationData)"></member>
    <member name="P:Atalasoft.Annotate.LineData.EndPoint">
      <summary> Gets or sets the ending point for the line. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.LineData.Equals(System.Object)">
      <summary> Determines if another <STRONG>LineData</STRONG> object has the same property settings. </summary>
      <param name="obj"> An <STRONG>LineData</STRONG> object to compare. </param>
      <returns> True if the object provided has the same property values. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.LineData.GetHashCode"></member>
    <member name="M:Atalasoft.Annotate.LineData.GetLineCapBounds"></member>
    <member name="M:Atalasoft.Annotate.LineData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with data describing this <STRONG>LineData</STRONG>. </summary>
      <param name="info"> A SerializationInfo object where data will be stored. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Annotate.LineData.GetWangAttributeData">
      <summary> Returns a <see cref="T:Atalasoft.Annotate.WangAttributeData" /> object with information about this annotation. </summary>
      <returns> A <see cref="T:Atalasoft.Annotate.WangAttributeData" /> object containing information required for WANG serialization.
            </returns>
    </member>
    <member name="M:Atalasoft.Annotate.LineData.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.LineData.OnSizeChanged(Atalasoft.Annotate.AnnotationSizeChangedEventArgs)"></member>
    <member name="P:Atalasoft.Annotate.LineData.Outline">
      <summary> Gets or sets the outline for the <STRONG>LineData</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.LineData.ResizeToBounds(System.Drawing.RectangleF)">
      <summary> Resizes this <STRONG>LineData</STRONG> object to fit within the given bounds </summary>
    </member>
    <member name="P:Atalasoft.Annotate.LineData.StartPoint">
      <summary> Gets or sets the starting point for the line. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.LineData.Translucent">
      <summary> Gets or sets a value indicating whether the line is drawn as a highlighter. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.LinesData">
      <summary> This class holds information for the <see cref="T:Atalasoft.Annotate.UI.LinesAnnotation" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.LinesData.#ctor">
      <summary> Creates a new instance of <STRONG>LinesData</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.LinesData.#ctor(Atalasoft.Annotate.AnnotationPen)">
      <summary> Creates a new instance of <STRONG>LinesData</STRONG> specifying the outline. </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the lines. </param>
    </member>
    <member name="M:Atalasoft.Annotate.LinesData.#ctor(Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.PointFCollection)">
      <summary>
        <para>
          <FONT color="#ff0000">This overload is obsolete and may be removed in a future
            release.</FONT>
        </para>
        <para>Creates a new instance of <STRONG>LinesData</STRONG> specifying the outline and end points.</para>
      </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the lines. </param>
      <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection" /> containing the line end points.  These must be specified in
            annotation space. </param>
    </member>
    <member name="M:Atalasoft.Annotate.LinesData.#ctor(Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.PointFCollection,System.Boolean)">
      <summary>
        <para>
          <FONT color="#ff0000">This overload is obsolete and may be removed in a future
            release.</FONT>
        </para>
        <para>Creates a new instance of <STRONG>LinesData</STRONG> specifying the outline, points and whether this
            annotation is a highlighter.</para>
      </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the lines. </param>
      <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection" /> containing the line end points.  These must be specified in
            annotation space. </param>
      <param name="translucent"> A value indicating whether this annotation is a highlighter. </param>
    </member>
    <member name="M:Atalasoft.Annotate.LinesData.#ctor(Atalasoft.Annotate.AnnotationPen,System.Boolean)">
      <summary> Creates a new instance of <STRONG>LinesData</STRONG> specifying the outline and translucency. </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the lines. </param>
      <param name="translucent"> Indicates if the annotation will be translucent, giving it a highlighter effect. </param>
    </member>
    <member name="M:Atalasoft.Annotate.LinesData.#ctor(Atalasoft.Annotate.AnnotationPen,System.Drawing.PointF[])">
      <summary> Creates a new instance of <STRONG>LinesData</STRONG> specifying the outline and an array of end points.
            </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the lines. </param>
      <param name="points"> An array of end points for the <STRONG>LinesData</STRONG>.  These must be specified in
            annotation space. </param>
    </member>
    <member name="M:Atalasoft.Annotate.LinesData.#ctor(Atalasoft.Annotate.AnnotationPen,System.Drawing.PointF[],System.Boolean)">
      <summary>
        <para>
          <FONT color="#ff0000">This overload is obsolete and may be removed in a future
            release.</FONT>
        </para>
        <para>Creates a new instance of <STRONG>LinesData</STRONG> specifying the outline, an array of points and whether
            this annotation is a highlighter.</para>
      </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the lines. </param>
      <param name="points"> An array of end points for the <STRONG>LinesData</STRONG>.  Theses must be specified in
            annotation space. </param>
      <param name="translucent"> A value indicating whether this annotation is a highlighter. </param>
    </member>
    <member name="M:Atalasoft.Annotate.LinesData.#ctor(Atalasoft.Annotate.PointFCollection,Atalasoft.Annotate.AnnotationPen,System.Boolean)">
      <summary> Creates a new instance of <STRONG>LinesData</STRONG> specifying the end points, outline and translucency.
            </summary>
      <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection" /> containing the line end points.  These must be specified in
            annotation space. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the lines. </param>
      <param name="translucent"> Indicates if the annotation will be translucent, giving it a highlighter effect. </param>
    </member>
    <member name="M:Atalasoft.Annotate.LinesData.#ctor(System.Drawing.PointF[],Atalasoft.Annotate.AnnotationPen,System.Boolean)">
      <summary> Creates a new instance of <STRONG>LinesData</STRONG> specifying the end points, outline and translucency.
            </summary>
      <param name="points"> An array of end points for the lines.  Theses must be specified in annotation space. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the lines. </param>
      <param name="translucent"> Indicates if the annotation will be translucent, giving it a highlighter effect. </param>
    </member>
    <member name="M:Atalasoft.Annotate.LinesData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>LinesData</STRONG> from serialized information. </summary>
      <param name="info"> The serialization information containing data for this object. </param>
      <param name="context"> The StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Annotate.LinesData.Bounds"></member>
    <member name="M:Atalasoft.Annotate.LinesData.Clone">
      <summary> Create a copy of this <STRONG>LinesData</STRONG>. </summary>
      <returns> A copy of this object. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.LinesData.CloneBaseData(Atalasoft.Annotate.AnnotationData)"></member>
    <member name="M:Atalasoft.Annotate.LinesData.Equals(System.Object)">
      <summary> Determines if another <STRONG>LinesData</STRONG> object has the same property settings. </summary>
      <param name="obj"> An <STRONG>LinesData</STRONG> object to compare. </param>
      <returns> True if the object provided has the same property values. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.LinesData.GetHashCode"></member>
    <member name="M:Atalasoft.Annotate.LinesData.GetLineCapBounds"></member>
    <member name="M:Atalasoft.Annotate.LinesData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills the SerializationInfo object with data from this class. </summary>
      <param name="info"> The SerializationInfo object that LinesData will be stored into. </param>
      <param name="context"> The StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Annotate.LinesData.GetWangAttributeData">
      <summary> Returns a <see cref="T:Atalasoft.Annotate.WangAttributeData" /> object describing this annotation. </summary>
      <returns> A <see cref="T:Atalasoft.Annotate.WangAttributeData" /> for this <STRONG>LinesData</STRONG>. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.LinesData.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)"></member>
    <member name="P:Atalasoft.Annotate.LinesData.Outline">
      <summary> Gets or sets the outline for the <STRONG>LinesData</STRONG> object. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.LinesData.Translucent">
      <summary> Gets or sets a value indicating whether the line is drawn as a highlighter. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.MirrorDirection">
      <summary> Specifies the mirror direction. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.MirrorDirection.Horizontal">
      <summary> Mirror (flip) the annotation horizontally. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.MirrorDirection.Vertical">
      <summary> Mirror (flip) the annotation vertically. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.MirrorEventArgs">
      <summary> This class is used with the <see cref="M:Atalasoft.Annotate.AnnotationData.OnMirrored(Atalasoft.Annotate.MirrorEventArgs)" /> method to provide information on the
            mirror action. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.MirrorEventArgs.#ctor(Atalasoft.Annotate.MirrorDirection,System.Boolean)">
      <summary> Creates a new instance of MirrorEventArgs specifying the mirror direction and whether the annotation
            should maintain it's visual position. </summary>
      <param name="direction"> The direction to mirror. </param>
      <param name="maintainPosition"> Indicates whether the annotation maintains its visual position.  If
            <STRONG>true</STRONG>, the annotation's location will be changed to keep the annotation visually in the same
            location.  If <STRONG>false</STRONG>, the annotation is flipped along its axis. </param>
    </member>
    <member name="P:Atalasoft.Annotate.MirrorEventArgs.Direction">
      <summary> Gets the direction of the mirror operation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.MirrorEventArgs.MaintainPosition">
      <summary> Gets a value indicating whether the annotation should maintain its visual position. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.MirrorEventHandler">
      <summary> This delegate is used for the <see cref="E:Atalasoft.Annotate.AnnotationData.Mirrored" /> event. </summary>
      <param name="sender"> The object sending this event. </param>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.MirrorEventArgs" /> containing information about this event. </param>
    </member>
    <member name="T:Atalasoft.Annotate.OcrRegionData">
      <summary> This class holds information for the <see cref="T:Atalasoft.Annotate.UI.OcrRegionAnnotation" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.OcrRegionData.#ctor">
      <summary> Creates a new instance of <STRONG>OcrRegionData</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.OcrRegionData.#ctor(Atalasoft.Annotate.WangAttributeData)">
      <summary> Creates a new instance of <STRONG>OcrRegionData</STRONG> from WANG data. </summary>
      <param name="wangData"> The <see cref="T:Atalasoft.Annotate.WangAttributeData" /> containing information about this annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.OcrRegionData.#ctor(System.Drawing.RectangleF,System.Int32,System.Drawing.Color)">
      <summary> Creates a new instance of <STRONG>OcrRegionData</STRONG> specifying the selection bounds, sequence number
            of color. </summary>
      <param name="bounds"> The annotation bounds. </param>
      <param name="sequenceOrder"> The sequence number for this annotation.  This value must be 1 or greater. </param>
      <param name="color"> The color for the selection. </param>
    </member>
    <member name="M:Atalasoft.Annotate.OcrRegionData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>OcrRegionData</STRONG> from serialization data. </summary>
      <param name="info"> A <STRONG>SerializationInfo</STRONG> containing the annotation data. </param>
      <param name="context"> A <STRONG>StreamingContext</STRONG> for the data. </param>
    </member>
    <member name="M:Atalasoft.Annotate.OcrRegionData.Clone"></member>
    <member name="M:Atalasoft.Annotate.OcrRegionData.CloneBaseData(Atalasoft.Annotate.AnnotationData)"></member>
    <member name="P:Atalasoft.Annotate.OcrRegionData.Color">
      <summary> Gets or sets the color used for the selection. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.OcrRegionData.Equals(System.Object)"></member>
    <member name="M:Atalasoft.Annotate.OcrRegionData.GetHashCode"></member>
    <member name="M:Atalasoft.Annotate.OcrRegionData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="M:Atalasoft.Annotate.OcrRegionData.GetWangAttributeData"></member>
    <member name="M:Atalasoft.Annotate.OcrRegionData.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)"></member>
    <member name="P:Atalasoft.Annotate.OcrRegionData.SequenceOrder">
      <summary> Gets or sets the sequence order value. </summary>
      <exception> Thrown if the value is less than 1. </exception>
    </member>
    <member name="T:Atalasoft.Annotate.PointBaseData">
      <summary> This abstract class is used for annotations that require a series of points to define their shape.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.PointBaseData.#ctor">
      <summary>
            The default constructor of a PointBaseData object. PointBaseData is an abstract
            class and cannot be created directly.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.PointBaseData.#ctor(Atalasoft.Annotate.PointFCollection)">
      <summary>
            A constructor for the PointBaseData object specifying the PointFCollection
            used.
            </summary>
      <param name="points">A PointFCollection for this object.</param>
    </member>
    <member name="M:Atalasoft.Annotate.PointBaseData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            A constructor for the PointBaseData object specifying the serialization
            information for this data.
            </summary>
      <param name="info">The SerializationInfo object containing information about this data.</param>
      <param name="context">A StreamingContext for this information.</param>
    </member>
    <member name="M:Atalasoft.Annotate.PointBaseData.CalculateBounds(Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF,System.Boolean,System.Boolean)">
      <summary> Calculates the bounding rectangle for the annotation. </summary>
      <param name="pen"> The pen used for the points. </param>
      <param name="shadow"> The shadow for the annotation. </param>
      <param name="shadowOffset"> The shadow offset for the annotation. </param>
      <param name="translucent"> A value indicating whether the annotation is translucent. </param>
      <param name="closed"> A value indicating whether the annotation points form a closed shape. </param>
      <returns> The bounding rectangle for the annotation. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.PointBaseData.CloneBaseData(Atalasoft.Annotate.AnnotationData)">
      <summary> Fills the data object with cloned property values. </summary>
      <param name="data"> A class that derives from <STRONG>PointBaseData</STRONG>. </param>
    </member>
    <member name="M:Atalasoft.Annotate.PointBaseData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object for this data. </summary>
      <param name="info"> The SerializationInfo object where information will be stored. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Annotate.PointBaseData.GetPointBounds">
      <summary> Gets a bounding rectangle which includes all of the <see cref="P:Atalasoft.Annotate.PointBaseData.Points" /></summary>
      <returns> A RectangleF that contains all of the <see cref="P:Atalasoft.Annotate.PointBaseData.Points" /></returns>
    </member>
    <member name="M:Atalasoft.Annotate.PointBaseData.OnSizeChanged(Atalasoft.Annotate.AnnotationSizeChangedEventArgs)"></member>
    <member name="P:Atalasoft.Annotate.PointBaseData.Points">
      <summary> Gets a <see cref="T:Atalasoft.Annotate.PointFCollection" /> used to store the points for the annotation. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.PointFCollection">
      <summary> A collection of PointF objects used by points based annotations. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.PointFCollection.#ctor">
      <summary> Creates a new instance of <STRONG>PointFCollection</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.PointFCollection.#ctor(System.Drawing.PointF[])">
      <summary> Creates a new instance of <STRONG>PointFCollection</STRONG> specifying the initial points. </summary>
      <param name="points"> The initial points for this collection. </param>
      <exception> Thrown if the points parameter is null or contains no items. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.PointFCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>PointFCollection</STRONG> from serialized data. </summary>
      <param name="info"> The serialization information for this object. </param>
      <param name="context"> The streaming context for this object. </param>
    </member>
    <member name="M:Atalasoft.Annotate.PointFCollection.GetClonedObject">
      <summary> Returns a new instance of <STRONG>PointFCollection</STRONG>. </summary>
      <returns> A new instance of <STRONG>PointFCollection</STRONG>. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.PointFCollection.IgnoreChanges">
      <summary> Gets or sets a value indicating whether the <see cref="T:Atalasoft.Annotate.PointFCollection" /> event should not be raised.
            </summary>
    </member>
    <member name="T:Atalasoft.Annotate.PolygonData">
      <summary> Contains annotation information for a <see cref="T:Atalasoft.Annotate.UI.PolygonAnnotation" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.PolygonData.#ctor">
      <summary> Creates a new instance of <STRONG>PolygonData</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.PolygonData.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen)">
      <summary> Creates a new instance of <STRONG>PolygonData</STRONG> specifying the outline and fill. </summary>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the outline of the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.PolygonData.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
      <summary> Creates a new instance of <STRONG>PolygonData</STRONG> specifying the outline, fill and shadow settings.
            </summary>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the outline of the annotation. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for a drop shadow. </param>
      <param name="shadowOffset"> The offset for the shadow. </param>
    </member>
    <member name="M:Atalasoft.Annotate.PolygonData.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF,Atalasoft.Annotate.PointFCollection)">
      <summary>
        <para>
          <FONT color="#ff0000">This overload is obsolete and may be removed in a future
            release.</FONT>
        </para>
        <para>Creates a new instance of <STRONG>PolygonData</STRONG> specifying the outline, fill, shadow settings and
            points of the polygon.</para>
      </summary>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the outline of the annotation. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for a drop shadow. </param>
      <param name="shadowOffset"> The offset for the shadow. </param>
      <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection" /> containing the initial points for the polygon. </param>
    </member>
    <member name="M:Atalasoft.Annotate.PolygonData.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF,System.Boolean)">
      <summary> Creates a new instance of <STRONG>PolygonData</STRONG> specifying the outline, fill, shadow settings, and
            translucency. </summary>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the outline of the annotation. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for a drop shadow. </param>
      <param name="shadowOffset"> The offset for the shadow. </param>
      <param name="translucent"> Indicates if the annotation will be translucent, giving it a highlighter effect. </param>
    </member>
    <member name="M:Atalasoft.Annotate.PolygonData.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF,System.Drawing.PointF[])">
      <summary>
        <para>
          <FONT color="#ff0000">This overload is obsolete and may be removed in a future
            release.</FONT>
        </para>
        <para>Creates a new instance of <STRONG>PolygonData</STRONG> specifying the outline, fill, shadow settings and array
            of points for the polygon.</para>
      </summary>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the outline of the annotation. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for a drop shadow. </param>
      <param name="shadowOffset"> The offset for the shadow. </param>
      <param name="points"> An array of PointF objects specifying the initial points of the polygon. </param>
    </member>
    <member name="M:Atalasoft.Annotate.PolygonData.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.PointFCollection)">
      <summary>
        <para>
          <STRONG>This overload is obsolete and may be removed in a future
            release.</STRONG>
        </para>
        <para>Creates a new instance of <STRONG>PolygonData</STRONG> specifying the outline, fill and points
            collection.</para>
      </summary>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the outline of the annotation. </param>
      <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection" /> containing the initial points for the polygon. </param>
    </member>
    <member name="M:Atalasoft.Annotate.PolygonData.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,System.Drawing.PointF[])">
      <summary>
        <para>
          <FONT color="#ff0000">This overload is obsolete and may be removed in a future
            release.</FONT>
        </para>
        <para>Creates a new instance of <STRONG>PolygonData</STRONG> specifying the outline, fill and an array of
            points.</para>
      </summary>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the outline of the annotation. </param>
      <param name="points"> An array of PointF objects specifying the initial points of the polygon. </param>
    </member>
    <member name="M:Atalasoft.Annotate.PolygonData.#ctor(Atalasoft.Annotate.PointFCollection,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF,System.Boolean)">
      <summary> Creates a new instance of <STRONG>PolygonData</STRONG> specifying the a set of points,  outline, fill and
            shadow settings. </summary>
      <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection" /> containing the initial points for the polygon. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the outline of the annotation. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for a drop shadow. </param>
      <param name="shadowOffset"> The offset for the shadow. </param>
      <param name="translucent"> Indicates if the annotation will be translucent, giving it a highlighter effect. </param>
    </member>
    <member name="M:Atalasoft.Annotate.PolygonData.#ctor(System.Drawing.PointF[],Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF,System.Boolean)">
      <summary> Creates a new instance of <STRONG>PolygonData</STRONG> specifying the a set of points,  outline, fill and
            shadow settings. </summary>
      <param name="points"> An array of <STRONG>PointF</STRONG> objects specifying the initial points of the polygon.
            </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the outline of the annotation. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for a drop shadow. </param>
      <param name="shadowOffset"> The offset for the shadow. </param>
      <param name="translucent"> Indicates if the annotation will be translucent, giving it a highlighter effect. </param>
    </member>
    <member name="M:Atalasoft.Annotate.PolygonData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>PolygonData</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo object containing information about the <STRONG>PolygonData</STRONG>.
            </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Annotate.PolygonData.Bounds"></member>
    <member name="M:Atalasoft.Annotate.PolygonData.Clone">
      <summary>Creates a copy of the PolygonData.</summary>
      <returns>A copy of this object.</returns>
    </member>
    <member name="M:Atalasoft.Annotate.PolygonData.CloneBaseData(Atalasoft.Annotate.AnnotationData)"></member>
    <member name="M:Atalasoft.Annotate.PolygonData.Equals(System.Object)">
      <summary> Determines if another <STRONG>PolygonData</STRONG> object has the same property settings. </summary>
      <param name="obj"> An <STRONG>PolygonData</STRONG> object to compare. </param>
      <returns> True if the object provided has the same property values. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.PolygonData.Fill">
      <summary> Gets or sets the fill for the <STRONG>PolygonData</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.PolygonData.GetHashCode"></member>
    <member name="M:Atalasoft.Annotate.PolygonData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills the SerializationInfo object will <STRONG>PolygonData</STRONG> information. </summary>
      <param name="info"> The SerialziationInfo where information will be stored. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Annotate.PolygonData.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)"></member>
    <member name="P:Atalasoft.Annotate.PolygonData.Outline">
      <summary> Gets or sets the outline for the <STRONG>PolygonData</STRONG>. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.PolygonData.Shadow">
      <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the drop shadow. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.PolygonData.ShadowOffset">
      <summary> Gets or sets the drop shadow offset. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.PolygonData.Translucent">
      <summary> Gets or sets a value indicating whether this annotation is used as a highlighter. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.RectangleData">
      <summary> Contains information describing data for a <see cref="T:Atalasoft.Annotate.UI.RectangleAnnotation" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.RectangleData.#ctor">
      <summary> Creates a new instance of <STRONG>RectangleData</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.RectangleData.#ctor(Atalasoft.Annotate.WangAttributeData)">
      <summary> Creates a new instance of <STRONG>RectangleData</STRONG> from a <see cref="T:Atalasoft.Annotate.WangAttributeData" /> object.
            </summary>
      <param name="wangData"> A <see cref="T:Atalasoft.Annotate.WangAttributeData" /> object containing information for a HollowRectangle or
            FilledRectangle WANG annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.RectangleData.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationBrush)">
      <summary> Creates a new instance of <STRONG>RectangleData</STRONG> specifying the rectangle and fill. </summary>
      <param name="rectangle"> The rectangle for this annotation. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill this annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.RectangleData.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
      <summary> Creates a new instance of <STRONG>RectangleData</STRONG> specifying the rectangle, fill, outline and
            shadow settings. </summary>
      <param name="rectangle"> The rectangle for this annotation. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill this annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the outline of the annotation. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the drop shadow. </param>
      <param name="shadowOffset"> The offset used to position the drop shadow. </param>
    </member>
    <member name="M:Atalasoft.Annotate.RectangleData.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationBrush,System.Boolean)">
      <summary> Creates a new instance of <STRONG>RectangleData</STRONG> specifying the rectangle, fill and translucent
            properties. </summary>
      <param name="rectangle"> The rectangle for this annotation. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill this annotation. </param>
      <param name="translucent"> A value indicating whether this annotation will act as a highlighter. </param>
    </member>
    <member name="M:Atalasoft.Annotate.RectangleData.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationPen)">
      <summary> Creates a new instance of <STRONG>RectangleData</STRONG> specifying the rectangle and outline. </summary>
      <param name="rectangle"> The rectangle for this annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the outline of the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.RectangleData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>RectangleData</STRONG> from serialized information. </summary>
      <param name="info"> The SerializationInfo object containing <STRONG>RectangleData</STRONG> information. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Annotate.RectangleData.AnnotationBounds"></member>
    <member name="P:Atalasoft.Annotate.RectangleData.Bounds"></member>
    <member name="M:Atalasoft.Annotate.RectangleData.Clone">
      <summary> Creates a copy of the <STRONG>RectangleData</STRONG>. </summary>
      <returns> A copy of this object. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.RectangleData.CloneBaseData(Atalasoft.Annotate.AnnotationData)"></member>
    <member name="M:Atalasoft.Annotate.RectangleData.Equals(System.Object)">
      <summary> Determines if another <STRONG>RectangleData</STRONG> object has the same property settings. </summary>
      <param name="obj"> An <STRONG>RectangleData</STRONG> object to compare. </param>
      <returns> True if the object provided has the same property values. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.RectangleData.Fill">
      <summary> Gets or sets the fill used for the annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.RectangleData.GetHashCode"></member>
    <member name="M:Atalasoft.Annotate.RectangleData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with <STRONG>RectangleData</STRONG> information. </summary>
      <param name="info"> The SerializationInfo object to fill with data. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Annotate.RectangleData.GetWangAttributeData">
      <summary> Returns a <see cref="T:Atalasoft.Annotate.WangAttributeData" /> object with information about this annotation. </summary>
      <returns> A <see cref="T:Atalasoft.Annotate.WangAttributeData" /> object. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.RectangleData.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)"></member>
    <member name="P:Atalasoft.Annotate.RectangleData.Outline">
      <summary> Gets or sets the outline of the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.RectangleData.Shadow">
      <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used draw the drop shadow. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.RectangleData.ShadowOffset">
      <summary> Gets or sets the shadow offset. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.RectangleData.Translucent">
      <summary> Gets or sets a value indicating whether this annotation is used as a highlighter. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.RectangleGrip">
      <summary> Specifies the position of the grip. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.RectangleGrip.TopLeft">
      <summary> The grip positioned at the top-left of the annotation. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.RectangleGrip.TopCenter">
      <summary> The grip positioned at the top-center of the annotation. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.RectangleGrip.TopRight">
      <summary> The grip positioned at the top-right of the annotation. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.RectangleGrip.CenterLeft">
      <summary> The grip positioned at the center-left of the annotation. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.RectangleGrip.CenterRight">
      <summary> The grip positioned at the center-right of the annotation. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.RectangleGrip.BottomLeft">
      <summary> The grip positioned at the bottom-left of the annotation. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.RectangleGrip.BottomCenter">
      <summary> The grip positioned at the bottom-center of the annotation. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.RectangleGrip.BottomRight">
      <summary> The grip positioned at the bottom-right of the annotation. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.RectangleGrip.Rotation">
      <summary> The grip positioned above the top-center of the annotation used for
            rotating. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.RectangleGripDisplay">
      <summary> Specifies the grips to display. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.RectangleGripDisplay.Both">
      <summary> Both corner and side grips are displayed. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.RectangleGripDisplay.CornerGrips">
      <summary> Only the corner grips are displayed. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.RectangleGripDisplay.SideGrips">
      <summary> Only the side grips are displayed. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.ReferencedImageData">
      <summary> The data for a <see cref="T:Atalasoft.Annotate.UI.ReferencedImageAnnotation" /> object. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.ReferencedImageData.#ctor">
      <summary> Creates a new instance of <STRONG>ReferencedImageData</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.ReferencedImageData.#ctor(Atalasoft.Annotate.WangAttributeData)">
      <summary> Creates a new instance of <STRONG>ReferencedImageData </STRONG>from WANG annotation data. </summary>
      <param name="data"> A <see cref="T:Atalasoft.Annotate.WangAttributeData" /> object containing information for this annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.ReferencedImageData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>ReferencedImageData</STRONG> from serialized information. </summary>
      <param name="info"> The SerializationInfo object containing information for this object. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Annotate.ReferencedImageData.#ctor(System.String)">
      <summary> Creates a new instance of <STRONG>ReferencedImageData</STRONG> specifying the filename of the image.
            </summary>
      <param name="fileName"> The filename of the image for this annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.ReferencedImageData.#ctor(System.String,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
      <summary> Creates a new instance of <STRONG>ReferencedImageData</STRONG> specifying the filename, shadow and shadow
            offset. </summary>
      <param name="fileName"> The filename of the image for this annotation. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the drop shadow. </param>
      <param name="shadowOffset"> The offset used to specifying the position of the drop shadow. </param>
    </member>
    <member name="M:Atalasoft.Annotate.ReferencedImageData.#ctor(System.String,System.Drawing.PointF)">
      <summary> Creates a new instance of <STRONG>ReferencedImageData</STRONG> specifying the filename, location and
            whether the aspect ratio should be maintained. </summary>
      <param name="fileName"> The filename of the image for this annotation. </param>
      <param name="location"> The location of the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.ReferencedImageData.#ctor(System.String,System.Drawing.PointF,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
      <summary> Creates a new instance of <STRONG>ReferencedImageData</STRONG> specifying the filename, initial location,
            shadow and shadow offset. </summary>
      <param name="fileName"> The filename of the image for this annotation. </param>
      <param name="location"> The location of the annotation. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the drop shadow. </param>
      <param name="shadowOffset"> The offset used to specifying the position of the drop shadow. </param>
    </member>
    <member name="P:Atalasoft.Annotate.ReferencedImageData.Bounds"></member>
    <member name="M:Atalasoft.Annotate.ReferencedImageData.Clone">
      <summary> Creates a copy of this <STRONG>ReferencedImageData</STRONG> object. </summary>
      <returns> A copy of this object. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.ReferencedImageData.CloneBaseData(Atalasoft.Annotate.AnnotationData)"></member>
    <member name="M:Atalasoft.Annotate.ReferencedImageData.Dispose(System.Boolean)">
      <summary> Releases internal resources used by the <STRONG>ReferencedImageData</STRONG> object. </summary>
      <param name="disposing"> Set to true when called from the <see cref="M:Atalasoft.Annotate.ReferencedImageData.Dispose(System.Boolean)" /> method.
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.ReferencedImageData.Equals(System.Object)">
      <summary> Determines if another <STRONG>ReferencedImageData</STRONG> object has the same property settings.
            </summary>
      <param name="obj"> An <STRONG>ReferencedImageData</STRONG> object to compare. </param>
      <returns> True if the object provided has the same property values. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.ReferencedImageData.FileName">
      <summary> Gets or sets the filename of the annotation image. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.ReferencedImageData.Finalize"></member>
    <member name="M:Atalasoft.Annotate.ReferencedImageData.GetHashCode"></member>
    <member name="M:Atalasoft.Annotate.ReferencedImageData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this <STRONG>ReferencedImageData</STRONG> object.
            </summary>
      <param name="info"> The SerializationInfo object where the information will be stored. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Annotate.ReferencedImageData.GetWangAttributeData">
      <summary> Returns a <see cref="T:Atalasoft.Annotate.WangAttributeData" /> object with information about this annotation. </summary>
      <returns> A <see cref="T:Atalasoft.Annotate.WangAttributeData" /> for this annotation. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.ReferencedImageData.ImageObject">
      <summary> Gets or sets the image object for this annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.ReferencedImageData.OnCreateImageObject">
      <summary> Called when the <see cref="P:Atalasoft.Annotate.ReferencedImageData.ImageObject" /> needs to be created. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.ReferencedImageData.Shadow">
      <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used draw the drop shadow. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.ReferencedImageData.ShadowOffset">
      <summary> Gets or sets the shadow offset. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.RenderDevice">
      <summary> Specifies the type of device annotations will be rendered on. This allows the renderer to adjust for
            differences in media. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.RenderDevice.Display">
      <summary> Rendering is going to the screen or a control. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.RenderDevice.Printer">
      <summary> Rendering is for a printer. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.RenderDevice.Image">
      <summary> Rendering is directly to an image. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.RubberStampData">
      <summary> The annotation data object for a <see cref="T:Atalasoft.Annotate.UI.RubberStampAnnotation" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.RubberStampData.#ctor">
      <summary> Creates a new instance of <STRONG>RubberStampData</STRONG> with default parameters. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.RubberStampData.#ctor(System.Drawing.RectangleF)">
      <summary> Creates a new instance of <STRONG>RubberStampData</STRONG> specifying the bounding rectangle of the
            annotation. </summary>
      <param name="bounds"> The bounding rectangle of the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.RubberStampData.#ctor(System.Drawing.RectangleF,System.String)">
      <summary> Creates an instance of <STRONG>RubberStampData</STRONG> specifying the bounding rectangle and text of the
            annotation. </summary>
      <param name="bounds"> The bounding rectangle of the annotation. </param>
      <param name="text"> The text drawn for the rubber stamp. </param>
    </member>
    <member name="M:Atalasoft.Annotate.RubberStampData.#ctor(System.Drawing.RectangleF,System.String,Atalasoft.Annotate.AnnotationFont)">
      <summary> Creates an instance of <STRONG>RubberStampData</STRONG> specifying the bounding rectangle, text and font.
            </summary>
      <param name="bounds"> The bounding rectangle of the annotation. </param>
      <param name="text"> The text drawn for the rubber stamp. </param>
      <param name="font"> The font used for the annotation text. </param>
    </member>
    <member name="M:Atalasoft.Annotate.RubberStampData.#ctor(System.Drawing.RectangleF,System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,System.Single,System.Single)">
      <summary> Creates a new instance of <STRONG>RubberStampData</STRONG> specifying the bounding rectangle, text, font,
            font brush, fill, outline and corner radius. </summary>
      <param name="bounds"> The bounding rectangle of the annotation. </param>
      <param name="text"> The text drawn for the rubber stamp. </param>
      <param name="font"> The font used for the annotation text. </param>
      <param name="fontBrush"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for rendering the text. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for filling the annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used for drawing the outline of the annotation. </param>
      <param name="cornerRadius"> The radius used on the corners. </param>
      <param name="padding">
        <para>Space added around the text.</para>
      </param>
    </member>
    <member name="M:Atalasoft.Annotate.RubberStampData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>RubberStampData</STRONG> from serialized data. </summary>
      <param name="info"> The SerializationInfo object containing information about this annotation. </param>
      <param name="context"> A StreamingContext for this data. </param>
    </member>
    <member name="M:Atalasoft.Annotate.RubberStampData.#ctor(System.String)">
      <summary> Creates a new instance of <STRONG>RubberStampData</STRONG> specifying the annotation text. </summary>
      <param name="text"> The text drawn for the rubber stamp. </param>
    </member>
    <member name="M:Atalasoft.Annotate.RubberStampData.#ctor(System.String,Atalasoft.Annotate.AnnotationFont)">
      <summary> Create a new instance of <STRONG>RubberStampData</STRONG> specifying the annotation text and font.
            </summary>
      <param name="text"> The text drawn for the rubber stamp. </param>
      <param name="font"> The font used for the annotation text. </param>
    </member>
    <member name="M:Atalasoft.Annotate.RubberStampData.#ctor(System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,System.Single,System.Single)">
      <summary> Creates a new instance of <STRONG>RubberStampData</STRONG> specifying the annotation text, font, font
            brush, fill outline and corner radius. </summary>
      <param name="text"> The text drawn for the rubber stamp. </param>
      <param name="font"> The font used for the annotation text. </param>
      <param name="fontBrush"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for rendering the text. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for filling the annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used for drawing the outline of the annotation. </param>
      <param name="cornerRadius"> The radius used on the corners. </param>
      <param name="padding"> Space added around the text. </param>
    </member>
    <member name="P:Atalasoft.Annotate.RubberStampData.Bounds"></member>
    <member name="M:Atalasoft.Annotate.RubberStampData.Clone"></member>
    <member name="M:Atalasoft.Annotate.RubberStampData.CloneBaseData(Atalasoft.Annotate.AnnotationData)"></member>
    <member name="P:Atalasoft.Annotate.RubberStampData.CornerRadius">
      <summary> Gets or sets the radius used for the corners of the annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.RubberStampData.Equals(System.Object)">
      <summary> Determines if another <STRONG>RubberStampData</STRONG> object has the same property settings. </summary>
      <param name="obj"> An <STRONG>RubberStampData</STRONG> object to compare. </param>
      <returns> True if the object provided has the same property values. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.RubberStampData.Fill">
      <summary> Gets or sets the fill used for the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.RubberStampData.Font">
      <summary> Gets or sets the font for the text. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.RubberStampData.FontBrush">
      <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the font. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.RubberStampData.GetHashCode"></member>
    <member name="M:Atalasoft.Annotate.RubberStampData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="P:Atalasoft.Annotate.RubberStampData.Outline">
      <summary> Gets or sets the outline of the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.RubberStampData.Padding">
      <summary> Gets or sets the amount of space around the text. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.RubberStampData.Text">
      <summary> Gets or sets the text for this annotation. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.SerializationInfoHelper">
      <summary> This class contains methods used when serializing or deserializing annotations. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.SerializationInfoHelper.#ctor(System.Runtime.Serialization.SerializationInfo)">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Annotate.SerializationInfoHelper" /> class</summary>
    </member>
    <member name="T:Atalasoft.Annotate.ShadowMode">
      <summary> Specifies the shadow mode used for text annotations. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.ShadowMode.Annotation">
      <summary> The shadow is applied only to the annotation. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.ShadowMode.Text">
      <summary> The shadow is applied only to the text. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.ShadowMode.AnnotationAndText">
      <summary> The shadow is applied to both text and annotation. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.TextData">
      <summary> Data for a <see cref="T:Atalasoft.Annotate.UI.TextAnnotation" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.TextData.#ctor">
      <summary> Creates a new instance of <STRONG>TextData</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.TextData.#ctor(Atalasoft.Annotate.WangAttributeData)">
      <summary> Creates a new instance of <STRONG>TextData</STRONG> from WANG annotation information. </summary>
      <param name="data"> A <see cref="T:Atalasoft.Annotate.WangAttributeData" /> object containing information about this annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.TextData.#ctor(System.Drawing.RectangleF)">
      <summary> Creates a new instance of <STRONG>TextData</STRONG> specifying the annotation location and size.
            </summary>
      <param name="bounds"> The location and size of the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.TextData.#ctor(System.Drawing.RectangleF,System.String)">
      <summary> Creates a new instance of <STRONG>TextData</STRONG> specifying the annotation text. </summary>
      <param name="bounds"> The location and size of the annotation. </param>
      <param name="text"> The text for the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.TextData.#ctor(System.Drawing.RectangleF,System.String,Atalasoft.Annotate.AnnotationFont)">
      <summary> Creates a new instance of <STRONG>TextData</STRONG> specifying the text and font. </summary>
      <param name="bounds"> The location and size of the annotation. </param>
      <param name="text"> The text for this annotation. </param>
      <param name="font"> The font used for rendering the text. </param>
    </member>
    <member name="M:Atalasoft.Annotate.TextData.#ctor(System.Drawing.RectangleF,System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen)">
      <summary> Creates a new instance of <STRONG>TextData</STRONG> specifying the text, font, font brush, fill and
            outline for the annotation. </summary>
      <param name="bounds"> The location and size of the annotation. </param>
      <param name="text"> The text for this annotation. </param>
      <param name="font"> The font used for rendering the text. </param>
      <param name="fontBrush"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for rendering the text. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the background of the annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to render the outline of the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.TextData.#ctor(System.Drawing.RectangleF,System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF,Atalasoft.Annotate.ShadowMode)">
      <summary> Creates a new instance of <STRONG>TextData</STRONG> specifying the properties for this object. </summary>
      <param name="bounds"> The location and size of the annotation. </param>
      <param name="text"> The text for this annotation. </param>
      <param name="font"> The font used for rendering the text. </param>
      <param name="fontBrush"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for rendering the text. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the background of the annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to render the outline of the annotation. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the drop shadow. </param>
      <param name="shadowOffset"> The offset for the shadow. </param>
      <param name="shadowMode"> Defines the type of shadow to apply. </param>
    </member>
    <member name="M:Atalasoft.Annotate.TextData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>TextData</STRONG> from serialized information. </summary>
      <param name="info"> The <STRONG>SerializationInfo</STRONG> object containing information for this object. </param>
      <param name="context"> A <STRONG>StreamingContext</STRONG> for the information. </param>
    </member>
    <member name="M:Atalasoft.Annotate.TextData.#ctor(System.String)">
      <summary> Creates a new instance of <STRONG>TextData</STRONG> specifying the annotation text. </summary>
      <param name="text"> The text for the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.TextData.#ctor(System.String,Atalasoft.Annotate.AnnotationFont)">
      <summary> Creates a new instance of <STRONG>TextData</STRONG> specifying the text and font. </summary>
      <param name="text"> The text for this annotation. </param>
      <param name="font"> The font used for rendering the text. </param>
    </member>
    <member name="M:Atalasoft.Annotate.TextData.#ctor(System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen)">
      <summary> Creates a new instance of <STRONG>TextData</STRONG> specifying the text, font, font brush, fill and
            outline for the annotation. </summary>
      <param name="text"> The text for this annotation. </param>
      <param name="font"> The font used for rendering the text. </param>
      <param name="fontBrush"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for rendering the text. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the background of the annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to render the outline of the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.TextData.#ctor(System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF,Atalasoft.Annotate.ShadowMode)">
      <summary> Creates a new instance of <STRONG>TextData</STRONG> specifying the properties for this object. </summary>
      <param name="text"> The text for this annotation. </param>
      <param name="font"> The font used for rendering the text. </param>
      <param name="fontBrush"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for rendering the text. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the background of the annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to render the outline of the annotation. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the drop shadow. </param>
      <param name="shadowOffset"> The offset for the shadow. </param>
      <param name="shadowMode"> Defines the type of shadow to apply. </param>
    </member>
    <member name="P:Atalasoft.Annotate.TextData.Alignment">
      <summary> Gets or sets the horizontal alignment of the text. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.TextData.AllowEditing">
      <summary>
        <para>Gets or sets a value indicating whether the annotation's text data should be editable or read-only
            via the user interface.</para>
      </summary>
    </member>
    <member name="P:Atalasoft.Annotate.TextData.AutoSize">
      <summary> Gets or sets a value indicating whether the annotation will automatically resize to fit the text.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.TextData.Bounds"></member>
    <member name="M:Atalasoft.Annotate.TextData.Clone">
      <summary> Creates a copy of this <STRONG>TextData</STRONG>. </summary>
      <returns> A copy of this annotation data. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.TextData.CloneBaseData(Atalasoft.Annotate.AnnotationData)">
      <summary>Creates a copy of this TextData.</summary>
      <returns>A copy of this annotation data.</returns>
    </member>
    <member name="M:Atalasoft.Annotate.TextData.Equals(System.Object)">
      <summary> Determines if another <STRONG>TextData</STRONG> object has the same property settings. </summary>
      <param name="obj"> An <STRONG>TextData</STRONG> object to compare. </param>
      <returns> True if the object provided has the same property values. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.TextData.Fill">
      <summary> Gets or sets the fill used for the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.TextData.Font">
      <summary> Gets or sets the font for the text. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.TextData.FontBrush">
      <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the font. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.TextData.FormatFlags">
      <summary> Gets or sets a <STRONG>StringFormatFlags</STRONG> enumeration that contains formatting information.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.TextData.GetHashCode"></member>
    <member name="M:Atalasoft.Annotate.TextData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this object. </summary>
      <param name="info"> The SerializationInfo object where the information will be stored. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Annotate.TextData.GetWangAttributeData">
      <summary> Returns a <see cref="T:Atalasoft.Annotate.WangAttributeData" /> containing information about this <STRONG>TextData</STRONG>.
            </summary>
      <returns> A <see cref="T:Atalasoft.Annotate.WangAttributeData" /> for this annotation. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.TextData.LineAlignment">
      <summary> Gets or sets the line alignment. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.TextData.Minimized">
      <summary> Gets or sets a value indicating whether the annotation is minimized. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.TextData.Outline">
      <summary> Gets or sets the outline of the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.TextData.Padding">
      <summary> Gets or sets a value indicating how much padding is added around the text. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.TextData.RenderingHint">
      <summary> Gets or sets the System.Drawing.Text.TextRenderingHint used when rendering this text
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.TextData.Shadow">
      <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used draw the drop shadow. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.TextData.ShadowMode">
      <summary> Gets or sets the shadow mode used to indicate how the shadow is drawn. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.TextData.ShadowOffset">
      <summary> Gets or sets the shadow offset. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.TextData.Text">
      <summary> Gets or sets the text for this annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.TextData.Trimming">
      <summary> Get or sets the type of character trimming to perform on the text. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UndoChange">
      <summary> Specifies the type of undo being performed. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.UndoChange.PropertyChange">
      <summary> Used when a property of the annotation has been changed. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.UndoChange.CollectiveChange">
      <summary> Used when multiple undo actions are combined into a single undo. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.UndoChange.InvokeMethod">
      <summary> Used when a method, such as Mirror, is invoked. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UndoManagerAction">
      <summary> Specifies the actions taken when an <see cref="T:Atalasoft.Annotate.UI.AnnotationUndo" /> is passed to the <see cref="E:Atalasoft.Annotate.AnnotationData.AnnotationControllerNotification" /> event. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.UndoManagerAction.Default">
      <summary> The undo is added to the <see cref="T:Atalasoft.Annotate.UI.AnnotationUndoManager" />. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.UndoManagerAction.Ignore">
      <summary> The undo is ignored. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.UndoManagerAction.Combine">
      <summary> The undo and all that follow until a <strong>ResetDefault</strong> action is
            received are combined into a single undo object. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.UndoManagerAction.ResetDefault">
      <summary> Indicates that this is the last undo to combine with previous undos. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.WangAnnotationType">
      <summary> Specifies the type of WANG annotation used for serialization. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.WangAnnotationType.ImageEmbedded">
      <summary> An image annotation in which the image data is embedded into the WANG data. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.WangAnnotationType.ImageReference">
      <summary> An image annotation in which a filename is specified for the image. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.WangAnnotationType.StraightLine">
      <summary> A single line annotation. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.WangAnnotationType.FreehandLine">
      <summary> A freehand annotation. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.WangAnnotationType.HollowRectangle">
      <summary> A rectangle annotation without a fill. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.WangAnnotationType.FilledRectangle">
      <summary> A filled rectangle annotation. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.WangAnnotationType.TypedText">
      <summary> A text annotation. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.WangAnnotationType.TextFromFile">
      <summary> A text annotation containing text from a file. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.WangAnnotationType.TextStamp">
      <summary> A text annotation that cannot be edited. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.WangAnnotationType.AttachANote">
      <summary> A text annotation that has the appearance of a sticky note. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.WangAnnotationType.OcrRegion">
      <summary> A rectangle selected to identify an area of the image to OCR in a separate process. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.WangAttributeData">
      <summary> This class hold information used by the <see cref="T:Atalasoft.Annotate.Formatters.WangFormatter" /> when serializing <see cref="T:Atalasoft.Annotate.AnnotationData" /> objects. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.WangAttributeData.#ctor">
      <summary> Creates a new instance of <STRONG>WangAttributeData</STRONG>. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.WangAttributeData.Bounds">
      <summary> Gets or sets the bounding rectangle of the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.WangAttributeData.Color1">
      <summary> The primary color of the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.WangAttributeData.Color2">
      <summary> Gets or sets the text color of an Attach-a-Note WANG annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.WangAttributeData.CreateAttachANoteAttribute(System.Drawing.RectangleF,System.Drawing.Color,System.Drawing.Color,Atalasoft.Annotate.AnnotationFont,System.String)">
      <summary> Creates a new instance of <STRONG>WangAttributeData</STRONG> for an Attach-a-Note annotation. </summary>
      <param name="bounds"> The bounding rectangle of the annotation. </param>
      <param name="color1"> The color of the annotation. </param>
      <param name="color2"> The text color. </param>
      <param name="font"> The font used when rendering text. </param>
      <param name="text"> The text of the annotation. </param>
      <returns> A <STRONG>WangAttributeData</STRONG> containing the annotation data. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.WangAttributeData.CreateFilledRectangleAttribute(System.Drawing.RectangleF,System.Drawing.Color,System.Boolean)">
      <summary> Creates a new instance of <STRONG>WangAttributeData</STRONG> for a FilledRectangle annotation. </summary>
      <param name="bounds"> The bounding rectangle of the annotation. </param>
      <param name="color1"> The color of the annotation. </param>
      <param name="highlighting"> A value indicating whether or not this annotation is a highlighter. </param>
      <returns> A <STRONG>WangAttributeData</STRONG> containing the annotation data. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.WangAttributeData.CreateFreehandLineAttribute(System.Drawing.Color,System.Boolean,System.Single,Atalasoft.Annotate.PointFCollection)">
      <summary> Creates a new instance of <STRONG>WangAttributeData</STRONG> for a FreehandLine annotation. </summary>
      <param name="color1"> The line color of the annotation. </param>
      <param name="highlighting"> A value indicating whether or not this annotation is a highlighter. </param>
      <param name="lineSize"> The annotation line size. </param>
      <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection" /> containing annotation data points. </param>
      <returns> A <STRONG>WangAttributeData</STRONG> containing the annotation data. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.WangAttributeData.CreateHollowRectangleAttribute(System.Drawing.RectangleF,System.Drawing.Color,System.Boolean,System.Single)">
      <summary> Creates a new instance of <STRONG>WangAttributeData</STRONG> for a HollowRectangle annotation. </summary>
      <param name="bounds"> The bounding rectangle of the annotation. </param>
      <param name="color1"> The line color of the annotation. </param>
      <param name="highlighting"> A value indicating whether or not this annotation is a highlighter. </param>
      <param name="lineSize"> The annotation line size. </param>
      <returns> A <STRONG>WangAttributeData</STRONG> containing the annotation data. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.WangAttributeData.CreateImageEmbeddedAttribute(System.Drawing.RectangleF,System.Byte[],System.Boolean)">
      <summary> Creates a new <STRONG>WangAttributeData</STRONG> for an ImageEmbedded annotation. </summary>
      <param name="bounds"> The bounding rectangle of the annotation. </param>
      <param name="dib"> The embedded image data in DIB format. </param>
      <param name="transparent"> A value indicating whether white pixels are rendered as transparent. </param>
      <returns> A <STRONG>WangAttributeData</STRONG> containing the annotation data. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.WangAttributeData.CreateImageReferenceAttribute(System.Drawing.RectangleF,System.String,System.Boolean)">
      <summary> Creates a new instance of <STRONG>WangAttributeData</STRONG> for an ImageReference annotation. </summary>
      <param name="bounds"> The bounding rectangle of the annotation. </param>
      <param name="fileName"> The filename of the image. </param>
      <param name="transparent"> A value indicating whether white pixels are rendered as transparent. </param>
      <returns> A <STRONG>WangAttributeData</STRONG> containing the annotation data. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.WangAttributeData.CreateOcrRegionAttribute(System.Drawing.RectangleF,System.Drawing.Color,Atalasoft.Annotate.AnnotationFont,System.Int32)">
      <summary> Creates a new instance of <STRONG>WangAttributeData</STRONG> for an OCR region annotation. </summary>
      <param name="bounds"> The bounds for the annotation. </param>
      <param name="color1"> The color of the annotation. </param>
      <param name="font"> The font for the annotation. </param>
      <param name="sequenceOrder"> The sequence order for the annotation. </param>
      <returns> A <STRONG>WangAttributeData</STRONG> containing the annotation data. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.WangAttributeData.CreateStraightLineAttribute(System.Drawing.Color,System.Boolean,System.Single,Atalasoft.Annotate.PointFCollection)">
      <summary> Creates a new instance of <STRONG>WangAttributeData</STRONG> for a StraightLine annotation. </summary>
      <param name="color1"> The line color of the annotation. </param>
      <param name="highlighting"> A value indicating whether or not this annotation is a highlighter. </param>
      <param name="lineSize"> The annotation line size. </param>
      <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection" /> containing annotation data points. </param>
      <returns> A <STRONG>WangAttributeData</STRONG> containing the annotation data. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.WangAttributeData.CreateTextFromFileAttribute(System.Drawing.RectangleF,System.Drawing.Color,Atalasoft.Annotate.AnnotationFont,System.String)">
      <summary> Creates a new instance of <STRONG>WantAttributeData</STRONG> for a TextFromFile annotation. </summary>
      <param name="bounds"> The bounding rectangle of the annotation. </param>
      <param name="color1"> The color of the annotation. </param>
      <param name="font"> The font used when rendering text. </param>
      <param name="text"> The text of the annotation. </param>
      <returns> A <STRONG>WangAttributeData</STRONG> containing the annotation data. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.WangAttributeData.CreateTextStampAttribute(System.Drawing.RectangleF,System.Drawing.Color,Atalasoft.Annotate.AnnotationFont,System.String)">
      <summary> Creates a new instance of <STRONG>WangAttributeData</STRONG> for a TextStamp annotation. </summary>
      <param name="bounds"> The bounding rectangle of the annotation. </param>
      <param name="color1"> The color of the annotation. </param>
      <param name="font"> The font used when rendering text. </param>
      <param name="text"> The text of the annotation. </param>
      <returns> A <STRONG>WangAttributeData</STRONG> containing the annotation data. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.WangAttributeData.CreateTypedTextAttribute(System.Drawing.RectangleF,System.Drawing.Color,Atalasoft.Annotate.AnnotationFont,System.String)">
      <summary> Creates a new instance of <STRONG>WangAttributeData</STRONG> for a TypedText annotation. </summary>
      <param name="bounds"> The bounding rectangle of the annotation. </param>
      <param name="color1"> The color of the annotation. </param>
      <param name="font"> The font used when rendering text. </param>
      <param name="text"> The text of the annotation. </param>
      <returns> A <STRONG>WangAttributeData</STRONG> containing the annotation data. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.WangAttributeData.Dib">
      <summary> Gets or sets the image data for embedded image annotations. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.WangAttributeData.FileName">
      <summary> Gets or sets the filename of the image for ImageReference WANG annotations. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.WangAttributeData.Font">
      <summary> Gets or sets the font used for WANG annotations that contain text. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.WangAttributeData.Group"></member>
    <member name="P:Atalasoft.Annotate.WangAttributeData.Highlighting">
      <summary> Gets or sets a value indicating whether the annotation is a highlighter. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.WangAttributeData.ImageTransformation"></member>
    <member name="P:Atalasoft.Annotate.WangAttributeData.LineSize">
      <summary> Gets or sets the size of the annotation lines. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.WangAttributeData.Points">
      <summary> Gets or sets a <see cref="T:Atalasoft.Annotate.PointFCollection" /> containing the points for a StraightLine or FreehandLine
            WANG annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.WangAttributeData.Text">
      <summary> Gets or sets the text for the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.WangAttributeData.Time">
      <summary> Gets or sets the time that the annotation was first saved. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.WangAttributeData.Transparent">
      <summary> Gets or sets a value indicating whether white pixel are rendered as transparent. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.WangAttributeData.Type">
      <summary>The type of WANG annotation.</summary>
    </member>
    <member name="P:Atalasoft.Annotate.WangAttributeData.UnknownType6Data"></member>
    <member name="P:Atalasoft.Annotate.WangAttributeData.Visible">
      <summary> Gets or sets a value indicating if the annotation is visible. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.Converters.AnnotationBrushConverter">
      <summary> This class is a TypeConverter for the <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> object. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Converters.AnnotationBrushConverter.#ctor">
      <summary> Creates a new instance of <STRONG>AnnotationBrushConverter</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Converters.AnnotationBrushConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary> Returns whether this converter can convert an object of the given type to the type of this converter,
            using the specified context. </summary>
      <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
      <param name="sourceType"> A Type that represents the type you want to convert from. </param>
      <returns>
        <para>
          <B>True</B> if this converter can perform the conversion; otherwise, <B>false</B>.</para>
      </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Converters.AnnotationBrushConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
        <para>Returns whether this converter can convert the object to the specified type, using the specified
            context.</para>
      </summary>
      <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
      <param name="destinationType"> A Type that represents the type you want to convert to. </param>
      <returns>
        <para>
          <B>True</B> if this converter can perform the conversion; otherwise, <B>false</B>.</para>
      </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Converters.AnnotationBrushConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary> Converts the given object to the type of this converter, using the specified context and culture
            information. </summary>
      <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
      <param name="culture"> The CultureInfo to use as the current culture. </param>
      <param name="value"> The Object to convert. </param>
      <returns> An Object that represents the converted value. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Converters.AnnotationBrushConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
        <para>Converts the given value object to the specified type, using the specified context and culture
            information.</para>
      </summary>
      <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
      <param name="culture"> A CultureInfo object. If a null reference (Nothing in Visual Basic) is passed, the current
            culture is assumed. </param>
      <param name="value"> The Object to convert. </param>
      <param name="destinationType"> The Type to convert the value parameter to. </param>
      <returns> An Object that represents the converted value. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Converters.AnnotationBrushConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary> Returns a collection of properties for the type of array specified by the value parameter, using the
            specified context and attributes. </summary>
      <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
      <param name="value"> An Object that specifies the type of array for which to get properties. </param>
      <param name="attributes"> An array of type Attribute that is used as a filter. </param>
      <returns> A PropertyDescriptorCollection with the properties that are exposed for this data type, or a null
            reference (Nothing in Visual Basic) if there are no properties. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Converters.AnnotationBrushConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary> Returns whether this object supports properties, using the specified context. </summary>
      <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
      <returns>
        <STRONG>True</STRONG> if GetProperties should be called to find the properties of this object; otherwise,
            false. </returns>
    </member>
    <member name="T:Atalasoft.Annotate.Converters.AnnotationImageConverter">
      <summary> This class is a TypeConverter for the <see cref="T:Atalasoft.Annotate.AnnotationImage" /> object. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Converters.AnnotationImageConverter.#ctor">
      <summary> Creates a new instance of <STRONG>AnnotationImageConverter</STRONG> object. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Converters.AnnotationImageConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary> Returns whether this converter can convert an object of the given type to the type of this converter,
            using the specified context. </summary>
      <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
      <param name="sourceType"> A Type that represents the type you want to convert from. </param>
      <returns>
        <para>
          <B>True</B> if this converter can perform the conversion; otherwise, <B>false</B>.</para>
      </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Converters.AnnotationImageConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary> Converts the given object to the type of this converter, using the specified context and culture
            information. </summary>
      <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
      <param name="culture"> The CultureInfo to use as the current culture. </param>
      <param name="value"> The Object to convert. </param>
      <returns> An Object that represents the converted value. </returns>
    </member>
    <member name="T:Atalasoft.Annotate.Converters.AnnotationPenConverter">
      <summary> This class is a TypeConverter for the <see cref="T:Atalasoft.Annotate.AnnotationPen" /> object. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Converters.AnnotationPenConverter.#ctor">
      <summary> Creates a new instance of <STRONG>AnnotationPenConverter</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Converters.AnnotationPenConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary> Returns whether this converter can convert an object of the given type to the type of this converter,
            using the specified context. </summary>
      <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
      <param name="sourceType"> A Type that represents the type you want to convert from. </param>
      <returns>
        <para>
          <B>True</B> if this converter can perform the conversion; otherwise, <B>false</B>.</para>
      </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Converters.AnnotationPenConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
        <para>Returns whether this converter can convert the object to the specified type, using the specified
            context.</para>
      </summary>
      <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
      <param name="destinationType"> A Type that represents the type you want to convert to. </param>
      <returns>
        <para>
          <B>True</B> if this converter can perform the conversion; otherwise, <B>false</B>.</para>
      </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Converters.AnnotationPenConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary> Converts the given object to the type of this converter, using the specified context and culture
            information. </summary>
      <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
      <param name="culture"> The CultureInfo to use as the current culture. </param>
      <param name="value"> The Object to convert. </param>
      <returns> An Object that represents the converted value. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Converters.AnnotationPenConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
        <para>Converts the given value object to the specified type, using the specified context and culture
            information.</para>
      </summary>
      <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
      <param name="culture"> A CultureInfo object. If a null reference (Nothing in Visual Basic) is passed, the current
            culture is assumed. </param>
      <param name="value"> The Object to convert. </param>
      <param name="destinationType"> The Type to convert the value parameter to. </param>
      <returns> An Object that represents the converted value. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Converters.AnnotationPenConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary> Returns a collection of properties for the type of array specified by the value parameter, using the
            specified context and attributes. </summary>
      <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
      <param name="value"> An Object that specifies the type of array for which to get properties. </param>
      <param name="attributes"> An array of type Attribute that is used as a filter. </param>
      <returns> A PropertyDescriptorCollection with the properties that are exposed for this data type, or a null
            reference (Nothing in Visual Basic) if there are no properties. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Converters.AnnotationPenConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary> Returns whether this object supports properties, using the specified context. </summary>
      <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
      <returns>
        <STRONG>True</STRONG> if GetProperties should be called to find the properties of this object; otherwise,
            false. </returns>
    </member>
    <member name="T:Atalasoft.Annotate.Editors.AnnotationBrushEditor">
      <summary> This class is a UITypeEditor for the <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> object. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Editors.AnnotationBrushEditor.#ctor">
      <summary> Creates a new instance of <STRONG>AnnotationBrushEditor</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Editors.AnnotationBrushEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary> Edits the specified object's value using the editor style indicated by GetEditStyle. </summary>
      <param name="context"> An ITypeDescriptorContext that can be used to gain additional context information. </param>
      <param name="provider"> An IServiceProvider that this editor can use to obtain services. </param>
      <param name="value"> The object to edit. </param>
      <returns> The new value of the object. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Editors.AnnotationBrushEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary> Gets the editor style used by the EditValue method. </summary>
      <param name="context"> An ITypeDescriptorContext that can be used to gain additional context information. </param>
      <returns> A UITypeEditorEditStyle value that indicates the style of editor used by EditValue. If the UITypeEditor
            does not support this method, then GetEditStyle will return None. </returns>
    </member>
    <member name="T:Atalasoft.Annotate.Editors.AnnotationFontEditor">
      <summary> This class is a UITypeEditor for the <see cref="T:Atalasoft.Annotate.AnnotationFont" /> object. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Editors.AnnotationFontEditor.#ctor">
      <summary> Creates a new instance of <STRONG>AnnotationFontEditor</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Editors.AnnotationFontEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary> Edits the specified object's value using the editor style indicated by GetEditStyle. </summary>
      <param name="context"> An ITypeDescriptorContext that can be used to gain additional context information. </param>
      <param name="provider"> An IServiceProvider that this editor can use to obtain services. </param>
      <param name="value"> The object to edit. </param>
      <returns> The new value of the object. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Editors.AnnotationFontEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary> Gets the editor style used by the EditValue method. </summary>
      <param name="context"> An ITypeDescriptorContext that can be used to gain additional context information. </param>
      <returns> A UITypeEditorEditStyle value that indicates the style of editor used by EditValue. If the UITypeEditor
            does not support this method, then GetEditStyle will return None. </returns>
    </member>
    <member name="T:Atalasoft.Annotate.Editors.AnnotationImageEditor">
      <summary> This class is a UITypeEditor for the <see cref="T:Atalasoft.Annotate.AnnotationImage" /> object. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Editors.AnnotationImageEditor.#ctor">
      <summary> Creates a new instance of <STRONG>AnnotationImageEditor</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Editors.AnnotationImageEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary> Edits the specified object's value using the editor style indicated by GetEditStyle. </summary>
      <param name="context"> An ITypeDescriptorContext that can be used to gain additional context information. </param>
      <param name="provider"> An IServiceProvider that this editor can use to obtain services. </param>
      <param name="value"> The object to edit. </param>
      <returns> The new value of the object. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Editors.AnnotationImageEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary> Gets the editor style used by the EditValue method. </summary>
      <param name="context"> An ITypeDescriptorContext that can be used to gain additional context information. </param>
      <returns> A UITypeEditorEditStyle value that indicates the style of editor used by EditValue. If the UITypeEditor
            does not support this method, then GetEditStyle will return None. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Editors.AnnotationImageEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <para>Indicates whether the specified context supports painting a representation of an object's value
            within the specified context.</para>
      </summary>
      <param name="context"> An ITypeDescriptorContext that can be used to gain additional context information. </param>
      <returns>
        <STRONG>True</STRONG> if PaintValue is implemented; otherwise, <STRONG>false</STRONG>. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Editors.AnnotationImageEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
      <summary> Paints a representation of the value of an object using the specified PaintValueEventArgs. </summary>
      <param name="e"> A PaintValueEventArgs that indicates what to paint and where to paint it. </param>
    </member>
    <member name="T:Atalasoft.Annotate.Editors.AnnotationPenEditor">
      <summary> This class is a UITypeEditor for the <see cref="T:Atalasoft.Annotate.AnnotationPen" /> object. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Editors.AnnotationPenEditor.#ctor">
      <summary> Creates a new instance of <STRONG>AnnotationPenEditor</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Editors.AnnotationPenEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary> Edits the specified object's value using the editor style indicated by GetEditStyle. </summary>
      <param name="context"> An ITypeDescriptorContext that can be used to gain additional context information. </param>
      <param name="provider"> An IServiceProvider that this editor can use to obtain services. </param>
      <param name="value"> The object to edit. </param>
      <returns> The new value of the object. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Editors.AnnotationPenEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary> Gets the editor style used by the EditValue method. </summary>
      <param name="context"> An ITypeDescriptorContext that can be used to gain additional context information. </param>
      <returns> A UITypeEditorEditStyle value that indicates the style of editor used by EditValue. If the UITypeEditor
            does not support this method, then GetEditStyle will return None. </returns>
    </member>
    <member name="T:Atalasoft.Annotate.Exporters.AnnotationDataExporter">
      <summary> An abstract base class that encompasses elements for exporting annotations. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Exporters.AnnotationDataExporter.#ctor">
      <summary>Initializes the <see cref="T:Atalasoft.Annotate.Exporters.AnnotationDataExporter" />.</summary>
    </member>
    <member name="P:Atalasoft.Annotate.Exporters.AnnotationDataExporter.CanExport">
      <summary> Gets a value indicating whether or not this <see cref="T:Atalasoft.Annotate.Exporters.AnnotationDataExporter" /> can do a simple
            export. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Exporters.AnnotationDataExporter.CanExportOver">
      <summary> Gets a value indicating whether or not this <see cref="T:Atalasoft.Annotate.Exporters.AnnotationDataExporter" /> can write annotations
            to a stream without affecting existing contents. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Exporters.AnnotationDataExporter.Construct">
      <summary> A factory method to construct a new <see cref="T:Atalasoft.Annotate.Exporters.AnnotationDataExporter" />. </summary>
      <returns> A new <see cref="T:Atalasoft.Annotate.Exporters.AnnotationDataExporter" /> object. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Exporters.AnnotationDataExporter.CopyStream(System.IO.Stream,System.IO.Stream)">
      <summary> Copies the entire source stream to the destination stream. </summary>
      <param name="sourceStream"> A non-null stream with annotation source data </param>
      <param name="destStream"> A non-null stream to which the source data will be copied. </param>
      <exception> Thrown if either stream argument is <c>null</c> (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.Exporters.AnnotationDataExporter.Export(System.IO.Stream,System.IO.Stream,System.Drawing.SizeF,Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi,Atalasoft.Annotate.LayerData,System.Int32)">
      <summary> Exports a single page of annotations to a given stream. </summary>
      <param name="sourceStream"> The original source stream for the document. </param>
      <param name="destStream"> The destination stream for the document. </param>
      <param name="pageSize"> The size of the source page. </param>
      <param name="units"> The units in which the page size is expressed. </param>
      <param name="resolution"> The resolution of the page. </param>
      <param name="layer"> The page of annotations to export. </param>
      <param name="frameIndex"> The page number for exporting. </param>
      <exception> Thrown if <paramref name="sourceStream" /> or <paramref name="destStream" /> is <c>null</c> (Nothing in VB). </exception>
      <exception> Thrown if <paramref name="frameIndex" /> is less than zero. </exception>
      <exception> Thrown if both <see cref="P:Atalasoft.Annotate.Exporters.AnnotationDataExporter.CanExport" /> and <see cref="P:Atalasoft.Annotate.Exporters.AnnotationDataExporter.CanExportOver" /> properties are <c>false</c>. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.Exporters.AnnotationDataExporter.Export(System.IO.Stream,System.IO.Stream,System.Drawing.SizeF[],Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi[],Atalasoft.Annotate.AnnotationDataCollection)">
      <summary> Exports a multiple pages of annotations to a given stream. </summary>
      <param name="sourceStream"> The original source stream for the document. </param>
      <param name="destStream"> The destination stream for the document. </param>
      <param name="pageSizes"> An array of sizes of the source pages. </param>
      <param name="units"> An array of units in which the page sizes are expressed. </param>
      <param name="resolutions"> An array of resolutions of the pages. </param>
      <param name="layers"> A collection of pages of annotations. </param>
      <exception> Thrown if <paramref name="sourceStream" /> or <paramref name="destStream" /> is <c>null</c> (Nothing in VB). </exception>
      <exception> Thrown if both <see cref="P:Atalasoft.Annotate.Exporters.AnnotationDataExporter.CanExport" /> and <see cref="P:Atalasoft.Annotate.Exporters.AnnotationDataExporter.CanExportOver" /> properties are <c>false</c>. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.Exporters.AnnotationDataExporter.ExportOver(System.IO.Stream,System.Drawing.SizeF,Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi,Atalasoft.Annotate.LayerData,System.Int32)">
      <summary> Export a set of annotations over an existing stream. </summary>
      <param name="destStream"> The destination stream for the document. </param>
      <param name="pageSize"> The size of the source page. </param>
      <param name="units"> The units in which the page size is expressed. </param>
      <param name="resolution"> The resolution of the page. </param>
      <param name="layer"> The page of annotations to export. </param>
      <param name="frameIndex"> The page number for exporting. </param>
      <exception> Thrown if <paramref name="destStream" /> is <c>null</c> (Nothing in VB). </exception>
      <exception> Thrown if the <paramref name="frameIndex" /> is less than zero. </exception>
      <exception> Thrown if both <see cref="P:Atalasoft.Annotate.Exporters.AnnotationDataExporter.CanExport" /> and <see cref="P:Atalasoft.Annotate.Exporters.AnnotationDataExporter.CanExportOver" /> properties are <c>false</c>. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.Exporters.AnnotationDataExporter.ExportOver(System.IO.Stream,System.Drawing.SizeF[],Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi[],Atalasoft.Annotate.AnnotationDataCollection)">
      <summary> Export a set of annotations over an existing stream </summary>
      <param name="destStream"> The destination stream for the document. </param>
      <param name="pageSizes"> An array of sizes of the source pages. </param>
      <param name="units"> An array of units in which the page sizes are expressed. </param>
      <param name="resolutions"> An array of resolutions of the pages. </param>
      <param name="layers"> A collection of pages of annotations. </param>
      <exception> Thrown if <paramref paramref="destStream" /> is <c>null</c> (Nothing in VB). </exception>
      <exception> Thrown if both <see cref="P:Atalasoft.Annotate.Exporters.AnnotationDataExporter.CanExport" /> and <see cref="P:Atalasoft.Annotate.Exporters.AnnotationDataExporter.CanExportOver" /> properties are <c>false</c>. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.Exporters.AnnotationDataExporter.IsValidFormat(System.IO.Stream)">
      <summary> Determines if the stream is the correct format. </summary>
      <param name="stm"> A non-null stream. </param>
      <returns> Returns <c>true</c> if the stream contains valid data for this <see cref="T:Atalasoft.Annotate.Exporters.AnnotationDataExporter" />, <c>false</c>
            otherwise. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Exporters.AnnotationDataExporter.LLExport(System.IO.Stream,System.IO.Stream,System.Drawing.SizeF,Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi,Atalasoft.Annotate.LayerData,System.Int32)">
      <summary> Low level implementation of 
            <see cref="M:Atalasoft.Annotate.Exporters.AnnotationDataExporter.Export(System.IO.Stream,System.IO.Stream,System.Drawing.SizeF,Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi,Atalasoft.Annotate.LayerData,System.Int32)" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Exporters.AnnotationDataExporter.LLExport(System.IO.Stream,System.IO.Stream,System.Drawing.SizeF[],Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi[],Atalasoft.Annotate.AnnotationDataCollection)">
      <summary> Low level implementation of 
            <see cref="M:Atalasoft.Annotate.Exporters.AnnotationDataExporter.Export(System.IO.Stream,System.IO.Stream,System.Drawing.SizeF[],Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi[],Atalasoft.Annotate.AnnotationDataCollection)" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Exporters.AnnotationDataExporter.LLExportOver(System.IO.Stream,System.Drawing.SizeF,Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi,Atalasoft.Annotate.LayerData,System.Int32)">
      <summary> Low level implementation of 
            <see cref="M:Atalasoft.Annotate.Exporters.AnnotationDataExporter.ExportOver(System.IO.Stream,System.Drawing.SizeF,Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi,Atalasoft.Annotate.LayerData,System.Int32)" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Exporters.AnnotationDataExporter.LLExportOver(System.IO.Stream,System.Drawing.SizeF[],Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi[],Atalasoft.Annotate.AnnotationDataCollection)">
      <summary> Low level implementation of 
            <see cref="M:Atalasoft.Annotate.Exporters.AnnotationDataExporter.ExportOver(System.IO.Stream,System.Drawing.SizeF[],Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi[],Atalasoft.Annotate.AnnotationDataCollection)" />. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.Formatters.AnnotationDeserializationEventArgs">
      <summary> This class contains information used when deserializing annotations. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Formatters.AnnotationDeserializationEventArgs.#ctor(Atalasoft.Annotate.UI.AnnotationController,System.Runtime.Serialization.IFormatter,System.Object)">
      <summary> Creates a new instance of <STRONG>AnnotationDeserializationEventArgs</STRONG>. </summary>
      <param name="controller"> The <see cref="T:Atalasoft.Annotate.UI.AnnotationController" /> for the annotation. </param>
      <param name="formatter"> The formatter used to deserialize the data. </param>
      <param name="data"> The object resulting from deserialization. </param>
    </member>
    <member name="P:Atalasoft.Annotate.Formatters.AnnotationDeserializationEventArgs.Cancel">
      <summary> Gets or sets a value indicating whether to add this object into the controller. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Formatters.AnnotationDeserializationEventArgs.Controller">
      <summary> Gets the controller being serialized into. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Formatters.AnnotationDeserializationEventArgs.Data">
      <summary> Gets or sets the object that will be added into the controller. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Formatters.AnnotationDeserializationEventArgs.Formatter">
      <summary> Gets the formatter used to deserialize the data. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.Formatters.AnnotationDeserializationEventArgs`1">
      <summary> This class contains information used when deserializing annotations. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Formatters.AnnotationDeserializationEventArgs`1.#ctor(`0,System.Runtime.Serialization.IFormatter,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Annotate.Formatters.AnnotationDeserializationEventArgs`1" /> class</summary>
    </member>
    <member name="P:Atalasoft.Annotate.Formatters.AnnotationDeserializationEventArgs`1.Cancel"></member>
    <member name="P:Atalasoft.Annotate.Formatters.AnnotationDeserializationEventArgs`1.Controller"></member>
    <member name="P:Atalasoft.Annotate.Formatters.AnnotationDeserializationEventArgs`1.Data"></member>
    <member name="P:Atalasoft.Annotate.Formatters.AnnotationDeserializationEventArgs`1.Formatter"></member>
    <member name="T:Atalasoft.Annotate.Formatters.AnnotationDeserializationEventHandler">
      <summary> Used to handle the <see cref="E:Atalasoft.Annotate.UI.AnnotationController.AnnotationDeserialization" /> event. </summary>
      <param name="sender"> The object sending the event. </param>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.Formatters.AnnotationDeserializationEventArgs" /> containing information about this event.
            </param>
    </member>
    <member name="T:Atalasoft.Annotate.Formatters.ILegacyXmpSupport">
      <summary> This interface is used by annotation to support reading from and generating XMP annotation data for
            versions 4 and below of DotAnnotate. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Formatters.ILegacyXmpSupport.FromXmp(System.Xml.XmlTextReader)">
      <summary> Set the annotation property settings. </summary>
      <param name="reader"> The <STRONG>XmlTextReader</STRONG> containing the annotation data. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Formatters.ILegacyXmpSupport.ToXmp(System.Xml.XmlTextWriter)">
      <summary> Generates the XMP data. </summary>
      <param name="writer"> The <STRONG>XmlTextWriter</STRONG> in which to write the data. </param>
    </member>
    <member name="T:Atalasoft.Annotate.Formatters.LegacyXmpFormatter">
      <summary> This class is used to serialize and deserialize XMP annotation data from DotAnnotate 4.0 and earlier.  The
            <see cref="T:Atalasoft.Annotate.Formatters.XmpFormatter" /> will automatically use this class to deserialize when needed. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Formatters.LegacyXmpFormatter.#ctor">
      <summary> Creates a new instance of <STRONG>LegacyXmpFormatter</STRONG> with default options. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Formatters.LegacyXmpFormatter.#ctor(System.Xml.Formatting,System.Int32,System.Boolean,System.Drawing.PointF)">
      <summary> Creates a new instance of <STRONG>LegacyXmpFormatter</STRONG> with the specified property values.
            </summary>
      <param name="formatting"> Indicates how the XML will be formatted. </param>
      <param name="indentation"> The number of spaces for indenting. </param>
      <param name="packet"> Indicates whether to generate an XMP packet.  This is required when the data is embedded into
            an image. </param>
      <param name="resolution"> The resolution of the annotation data. </param>
    </member>
    <member name="P:Atalasoft.Annotate.Formatters.LegacyXmpFormatter.Binder"></member>
    <member name="P:Atalasoft.Annotate.Formatters.LegacyXmpFormatter.Context"></member>
    <member name="P:Atalasoft.Annotate.Formatters.LegacyXmpFormatter.CreateXmpPacket"></member>
    <member name="M:Atalasoft.Annotate.Formatters.LegacyXmpFormatter.Deserialize(System.IO.Stream)"></member>
    <member name="M:Atalasoft.Annotate.Formatters.LegacyXmpFormatter.DeserializeBrush(System.Xml.XmlReader)">
      <summary> Converts XMP data into an <see cref="T:Atalasoft.Annotate.AnnotationBrush" />. </summary>
      <param name="reader"> An <STRONG>XmlReader</STRONG> containing the serialized data. </param>
      <returns> An <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> created from the data. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Formatters.LegacyXmpFormatter.DeserializePen(System.Xml.XmlReader)">
      <summary> Converts XMP data into an <see cref="T:Atalasoft.Annotate.AnnotationPen" />. </summary>
      <param name="reader"> The <STRONG>XmlReader</STRONG> containing the pen data. </param>
      <returns> An <see cref="T:Atalasoft.Annotate.AnnotationPen" /> created from the data. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.Formatters.LegacyXmpFormatter.Formatting"></member>
    <member name="P:Atalasoft.Annotate.Formatters.LegacyXmpFormatter.Indentation"></member>
    <member name="P:Atalasoft.Annotate.Formatters.LegacyXmpFormatter.Resolution"></member>
    <member name="M:Atalasoft.Annotate.Formatters.LegacyXmpFormatter.Serialize(System.IO.Stream,System.Object)"></member>
    <member name="M:Atalasoft.Annotate.Formatters.LegacyXmpFormatter.SerializeBrush(System.Xml.XmlTextWriter,Atalasoft.Annotate.AnnotationBrush,System.String)">
      <summary> Converts an <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> into XMP data. </summary>
      <param name="writer"> The <STRONG>XmlTextWriter</STRONG> to write the serialized data into. </param>
      <param name="brush"> The brush to convert. </param>
      <param name="tagName"> The name of the tag to give the brush data. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Formatters.LegacyXmpFormatter.SerializePen(System.Xml.XmlTextWriter,Atalasoft.Annotate.AnnotationPen)">
      <summary> Converts an <see cref="T:Atalasoft.Annotate.AnnotationPen" /> into XMP data. </summary>
      <param name="writer"> The <STRONG>XmlTextWriter</STRONG> to write the data into. </param>
      <param name="pen"> The pen to convert. </param>
    </member>
    <member name="P:Atalasoft.Annotate.Formatters.LegacyXmpFormatter.SurrogateSelector"></member>
    <member name="T:Atalasoft.Annotate.Formatters.WangAnnotationSerializationEventArgs">
      <summary> This class contains information used for WANG serialization. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Formatters.WangAnnotationSerializationEventArgs.#ctor(Atalasoft.Annotate.WangAttributeData)">
      <summary> Creates a new instance of <STRONG>WangAnnotationSerializationEventArgs</STRONG>. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.WangAttributeData" /> being deserialized. </param>
    </member>
    <member name="P:Atalasoft.Annotate.Formatters.WangAnnotationSerializationEventArgs.Annotation">
      <summary> Gets or sets the annotation related to the serialization process. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Formatters.WangAnnotationSerializationEventArgs.AnnotationData">
      <summary> Gets or sets the <STRONG>AnnotationData</STRONG> related to the serialization process. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Formatters.WangAnnotationSerializationEventArgs.Data">
      <summary> Gets the <see cref="T:Atalasoft.Annotate.WangAttributeData" /> for the annotation during deserialization. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.Formatters.WangFormatter">
      <summary> The <STRONG>WangFormatter</STRONG> converts annotation data to and from WANG format. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Formatters.WangFormatter.#ctor">
      <summary> Creates a new instance of <STRONG>WangFormatter</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Formatters.WangFormatter.#ctor(System.Drawing.PointF)">
      <summary> Creates a new instance of <STRONG>WangFormatter</STRONG> specifying the viewer resolution. </summary>
      <param name="resolution"> The resolution of the viewer. </param>
    </member>
    <member name="P:Atalasoft.Annotate.Formatters.WangFormatter.Binder">
      <summary> Gets or sets the <see cref="T:System.Runtime.Serialization.SerializationBinder" /> that performs type lookups during deserialization.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Formatters.WangFormatter.Context">
      <summary> Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext" /> used for serialization and deserialization. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Formatters.WangFormatter.Deserialize(System.IO.Stream)">
      <summary> Deserializes WANG data into a <see cref="T:Atalasoft.Annotate.LayerData" /> object. </summary>
      <param name="serializationStream"> A stream containing WANG annotation data. </param>
      <returns> A <see cref="T:Atalasoft.Annotate.LayerData" /> object containing the annotations. </returns>
    </member>
    <member name="E:Atalasoft.Annotate.Formatters.WangFormatter.DeserializeAnnotation">
      <summary> Raised when an annotation is being deserialized. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Formatters.WangFormatter.OnDeserialize(Atalasoft.Annotate.Formatters.WangAnnotationSerializationEventArgs)">
      <summary> Called when an annotation is being deserialized. </summary>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.Formatters.WangAnnotationSerializationEventArgs" /> containing the <see cref="T:Atalasoft.Annotate.WangAttributeData" />
            being deserialized. </param>
    </member>
    <member name="P:Atalasoft.Annotate.Formatters.WangFormatter.Resolution">
      <summary> Gets or sets the document resolution used by the <see cref="T:Atalasoft.DotImage.Annotate.AnnotateViewer" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Formatters.WangFormatter.Serialize(System.IO.Stream,System.Object)">
      <summary>Serializes annotations into WANG format.</summary>
      <param name="serializationStream">The stream where serialized data will be stored.</param>
      <param name="graph">The object to serialize.</param>
    </member>
    <member name="P:Atalasoft.Annotate.Formatters.WangFormatter.SurrogateSelector">
      <summary> Gets or sets the <see cref="P:Atalasoft.Annotate.Formatters.WangFormatter.SurrogateSelector" /> used by the current formatter. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Formatters.WangFormatter.WriteUnsupportedAnnotation(System.IO.Stream,Atalasoft.Annotate.AnnotationData,System.String,System.Int32)">
      <summary> Called when an <see cref="T:Atalasoft.Annotate.AnnotationData" /> object being serialized does not implement the <see cref="T:Atalasoft.Annotate.IWangCompatible" /> interface. </summary>
      <param name="stream"> The stream where annotation data will be stored. </param>
      <param name="annotation"> The <see cref="T:Atalasoft.Annotate.AnnotationData" /> object to serialize. </param>
      <param name="group"> The group name for this annotation. This is saved as the OiGroup marker. </param>
      <param name="index"> The index for this annotation. This is saved as the OiIndex marker. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Formatters.WangFormatter.WriteUnsupportedObject(System.IO.Stream,System.Object)">
      <summary>Called when an unsupported object needs to be serialized.</summary>
      <param name="stream">The stream where annotation data will be stored.</param>
      <param name="graph">The object to serialize.</param>
    </member>
    <member name="M:Atalasoft.Annotate.Formatters.WangFormatter.WriteWangAnnotation(System.IO.Stream,Atalasoft.Annotate.IWangCompatible,System.String,System.Int32)">
      <summary> Called to write a WANG compatible annotation to the serialization stream. </summary>
      <param name="stream"> The stream where this data will be stored. </param>
      <param name="wang"> An <see cref="T:Atalasoft.Annotate.IWangCompatible" /> object to serialize. </param>
      <param name="group"> The name of the group for this annotation. This is saved as the OiGroup marker. </param>
      <param name="index"> The index for this annotation. This is saved as the OiIndex marker. </param>
    </member>
    <member name="T:Atalasoft.Annotate.Formatters.WangFormatter.WangImageAnnotationImageAttributes"></member>
    <member name="F:Atalasoft.Annotate.Formatters.WangFormatter.WangImageAnnotationImageAttributes.bReserved1"></member>
    <member name="F:Atalasoft.Annotate.Formatters.WangFormatter.WangImageAnnotationImageAttributes.bReserved2"></member>
    <member name="F:Atalasoft.Annotate.Formatters.WangFormatter.WangImageAnnotationImageAttributes.nHRes"></member>
    <member name="F:Atalasoft.Annotate.Formatters.WangFormatter.WangImageAnnotationImageAttributes.nOrigHRes"></member>
    <member name="F:Atalasoft.Annotate.Formatters.WangFormatter.WangImageAnnotationImageAttributes.nOrigVRes"></member>
    <member name="F:Atalasoft.Annotate.Formatters.WangFormatter.WangImageAnnotationImageAttributes.nReserved"></member>
    <member name="F:Atalasoft.Annotate.Formatters.WangFormatter.WangImageAnnotationImageAttributes.nVRes"></member>
    <member name="F:Atalasoft.Annotate.Formatters.WangFormatter.WangImageAnnotationImageAttributes.rotation"></member>
    <member name="F:Atalasoft.Annotate.Formatters.WangFormatter.WangImageAnnotationImageAttributes.scale"></member>
    <member name="T:Atalasoft.Annotate.Formatters.XmpFormatter">
      <summary> This class converts objects into XMP data to be embedded into images or saved as standalone files.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Formatters.XmpFormatter.#ctor">
      <summary> Creates a new instance of <STRONG>XmpFormatter</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Formatters.XmpFormatter.#ctor(System.Xml.Formatting,System.Int32,System.Boolean,System.Boolean)">
      <summary> Creates a new instance of <STRONG>XmpFormatter</STRONG> specifying formatting, indentation, whether or not
            data should be formatted as an XMP packet and whether to <see cref="P:Atalasoft.Annotate.Formatters.XmpFormatter.SkipUnknownObjects" />. </summary>
      <param name="formatting"> Specifies formatting options for the XmlTextWriter. </param>
      <param name="indentation"> The number of characters to use for indentation. </param>
      <param name="packet"> Indicates if the data should be formatted as an XMP packet. </param>
      <param name="skipUnknownObjects"> Indicates if the formatter should ignore unknown objects or raise an exception.
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.Formatters.XmpFormatter.#ctor(System.Xml.Formatting,System.Int32,System.Boolean,System.Boolean,System.Drawing.PointF)">
      <summary> Creates a new instance of <STRONG>XmpFormatter</STRONG> specifying formatting, indentation, whether or not
            data should be formatted as an XMP packet, whether to <see cref="P:Atalasoft.Annotate.Formatters.XmpFormatter.SkipUnknownObjects" />, and a resolution.
            </summary>
      <param name="formatting"> Specifies formatting options for the XmlTextWriter. </param>
      <param name="indentation"> The number of characters to use for indentation. </param>
      <param name="packet"> Indicates if the data should be formatted as an XMP packet. </param>
      <param name="skipUnknownObjects"> Indicates if the formatter should ignore unknown objects or raise an exception.
            </param>
      <param name="resolution"> The resolution of the annotations. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Formatters.XmpFormatter.#ctor(System.Xml.Formatting,System.Int32,System.Text.Encoding,System.Boolean,System.Boolean,System.Drawing.PointF)">
      <summary> Creates a new instance of <STRONG>XmpFormatter</STRONG> specifying formatting, indentation, encoding,
            whether or not data should be formatted as an XMP packet, whether to <see cref="P:Atalasoft.Annotate.Formatters.XmpFormatter.SkipUnknownObjects" />, and a
            resolution. </summary>
      <param name="formatting"> Specifies formatting options for the XmlTextWriter. </param>
      <param name="indentation"> The number of characters to use for indentation. </param>
      <param name="encoding">
        <para>The <STRONG>System.Text.Encoding</STRONG> to use when serializing the
            annotations.</para>
      </param>
      <param name="packet"> Indicates if the data should be formatted as an XMP packet. </param>
      <param name="skipUnknownObjects"> Indicates if the formatter should ignore unknown objects or raise an exception.
            </param>
      <param name="resolution"> The resolution of the annotations. </param>
    </member>
    <member name="P:Atalasoft.Annotate.Formatters.XmpFormatter.AnnotationDataVersion">
      <summary> Gets the annotation version </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Formatters.XmpFormatter.Binder">
      <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.SerializationBinder" /> that performs type lookups during deserialization.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Formatters.XmpFormatter.Context">
      <summary> Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext" /> used for serialization
            and deserialization. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Formatters.XmpFormatter.CreateXmpPacket">
      <summary>
            Gets or sets a value indicating whether full XMP is generated or an XMP
            packet.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Formatters.XmpFormatter.Deserialize(System.IO.Stream)">
      <summary>Deserializes XMP data back into the original objects.</summary>
      <param name="serializationStream">A stream containing XMP formatted data.</param>
      <returns>The deserialized object.</returns>
      <exception cref="T:System.ArgumentNullException">Thrown if the serializationStream parameter is null.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if there are any errors during the deserialization process.</exception>
    </member>
    <member name="P:Atalasoft.Annotate.Formatters.XmpFormatter.Encoding">
      <summary> Gets or sets the <STRONG>System.Text.Encoding</STRONG> to use when serializing the annotation data.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Formatters.XmpFormatter.Formatting">
      <summary>Gets or sets the type of XML formatting used when serializing data.</summary>
    </member>
    <member name="P:Atalasoft.Annotate.Formatters.XmpFormatter.Indentation">
      <summary>Gets or sets the number of spaces to indent the data when serializing.</summary>
    </member>
    <member name="P:Atalasoft.Annotate.Formatters.XmpFormatter.Resolution">
      <summary> Gets or sets the resolution of the annotation data. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Formatters.XmpFormatter.Serialize(System.IO.Stream,System.Object)">
      <summary>Serializes an object into XMP data.</summary>
      <param name="serializationStream">The stream where the XMP data will be stored.</param>
      <param name="graph">The object to serialize.</param>
      <exception cref="T:System.ArgumentNullException">Thrown if the serializationStream or graph parameter is null.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if there is an error during the serialization process.</exception>
    </member>
    <member name="P:Atalasoft.Annotate.Formatters.XmpFormatter.SkipUnknownObjects">
      <summary>
            Gets or sets a value indicating whether objects that cannot be created are
            skipped instead of throwing an exception.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Formatters.XmpFormatter.SurrogateSelector">
      <summary>
            Gets or sets the <see cref="P:Atalasoft.Annotate.Formatters.XmpFormatter.SurrogateSelector" /> used by the current formatter.
            </summary>
    </member>
    <member name="T:Atalasoft.Annotate.Icons.AnnotateIcon">
      <summary> Specifies which image to extract with the <see cref="M:Atalasoft.Annotate.Icons.IconResource.ExtractAnnotationIcon(Atalasoft.Annotate.Icons.AnnotateIcon,Atalasoft.Annotate.Icons.AnnotateIconSize)" /> method.
            </summary>
    </member>
    <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.Ellipse"></member>
    <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.Freehand"></member>
    <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.FreehandHighlighter"></member>
    <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.Line"></member>
    <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.Lines"></member>
    <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.Polygon"></member>
    <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.Protractor"></member>
    <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.Rectangle"></member>
    <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.RectangleHighlighter"></member>
    <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.Redact"></member>
    <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.RubberStamp"></member>
    <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.Ruler"></member>
    <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.StickyNote"></member>
    <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.Text"></member>
    <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.FreehandHotspot"></member>
    <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.Callout"></member>
    <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.RectangleHotspot"></member>
    <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.EmbeddedImage"></member>
    <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.ReferencedImage"></member>
    <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.PdfLine"></member>
    <member name="F:Atalasoft.Annotate.Icons.AnnotateIcon.PdfMarkup"></member>
    <member name="T:Atalasoft.Annotate.Icons.AnnotateIconSize">
      <summary> Specifies the image size to extract with <see cref="M:Atalasoft.Annotate.Icons.IconResource.ExtractAnnotationIcon(Atalasoft.Annotate.Icons.AnnotateIcon,Atalasoft.Annotate.Icons.AnnotateIconSize)" />. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.Icons.AnnotateIconSize.Size16">
      <summary> A 16 x 16 pixel image. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.Icons.AnnotateIconSize.Size24">
      <summary> A 24 x 24 pixel image. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.Icons.AnnotateIconSize.Size32">
      <summary> A 32 x 32 pixel image. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.Icons.IconResource">
      <summary> This class can be used to extract annotation icon images from the <STRONG>DotImage</STRONG> assembly.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Icons.IconResource.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Annotate.Icons.IconResource" /> class</summary>
    </member>
    <member name="M:Atalasoft.Annotate.Icons.IconResource.ExtractAnnotationIcon(Atalasoft.Annotate.Icons.AnnotateIcon,Atalasoft.Annotate.Icons.AnnotateIconSize)">
      <summary> Extracts an image from the <STRONG>DotImage</STRONG> assembly. </summary>
      <param name="icon"> The image to extract. </param>
      <param name="size"> The size of the image to extract. </param>
    </member>
    <member name="T:Atalasoft.Annotate.Importers.AnnotationDataImporter">
      <summary>
        <STRONG>AnnotationDataImporter</STRONG> is an abstract base class used to define how annotations are
            imported from arbitrary data files into DotImage. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Annotate.Importers.AnnotationDataImporter" /> class</summary>
    </member>
    <member name="E:Atalasoft.Annotate.Importers.AnnotationDataImporter.AnnotationImported">
      <summary> Raised after a single annotation has been imported. </summary>
    </member>
    <member name="E:Atalasoft.Annotate.Importers.AnnotationDataImporter.AnnotationPageImported">
      <summary> Raised after a page of annotations has been imported. </summary>
    </member>
    <member name="E:Atalasoft.Annotate.Importers.AnnotationDataImporter.AnnotationPageImporting">
      <summary> Raised before a page of annotations will be imported. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Importers.AnnotationDataImporter.FailsafeAnnotationFactory">
      <summary> Gets or sets a delegate that is used to create annotations if an importer is unable to do so. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.FromStream(System.IO.Stream)">
      <summary> Constructs a new annotation importer associated with a given stream. </summary>
      <param name="stm"> A non-null stream containing annotation data. </param>
      <returns> A new annotation importer for importing annotations. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.GetAnnotationCount(System.Int32)">
      <summary> Returns the number of annotations on a conceptual page of a document. </summary>
      <param name="page"> page is an integer that represents the conceptual zero based page index of a document.  It will
            be range checked against the total number of pages in the document. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.Import">
      <summary> Imports all annotations as <see cref="T:Atalasoft.Annotate.AnnotationDataCollection" />. </summary>
      <returns> A new <see cref="T:Atalasoft.Annotate.AnnotationDataCollection" /> object representing annotations for the entire document. 
            Each <see cref="T:Atalasoft.Annotate.LayerData" /> within the collection represents one page of annotations.  If a page has no
            annotations, the <see cref="T:Atalasoft.Annotate.LayerData" /> will be non-null, but empty. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.Import(System.Int32)">
      <summary> Imports a page of annotations as <see cref="T:Atalasoft.Annotate.LayerData" />. </summary>
      <param name="page"> The zero-based page from which annotations will be imported.  page is range checked against the
            document. </param>
      <returns> A <see cref="T:Atalasoft.Annotate.LayerData" /> containing a set of annotations from the page. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.Import(System.Int32,System.Int32)">
      <summary> Imports a single annotation from a given page of annotations. </summary>
      <param name="page"> The zero-based page from which annotations will be imported.  page is range checked against the
            document. </param>
      <param name="annotIndex"> The zero-based annotation which will be imported.  annotIndex is range checked against the
            number of annotations of the page.  The number of annotations on a page is available through <see cref="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.GetAnnotationCount(System.Int32)" />. </param>
      <returns> A single <see cref="T:Atalasoft.Annotate.AnnotationData" /> object representing the imported annotation. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.IsValidFormat(System.IO.Stream)">
      <summary> Indicates whether or not an <STRONG>AnnotationDataImporter</STRONG> can recognize a particular data
            format. </summary>
      <param name="stm"> A non-null stream used to recognize file format. </param>
      <returns> true indicates that the <STRONG>AnnotationDataImporter</STRONG> recognizes this format. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.Importers.AnnotationDataImporter.LastErrors">
      <summary> Gets a collection of strings representing errors encountered while importing annotations. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.LLGetAnnotationCount(System.Int32)">
      <summary> Low level implementation of <see cref="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.GetAnnotationCount(System.Int32)" />. </summary>
      <param name="page"> A zero-based integer representing the page from which the annotations are being counted.  Page
            will always be in range. </param>
      <returns> An integer representing the number of annotations on the page. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.LLGetPageCount">
      <summary> The low-level implementation of <see cref="P:Atalasoft.Annotate.Importers.AnnotationDataImporter.PageCount" />. </summary>
      <returns> Returns the number of pages in the document. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.LLImport(System.Int32)">
      <summary> Imports all annotations as a <see cref="T:Atalasoft.Annotate.LayerData" /> object. </summary>
      <param name="page"> The zero-based page from which annotations will be imported.  page is range checked against the
            document. </param>
      <returns> A <see cref="T:Atalasoft.Annotate.LayerData" /> containing a set of annotations from the page. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.LLImport(System.Int32,System.Int32)"></member>
    <member name="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.LLLoad">
      <summary> The low-level implementation of <see cref="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.Load" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.Load">
      <summary> The load method is used to allow an <STRONG>AnnotationDataImporter</STRONG> to load and to possibly cache
            annotations. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.OnAnnotationImported(Atalasoft.Annotate.Importers.AnnotationDataImportEventArgs)">
      <summary> Raises the <see cref="E:Atalasoft.Annotate.Importers.AnnotationDataImporter.AnnotationImported" /> event. </summary>
      <param name="e"> The <see cref="T:Atalasoft.Annotate.Importers.AnnotationDataImportEventArgs" /> for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.OnAnnotationPageImported(Atalasoft.Annotate.Importers.AnnotationDataPageImportEventArgs)">
      <summary> Raises the <see cref="E:Atalasoft.Annotate.Importers.AnnotationDataImporter.AnnotationPageImported" /> event. </summary>
      <param name="e"> The <see cref="T:Atalasoft.Annotate.Importers.AnnotationDataPageImportEventArgs" /> for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.AnnotationDataImporter.OnAnnotationPageImporting(Atalasoft.Annotate.Importers.AnnotationDataPageImportEventArgs)">
      <summary> Raises the <see cref="E:Atalasoft.Annotate.Importers.AnnotationDataImporter.AnnotationPageImporting" /> event. </summary>
      <param name="e"> The <see cref="T:Atalasoft.Annotate.Importers.AnnotationDataPageImportEventArgs" /> for this event. </param>
    </member>
    <member name="P:Atalasoft.Annotate.Importers.AnnotationDataImporter.PageCount">
      <summary> Gets the total number of pages in a document. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Importers.AnnotationDataImporter.Resolution">
      <summary> Gets or sets the target resolution for the annotations. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Importers.AnnotationDataImporter.ThrowOnError">
      <summary> Gets or sets whether or not the importer will throw or suppress exceptions. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Importers.AnnotationDataImporter.Units">
      <summary> Gets or sets the units of the target for the annotations. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.Importers.AnnotationDataImporterFactory">
      <summary> A delegate for constructing annotations from data that a given <see cref="T:Atalasoft.Annotate.Importers.AnnotationDataImporter" />
            doesn't understand. </summary>
      <param name="importer"> The <see cref="T:Atalasoft.Annotate.Importers.AnnotationDataImporter" /> that attempted to import the annotation. </param>
      <param name="location"> The location on the target page where the annotation will go. </param>
      <param name="data"> The data used to construct the annotation. </param>
      <returns> A new AnnotationData object or null.  If the delegate returns null, this annotation is ignored. </returns>
    </member>
    <member name="T:Atalasoft.Annotate.Importers.AnnotationDataImportEventArgs">
      <summary> An object representing information about an annotation being imported. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.AnnotationDataImportEventArgs.#ctor(Atalasoft.Annotate.Importers.AnnotationDataImporter,Atalasoft.Annotate.AnnotationData,System.Int32,System.Int32)">
      <summary> Constructs a new <STRONG>AnnotationDataImportEventArgs</STRONG> object. </summary>
      <param name="importer"> The <see cref="T:Atalasoft.Annotate.Importers.AnnotationDataImporter" /> that has imported the annotation. </param>
      <param name="annotation"> The <see cref="T:Atalasoft.Annotate.AnnotationData" /> object that was imported. </param>
      <param name="page"> The page from which the <see cref="T:Atalasoft.Annotate.AnnotationData" /> object was imported. </param>
      <param name="annotIndex"> The index on the page of the <see cref="T:Atalasoft.Annotate.AnnotationData" /> object. </param>
    </member>
    <member name="P:Atalasoft.Annotate.Importers.AnnotationDataImportEventArgs.Annotation">
      <summary> Gets the annotation that was imported. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Importers.AnnotationDataImportEventArgs.AnnotationIndex">
      <summary> Gets the index on the page of the <see cref="T:Atalasoft.Annotate.AnnotationData" /> object. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Importers.AnnotationDataImportEventArgs.Importer">
      <summary> Gets the <see cref="T:Atalasoft.Annotate.Importers.AnnotationDataImporter" /> that has imported the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Importers.AnnotationDataImportEventArgs.Page">
      <summary> Gets the page from which the <see cref="T:Atalasoft.Annotate.AnnotationData" /> object was imported. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.Importers.AnnotationDataImportEventHandler">
      <summary> A delegate called after annotation data has been imported. </summary>
      <param name="sender"> The importer being used. </param>
      <param name="args"> An <see cref="T:Atalasoft.Annotate.Importers.AnnotationDataImportEventArgs" /> containing information about the imported data.
            </param>
    </member>
    <member name="T:Atalasoft.Annotate.Importers.AnnotationDataPageImportEventArgs">
      <summary> An object representing information about a page of annotations being imported. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.AnnotationDataPageImportEventArgs.#ctor(Atalasoft.Annotate.Importers.AnnotationDataImporter,Atalasoft.Annotate.LayerData,System.Int32)">
      <summary> Constructs a new <STRONG>AnnotationDataPageImportEventArgs</STRONG> object. </summary>
      <param name="importer"> The <see cref="T:Atalasoft.Annotate.Importers.AnnotationDataImporter" /> importing the page. </param>
      <param name="layer"> The layer of annotations imported. </param>
      <param name="page"> The page number of the annotations being imported. </param>
    </member>
    <member name="P:Atalasoft.Annotate.Importers.AnnotationDataPageImportEventArgs.Importer">
      <summary> Gets the AnnotationDataImporter used to import the annotations. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Importers.AnnotationDataPageImportEventArgs.Layer">
      <summary> Gets the layer of annotations imported. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Importers.AnnotationDataPageImportEventArgs.Page">
      <summary> Gets the page number of the annotations being imported. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.Importers.AnnotationDataPageImportEventHandler">
      <summary> A delegate called for each page imported. </summary>
      <param name="sender"> The importer used. </param>
      <param name="args"> An <see cref="T:Atalasoft.Annotate.Importers.AnnotationDataPageImportEventArgs" /> containing information about the page that
            was imported. </param>
    </member>
    <member name="T:Atalasoft.Annotate.Importers.XmpAnnotationDataImporter">
      <summary> An object for importing annotations from a stream of XMP data. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.XmpAnnotationDataImporter.#ctor">
      <summary> Creates a new instance of <STRONG>XmpAnnotationDataImporter</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.XmpAnnotationDataImporter.#ctor(System.IO.Stream)">
      <summary> Creates a new instance of <STRONG>XmpAnnotationDataImporter</STRONG> with a stream of XMP data. </summary>
      <param name="stm"> A stream from which annotations will be imported. </param>
      <exception> Thrown if the stm argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.XmpAnnotationDataImporter.FromStream(System.IO.Stream)">
      <summary> Constructs a new <STRONG>XmpAnnotationDataImporter</STRONG> for the given stream. </summary>
      <param name="stm"> A non-null stream containing XMP data. </param>
      <exception> Thrown if the stm argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.XmpAnnotationDataImporter.IsValidFormat(System.IO.Stream)">
      <summary> Indicates if the stream contains XMP data. </summary>
      <param name="stm"> A non-null stream containing XMP data </param>
      <returns> Returns true if the stream contains XMP data; false otherwise. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Importers.XmpAnnotationDataImporter.LLGetAnnotationCount(System.Int32)"></member>
    <member name="M:Atalasoft.Annotate.Importers.XmpAnnotationDataImporter.LLGetPageCount"></member>
    <member name="M:Atalasoft.Annotate.Importers.XmpAnnotationDataImporter.LLImport(System.Int32)"></member>
    <member name="M:Atalasoft.Annotate.Importers.XmpAnnotationDataImporter.LLImport(System.Int32,System.Int32)"></member>
    <member name="M:Atalasoft.Annotate.Importers.XmpAnnotationDataImporter.LLLoad"></member>
    <member name="T:Atalasoft.Annotate.Renderer.AnnotationRenderers">
      <summary> This class holds all of the annotation renderers used for drawing the annotations. When a custom
            annotation is created, its <see cref="T:Atalasoft.Annotate.Renderer.IAnnotationRenderer" /> should be added to this collection to allow the <see cref="T:Atalasoft.Annotate.UI.AnnotationController" /> to render the object. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderers.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Annotate.Renderer.AnnotationRenderers" /> class</summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderers.Add(System.Type,Atalasoft.Annotate.Renderer.IAnnotationRenderer)">
      <summary> Adds or replaces a rendering engine for the specified type. </summary>
      <param name="type"> The type of the annotation data this renderer will handle. </param>
      <param name="renderer"> A class that will act as the renderer for this type. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderers.Get(System.Type)">
      <summary> Gets the rendering engine for a specific type. </summary>
      <param name="type"> The annotation data type to look up. </param>
      <returns> The renderer for this annotation data or a <see cref="T:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine" /> if a renderer is not
            found. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderers.GetAnnotationDataTypes">
      <summary> Returns a list of all <see cref="T:Atalasoft.Annotate.AnnotationData" /> types registered in the
            <STRONG>AnnotationRenderers</STRONG> table. </summary>
      <returns> An array of <STRONG>Type</STRONG> for the <see cref="T:Atalasoft.Annotate.AnnotationData" /> renderers that are currently
            registered. </returns>
    </member>
    <member name="T:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine">
      <summary> This class is the fallback rendering engine used when a specific rendering engine for an annotation can't
            be found. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.#ctor">
      <summary> Creates a new instance of <STRONG>AnnotationRenderingEngine</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.BurnTranslucentAnnotation(Atalasoft.Annotate.Renderer.RenderEnvironment,System.Drawing.RectangleF,System.Drawing.Color,Atalasoft.Annotate.AnnotationImage)">
      <summary> This method is used to burn translucent (highlighter) annotations onto an image. </summary>
      <param name="environment"> The RenderEnvironment containing the image to burn onto. </param>
      <param name="bounds"> The bounding rectangle where the annotation will be placed. </param>
      <param name="color"> The color of the highlighter. </param>
      <param name="mask"> A mask image used to apply the highlight effect. </param>
      <exception> Thrown if the Image or ImageObject property of the RenderEnvironment is null (Nothing in VB).
            </exception>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.CorrectRectangle(System.Drawing.RectangleF)">
      <summary> Corrects negative width and height values for the rectangle. </summary>
      <param name="rect"> The rectangle to correct. </param>
      <returns> A new RectangleF with corrected values. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.CreateBrush(Atalasoft.Annotate.AnnotationBrush)">
      <summary> Converts an <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> into a System.Drawing.Brush object. </summary>
      <param name="annBrush"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> to convert. </param>
      <returns> A System.Drawing.Brush </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.CreateFont(Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> Converts an <see cref="T:Atalasoft.Annotate.AnnotationFont" /> into a System.Drawing.Font object. </summary>
      <param name="annFont"> The <see cref="T:Atalasoft.Annotate.AnnotationFont" /> to convert. </param>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> that will be used with this Font. </param>
      <returns> A System.Drawing.Font. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.CreatePen(Atalasoft.Annotate.AnnotationPen)">
      <summary> Converts an <see cref="T:Atalasoft.Annotate.AnnotationPen" /> into a System.Drawing.Pen object. </summary>
      <param name="annPen"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> to convert. </param>
      <returns> A System.Drawing.Pen. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.GetTranslucentHandle(Atalasoft.Annotate.Renderer.RenderEnvironment,System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush)">
      <summary> Returns a GDI HDC used for rendering the translucent effect. </summary>
      <param name="e"> The <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> used. </param>
      <param name="annotationBounds"> A bounding rectangle for the annotation. </param>
      <param name="pen"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used for drawing lines. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for filling objects. </param>
      <returns> An HDC that can be used for rendering the translucent area. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.GripRenderer"></member>
    <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.ReleaseTranslucentHandle(Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> Release the HDC and drawing objects created with <see cref="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.GetTranslucentHandle(Atalasoft.Annotate.Renderer.RenderEnvironment,System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush)" />. </summary>
      <param name="e"> The <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> used. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> Called to render an annotation. </summary>
      <param name="annotation"> The annotation to render. </param>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> containing information used for rendering. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.RenderGrips(Atalasoft.Annotate.UI.IAnnotationGrips,Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> This method renders the grips for annotations. </summary>
      <param name="grips"> The grips to render. </param>
      <param name="annotation"> The annotation associated with the grips. </param>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> containing information used for rendering. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.RenderGrips(Atalasoft.Annotate.UI.IAnnotationGrips,Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment,System.Drawing.PointF)">
      <summary> This method is used to render the annotation grips.  The public <see cref="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.RenderGrips(Atalasoft.Annotate.UI.IAnnotationGrips,Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)" /> method calls into
            this protected method to perform the actual rendering. </summary>
      <param name="grips"> The grips to render. </param>
      <param name="annotation"> The annotation associated with the grips. </param>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> containing information used for rendering. </param>
      <param name="scale"> The scaling that must be applied to the grip positions.  Grip sizes should not scale, only
            their positions. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.RenderLineCap(System.Drawing.PointF,System.Drawing.PointF,Atalasoft.Annotate.AnnotationLineCap,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> Renders an <see cref="T:Atalasoft.Annotate.AnnotationLineCap" /> with a fill. </summary>
      <param name="startingPoint"> The starting point of the line. </param>
      <param name="endingPoint"> The ending point of the line.  The line cap will be rendered at this point. </param>
      <param name="lineCap"> The <see cref="T:Atalasoft.Annotate.AnnotationLineCap" /> to render. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the line cap. </param>
      <param name="pen"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> for this line cap. </param>
      <param name="e"> The <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> used to render the line cap. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.RenderLineCap(System.Drawing.PointF,System.Drawing.PointF,Atalasoft.Annotate.AnnotationLineCap,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> Renders an <see cref="T:Atalasoft.Annotate.AnnotationLineCap" /> without a fill. </summary>
      <param name="startingPoint"> The starting point of the line. </param>
      <param name="endingPoint"> The ending point of the line.  The line cap will be rendered at this point. </param>
      <param name="lineCap"> The <see cref="T:Atalasoft.Annotate.AnnotationLineCap" /> to render. </param>
      <param name="pen"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> for this line cap. </param>
      <param name="e"> The <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> used to render the line cap. </param>
    </member>
    <member name="F:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.RenderLock"></member>
    <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.RenderLockImage(Atalasoft.Annotate.AnnotationImage,System.Drawing.PointF,Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> Renders a small image at the specified point. </summary>
      <param name="image"> The image to render. </param>
      <param name="location"> The location where the image is placed. </param>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> containing information used for rendering. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.RenderLockImage(Atalasoft.Annotate.AnnotationImage,System.Drawing.RectangleF,Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> Renders a small image, centered in the annotation bounds, used to indicate that an annotation is locked.
            </summary>
      <param name="image"> The image to render. </param>
      <param name="annotationBounds"> The bounding rectangle of the annotation. </param>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> containing information used for rendering. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.RenderTranslucentPointsAnnotation(Atalasoft.Annotate.PointBaseData,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.Renderer.RenderEnvironment,System.Boolean)">
      <summary> Renders a point based translucent annotation. </summary>
      <param name="data"> The annotation to render.  This must derive from <see cref="T:Atalasoft.Annotate.PointBaseData" />. </param>
      <param name="outline"> The outline pen used. </param>
      <param name="fill"> The fill used. </param>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> containing information used when rendering. </param>
      <param name="closeFigure"> Indicates whether the points should form a closed figure. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.RenderTranslucentPointsAnnotation(System.Drawing.PointF[],Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.Renderer.RenderEnvironment,System.Boolean)">
      <summary> Renders a translucent annotation from the specified points. </summary>
      <param name="points"> An array of points for the annotation. </param>
      <param name="data"> The annotation to render.  This must derive from <see cref="T:Atalasoft.Annotate.PointBaseData" />. </param>
      <param name="outline"> The outline pen used. </param>
      <param name="fill"> The fill used. </param>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> containing information used when rendering. </param>
      <param name="closeFigure"> Indicates whether the points should form a closed figure. </param>
      <returns> Returns a point that can be used for the locked image. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.RestoreGraphicsTransform(Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> Restores the Graphics object to the state it was in before using <see cref="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.SetGraphicsTransform(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)" />. </summary>
      <param name="e"> The <see cref="N:Atalasoft.Annotate.Renderer" /> used. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.AnnotationRenderingEngine.SetGraphicsTransform(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> Prepares the Graphics object to use the <see cref="T:Atalasoft.Annotate.UI.IAnnotate" /> and <see cref="T:Atalasoft.Annotate.AnnotationData" />
            transforms. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.AnnotationData" /> that will be drawn. </param>
      <param name="e"> The <see cref="N:Atalasoft.Annotate.Renderer" /> that will be used. </param>
    </member>
    <member name="T:Atalasoft.Annotate.Renderer.CalloutRenderingEngine">
      <summary> This class is used to render <see cref="T:Atalasoft.Annotate.CalloutData" /> objects. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.CalloutRenderingEngine.#ctor">
      <summary> Creates a new instance of <STRONG>CalloutRenderingEngine</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.CalloutRenderingEngine.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)"></member>
    <member name="T:Atalasoft.Annotate.Renderer.EllipseRenderingEngine">
      <summary> This class is used for rendering <see cref="T:Atalasoft.Annotate.EllipseData" /> objects. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.EllipseRenderingEngine.#ctor">
      <summary> Creates a new instance of <STRONG>EllipseRenderingEngine</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.EllipseRenderingEngine.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> Renders an <see cref="T:Atalasoft.Annotate.EllipseData" /> object. </summary>
      <param name="annotation"> The annotation to render. </param>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> containing information used for rendering. </param>
    </member>
    <member name="T:Atalasoft.Annotate.Renderer.EmbeddedImageRenderingEngine">
      <summary> This class is used for rendering <see cref="T:Atalasoft.Annotate.EmbeddedImageData" /> objects. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.EmbeddedImageRenderingEngine.#ctor">
      <summary> Creates a new instance of <STRONG>EmbeddedImageRenderingEngine</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.EmbeddedImageRenderingEngine.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> Renders an <see cref="T:Atalasoft.Annotate.EmbeddedImageData" /> object. </summary>
      <param name="annotation"> The annotation to render. </param>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> containing information used for rendering. </param>
    </member>
    <member name="T:Atalasoft.Annotate.Renderer.FreehandRenderingEngine">
      <summary> This class is used for rendering <see cref="T:Atalasoft.Annotate.FreehandData" /> objects. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.FreehandRenderingEngine.#ctor">
      <summary> Creates a new instance of <STRONG>FreehandRenderingEngine</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.FreehandRenderingEngine.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> Renders a <see cref="T:Atalasoft.Annotate.FreehandData" /> object. </summary>
      <param name="annotation"> The annotation to render. </param>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> containing information used for rendering. </param>
    </member>
    <member name="T:Atalasoft.Annotate.Renderer.HotSpotFreehandRenderingEngine">
      <summary> This class is used for rendering <see cref="T:Atalasoft.Annotate.HotSpotFreehandData" /> objects. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.HotSpotFreehandRenderingEngine.#ctor">
      <summary> Creates a new instance of <STRONG>HotSpotFreehandRenderingEngine</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.HotSpotFreehandRenderingEngine.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> Renders a <see cref="T:Atalasoft.Annotate.HotSpotFreehandData" /> object. </summary>
      <param name="annotation"> The annotation to render. </param>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> containing information used for rendering. </param>
    </member>
    <member name="T:Atalasoft.Annotate.Renderer.HotSpotRenderingEngine">
      <summary> This class is used for rendering <see cref="T:Atalasoft.Annotate.HotSpotData" /> objects. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.HotSpotRenderingEngine.#ctor">
      <summary> Creates a new instance of <STRONG>HotSpotRenderingEngine</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.HotSpotRenderingEngine.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> Renders a <see cref="T:Atalasoft.Annotate.HotSpotData" /> object. </summary>
      <param name="annotation"> The annotation to render. </param>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> containing information used for rendering. </param>
    </member>
    <member name="T:Atalasoft.Annotate.Renderer.IAnnotationGripRenderer">
      <summary> This interface must be implemented by classes used to render annotation grips. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.IAnnotationGripRenderer.RenderGrips(Atalasoft.Annotate.UI.IAnnotationGrips,Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> Called when grips for an annotation need to be rendered. </summary>
      <param name="grips"> The grips that need to be rendered. </param>
      <param name="annotation"> The annotation the grips belong to. </param>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> containing information used to render the grips. </param>
    </member>
    <member name="T:Atalasoft.Annotate.Renderer.IAnnotationRenderer">
      <summary> This interface must be implemented by classes that will be used to render annotations. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Renderer.IAnnotationRenderer.GripRenderer">
      <summary> Gets the <see cref="T:Atalasoft.Annotate.Renderer.IAnnotationGripRenderer" /> used to render grips. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.IAnnotationRenderer.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> Called to render an annotation. </summary>
      <param name="annotation"> The annotation to render. </param>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> containing information used to render the annotation. </param>
    </member>
    <member name="T:Atalasoft.Annotate.Renderer.LayerRenderingEngine">
      <summary> This class is used to render <see cref="T:Atalasoft.Annotate.LayerData" /> objects. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.LayerRenderingEngine.#ctor">
      <summary> Creates a new instance of <STRONG>LayerRenderingEngine</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.LayerRenderingEngine.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)"></member>
    <member name="T:Atalasoft.Annotate.Renderer.LineRenderingEngine">
      <summary> This class is used for rendering <see cref="T:Atalasoft.Annotate.LineData" /> objects. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.LineRenderingEngine.#ctor">
      <summary> Creates a new instance of <STRONG>LineRenderingEngine</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.LineRenderingEngine.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> Renders a <see cref="T:Atalasoft.Annotate.LineData" /> object. </summary>
      <param name="annotation"> The annotation to render. </param>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> containing information used for rendering. </param>
    </member>
    <member name="T:Atalasoft.Annotate.Renderer.LinesRenderingEngine">
      <summary> This class is used for rendering <see cref="T:Atalasoft.Annotate.LinesData" /> objects. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.LinesRenderingEngine.#ctor">
      <summary> Creates a new instance of <STRONG>LinesRenderingEngine</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.LinesRenderingEngine.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> Renders a <see cref="T:Atalasoft.Annotate.LinesData" /> object. </summary>
      <param name="annotation"> The annotation to render. </param>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> containing information used for rendering. </param>
    </member>
    <member name="T:Atalasoft.Annotate.Renderer.OcrRegionRenderingEngine">
      <summary> This class is used for rendering <see cref="T:Atalasoft.Annotate.OcrRegionData" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.OcrRegionRenderingEngine.#ctor">
      <summary>Creates a new instance of <strong>OcrRegionRenderingEngine</strong>.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.OcrRegionRenderingEngine.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)"></member>
    <member name="T:Atalasoft.Annotate.Renderer.PolygonRenderingEngine">
      <summary> This class is used for rendering <see cref="T:Atalasoft.Annotate.PolygonData" /> objects. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.PolygonRenderingEngine.#ctor">
      <summary>Creates a new instance of <strong>PolygonRenderingEngine</strong>.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.PolygonRenderingEngine.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> Renders a <see cref="T:Atalasoft.Annotate.PolygonData" /> object. </summary>
      <param name="annotation"> The annotation to render. </param>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> containing information used for rendering. </param>
    </member>
    <member name="T:Atalasoft.Annotate.Renderer.RectangleRenderingEngine">
      <summary> This class is used for rendering <see cref="T:Atalasoft.Annotate.RectangleData" /> objects. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.RectangleRenderingEngine.#ctor">
      <summary> Creates a new instance of <STRONG>RectangleRenderingEngine</STRONG>. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.Renderer.RectangleRenderingEngine.lck"></member>
    <member name="M:Atalasoft.Annotate.Renderer.RectangleRenderingEngine.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> Renders a <see cref="T:Atalasoft.Annotate.RectangleData" /> object. </summary>
      <param name="annotation"> The annotation to render. </param>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> containing information used for rendering. </param>
    </member>
    <member name="T:Atalasoft.Annotate.Renderer.ReferencedImageRenderingEngine">
      <summary> This class is used for rendering <see cref="T:Atalasoft.Annotate.ReferencedImageData" /> objects. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.ReferencedImageRenderingEngine.#ctor">
      <summary> Creates a new instance of <STRONG>ReferencedImageRenderingEngine</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.ReferencedImageRenderingEngine.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> Renders a <see cref="T:Atalasoft.Annotate.ReferencedImageData" /> object. </summary>
      <param name="annotation"> The annotation to render. </param>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> containing information used for rendering. </param>
    </member>
    <member name="T:Atalasoft.Annotate.Renderer.RenderEnvironment">
      <summary> This class is passed into the <see cref="T:Atalasoft.Annotate.Renderer.IAnnotationRenderer" /> methods to provide information for the
            rendering process. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.RenderEnvironment.#ctor">
      <summary>Creates a new instance of RenderEnvironment.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.RenderEnvironment.#ctor(Atalasoft.Annotate.AnnotationImage,System.Drawing.PointF,Atalasoft.Annotate.AnnotationUnit,System.Drawing.Drawing2D.Matrix)">
      <summary> Creates a new instance of RenderEnvironment specifying parameters for burning annotations onto an image.
            </summary>
      <param name="image"> The image to burn onto. </param>
      <param name="resolution"> The resolution to render at. </param>
      <param name="units"> The units of measure used by the annotation. </param>
      <param name="transform"> A transformation matrix used when burning. </param>
      <exception> Thrown if the image.BitCount is less than 24. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.RenderEnvironment.#ctor(Atalasoft.Annotate.RenderDevice,System.Drawing.Graphics,System.Drawing.PointF,Atalasoft.Annotate.AnnotationUnit,System.Drawing.Drawing2D.Matrix,System.Drawing.PointF)">
      <summary> Creates a new instance of RenderEnvironment specifying information when rendering to a Graphics object
            retrieved from an image. </summary>
      <param name="device"> The device used when rendering. </param>
      <param name="graphics"> A Graphics object to render onto. </param>
      <param name="resolution"> The resolution to render at. </param>
      <param name="units"> The units of measure used by the annotation. </param>
      <param name="transform"> A transformation matrix used when rendering. </param>
      <param name="imageResolution"> The resolution of the image. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.RenderEnvironment.#ctor(Atalasoft.Annotate.RenderDevice,System.Drawing.Graphics,System.Drawing.PointF,Atalasoft.Annotate.AnnotationUnit,System.Drawing.Drawing2D.Matrix,System.Drawing.PointF,System.Drawing.PointF)">
      <summary> Creates a new instance of RenderEnvironment specifying its properties. </summary>
      <param name="device"> The device used when rendering. </param>
      <param name="graphics"> A Graphics object to render onto. </param>
      <param name="resolution"> The resolution to render at </param>
      <param name="units"> The units of measure used by the annotation. </param>
      <param name="transform"> A transformation matrix used when rendering. </param>
      <param name="imageResolution"> The resolution of the image. </param>
      <param name="viewerResolution"> The resolution of the viewer. </param>
    </member>
    <member name="P:Atalasoft.Annotate.Renderer.RenderEnvironment.Device">
      <summary> Gets the type of device being rendered onto. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.RenderEnvironment.Dispose">
      <summary> Releases resources used by the object. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.RenderEnvironment.Dispose(System.Boolean)">
      <summary> Release resources used by the object. </summary>
      <param name="disposing"> Indicates if this method was called from the public <see cref="M:Atalasoft.Annotate.Renderer.RenderEnvironment.Dispose" /> method. </param>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.RenderEnvironment.Finalize"></member>
    <member name="P:Atalasoft.Annotate.Renderer.RenderEnvironment.Graphics">
      <summary> The graphics object used to render the annotation onto. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Renderer.RenderEnvironment.Image">
      <summary> Gets the image when rendering to an image. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Renderer.RenderEnvironment.ImageResolution">
      <summary> Gets the resolution of the image.  This is only needed if a Graphics object is provided instead of an <see cref="T:Atalasoft.Annotate.AnnotationImage" />. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Renderer.RenderEnvironment.Resolution">
      <summary> The number of units per pixel. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Renderer.RenderEnvironment.Transform">
      <summary> Gets the transformation matrix used by the <see cref="T:Atalasoft.Annotate.UI.IAnnotate" /> control. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Renderer.RenderEnvironment.Units">
      <summary> Gets the units of measure used by the annotation Locate and Size. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.Renderer.RenderEnvironment.ViewerResolution">
      <summary> Gets the resolution of the viewer. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.Renderer.RubberStampRenderingEngine">
      <summary> This class is used for rendering <see cref="T:Atalasoft.Annotate.RubberStampData" /> objects. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.RubberStampRenderingEngine.#ctor">
      <summary> Creates a new instance of <STRONG>RubberStampRenderingEngine</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.RubberStampRenderingEngine.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> Renders a <see cref="T:Atalasoft.Annotate.RubberStampData" /> object. </summary>
      <param name="annotation"> The annotation to render. </param>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> containing information used for rendering. </param>
    </member>
    <member name="T:Atalasoft.Annotate.Renderer.TextAnnotationRenderingEngine">
      <summary> This class is used for rendering <see cref="T:Atalasoft.Annotate.TextData" /> objects. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.TextAnnotationRenderingEngine.#ctor">
      <summary> Creates a new instance of <STRONG>TextAnnotationRenderingEngine</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.Renderer.TextAnnotationRenderingEngine.RenderAnnotation(Atalasoft.Annotate.AnnotationData,Atalasoft.Annotate.Renderer.RenderEnvironment)">
      <summary> Renders a <see cref="T:Atalasoft.Annotate.TextData" /> object. </summary>
      <param name="annotation"> The annotation to render. </param>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.Renderer.RenderEnvironment" /> containing information used for rendering. </param>
    </member>
    <member name="T:Atalasoft.Annotate.UI.AnnotateViewerParameters">
      <summary> This class is returned by <see cref="M:Atalasoft.Annotate.UI.AnnotationUI.GetViewerParameters" /> to provide information about the
            viewer the annotations are rendered on. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotateViewerParameters.#ctor">
      <summary> Creates a new instance of <STRONG>AnnotateViewerParameters</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotateViewerParameters.#ctor(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
      <summary> Creates a new instance of <STRONG>AnnotateViewerParameters</STRONG> specifying the resolution, zoom and
            scroll offset. </summary>
      <param name="resolution"> The resolution of the viewer. </param>
      <param name="zoom"> The zoom level of the viewer. </param>
      <param name="scrollOffset"> The scroll position (offset from the top-left corner) of the document. </param>
      <exception> Thrown if the zoom is less than or equal to 0. </exception>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotateViewerParameters.Resolution">
      <summary> Gets the resolution of the viewer. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotateViewerParameters.ScrollOffset">
      <summary> Gets the scroll position (offset from the top-left corner) of the document. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotateViewerParameters.Zoom">
      <summary> Gets the zoom level of the viewer. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.AnnotationController">
      <summary> The <STRONG>AnnotationController</STRONG> is the central hub for DotImage. It contains a <see cref="T:Atalasoft.Annotate.UI.LayerCollection" /> for any number of <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation" /> objects, each containing any number of
            annotations. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.#ctor">
      <summary> Creates a new instance of <STRONG>AnnotationController</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.#ctor(Atalasoft.Annotate.UI.IAnnotate)">
      <summary> Creates a new instance of <STRONG>AnnotationController</STRONG> specifying the <see cref="T:Atalasoft.Annotate.UI.IAnnotate" />
            parent control. </summary>
      <param name="parent"> An object that will be used as the parent control for the controller. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationController.ActiveAnnotation">
      <summary> Gets or sets the currently selected annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationController.AnnotationConfinement">
      <summary> Gets or sets the annotation confinement used to keep annotations within a specific area of the control.
            </summary>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationController.AnnotationCreated">
      <summary> Raised when an annotation is created by the user. </summary>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationController.AnnotationDeserialization">
      <summary> Raised when an object is deserialized to allow developers to cancel or modify the object before its added
            into the controller. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.AnnotationFromPoint(Atalasoft.Annotate.UI.LayerAnnotation,System.Drawing.PointF)">
      <summary> Returns the annotation at the specified point of a specified layer. </summary>
      <param name="layer"> The layer to search for annotations. </param>
      <param name="vsPoint"> The point to search for an annotation.  This point should be specified in view space.
            </param>
      <returns> The annotation at the location or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB) if there is no
            annotation at that location. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.AnnotationFromPoint(System.Drawing.PointF)">
      <summary> Returns the annotation located at a specific point on the control. </summary>
      <param name="vsPoint"> The point to search for an annotation.  This point should be specified in view space.
            </param>
      <returns> The annotation at the location or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB) if there is no
            annotation at that location. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.CanPaste">
      <summary> Returns a value indicating whether there is annotation data on the clipboard. </summary>
      <returns> True if there is annotation data on the clipboard. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.ChangeAnnotationPosition(Atalasoft.Annotate.ChangePositionMethod)">
      <summary> Changes the position of the selected annotation within the stacking order. </summary>
      <param name="method"> The type of reordering to perform. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.ChangeAnnotationPosition(Atalasoft.Annotate.UI.AnnotationUI,Atalasoft.Annotate.ChangePositionMethod)">
      <summary> Changes the position of an annotation or layer within the stacking order. </summary>
      <param name="annotation"> The annotation or layer to change. </param>
      <param name="method"> The type of ordering to perform. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.ClearSelection">
      <summary> Unselects all of the selected annotations. </summary>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationController.Click">
      <summary> Raised when an annotation is clicked with the mouse. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationController.ClipToDocument">
      <summary> Gets or sets a value indicating whether the annotation rendering is clipped to the document bounds.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Clone">
      <summary> Creates a copy of the <STRONG>AnnotationController</STRONG> including all of the layers and annotations.
            </summary>
      <returns> A copy of the <STRONG>AnnotationController</STRONG>. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Copy">
      <summary> Copies the selected annotation(s) to the clipboard. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.CountAnnotations">
      <summary> Returns the number of annotations in all of the layers. </summary>
      <returns> The number of annotations in the controller. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.CountAnnotations(Atalasoft.Annotate.UI.LayerAnnotation)">
      <summary> Returns the number of annotations in the provided layer. </summary>
      <param name="layer"> The layer to count. </param>
      <returns> The number of annotations in the layer. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.CreateAnnotation(Atalasoft.Annotate.UI.AnnotationUI)">
      <summary>
            Call this method to prepare the <see cref="T:Atalasoft.Annotate.UI.AnnotationController" /> for creating a new annotation with the mouse.
            </summary>
      <param name="annotation">The annotation to create.</param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.CreateAnnotation(Atalasoft.Annotate.UI.AnnotationUI,Atalasoft.Annotate.CreateAnnotationMode)">
      <summary> Call this method to prepare the <see cref="T:Atalasoft.Annotate.UI.AnnotationController" /> for creating a new annotation with the
            mouse, specifying the creation mode to use. </summary>
      <param name="annotation"> The annotation to create. </param>
      <param name="createMode"> The mode used to create the annotation. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationController.CreateMouseButton">
      <summary> Gets or sets the mouse button used for creating annotations. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationController.CurrentLayer">
      <summary> Gets or sets the current active layer. </summary>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationController.CurrentLayerChanged">
      <summary> Raised when the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.CurrentLayer" /> property has changed. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Cut">
      <summary> Cuts the selected annotation(s) and places them onto the clipboard. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationController.DefaultSecurity">
      <summary> Gets or sets the default security used for new annotations. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Dispose">
      <summary> Releases memory used by the <STRONG>AnnotationController</STRONG> and all of its annotations. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Dispose(System.Boolean)">
      <summary> Releases resources used by the <STRONG>AnnotationController</STRONG>. </summary>
      <param name="disposing"> A value indicating whether this method was called from the <see cref="M:Atalasoft.Annotate.UI.AnnotationController.Dispose" /> method or a finalizer. </param>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationController.Disposed">
      <summary> Raised when the <STRONG>AnnotationController</STRONG> has been disposed. </summary>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationController.DoubleClick">
      <summary> Raised when an annotation is double-clicked by the user. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.ExitCreateMode">
      <summary> This method will exit 'create mode' started with <see cref="M:Atalasoft.Annotate.UI.AnnotationController.CreateAnnotation(Atalasoft.Annotate.UI.AnnotationUI)" />.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationController.Factories">
      <summary> Gets the <see cref="T:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection" /> containing <see cref="T:Atalasoft.Annotate.UI.IAnnotationUIFactory" /> objects
            used to create annotations from AnnotationData classes. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Finalize"></member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.FindAnnotationLayer(Atalasoft.Annotate.UI.AnnotationUI)">
      <summary> Returns the <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation" /> containing a specified annotation. </summary>
      <param name="annotation"> The annotation to search for. </param>
      <returns> The <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation" /> containing the annotation or null (Nothing in Visual Basic) if the
            annotation was not found. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.FindAnnotationLayer(Atalasoft.Annotate.UI.LayerAnnotation,Atalasoft.Annotate.UI.AnnotationUI)">
      <summary> Returns the <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation" /> containing a specified annotation. </summary>
      <param name="hostLayer"> The host layer to being searching from. </param>
      <param name="annotation"> The annotation to search for. </param>
      <returns> The <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation" /> containing the annotation or null (Nothing in Visual Basic) if the
            annotation is not found. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.GetTopLevelLayer(Atalasoft.Annotate.UI.AnnotationUI)">
      <summary> Returns the top level <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation" /> for the supplied annotation. This method will scan
            through the nested layers until it finds the top most layer. </summary>
      <param name="annotation">The annotation where the search will begin.</param>
      <returns> The <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation" /> that is loaded in the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.Layers" />
            collection or null (Nothing in VB) if no parent layer is found. </returns>
      <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">Thrown if the annotation argument is null (Nothing in VB).</exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Group">
      <summary> Combines all selected annotations into a new <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation" /> object and adds this layer to
            the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.CurrentLayer" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Group(Atalasoft.Annotate.UI.AnnotationUI[])">
      <summary> Combines annotations into a <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation" /> and adds it to the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.CurrentLayer" />. </summary>
      <param name="annotations"> An array of annotations to group. </param>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationController.HotSpotClicked">
      <summary> Raised when a hot spot annotation is clicked. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationController.InteractMode">
      <summary> Gets or sets a value specifying the user interactive mode of the <STRONG>AnnotationController</STRONG>.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.InvalidateAnnotation(Atalasoft.Annotate.UI.AnnotationUI)">
      <summary> Forces an annotation to be redrawn. </summary>
      <param name="annotation"> The annotation to invalidate. </param>
      <exception cref="T:System.ArgumentNullException"> Thrown if the annotation argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationController.IsDirty">
      <summary> Gets a value indicating whether the annotations have been modified since the last load or save. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationController.Layers">
      <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.UI.LayerCollection" /> used by the <STRONG>AnnotationController</STRONG>.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Load(System.Byte[],Atalasoft.Annotate.AnnotationDataFormat)">
      <summary> Loads annotation data from a byte array and adds the annotations to the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.Layers" /> collection. </summary>
      <param name="annotationData"> A byte array containing the annotation data. </param>
      <param name="format"> The format of the annotation data. </param>
      <exception cref="T:System.Runtime.Serialization.SerializationException"> Thrown if there is an error reading the data. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Load(System.Byte[],Atalasoft.Annotate.UI.LayerAnnotation,Atalasoft.Annotate.AnnotationDataFormat)">
      <summary> Loads annotation data from a byte array and adds the annotations to the specified layer. </summary>
      <param name="annotationData"> A byte array containing the annotation data. </param>
      <param name="layer"> The <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation" /> where annotations will be added. </param>
      <param name="format"> The format of the annotation data. </param>
      <exception cref="T:System.Runtime.Serialization.SerializationException"> Thrown if there is an error reading the data. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Load(System.Byte[],Atalasoft.Annotate.UI.LayerAnnotation,System.Runtime.Serialization.IFormatter)">
      <summary> Loads annotation data into the specified layer using the provided formatter. </summary>
      <param name="annotationData"> A byte array containing the annotation data to read. </param>
      <param name="layer"> The layer to store the annotations. </param>
      <param name="formatter"> An IFormatter used to deserialize the annotation data. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Load(System.Byte[],System.Runtime.Serialization.IFormatter)">
      <summary>
            Loads annotation data from a byte array using the supplied formatter and adds
            them to the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.Layers" />.
            </summary>
      <param name="annotationData">A byte array containing the annotation data.</param>
      <param name="formatter">An IFormatter used to deserialize the data.</param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Load(System.IO.Stream,Atalasoft.Annotate.AnnotationDataFormat)">
      <summary> Loads annotation data from a stream and adds the annotations to the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.Layers" /> collection. </summary>
      <param name="stream"> A stream containing the annotation data. </param>
      <param name="format"> The format of the annotation data. </param>
      <exception cref="T:System.Runtime.Serialization.SerializationException"> Thrown if there is an error reading the data. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Load(System.IO.Stream,Atalasoft.Annotate.UI.LayerAnnotation,Atalasoft.Annotate.AnnotationDataFormat)">
      <summary> Loads annotation data from a stream and adds the annotations to the specified layer. </summary>
      <param name="stream"> The stream containing annotation data. </param>
      <param name="layer"> The <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation" /> where annotations will be added. </param>
      <param name="format"> The format of the annotation data. </param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if there is an error reading the data.</exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Load(System.IO.Stream,Atalasoft.Annotate.UI.LayerAnnotation,System.Runtime.Serialization.IFormatter)">
      <summary> Loads annotation data from a stream using the formatter and adds the annotations to the provided layer.
            </summary>
      <param name="stream"> A stream containing the annotation data. </param>
      <param name="layer"> A <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation" /> where the annotations will be added. </param>
      <param name="formatter"> An IFormatter used to deserialize the annotation data. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Load(System.IO.Stream,System.Runtime.Serialization.IFormatter)">
      <summary> Loads annotation data from a stream using the supplied formatter into the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.Layers" /> collection. </summary>
      <param name="stream"> A stream containing annotation data. </param>
      <param name="formatter"> An IFormatter used to deserialize the data. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Load(System.String,Atalasoft.Annotate.AnnotationDataFormat)">
      <summary> Loads annotation data from a file and adds the annotations to the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.Layers" /> collection. </summary>
      <param name="fileName"> The file containing the annotation data. </param>
      <param name="format"> The format of the annotation data. </param>
      <exception cref="T:System.IO.FileNotFoundException"> Thrown if there is an error reading the data. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Load(System.String,Atalasoft.Annotate.UI.LayerAnnotation,Atalasoft.Annotate.AnnotationDataFormat)">
      <summary>
            Loads annotation data from a file and adds the annotations to the specified
            layer.
            </summary>
      <param name="fileName">The file containing the annotation data.</param>
      <param name="layer">The LayerAnnotation where annotations will be added.</param>
      <param name="format">The format of the annotation data.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown if there is an error reading the data.</exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Load(System.String,Atalasoft.Annotate.UI.LayerAnnotation,System.Runtime.Serialization.IFormatter)">
      <summary> Loads annotation data from a file using the formatter and adds the annotations to the provided layer.
            </summary>
      <param name="fileName"> A filename for the annotation data. </param>
      <param name="layer"> A <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation" /> where these annotations will be loaded. </param>
      <param name="formatter"> An IFormatter used to deserialize the annotation data. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Load(System.String,System.Runtime.Serialization.IFormatter)">
      <summary> Loads annotation data from a file using the supplied formatter and adds the annotations to the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.Layers" /> collection. </summary>
      <param name="fileName"> The filename for the annotation data. </param>
      <param name="formatter"> An IFormatter used to deserialize the annotation data. </param>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationController.Moved">
      <summary> Raised when an annotation is moved. </summary>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationController.Moving">
      <summary> Raised while an annotation is being moved. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationController.MultiSelectKey">
      <summary> Gets or sets the key held down to select multiple annotations. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.NotifyController(System.Object,Atalasoft.Annotate.AnnotationControllerNotificationEventArgs)">
      <summary> This method is used by layer and annotation objects to notify the <STRONG>AnnotationController</STRONG> of
            events. </summary>
      <param name="sender"> The object sending this notification. </param>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs" /> containing information about this event.
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.OnAnnotationCreated(Atalasoft.Annotate.AnnotationEventArgs)">
      <summary> Called when a new annotation has been created by the user. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationEventArgs" /> containing the new annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.OnClick(Atalasoft.Annotate.AnnotationEventArgs)">
      <summary> Called when a Click event is received from the parent control. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationEventArgs" /> containing the annotation that was clicked. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.OnCurrentLayerChanged(System.EventArgs)">
      <summary> Called when the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.CurrentLayer" /> property has changed. </summary>
      <param name="e"> An EventArgs for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.OnDoubleClick(Atalasoft.Annotate.AnnotationEventArgs)">
      <summary> Called when a DoubleClick event has been received from the parent control. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationEventArgs" /> containing the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.OnHotSpotClicked(Atalasoft.Annotate.AnnotationEventArgs)">
      <summary> Called when a hot spot annotation has been clicked. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationEventArgs" /> containing the hot spot annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.OnMouseDown(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)">
      <summary> Called when a MouseDown event is received from the parent control. </summary>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.UI.AnnotationMouseEventArgs" /> containing information about this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.OnMouseMove(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)">
      <summary> Called when a MouseMove event is received from the parent control. </summary>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.UI.AnnotationMouseEventArgs" /> containing information about this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.OnMouseUp(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)">
      <summary> Called when a MouseUp event is received from the parent control. </summary>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.UI.AnnotationMouseEventArgs" /> containing information about this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.OnMoving(Atalasoft.Annotate.AnnotationEventArgs)">
      <summary> Called while an annotation is being moved by the user. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationEventArgs" /> containing the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.OnPaint(System.Windows.Forms.PaintEventArgs)">
      <summary> Called when a Paint event is received from the parent control. </summary>
      <param name="e"> A PaintEventArgs containing information for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.OnResizing(Atalasoft.Annotate.AnnotationEventArgs)">
      <summary> Called while an annotation is being resized by the user. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationEventArgs" /> containing the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.OnRotating(Atalasoft.Annotate.AnnotationEventArgs)">
      <summary> Called while the annotation is being rotated by the user. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationEventArgs" /> containing the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.OnScrollPositionChanged(Atalasoft.Annotate.UI.ScrollPositionChangedEventArgs)">
      <summary> Called when a scroll event has been detected. </summary>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.UI.ScrollPositionChangedEventArgs" /> containing information about this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.OnSelectionChanged(System.EventArgs)">
      <summary> Called when an annotation selection has changed. </summary>
      <param name="e"> An EventArgs for this event. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationController.Parent">
      <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.UI.IAnnotate" /> parent control where the annotations will be rendered. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Paste">
      <summary> Pastes annotation data from the clipboard into the current layer. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Refresh">
      <summary> This method will cause the control to redraw itself. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.RenderAnnotations(Atalasoft.Annotate.AnnotationImage)">
      <summary>Renders the annotations to the supplied image.</summary>
      <param name="image">The image that will be rendered onto.</param>
      <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">Thrown if the image argument is null (Nothing in VB).</exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.RenderAnnotations(Atalasoft.Annotate.RenderDevice,System.Drawing.Graphics)">
      <summary> Renders the annotations to a <STRONG>Graphics</STRONG> object </summary>
      <param name="device"> Indicates the device that created the <STRONG>Graphics</STRONG> object. </param>
      <param name="graphics"> The <STRONG>Graphics</STRONG> object used for rendering. </param>
      <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">Thrown if the graphics object is null (Nothing in VB).</exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.RenderAnnotations(Atalasoft.Annotate.RenderDevice,System.Drawing.Graphics,Atalasoft.Annotate.UI.LayerAnnotation)">
      <summary>
            Renders the annotations in a specified layer to a <strong>Graphics</strong>
            object.
            </summary>
      <param name="device">Indicates the device that created the <strong>Graphics</strong> object.</param>
      <param name="graphics">The <strong>Graphics</strong> object used for rendering.</param>
      <param name="layer">The layer to render.</param>
      <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">Thrown if the graphics or layer arguments are null (Nothing in VB).</exception>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationController.Resized">
      <summary> Raised when an annotation is resized. </summary>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationController.Resizing">
      <summary> Raised while an annotation is being resized. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.ResumePaint(System.Boolean)">
      <summary> Resumes painting after it has been suspended with <see cref="M:Atalasoft.Annotate.UI.AnnotationController.SuspendPaint" />.
            </summary>
      <param name="forceRefresh"> Indicates whether the <STRONG>AnnotationController</STRONG> should force a refresh.
            </param>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationController.Rotated">
      <summary> Raised when an annotation is rotated by the user. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.RotateDocument(Atalasoft.Annotate.DocumentRotation)">
      <summary> Rotates all layers in the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.Layers" /> collection. </summary>
      <param name="rotation"> The rotation amount. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.RotateDocument(Atalasoft.Annotate.DocumentRotation,Atalasoft.Annotate.UI.LayerAnnotation)">
      <summary> Rotates the specified layer. </summary>
      <param name="rotation"> The amount of rotation. </param>
      <param name="layer"> The layer to rotate. </param>
      <exception> Thrown if the layer is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.RotateDocument(Atalasoft.Annotate.DocumentRotation,System.Int32)">
      <summary> Rotates the annotations in 90 degree increments. </summary>
      <param name="rotation"> The amount of rotation. </param>
      <param name="layerIndex"> The index of the layer to rotate. </param>
      <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if the layer index is invalid for the Layers collection. </exception>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationController.Rotating">
      <summary> Raised while an annotation is being rotated by the user. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationController.RotationSnapInterval">
      <summary>
        <para>Gets or sets the interval used for snapping interactive rotation to degrees.</para>
        <para>This is used to help users when rotating an annotation, making it easier to stop at whole degrees. The snap
            area is determined by the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.RotationSnapThreshold" /> property.</para>
      </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationController.RotationSnapThreshold">
      <summary>
            Gets or sets the amount of deviation from the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.RotationSnapInterval" />
            that will be used to snap to the rotation interval.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Save(Atalasoft.Annotate.UI.LayerAnnotation,System.Runtime.Serialization.IFormatter)">
      <summary> Returns a byte array containing the annotation data from a specified <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation" />.  This
            is useful when saving annotation data to be embedded into image metadata. </summary>
      <param name="layer"> The <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation" /> containing the annotations to save. </param>
      <param name="formatter"> The formatter used to convert the annotation data. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Save(System.IO.Stream,Atalasoft.Annotate.AnnotationDataFormat)">
      <summary> Writes annotation data to the specified stream. </summary>
      <param name="stream"> The stream where data will be stored. </param>
      <param name="format"> The format used to save the data. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Save(System.IO.Stream,Atalasoft.Annotate.UI.LayerAnnotation,Atalasoft.Annotate.AnnotationDataFormat)">
      <summary> Writes annotation data from a layer into the specified stream. </summary>
      <param name="stream"> The stream where annotation data will be stored. </param>
      <param name="layer"> The <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation" /> that will be saved. </param>
      <param name="format"> The format used when saving the annotation data. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Save(System.IO.Stream,Atalasoft.Annotate.UI.LayerAnnotation,System.Runtime.Serialization.IFormatter)">
      <summary> Saves the specified layer to a stream using the formatter supplied. </summary>
      <param name="stream"> The stream where data will be stored. </param>
      <param name="layer"> The layer to save. </param>
      <param name="formatter"> The formatter used to serialize the data. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Save(System.IO.Stream,System.Runtime.Serialization.IFormatter)">
      <summary> Saves the annotations to a stream using the specified formatter. </summary>
      <param name="stream"> A stream where the data will be stored. </param>
      <param name="formatter"> The formatter used for serializing the data. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Save(System.Runtime.Serialization.IFormatter)">
      <summary> Saves the annotations to a byte array using the specified formatter. </summary>
      <param name="formatter"> The formatter used to serialize the annotation data. </param>
      <returns> A byte array containing the serialized data. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Save(System.String,Atalasoft.Annotate.AnnotationDataFormat)">
      <summary> Saves the annotations to a file using a predefined formatter. </summary>
      <param name="fileName"> The full path and filename that will be created. </param>
      <param name="format"> The format used to save the data. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Save(System.String,Atalasoft.Annotate.UI.LayerAnnotation,Atalasoft.Annotate.AnnotationDataFormat)">
      <summary> Saves a layer to a file using a predefined format. </summary>
      <param name="fileName"> The full path and filename that will be created. </param>
      <param name="layer"> The layer to save. </param>
      <param name="format"> The format used to save the data. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Save(System.String,Atalasoft.Annotate.UI.LayerAnnotation,System.Runtime.Serialization.IFormatter)">
      <summary> Saves a layer to a file using the specified formatter. </summary>
      <param name="fileName"> The full path and filename that will be created. </param>
      <param name="layer"> The layer to save. </param>
      <param name="formatter"> The formatter used to serialize the data. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Save(System.String,System.Runtime.Serialization.IFormatter)">
      <summary> Saves the annotations to a file using the specified formatter. </summary>
      <param name="fileName"> The full path and filename that will be created. </param>
      <param name="formatter"> The formatter use to serialize the data. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.SelectAll(System.Boolean)">
      <summary> Selects all of the annotations on the current layer or all layers. </summary>
      <param name="allLayers"> Indicates whether to select annotations on all of the layers. If this is
            <STRONG>false</STRONG>, only the current layer annotations are selected. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationController.SelectedAnnotations">
      <summary> Gets an array of annotations currently selected. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.SelectFromBounds(Atalasoft.Annotate.UI.LayerAnnotation,System.Drawing.RectangleF,System.Boolean)">
      <summary> Selects annotations from a layer that are without a bounding region. </summary>
      <param name="layer"> The layer to search for annotations. </param>
      <param name="bounds"> The bounding rectangle to search. This value must be specified in document space. </param>
      <param name="fullyContained"> Indicates if the annotation has to be fully within the bounds before it's selected.
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.SelectFromBounds(System.Drawing.RectangleF,System.Boolean)">
      <summary>Selects annotations that are partially or fully within a rectangular area.</summary>
      <param name="bounds">
            The bounding rectangle to look for annotations. This value must be specified in
            document space.
            </param>
      <param name="fullyContained">
            Indicates if the annotation has to be fully within the bounds before it's
            selected.
            </param>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationController.SelectionChanged">
      <summary> Raise when there has been a change in the annotation selection. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationController.Site">
      <summary>
        <para>Gets or sets the site of the control.</para>
      </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationController.SmoothingMode">
      <summary> Gets or sets the smoothing mode used when drawing annotations. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.SuspendPaint">
      <summary>
            Use this method to suspend painting any annotations until the
            <a href="DotAnnotate~Atalasoft.Annotate.UI.AnnotationController~ResumePaint.html">ResumePaint</a>
            method is called.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationController.ToolTip">
      <summary> Gets or sets the tooltip control used for annotation tooltips. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationController.UndoManager">
      <summary>Gets the AnnotationUndoManager used by the controller.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Ungroup">
      <summary> Ungroups the currently selected annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationController.Ungroup(Atalasoft.Annotate.UI.LayerAnnotation,Atalasoft.Annotate.UI.LayerAnnotation)">
      <summary> Removes annotations from one layer and adds them to another. </summary>
      <param name="groupLayer"> The layer containing annotations to ungroup. </param>
      <param name="hostLayer"> The layer where annotation will be added. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationController.WaitingToCreate">
      <summary> Gets a value indicating whether the <see cref="T:Atalasoft.Annotate.UI.AnnotationController" /> is waiting for the user to create
            an annotation with the mouse. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.AnnotationCursors">
      <summary>
        <STRONG>AnnotationCursors</STRONG> is a used to hold all of the <STRONG>Cursor</STRONG> objects for the
            annotations.  This simplifies changing the appearance of the cursors. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationCursors.DefaultCursor">
      <summary> Gets or sets the default cursor used when the pointer is not over an annotation or grip. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationCursors.EastWestCursor">
      <summary> Gets or sets the cursor used when over the left or right center grip. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationCursors.HotSpotCursor">
      <summary> Gets or sets the cursor used for hot spots.  This is only shown when <see cref="P:Atalasoft.Annotate.UI.AnnotationController.InteractMode" /> is set to <STRONG>View</STRONG>. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationCursors.MoveCursor">
      <summary> Gets or sets the cursor used to indicate a move operation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationCursors.NortheastSouthwestCursor">
      <summary> Gets or sets the cursor used for the top-right and bottom-left grips. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationCursors.NorthSouthCursor">
      <summary> Gets or sets the cursor used for the top and bottom center grips. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationCursors.NorthwestSoutheastCursor">
      <summary> Gets or sets the cursor used for the top-left and bottom-right grips. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationCursors.RotateCursor">
      <summary> Gets or sets the cursor used for the rotation grip. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.AnnotationGrip">
      <summary> This class represents a single grip.  To access these grip objects use the <see cref="P:Atalasoft.Annotate.UI.AnnotationUI.Grips" /> property of the annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationGrip.#ctor">
      <summary> Creates a new instance of <STRONG>AnnotationGrip</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationGrip.#ctor(System.Drawing.PointF,Atalasoft.Annotate.AnnotationGripState)">
      <summary> Creates a new instance of <STRONG>AnnotationGrip</STRONG> specifying the grip position and state.
            </summary>
      <param name="position"> The position of the grip in annotation space. </param>
      <param name="state"> The initial state of the grip. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationGrip.#ctor(System.Drawing.PointF,Atalasoft.Annotate.AnnotationGripState,Atalasoft.Annotate.AnnotationGripAction)">
      <summary> Creates a new instance of <STRONG>AnnotationGrip</STRONG> specifying the grip position, state and its
            action. </summary>
      <param name="position"> The position of the grip in annotation space. </param>
      <param name="state"> The initial state of the grip. </param>
      <param name="action"> Defines the action to take when this grip is dragged with the mouse. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationGrip.Action">
      <summary> Gets or sets the action to take when the grip is dragged with the mouse. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationGrip.Position">
      <summary> Gets or sets the position of the grip in annotation space. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationGrip.State">
      <summary> Gets or sets the state of the grip. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationGrip.Visible">
      <summary> Gets or sets the visibility of the grip. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.AnnotationGripChangedEventArgs">
      <summary> This class is used to with the <see cref="E:Atalasoft.Annotate.UI.AnnotationUI.GripPositionChanged" /> event. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationGripChangedEventArgs.#ctor(Atalasoft.Annotate.UI.AnnotationGrip,System.Drawing.PointF,System.Drawing.RectangleF)">
      <summary> Creates a new instance of <STRONG>AnnotationGripChangedEventArgs</STRONG>. </summary>
      <param name="grip"> The grip being modified. </param>
      <param name="newPosition"> The new position of the grip in annotation space. </param>
      <param name="confinement"> The viewer confinement rectangle. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationGripChangedEventArgs.Confinement">
      <summary> Gets the viewer confinement rectangle. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationGripChangedEventArgs.Grip">
      <summary> Gets the grip being modified. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationGripChangedEventArgs.NewPosition">
      <summary> Gets the new location for the grip in annotation space. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.AnnotationKey">
      <summary> This class is used with the <see cref="T:Atalasoft.Annotate.UI.AnnotationKeyBinder" /> to define the action or handler to call when
            a specific key is pressed. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationKey.#ctor">
      <summary> Creates a new instance of <STRONG>AnnotationKey</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationKey.#ctor(Atalasoft.Annotate.UI.AnnotationKeyAction)">
      <summary> Creates a new instance of <STRONG>AnnotationKey</STRONG> specifying its action. </summary>
      <param name="action"> The action to take when the key is pressed. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationKey.#ctor(Atalasoft.Annotate.UI.AnnotationKeyAction,Atalasoft.Annotate.UI.AnnotationKeyEventHandler)">
      <summary> Creates a new instance of <STRONG>AnnotationKey</STRONG> specifying the action and event handler of the
            key event. </summary>
      <param name="action"> The action to take when the key is pressed. </param>
      <param name="handler"> An <see cref="T:Atalasoft.Annotate.UI.AnnotationKeyEventHandler" /> called to perform this action. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationKey.Action">
      <summary> Gets or sets the action for this key. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationKey.Handler">
      <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.UI.AnnotationKeyEventHandler" /> that will be called to perform the action.
            </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.AnnotationKeyAction">
      <summary> This enumeration is used to define the actions used with <see cref="T:Atalasoft.Annotate.UI.AnnotationKeyBinder" />. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.None">
      <summary> No action is taken. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.SelectNext">
      <summary> The next annotation in the collection is selected.  If the current annotation is the last in the
            collection, the first annotation will be selected. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.SelectPrevious">
      <summary> The previous annotation in the collection is selected.  If the current annotation is at index zero, the
            last annotation in the collection will be selected. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.SelectLeft">
      <summary> Selects the annotation who has the next lowest X location value. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.SelectRight">
      <summary> Selects the annotation who has the next highest X location value. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.SelectAbove">
      <summary> Selects the annotation who has the next lowest Y location value. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.SelectBelow">
      <summary> Selects the annotation who has the next highest Y location value. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.MoveLeft">
      <summary> Moves the selected annotations to the left. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.MoveRight">
      <summary> Moves the selected annotations to the right. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.MoveUp">
      <summary>
        <para>Moves the selected annotations up.</para>
      </summary>
    </member>
    <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.MoveDown">
      <summary> Moves the selected annotations down. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.RotateCounterclockwise">
      <summary> Rotates the active annotation counterclockwise. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.RotateClockwise">
      <summary> Rotates the active annotation clockwise. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.IncreaseWidth">
      <summary> Increases the width of the active annotation. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.DecreaseWidth">
      <summary> Decreases the width of the active annotation. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.IncreaseHeight">
      <summary> Increases the height of the active annotation. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.DecreaseHeight">
      <summary> Decreases the height of the active annotation. </summary>
    </member>
    <member name="F:Atalasoft.Annotate.UI.AnnotationKeyAction.ClearSelection">
      <summary> Unselects all annotations. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.AnnotationKeyBinder">
      <summary> The <STRONG>AnnotationKeyBinder</STRONG> class is used to bind key press events to annotation actions.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationKeyBinder.#ctor">
      <summary> Creates a new instance of <STRONG>AnnotationKeyBinder</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationKeyBinder.Contains(System.Windows.Forms.Keys)">
      <summary> Returns a value indicating if the <STRONG>AnnotationKeyBinder</STRONG> contains a specific key. </summary>
      <param name="key"> The key to search for. </param>
      <returns>
        <STRONG>True</STRONG> if the <STRONG>AnnotationKeyBinder</STRONG> contains the specified key. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationKeyBinder.Item(System.Windows.Forms.Keys)"></member>
    <member name="T:Atalasoft.Annotate.UI.AnnotationKeyEventArgs">
      <summary> This class is sent to the <see cref="T:Atalasoft.Annotate.UI.AnnotationKey" /> handler during a key press event. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationKeyEventArgs.#ctor(Atalasoft.Annotate.UI.AnnotationUI,Atalasoft.Annotate.UI.AnnotationKeyAction,System.Boolean,System.Windows.Forms.KeyEventArgs)">
      <summary> Creates a new instance of <STRONG>AnnotationKeyEventArgs</STRONG> specifying its parameters. </summary>
      <param name="annotation"> The annotation being affected by this event. </param>
      <param name="action"> The action to take. </param>
      <param name="repeat"> Indicates whether this is a repeat event caused from a key being held down. </param>
      <param name="e"> The <STRONG>KeyEventArgs</STRONG> from the key press event. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationKeyEventArgs.Action">
      <summary> Gets the action to be taken by this event. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationKeyEventArgs.Annotation">
      <summary> Gets the annotation being modified. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationKeyEventArgs.KeyEventArgs">
      <summary> Gets the <STRONG>KeyEventArgs</STRONG> from the key press event. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationKeyEventArgs.Repeat">
      <summary> Gets a value indicating if this is a repeat event caused by the user holding down a key. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.AnnotationKeyEventHandler">
      <summary> This event handler is used with the <see cref="T:Atalasoft.Annotate.UI.AnnotationKey" /> class to process key actions. </summary>
      <param name="sender"> The object sending the event. </param>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.UI.AnnotationKeyEventArgs" /> containing information about this event. </param>
    </member>
    <member name="T:Atalasoft.Annotate.UI.AnnotationMouseEventArgs">
      <summary> This class is passed to mouse event handlers. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationMouseEventArgs.#ctor(System.Windows.Forms.MouseButtons,System.Int32,System.Single,System.Single,System.Int32)">
      <summary> Creates a new instance of <STRONG>AnnotationMouseEventArgs</STRONG> specifying its parameters. </summary>
      <param name="button"> The mouse button being pressed. </param>
      <param name="clicks"> The click count. </param>
      <param name="x"> The x position of the mouse. </param>
      <param name="y"> The y position of the mouse. </param>
      <param name="delta"> The delta of the mouse wheel. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationMouseEventArgs.#ctor(System.Windows.Forms.MouseEventArgs)">
      <summary> Creates a new instance of <STRONG>AnnotationMouseEventArgs</STRONG> from a <STRONG>MouseEventArgs</STRONG>
            object. </summary>
      <param name="e"> A <STRONG>MouseEventArgs</STRONG> containing information for this event. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationMouseEventArgs.Button">
      <summary> Gets which mouse button was pressed. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationMouseEventArgs.Clicks">
      <summary> Gets the number of times the mouse button was pressed and released. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationMouseEventArgs.Delta">
      <summary> Gets a signed count of the number of detents the mouse wheel has rotated. A detent is one notch of the
            mouse wheel. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationMouseEventArgs.Processed">
      <summary> Gets or sets a value indicating whether the event has been handled. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationMouseEventArgs.X">
      <summary> Gets the x-coordinate of the mouse. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationMouseEventArgs.Y">
      <summary> Gets the y-coordinate of the mouse. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.AnnotationMouseEventHandler">
      <summary> This event handler is used with several mouse events. </summary>
      <param name="sender"> The object sending the event. </param>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.UI.AnnotationMouseEventArgs" /> containing information about this event. </param>
    </member>
    <member name="T:Atalasoft.Annotate.UI.AnnotationUI">
      <summary> This abstract class represents the base annotation object. All annotations must derive from
            <STRONG>AnnotationUI</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.#ctor(Atalasoft.Annotate.AnnotationData)">
      <summary>
            A constructor for the AnnotationUI object specifying the releated
            AnnotationData.
            </summary>
      <param name="data">
            The AnnotationData for this annotation. This parameter cannot be null (Nothing in
            Visual Basic).
            </param>
      <exception cref="!:" caption="ArgumentNullException">Thrown if the data parameter is null.</exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            A constructor for AnnotationUI specifying the serialization information for this
            annotation.
            </summary>
      <param name="info">The SerializationInfo object containing information about this annotation.</param>
      <param name="context">A StreamingContext for this information.</param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.AddGripsToRegion(Atalasoft.Annotate.AnnotationRegion)">
      <summary>
            Adds the annotation grips to a region. The grips are added in annotation space.
            </summary>
      <param name="region"> The <see cref="T:Atalasoft.Annotate.AnnotationRegion" /> to which grips will be added. </param>
      <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">Thrown if the region argument is null (Nothing in VB).</exception>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationUI.AnnotationControllerNotification">
      <summary>Raised after a property value has been changed.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.ApplyRegionTransform(Atalasoft.Annotate.AnnotationRegion,Atalasoft.Annotate.AnnotateSpace)">
      <summary>
            Use this method to convert a region from annotation space to document or view
            space.
            </summary>
      <param name="region"> The region to convert. This must be a region in annotation space. </param>
      <param name="space"> The space to convert the region into. If this argument is
            <STRONG>AnnotateSpace.Annotation</STRONG>, no transform is applied. </param>
      <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">Thrown if the region argument is null (Nothing in VB).</exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.BeginCreate">
      <summary> This method is called by the <see cref="T:Atalasoft.Annotate.UI.AnnotationController" /> when the user is beginning to create this
            annotation using the mouse. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUI.Bounds">
      <summary> Gets the bounding rectangle for the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUI.CanMirror"></member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUI.CanMove"></member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUI.CanResize"></member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUI.CanRotate"></member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUI.CanSelect"></member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationUI.Click">
      <summary>Raised when the annotation has been clicked with the mouse.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.Clone">
      <summary> Creates a copy of this annotation. </summary>
      <returns> A copy of this <STRONG>AnnotationUI</STRONG>. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUI.ContextMenu">
      <summary> Gets or sets a <STRONG>ContextMenu</STRONG> object that will be displayed when the user right-clicks on
            the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUI.ContextMenuStrip">
      <summary> Gets or sets a <STRONG>ContextMenuStrip</STRONG> object that will be displayed when the user right-clicks
            on the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUI.Controller">
      <summary> Gets the <see cref="T:Atalasoft.Annotate.UI.AnnotationController" /> for this annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.CreateRenderTransform">
      <summary> Returns the <STRONG>Matrix</STRONG> used by the renderer to transform the annotation. </summary>
      <returns> The transform <STRONG>Matrix</STRONG> used when rendering. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUI.CreationTime"></member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUI.Data">
      <summary>Gets the AnnotationData object associated with this annotation.</summary>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationUI.DoubleClick">
      <summary>Raised when the annotation has been double-clicked with the mouse.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.GetConfinedGripPosition(System.Drawing.RectangleF,Atalasoft.Annotate.UI.AnnotationGrip,System.Drawing.PointF,System.Boolean@)"></member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.GetConfinedLocation(System.Drawing.RectangleF,System.Drawing.PointF)">
      <summary> Returns the new confined location of the annotation when a confinement bounds and new location offset are
            provided. </summary>
      <param name="dsConfinedBounds"> The bounding rectangle in document space for the confinement. </param>
      <param name="dsLocationOffset"> The difference between the current and suggested new location of the annotation in
            document space units. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.GetConfinedLocation(System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.PointF)">
      <summary>
        <para>Returns the new confined location of the annotation when the annotation bounds, a confinement bounds
            and new location offset are provided.</para>
        <para>This overload is useful when only a portion of the annotation bounds should be taken into account for this
            calculation.</para>
      </summary>
      <param name="dsAnnotationBounds"> The bounding rectangle of the annotation in document space. </param>
      <param name="dsConfinedBounds"> The bounding rectangle in document space for the confinement. </param>
      <param name="dsLocationOffset"> The difference between the current and suggested new location of the annotation in
            document space units. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.GetConfinedRotation(System.Drawing.RectangleF,System.Single)"></member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this annotation. </summary>
      <param name="info"> The SerializationInfo where data will be stored. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.GetOnePixel">
      <summary> Returns the equivalent of 1 pixel in resolution units. </summary>
      <returns> The equivalent of 1 pixel in resolution units. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.GetRegion(Atalasoft.Annotate.AnnotateSpace)">
      <summary>
            Returns a rectangular region for this annotation, including its grips if
            selected.
            </summary>
      <param name="space">The space coordinate system used to generate this region.</param>
      <returns>The region of this annotation in the specified space.</returns>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.GetViewerParameters">
      <summary> This method is used to get information about the viewer where the annotations are rendered, including
            resolution, zoom (scale) level and scrollbar position. </summary>
      <returns> An <see cref="T:Atalasoft.Annotate.UI.AnnotateViewerParameters" /> object containing the viewer information. </returns>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationUI.GripPositionChanged">
      <summary> Raised when a grip for the annotation has been moved. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUI.Grips">
      <summary> Gets the grips used for the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUI.HitTestRectangle">
      <summary> Gets a rectangle used for hit testing or <STRONG>RectangleF.Empty</STRONG> to use the default hit testing
            method. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUI.Location">
      <summary> Gets or sets the location of the annotation in document space. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.Mirror(Atalasoft.Annotate.MirrorDirection,System.Boolean)">
      <summary> Mirrors (flips) the annotation horizontally or vertically. </summary>
      <param name="direction"> The direction to flip the annotation. </param>
      <param name="maintainPosition"> Determines whether the mirror is performed in place or if the annotation pivots
            along its location. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUI.ModifiedTime"></member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationUI.MouseDown">
      <summary>Raised when a mouse button is pressed while on top of the annotation.</summary>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationUI.MouseEnter">
      <summary>Raised when the mouse enters the annotation region.</summary>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationUI.MouseExit">
      <summary>Raised when the mouse exists the annotation region.</summary>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationUI.MouseMove">
      <summary>Raised when the mouse is moved over the annotation.</summary>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationUI.MouseUp">
      <summary>Raised when the mouse button is released from an annotation.</summary>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationUI.Moved">
      <summary>Raised when the annotation has been moved.</summary>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationUI.Moving">
      <summary>Raised while the annotation is being moved.</summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUI.Name"></member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnAnnotationControllerNotification(Atalasoft.Annotate.AnnotationControllerNotificationEventArgs)">
      <summary> Called after a property of the annotation or related <see cref="T:Atalasoft.Annotate.AnnotationData" /> has been modified.
            </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs" /> containing information on this changed.
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnClick(System.EventArgs)">
      <summary> Called when the user has clicked on the annotation. </summary>
      <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnControllerChanged(System.EventArgs)">
      <summary> Called when the Controller property has changed. </summary>
      <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnDoubleClick(System.EventArgs)">
      <summary> Called when the annotation is double-clicked. </summary>
      <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnGripPositionChanged(Atalasoft.Annotate.UI.AnnotationGripChangedEventArgs)">
      <summary> Called when a grip of the annotation has been moved by the user using the mouse. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.UI.AnnotationGripChangedEventArgs" /> containing information about this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnMirror(Atalasoft.Annotate.MirrorDirection,System.Boolean)">
      <summary> Called when the grips of an annotation have been dragged past the opposite grip. </summary>
      <param name="direction"> The direction in which the annotation should be mirrored. </param>
      <param name="maintainPosition"> Determines whether the mirror is performed in place or if the annotation pivots
            along its location. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnMouseDown(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)">
      <summary> Called when the user clicks down on the annotation. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.UI.AnnotationMouseEventArgs" /> containing information about this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnMouseEnter(System.EventArgs)">
      <summary> Called when the mouse is moved into the annotation region. </summary>
      <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnMouseExit(System.EventArgs)">
      <summary> Called when the mouse is moved out of the annotation region. </summary>
      <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnMouseMove(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)">
      <summary> Called when the user has moved the mouse over the annotation. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.UI.AnnotationMouseEventArgs" /> containing information about this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnMouseUp(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)">
      <summary> Called when the user has released the mouse over the annotation. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.UI.AnnotationMouseEventArgs" /> containing information about this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnMoved(System.EventArgs)">
      <summary> Called when a move to a new location has completed. </summary>
      <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnMoving(Atalasoft.Annotate.AnnotationLocationChangedEventArgs)">
      <summary> Called while an annotation is being moved by the user. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationLocationChangedEventArgs" /> containing information about this event.
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnPropertyChanged(Atalasoft.Annotate.AnnotationPropertyChangedEventArgs)">
      <summary> Called when a property value has changed and raises the <see cref="E:Atalasoft.Annotate.UI.AnnotationUI.PropertyChanged" /> event.
            </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationLocationChangedEventArgs" /> containing information for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)">
      <summary> Called when a property of the annotation or <see cref="T:Atalasoft.Annotate.AnnotationData" /> is about to be changed.
            </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationPropertyChangingEventArgs" /> containing information about this change.
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnResized(System.EventArgs)">
      <summary> Called when a resize on the annotation has completed. </summary>
      <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnResizing(System.EventArgs)">
      <summary> Called while the annotation is being resized by the user. </summary>
      <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnRotate(System.EventArgs)">
      <summary> Called when the <see cref="M:Atalasoft.Annotate.UI.AnnotationUI.Rotate(System.Single)" /> method is called on the annotation. </summary>
      <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnRotated(System.EventArgs)">
      <summary> Called when the annotation has been rotated by the user. </summary>
      <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnRotateDocument(Atalasoft.Annotate.DocumentRotation)">
      <summary> Called when the <see cref="M:Atalasoft.Annotate.UI.AnnotationController.RotateDocument(Atalasoft.Annotate.DocumentRotation,System.Int32)" /> method is used. </summary>
      <param name="rotation"> The amount of rotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnRotating(System.EventArgs)">
      <summary> Called while an annotation is being rotated by the user. </summary>
      <param name="e"> An EventArgs for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnScrollPositionChanged(Atalasoft.Annotate.UI.ScrollPositionChangedEventArgs)">
      <summary> Called when the <STRONG>IAnnotate</STRONG>. <see cref="P:Atalasoft.Annotate.UI.IAnnotate.Transform" /> indicates a change in its
            offset (scroll position). </summary>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.UI.ScrollPositionChangedEventArgs" /> containing information for this change. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnSelectedChanged(System.EventArgs)">
      <summary> Called when the <see cref="P:Atalasoft.Annotate.UI.AnnotationUI.Selected" /> property of the annotation has changed. </summary>
      <param name="e"> An <STRONG>EventArgs</STRONG> for this event. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.OnSizeChanged(Atalasoft.Annotate.AnnotationSizeChangedEventArgs)">
      <summary> Called when the <see cref="P:Atalasoft.Annotate.AnnotationData.Size" /> property of the annotation has changed. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationSizeChangedEventArgs" /> containing information for this event. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUI.ParentLayer">
      <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation" /> that contains this annotation. </summary>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationUI.PropertyChanged">
      <summary> Raised when a property value has changed. </summary>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationUI.PropertyChanging">
      <summary> Raised when a property of the annotation or <see cref="T:Atalasoft.Annotate.AnnotationData" /> is going to be changed.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.RaiseClickEvent">
      <summary> Use this method to force a <see cref="E:Atalasoft.Annotate.UI.AnnotationUI.Click" /> event on the annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.RaiseDoubleClickEvent">
      <summary> Use this method to force a <see cref="E:Atalasoft.Annotate.UI.AnnotationUI.DoubleClick" /> event on the annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.RaiseGripPositionChangedEvent(Atalasoft.Annotate.UI.AnnotationGripChangedEventArgs)">
      <summary> Use this method to force a <see cref="E:Atalasoft.Annotate.UI.AnnotationUI.GripPositionChanged" /> event on the annotation.
            </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.UI.AnnotationGripChangedEventArgs" /> containing information about this event. </param>
      <exception> Thrown if the event args is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.RaiseMouseDownEvent(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)">
      <summary> Use this method to force a <see cref="E:Atalasoft.Annotate.UI.AnnotationUI.MouseDown" /> event on the annotation. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.UI.AnnotationMouseEventArgs" /> containing information about the <see cref="E:Atalasoft.Annotate.UI.AnnotationUI.MouseDown" /> event. </param>
      <exception> Thrown if the event args is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.RaiseMouseEnterEvent">
      <summary> Use to force the <see cref="E:Atalasoft.Annotate.UI.AnnotationUI.MouseEnter" /> event for the annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.RaiseMouseExitEvent">
      <summary> Use to force a <see cref="E:Atalasoft.Annotate.UI.AnnotationUI.MouseExit" /> event on the annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.RaiseMouseMoveEvent(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)">
      <summary> Use this method to force a <see cref="E:Atalasoft.Annotate.UI.AnnotationUI.MouseMove" /> event on the annotation. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.UI.AnnotationMouseEventArgs" /> containing information about this event. </param>
      <exception> Thrown if the event args is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.RaiseMouseUpEvent(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)">
      <summary> Use this method to force a <see cref="E:Atalasoft.Annotate.UI.AnnotationUI.MouseUp" /> event on the annotation. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.UI.AnnotationMouseEventArgs" /> containing information for this event. </param>
      <returns> True if the annotation is finished being created.  Point base annotations will return false while being
            created until the final point. </returns>
      <exception> Thrown if the event args is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.RaiseMovedEvent">
      <summary> Use this method to force a <see cref="E:Atalasoft.Annotate.UI.AnnotationUI.Moved" /> event on the annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.RaiseMovingEvent(Atalasoft.Annotate.AnnotationLocationChangedEventArgs)">
      <summary> Use this method to force a <see cref="E:Atalasoft.Annotate.UI.AnnotationUI.Moving" /> event on the annotation. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationLocationChangedEventArgs" /> containing information about this event.  This
            may be null (Nothing in VB). </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.RaiseOnRotateDocument(Atalasoft.Annotate.DocumentRotation)">
      <summary> Use this method to force the <see cref="M:Atalasoft.Annotate.UI.AnnotationUI.OnRotateDocument(Atalasoft.Annotate.DocumentRotation)" /> method to be called. </summary>
      <param name="rotation"> The amount of rotation applied. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.RaiseResizedEvent">
      <summary> Use this method to force a <see cref="E:Atalasoft.Annotate.UI.AnnotationUI.Resized" /> event on the annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.RaiseRotatedEvent">
      <summary> This method invokes the <see cref="E:Atalasoft.Annotate.UI.AnnotationUI.Rotated" /> event. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.RaiseScrollPositionChangedEvent(Atalasoft.Annotate.UI.ScrollPositionChangedEventArgs)">
      <summary> Use this method to force the <see cref="M:Atalasoft.Annotate.UI.AnnotationUI.OnScrollPositionChanged(Atalasoft.Annotate.UI.ScrollPositionChangedEventArgs)" /> method to be called.
            </summary>
      <param name="e"> A <see cref="T:Atalasoft.Annotate.UI.ScrollPositionChangedEventArgs" /> containing information about this event. </param>
      <exception> Thrown if the event args is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.Remove">
      <summary> Forces the annotation to remove itself from its parent layer. </summary>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationUI.Resized">
      <summary>Raised when the annotation has been resized.</summary>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationUI.Resizing">
      <summary>Raised while the annotation is being resized.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.Rotate(System.Single)">
      <summary> Rotates the annotation by the specified number of degrees. </summary>
      <param name="degrees"> The number of degrees to rotate the annotation. </param>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationUI.Rotated">
      <summary>
            Raised after the annotation has been rotated by the user.
            </summary>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationUI.Rotating">
      <summary> Raise while an annotation is being rotated. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUI.Rotation"></member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUI.Security"></member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUI.Selected">
      <summary> Gets or sets a value indicating whether this annotation the selected. </summary>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationUI.SelectedChanged">
      <summary> Raised when the <see cref="P:Atalasoft.Annotate.UI.AnnotationUI.Selected" /> property changes. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.SetGrips(Atalasoft.Annotate.UI.IAnnotationGrips)">
      <summary> Sets the grips used by the annotation. </summary>
      <param name="grips"> The grips to use. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUI.Size">
      <summary> Gets or sets the size of the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUI.State">
      <summary> Gets or sets the current state of the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUI.ToolTip"></member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUI.Transform"></member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUI.TransformRectangle(System.Drawing.RectangleF)">
      <summary> Applies the render transformation matrix to a rectangle. </summary>
      <param name="rectangle"> The rectangle to transform. </param>
      <returns> The transformed rectangle. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUI.UserName"></member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUI.Visible">
      <summary> Gets or sets a value indicating whether the annotation is visible. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.AnnotationUICollection">
      <summary> This class holds a collection of annotation objects. <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation" />s use this collection to
            hold the <see cref="T:Atalasoft.Annotate.UI.AnnotationUI" /> objects they contain. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.#ctor">
      <summary> Creates a new instance of <STRONG>AnnotationUICollection</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.#ctor(Atalasoft.Annotate.UI.AnnotationUI[])">
      <summary> Creates a new instance of <STRONG>AnnotationUICollection</STRONG> specifying an array of <see cref="T:Atalasoft.Annotate.UI.AnnotationUI" /> objects. </summary>
      <param name="annotations"> An array of <see cref="T:Atalasoft.Annotate.UI.AnnotationUI" /> objects to initialize the collection with.
            </param>
      <exception> Thrown if the annotations argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.#ctor(System.Boolean)">
      <summary> Creates a new instance of <STRONG>AnnotationUICollection</STRONG> used for storage. </summary>
      <param name="storage"> Indicates whether this collection is only used for storage. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>AnnotationUICollection</STRONG> from serialized information. </summary>
      <param name="info"> The SerializationInfo object containing information about this collection. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info parameter is null. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.Add(Atalasoft.Annotate.UI.AnnotationUI)">
      <summary> Adds a single annotation to the collection. </summary>
      <param name="annotation"> The annotation to add. </param>
      <exception> Thrown if the annotation parameter is null. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.AddRange(Atalasoft.Annotate.UI.AnnotationUI[])">
      <summary> Adds an array of annotations to the collection. </summary>
      <param name="annotations"> An array of annotations to add. </param>
      <exception> Thrown if the annotations parameter is null. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.AddRange(Atalasoft.Annotate.UI.AnnotationUICollection)">
      <summary> Adds annotations from another <STRONG>AnnotationUICollection</STRONG> to this collection. </summary>
      <param name="annotations"> An <STRONG>AnnotationUICollection</STRONG> containing items to add into this collection.
            </param>
      <exception> Thrown if the annotations parameter is null. </exception>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationUICollection.AnnotationControllerNotification">
      <summary> Raised when there has been a change to an item in this collection. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.Clone">
      <summary>Creates a copy of this collection and all items it contains.</summary>
      <returns>A copy of this AnnotationUICollection.</returns>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationUICollection.CollectionChanged">
      <summary> Raised when there has been a change in the collection. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.Contains(Atalasoft.Annotate.UI.AnnotationUI)">
      <summary> Determines if an annotation is contained within the collection. </summary>
      <param name="annotation"> The annotation to search for. </param>
      <returns> True if the annotation is within the collection. </returns>
      <exception> Thrown if the annotation parameter is null. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.CopyTo(Atalasoft.Annotate.UI.AnnotationUI[])">
      <summary> Copies all of the items from this collection into an array. </summary>
      <param name="array"> The array where items will be copied. </param>
      <exception> Thrown if the array is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.CopyTo(Atalasoft.Annotate.UI.AnnotationUI[],System.Int32)">
      <summary> Copies items into the specifed array. </summary>
      <param name="array"> The array to copy items into. </param>
      <param name="index"> An index in the target array where copying will being. </param>
      <exception> Thrown if the array is null (Nothing in VB). </exception>
      <exception> Thrown if the index is invalid. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.CopyTo(System.Int32,Atalasoft.Annotate.UI.AnnotationUI[],System.Int32,System.Int32)">
      <summary> Copies annotations from this collection into an array. </summary>
      <param name="index"> The index of this collection where copying will begin. </param>
      <param name="array"> The array to copy items into. </param>
      <param name="arrayIndex"> The index in the array where copying will begin. </param>
      <param name="count"> The number of items to copy. </param>
      <exception> Thrown if the index or arrayIndex arguments are invalid. </exception>
      <exception> Thrown if array is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.Dispose">
      <summary> Disposes this collection and all items it contains. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.Dispose(System.Boolean)">
      <summary> Releases resources used by this object. </summary>
      <param name="disposing"> A value indicating whether this method was called from the public <see cref="M:Atalasoft.Annotate.UI.AnnotationUICollection.Dispose" /> method. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.Finalize"></member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this collection. </summary>
      <param name="info"> The SerializationInfo object where data will be stored. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info parameter is null. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.IndexOf(Atalasoft.Annotate.UI.AnnotationUI)">
      <summary> Returns the index of a specified annotation. </summary>
      <param name="annotation"> The annotation to search for. </param>
      <returns> The collection index of the annotation or -1 if the annotation was not found. </returns>
      <exception> Thrown if the annotation is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.Insert(System.Int32,Atalasoft.Annotate.UI.AnnotationUI)">
      <summary>
            Inserts an annotation into the collection at the specified position.
            </summary>
      <param name="index"> The index in the collection where the annotation will be inserted. </param>
      <param name="annotation"> The annotation to insert. </param>
      <exception cref="!:" caption="ArgumentNullException">Thrown if the annotation parameter is null.</exception>
      <exception cref="!:" caption="ArgumentOutOfRangeException">Thrown if the index parameter is out of range for this collection.</exception>
      <exception cref="!:" caption="ArgumentException">Thrown if the annotation already exists in the collection.
            To move an annotation to a different location, use the ChangePosition method.</exception>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUICollection.Item(System.Int32)">
      <summary>Gets the AnnotationUI at the specified index.</summary>
      <param name="index">The index in the collection of the annotation to retrieve.</param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.OnClear">
      <summary> Called when the <STRONG>Clear</STRONG> method is used. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.OnClearComplete">
      <summary> Called when the clear operation has finished. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.OnCollectionChanged(Atalasoft.Utils.CollectionChangedEventArgs)">
      <summary> Called when there is a change to the collection. </summary>
      <param name="args"> An <see cref="T:Atalasoft.Utils.CollectionChangedEventArgs" /> containing information about this change.
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.OnDeserialization(System.Object)">
      <summary> Called after an object has been fully deserialized by a serialization formatter. </summary>
      <param name="sender"> This parameter is not used and will be <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB).
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.OnInsertComplete(System.Int32,System.Object)">
      <summary> Called when an insert operation has finished. </summary>
      <param name="index"> The index of the item inserted. </param>
      <param name="value"> The item that was inserted.  This could be an array of objects. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.OnRemove(System.Int32,System.Object)">
      <summary> Called when an annotation is removed from the collection. </summary>
      <param name="index"> The index of the annotation being removed. </param>
      <param name="value"> The annotation being removed. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.OnRemoveComplete(System.Int32,System.Object)">
      <summary> Called when a remove operation has finished. </summary>
      <param name="index"> The index of the item removed. </param>
      <param name="value"> The item that was removed.  This may be an array of objects. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.OnSetComplete(System.Int32,System.Object,System.Object)">
      <summary> Called when an item has been swapped with another. </summary>
      <param name="index"> The index of the item. </param>
      <param name="oldValue"> The old item. </param>
      <param name="newValue"> The new item. </param>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationUICollection.PropertyChanging">
      <summary> Raise before a change is applied to an item in this collection. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.Remove(Atalasoft.Annotate.UI.AnnotationUI)">
      <summary> Removes an annotation from the collection. </summary>
      <param name="annotation"> The annotation to remove. </param>
      <exception> Thrown if the annotation parameter is null. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUICollection.Remove(Atalasoft.Annotate.UI.AnnotationUI[])">
      <summary> Removes multiple annotations from the collection. </summary>
      <param name="annotations"> An array of <see cref="T:Atalasoft.Annotate.UI.AnnotationUI" /> objects to remove. </param>
      <exception> Thrown if the annotations argument is null (Nothing in VB). </exception>
    </member>
    <member name="T:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection">
      <summary> This class is a collection of <see cref="T:Atalasoft.Annotate.UI.IAnnotationUIFactory" /> objects which are used to create new <see cref="T:Atalasoft.Annotate.UI.AnnotationUI" /> objects from <see cref="T:Atalasoft.Annotate.AnnotationData" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection.#ctor">
      <summary> Creates a new instance of <STRONG>AnnotationUIFactoryCollection</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection.Add(Atalasoft.Annotate.UI.IAnnotationUIFactory)">
      <summary> Adds an <see cref="T:Atalasoft.Annotate.UI.IAnnotationUIFactory" /> to the collection. </summary>
      <param name="factory"> The factory to add. </param>
      <exception> Thrown if the factory parameter is null. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection.GetAnnotationFromData(Atalasoft.Annotate.AnnotationData)">
      <summary> Returns a new <see cref="T:Atalasoft.Annotate.UI.AnnotationUI" /> object for the <see cref="T:Atalasoft.Annotate.AnnotationData" /> provided. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.AnnotationData" /> object from which the <see cref="T:Atalasoft.Annotate.UI.AnnotationUI" /> must be
            created. </param>
      <returns> A new <see cref="T:Atalasoft.Annotate.UI.AnnotationUI" /> object for the <see cref="T:Atalasoft.Annotate.AnnotationData" /> or a <see cref="T:Atalasoft.Annotate.UI.RectangleAnnotation" /> if no <see cref="T:Atalasoft.Annotate.UI.IAnnotationUIFactory" /> can be found for the data. </returns>
      <exception> Thrown if the data argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection.Insert(System.Int32,Atalasoft.Annotate.UI.IAnnotationUIFactory)">
      <summary> Inserts an item into the collection. </summary>
      <param name="index"> The index where the item will be inserted. </param>
      <param name="factory"> The factory to insert. </param>
      <exception> Thrown if the factory is null (Nothing in VB). </exception>
      <exception> Thrown if the index is invalid. </exception>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection.Item(System.Int32)">
      <summary>Get the IAnnotationUIFactory at the specified index.</summary>
      <param name="index">The index of the item to return.</param>
      <exception cref="!:" caption="ArgumentOutOfRangeException">Thrown if the index is out of range for this collection.</exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection.Remove(Atalasoft.Annotate.UI.IAnnotationUIFactory)">
      <summary> Removes a factory from the collection. </summary>
      <param name="factory"> The factory to remove. </param>
      <exception> Thrown if the factory parameter is null. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection.Replace(Atalasoft.Annotate.UI.IAnnotationUIFactory,Atalasoft.Annotate.UI.IAnnotationUIFactory)">
      <summary> Replaces a factory in the collection. </summary>
      <param name="oldFactory"> The factory currently in the collection. </param>
      <param name="newFactory"> The new factory that will replace the old one. </param>
      <exception cref="!:" caption="ArgumentNullException">Thrown if the oldFactory or newFactory parameter is null.</exception>
    </member>
    <member name="T:Atalasoft.Annotate.UI.AnnotationUndo">
      <summary> This class is used to store an undo or redo change for an object. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUndo.#ctor(System.Object,Atalasoft.Annotate.UndoChange,System.String)">
      <summary> Creates a new instance of <STRONG>AnnotationUndo</STRONG> specifying the object being modified and the
            type of change being performed. </summary>
      <param name="item"> The object being changed. </param>
      <param name="change"> The type of change being performed. </param>
      <param name="description"> A short string describing the undo. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUndo.#ctor(System.Object,System.Object,Atalasoft.Annotate.UndoChange,System.String)">
      <summary> Creates a new instance of <STRONG>AnnotationUndo</STRONG> specifying the object being changed, the current
            value of the object and the type of change being performed. </summary>
      <param name="item"> The object being changed. </param>
      <param name="value"> The current value of the object. </param>
      <param name="change"> The type of change being performed. </param>
      <param name="description"> A short string describing the undo. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUndo.#ctor(System.Object,System.Object,System.Int32,Atalasoft.Annotate.UndoChange,System.String)">
      <summary> Creates a new instance of <STRONG>AnnotationUndo</STRONG> specifying the object being changed, the current
            value of the object and the type of change being performed. </summary>
      <param name="item"> The object being changed. </param>
      <param name="value"> The current value of the object. </param>
      <param name="index"> The index of the item or -1 if no index is required. </param>
      <param name="change"> The type of change being performed. </param>
      <param name="description"> A short string describing the undo. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUndo.#ctor(System.Object,System.String,System.Object,System.String)">
      <summary> Creates a new instance of <STRONG>AnnotationUndo</STRONG> specifying the object being changed, name of the
            property being changed, the current value of the property and a description of the undo. </summary>
      <param name="item"> The object being changed. </param>
      <param name="propertyName"> The name of the property being changed. </param>
      <param name="value"> The current value of the property. </param>
      <param name="description"> A short string describing the undo. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUndo.#ctor(System.Object,System.String,System.Object[],System.String,System.Object[],System.String)">
      <summary> Creates a new instance of <STRONG>AnnotationUndo</STRONG> for methods. </summary>
      <param name="item"> The object where the undo and redo methods exist. </param>
      <param name="undoMethodName"> The name of the method called when an undo is performed. </param>
      <param name="undoMethodParameters"> An object array containing the parameters sent to the undo method or
            <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB) if no parameters are required. </param>
      <param name="redoMethodName"> The name of the method called when a redo is performed. </param>
      <param name="redoMethodParameters"> An object array containing the parameters sent to the redo method or
            <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB) if no parameters are required. </param>
      <param name="description"> A string description of this undo action. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUndo.Change">
      <summary> Gets the type of undo change being performed. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUndo.Description">
      <summary> Gets the description of the undo. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUndo.Index">
      <summary> Gets the index of the item. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUndo.Item">
      <summary> Gets the object that was changed. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUndo.PropertyName">
      <summary> Gets the name of the property that was changed. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUndo.RedoMethodName">
      <summary> Gets the name of the method called when performing a redo. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUndo.RedoMethodParameters">
      <summary> Gets an object array containing the parameters used by the <see cref="M:Atalasoft.Annotate.UI.AnnotationUndoManager.Redo" />
            method. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUndo.UndoMethodName">
      <summary> Gets the name of the method that will be called when an undo is performed. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUndo.UndoMethodParameters">
      <summary> Gets an object array of parameters sent to the <see cref="M:Atalasoft.Annotate.UI.AnnotationUndoManager.Undo" /> method. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUndo.Value">
      <summary> Gets the value of the object or property. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.AnnotationUndoManager">
      <summary> The <STRONG>AnnotationUndoManager</STRONG> keeps track of annotation changes and allows undo and redo
            functionality. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUndoManager.#ctor">
      <summary> Creates a new instance of <STRONG>AnnotationUndoManager</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUndoManager.AddUndo(Atalasoft.Annotate.UI.AnnotationUndo)">
      <summary> Adds an undo to the collection. </summary>
      <param name="undo"> The <see cref="T:Atalasoft.Annotate.UI.AnnotationUndo" /> to add. </param>
      <exception cref="T:System.ArgumentNullException"> Thrown if the undo argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUndoManager.BeginUndoMerge">
      <summary> This method puts the <see cref="T:Atalasoft.Annotate.UI.AnnotationUndoManager" /> into a collective undo state. All calls to <see cref="M:Atalasoft.Annotate.UI.AnnotationUndoManager.AddUndo(Atalasoft.Annotate.UI.AnnotationUndo)" /> will be collected until the <see cref="M:Atalasoft.Annotate.UI.AnnotationUndoManager.EndUndoMerge(System.String)" />
            method has been called. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUndoManager.Clear">
      <summary> Clears the undo and redo collections. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUndoManager.EndUndoMerge(System.String)">
      <summary> Exits the collective undo state and stores all actions added since the <see cref="M:Atalasoft.Annotate.UI.AnnotationUndoManager.BeginUndoMerge" /> call as a single undo operation. </summary>
      <param name="description">A short description of the collective undo action.</param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUndoManager.GetRedoDescriptions">
      <summary> Returns a string array of the descriptions in the order which they would be redone. This is useful for
            displaying a list of items to redo. For displaying only the latest redo description use the <see cref="P:Atalasoft.Annotate.UI.AnnotationUndoManager.RedoDescription" /> method. </summary>
      <returns> A string array containing the redo descriptions. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUndoManager.GetUndoDescriptions">
      <summary> Returns a string array of the descriptions in the order which they would be undone. This is useful for
            displaying a list of items to undo. For displaying only the latest undo description use the <see cref="P:Atalasoft.Annotate.UI.AnnotationUndoManager.UndoDescription" /> method. </summary>
      <returns> An array of string descriptions for the undos. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUndoManager.Levels">
      <summary> Gets or sets the number of undo/redo levels to keep in memory. </summary>
      <exception> Thrown if the value is set to less than zero. </exception>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUndoManager.Merging">
      <summary>
            Gets a value indicating whether the manager is merging undos added into a single
            undo action.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUndoManager.Redo">
      <summary> Performs a redo on the collection and raises the <see cref="E:Atalasoft.Annotate.UI.AnnotationUndoManager.RedoRequest" /> event
            with the <see cref="T:Atalasoft.Annotate.UI.AnnotationUndo" /> that was processed. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUndoManager.RedoCount">
      <summary> Gets the number of redos available. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUndoManager.RedoDescription">
      <summary> Gets the description string of the redo that will be performed when <see cref="M:Atalasoft.Annotate.UI.AnnotationUndoManager.Redo" /> is called. </summary>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationUndoManager.RedoRequest">
      <summary> Raised when a call to <see cref="M:Atalasoft.Annotate.UI.AnnotationUndoManager.Redo" /> has been requested. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.AnnotationUndoManager.Undo">
      <summary> Performs an undo on the collection and raises the <see cref="E:Atalasoft.Annotate.UI.AnnotationUndoManager.UndoRequest" /> event
            with the <see cref="T:Atalasoft.Annotate.UI.AnnotationUndo" /> that was processed. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUndoManager.UndoCount">
      <summary> Gets the number of undos available. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.AnnotationUndoManager.UndoDescription">
      <summary> Gets the description string of the undo that will be performed when <see cref="M:Atalasoft.Annotate.UI.AnnotationUndoManager.Undo" /> is called. </summary>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationUndoManager.UndoListChanged">
      <summary> Raised when the items in the undo stack have changed. </summary>
    </member>
    <member name="E:Atalasoft.Annotate.UI.AnnotationUndoManager.UndoRequest">
      <summary> Raised when a call to <see cref="M:Atalasoft.Annotate.UI.AnnotationUndoManager.Undo" /> has been requested. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.CalloutAnnotation">
      <summary>
        <para>This annotation is designed to provide additional information on a specific area of the document. 
            It contains an editable text area and a leader line used to point to the area of the document.</para>
        <para>When creating this annotation, the first click sets the target for the leader and a second click sets the
            annotation location.  It can also be created by pressing down the mouse button to set the leader and dragging.  Both
            annotation and leader point can be repositioned independently after the annotation has been created.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.#ctor">
      <summary> Creates a new instance of <STRONG>CalloutAnnotation</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.#ctor(Atalasoft.Annotate.CalloutData)">
      <summary> Creates a new instance of <STRONG>CalloutAnnotation</STRONG> specifying the <see cref="T:Atalasoft.Annotate.CalloutData" />
            object used by the annotation. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.CalloutData" /> used with this annotation. </param>
      <exception> Thrown if the data argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>CalloutAnnotation</STRONG> from serialized information. </summary>
      <param name="info"> A <STRONG>SerializationInfo</STRONG> object containing information for this annotation. </param>
      <param name="context"> A <STRONG>StreamingContext</STRONG> for the serialized information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.#ctor(System.String)">
      <summary> Creates a new instance of <STRONG>CalloutAnnotation</STRONG> specifying the text for the annotation.
            </summary>
      <param name="text"> The text for the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.#ctor(System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,System.Single)">
      <summary> Creates a new instance of <STRONG>CalloutAnnotation</STRONG> specifying the text, font and font brush for
            the annotation. </summary>
      <param name="text"> The text for the annotation. </param>
      <param name="font"> The font used to render the text. </param>
      <param name="fontBrush"> The brush used to render the text. </param>
      <param name="padding"> The amount of space around the text. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.#ctor(System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,System.Single,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationPen,System.Single)">
      <summary> Creates a new instance of <STRONG>CalloutAnnotation</STRONG> specifying the text, font, font brush,
            outline and line pen. </summary>
      <param name="text"> The text for the annotation. </param>
      <param name="font"> The font used to render the text. </param>
      <param name="fontBrush"> The brush used to render the text. </param>
      <param name="padding"> The amount of space around the text. </param>
      <param name="fill"> The brush used to fill the text area of the annotation. </param>
      <param name="outline"> The pen used to render an outline around the text area of the annotation. </param>
      <param name="leader"> The pen used to render the line of the annotation. </param>
      <param name="leaderFlatLength"> The length from the annotation to the leader bend. </param>
      <exception> Thrown if the leaderFlatLength is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.#ctor(System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,System.Single,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationPen,System.Single,System.Drawing.PointF,System.Boolean)">
      <summary> Creates a new instance of <STRONG>CalloutAnnotation</STRONG> specifying its parameters. </summary>
      <param name="text"> The text for the annotation. </param>
      <param name="font"> The font used to render the text. </param>
      <param name="fontBrush"> The brush used to render the text. </param>
      <param name="padding"> The amount of space around the text. </param>
      <param name="fill"> The brush used to fill the text area of the annotation. </param>
      <param name="outline"> The pen used to render an outline around the text area of the annotation. </param>
      <param name="leader"> The pen used to render the line of the annotation. </param>
      <param name="leaderFlatLength"> The length from the annotation to the leader bend. </param>
      <param name="targetPosition"> The document position the line will point to. </param>
      <param name="autoSize"> Indicates whether the annotation will automatically resize to fit the text. </param>
      <exception> Thrown if the leaderFlatLength is less than 0. </exception>
    </member>
    <member name="P:Atalasoft.Annotate.UI.CalloutAnnotation.AllowEditing"></member>
    <member name="P:Atalasoft.Annotate.UI.CalloutAnnotation.AutoSize">
      <summary> Gets or sets a value indicating whether the annotation will automatically resize to fit the text.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.BeginCreate"></member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.Clone"></member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.Dispose">
      <summary> Releases resources used by the annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.Dispose(System.Boolean)">
      <summary> Releases resources used by the annotation. </summary>
      <param name="disposing"> Indicates if this method was called from the public <see cref="M:Atalasoft.Annotate.UI.CalloutAnnotation.Dispose" /> method. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.CalloutAnnotation.EditMode">
      <summary> Gets or sets a value indicating whether the annotation text is currently in edit mode. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.CalloutAnnotation.Fill">
      <summary> Gets or sets the brush used to fill the text area of the annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.Finalize"></member>
    <member name="P:Atalasoft.Annotate.UI.CalloutAnnotation.Font">
      <summary> Gets or sets the font used to render the text. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.CalloutAnnotation.FontBrush">
      <summary> Gets or sets the brush used to render the text. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.GetConfinedLocation(System.Drawing.RectangleF,System.Drawing.PointF)"></member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.GetRegion(Atalasoft.Annotate.AnnotateSpace)"></member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.HideEditDialog">
      <summary> Removes the edit control from the viewer. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.CalloutAnnotation.Leader">
      <summary> Gets or sets the pen used for the line of the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.CalloutAnnotation.LeaderFlatLength">
      <summary> Gets or sets the length of the leader line to the bend. </summary>
      <exception> Thrown if the value is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.OnDoubleClick(System.EventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.OnGripPositionChanged(Atalasoft.Annotate.UI.AnnotationGripChangedEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.OnMouseDown(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.OnMouseMove(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.OnMouseUp(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.OnMoving(Atalasoft.Annotate.AnnotationLocationChangedEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.OnResizing(System.EventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.OnRotateDocument(Atalasoft.Annotate.DocumentRotation)"></member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.OnRotating(System.EventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.OnScrollPositionChanged(Atalasoft.Annotate.UI.ScrollPositionChangedEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.OnSelectedChanged(System.EventArgs)"></member>
    <member name="P:Atalasoft.Annotate.UI.CalloutAnnotation.Outline">
      <summary> Gets or sets the pen used to outline the text area of the annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotation.ShowEditDialog">
      <summary> Adds an edit control to the viewer to allow the user to change the text. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.CalloutAnnotation.TargetPosition">
      <summary> Gets or sets the position on the document the line will point to. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.CalloutAnnotation.Text">
      <summary> Gets or sets the text of the annotation. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.CalloutAnnotationFactory">
      <summary> This class generates a <see cref="T:Atalasoft.Annotate.UI.CalloutAnnotation" /> object from a <see cref="T:Atalasoft.Annotate.CalloutData" /> class for
            use with the <see cref="T:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotationFactory.#ctor">
      <summary> Creates a new instance of <STRONG>CalloutAnnotationFactory</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.CalloutAnnotationFactory.GetAnnotationUI(Atalasoft.Annotate.AnnotationData)">
      <summary> Returns a <see cref="T:Atalasoft.Annotate.UI.CalloutAnnotation" /> if the data object is a <see cref="T:Atalasoft.Annotate.CalloutData" /> class.
            </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.AnnotationData" /> object for the annotation. </param>
      <returns> A <see cref="T:Atalasoft.Annotate.UI.CalloutAnnotation" /> or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic) if
            the <EM>data</EM> parameter is not a <see cref="T:Atalasoft.Annotate.CalloutData" /> object. </returns>
      <exception> Thrown if the data argument is null (Nothing in VB). </exception>
    </member>
    <member name="T:Atalasoft.Annotate.UI.EllipseAnnotation">
      <summary> This class uses an <see cref="T:Atalasoft.Annotate.EllipseData" /> object to generate an ellipse annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.EllipseAnnotation.#ctor">
      <summary> Creates a new instance of <STRONG>EllipseAnnotation</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.EllipseAnnotation.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen)">
      <summary> Creates a new instance of <STRONG>EllipseAnnotation</STRONG> specifying its fill and outline. </summary>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the outline of the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.EllipseAnnotation.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
      <summary> Creates a new instance of <STRONG>EllipseAnnotation</STRONG> specifying the fill, outline, shadow brush
            and shadow offset. </summary>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the outline of the annotation. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to draw the shadow of the annotation. </param>
      <param name="shadowOffset"> The amount of offset from the annotation for the shadow. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.EllipseAnnotation.#ctor(Atalasoft.Annotate.EllipseData)">
      <summary> Creates a new instance of <STRONG>EllipseAnnotation</STRONG> specifying the ellipse data. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.EllipseData" /> object used by this annotation. </param>
      <exception> Thrown if the data argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.EllipseAnnotation.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationBrush)">
      <summary> Creates a new instance of <STRONG>EllipseAnnotation</STRONG> specifying the bounding rectangle and fill.
            </summary>
      <param name="rectangle"> The bounding rectangle of the ellipse. </param>
      <param name="fill"> The fill used by the ellipse. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.EllipseAnnotation.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
      <summary> Creates a new instance of <STRONG>EllipseAnnotation</STRONG> specifying the bounding rectangle, fill,
            outline and shadow options. </summary>
      <param name="rectangle"> The bounding rectangle of the ellipse. </param>
      <param name="fill"> The fill used by the ellipse. </param>
      <param name="outline"> The outline used by the ellipse. </param>
      <param name="shadow"> A value indicating whether or not the ellipse has a shadow. </param>
      <param name="shadowOffset"> The amount of offset from the annotation for the shadow. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.EllipseAnnotation.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationBrush,System.Boolean)">
      <summary> Creates a new instance of <STRONG>EllipseAnnotation</STRONG> specifying the rectangle, fill and
            translucent properties. </summary>
      <param name="rectangle"> The rectangle for this annotation. </param>
      <param name="fill"> The AnnotationBrush used to fill this annotation. </param>
      <param name="translucent"> A value indicating whether this annotation will act as a highlighter. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.EllipseAnnotation.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationPen)">
      <summary> Creates a new instance of <STRONG>EllipseAnnotation</STRONG> specifying the bounding rectangle and
            outline. </summary>
      <param name="rectangle"> The bounding rectangle of the ellipse. </param>
      <param name="outline"> The outline used by the ellipse. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.EllipseAnnotation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>EllipseAnnotation</STRONG> from serialized information. </summary>
      <param name="info"> A SerializationInfo object containing information for this annotation. </param>
      <param name="context"> A StreamingContext for this data. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.EllipseAnnotation.Clone"></member>
    <member name="P:Atalasoft.Annotate.UI.EllipseAnnotation.Fill">
      <summary> Gets or sets the fill used for the annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.EllipseAnnotation.GetRegion(Atalasoft.Annotate.AnnotateSpace)"></member>
    <member name="P:Atalasoft.Annotate.UI.EllipseAnnotation.Outline">
      <summary> Gets or sets the outline of the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.EllipseAnnotation.Shadow">
      <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used draw the drop shadow. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.EllipseAnnotation.ShadowOffset">
      <summary> Gets or sets the shadow offset. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.EllipseAnnotation.Translucent">
      <summary> Gets or sets a value indicating whether this annotation is used as a highlighter. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.EllipseAnnotationFactory">
      <summary> This class generates an <see cref="T:Atalasoft.Annotate.UI.EllipseAnnotation" /> object from an <see cref="T:Atalasoft.Annotate.EllipseData" /> class for
            use with the <see cref="T:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.EllipseAnnotationFactory.#ctor">
      <summary> Creates a new instance of <STRONG>EllipseAnnotationFactory</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.EllipseAnnotationFactory.GetAnnotationUI(Atalasoft.Annotate.AnnotationData)">
      <summary> Returns an <see cref="T:Atalasoft.Annotate.UI.EllipseAnnotation" /> if the data object is an <see cref="T:Atalasoft.Annotate.EllipseData" /> class.
            </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.AnnotationData" /> object for the annotation. </param>
      <returns> An <see cref="T:Atalasoft.Annotate.UI.EllipseAnnotation" /> or null (Nothing in Visual Basic) if the <EM>data</EM> parameter is not
            an <see cref="T:Atalasoft.Annotate.EllipseData" /> object. </returns>
      <exception> Thrown if the data argument is null (Nothing in VB). </exception>
    </member>
    <member name="T:Atalasoft.Annotate.UI.EmbeddedImageAnnotation">
      <summary>
            This is an image annotation that will embed the image into the serialized XMP or
            WANG data.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.#ctor">
      <summary> Creates a new instance of <STRONG>EmbeddedImageAnnotation</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.#ctor(Atalasoft.Annotate.AnnotationImage,System.Boolean)">
      <summary> Creates a new instance of <STRONG>EmbeddedImageAnnotation</STRONG> specifying the image. </summary>
      <param name="image"> The image for the annotation. </param>
      <param name="keepAspectRatio"> Indicates whether the aspect ratio of the image is maintained. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.#ctor(Atalasoft.Annotate.AnnotationImage,System.Boolean,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
      <summary> Creates a new instance of <STRONG>EmbeddedImageAnnotation</STRONG> specifying the image, shadow and shadow
            offset. </summary>
      <param name="image"> The image to embed. </param>
      <param name="keepAspectRatio"> Indicates whether the aspect ratio of the image is maintained. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the drop shadow. </param>
      <param name="shadowOffset"> The offset used to specifying the position of the drop shadow. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.#ctor(Atalasoft.Annotate.AnnotationImage,System.Boolean,System.Drawing.PointF)">
      <summary> Creates a new instance of <STRONG>EmbeddedImageAnnotation</STRONG> specifying the image, whether or not to
            maintain the aspect ratio and the initial location of this object. </summary>
      <param name="image"> The image for the annotation. </param>
      <param name="keepAspectRatio"> Indicates whether the aspect ratio of the image is maintained. </param>
      <param name="location"> The initial location of this annotation on the document. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.#ctor(Atalasoft.Annotate.AnnotationImage,System.Boolean,System.Drawing.PointF,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
      <summary> Creates a new instance of <STRONG>EmbeddedImageAnnotation</STRONG> specifying the image, initial location,
            shadow and shadow offset. </summary>
      <param name="image"> The image to embed. </param>
      <param name="keepAspectRatio"> Indicates whether the aspect ratio of the image is maintained. </param>
      <param name="location"> The initial location of this annotation on the document. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the drop shadow. </param>
      <param name="shadowOffset"> The offset used to specifying the position of the drop shadow. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.#ctor(Atalasoft.Annotate.EmbeddedImageData)">
      <summary> Creates a new instance of <STRONG>EmbeddedImageAnnotation</STRONG> specifying the <see cref="T:Atalasoft.Annotate.EmbeddedImageData" /> used by the annotation. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.EmbeddedImageData" /> for this annotation. </param>
      <exception> Thrown if the data argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>EmbeddedImageAnnotation</STRONG> from serialized information. </summary>
      <param name="info"> The SerializationInfo containing information for this object. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.AllowClickThrough">
      <summary> Gets or sets a value indicating whether to allow mouse clicks to pass through transparent areas of the
            image. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.Clone"></member>
    <member name="M:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.Dispose">
      <summary> Releases resources used by the annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.Dispose(System.Boolean)">
      <summary> Called when disposing or finalizing to release resources used by the annotation. </summary>
      <param name="disposing"> A value indicating whether the annotation is being disposed or finalized. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.Finalize"></member>
    <member name="M:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with annotation information. </summary>
      <param name="info"> A SerializationInfo object where the data will be added. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.GetRegion(Atalasoft.Annotate.AnnotateSpace)"></member>
    <member name="P:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.HitTestRectangle"></member>
    <member name="P:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.Image">
      <summary>
            Gets or sets the image of the annotation.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.KeepAspectRatio">
      <summary>
            Gets or sets a value indicating whether the image ratio is maintained while resizing.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.Shadow">
      <summary>Gets or sets the AnnotationBrush used draw the drop shadow.</summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.EmbeddedImageAnnotation.ShadowOffset">
      <summary>Gets or sets the shadow offset.</summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.EmbeddedImageAnnotationFactory">
      <summary> This class generates an <see cref="T:Atalasoft.Annotate.UI.EmbeddedImageAnnotation" /> object from an <see cref="T:Atalasoft.Annotate.EmbeddedImageData" /> class for use with the <see cref="T:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.EmbeddedImageAnnotationFactory.#ctor">
      <summary> Creates a new instance of <STRONG>EmbeddedImageAnnotationFactory</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.EmbeddedImageAnnotationFactory.GetAnnotationUI(Atalasoft.Annotate.AnnotationData)">
      <summary> Returns an <see cref="T:Atalasoft.Annotate.UI.EmbeddedImageAnnotation" /> if the data object is an <see cref="T:Atalasoft.Annotate.EmbeddedImageData" />
            class. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.EmbeddedImageData" /> object for the annotation. </param>
      <returns> An <see cref="T:Atalasoft.Annotate.UI.EmbeddedImageAnnotation" /> or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual
            Basic) if the <EM>data</EM> parameter is not an <see cref="T:Atalasoft.Annotate.EmbeddedImageData" /> object. </returns>
      <exception> Thrown if the data argument is null (Nothing in VB). </exception>
    </member>
    <member name="T:Atalasoft.Annotate.UI.FreehandAnnotation">
      <summary> This class is used for a freehand drawing annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.FreehandAnnotation.#ctor">
      <summary> Creates a new instance of <STRONG>FreehandAnnotation</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.FreehandAnnotation.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,System.Boolean)">
      <summary> Creates a new instance of <STRONG>FreehandAnnotation</STRONG> specifying the fill, outline and translucent
            properties. </summary>
      <param name="fill"> The fill for the freehand. </param>
      <param name="outline"> The outline for the freehand. </param>
      <param name="translucent">
        <para>Indicates whether the line will be translucent, giving it a highlighter
            effect.</para>
      </param>
      <exception> Thrown if both fill and outline are null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.FreehandAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen)">
      <summary> Creates a new instance of <STRONG>FreehandAnnotation</STRONG> specifying the <see cref="T:Atalasoft.Annotate.AnnotationPen" />
            used for drawing the lines or curves. </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> for the lines or curves. </param>
      <exception cref="T:System.ArgumentNullException">Thrown if the points parameter is null.</exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.FreehandAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF[])">
      <summary>
        <para>
          <FONT color="#ff0000">This overload is obsolete and may be removed in a future
            release.</FONT>
        </para>
        <para>Creates a new instance of <STRONG>FreehandAnnotation</STRONG> specifying the outline, fill and initial
            points.</para>
      </summary>
      <param name="outline"> The outline for the freehand. </param>
      <param name="fill"> The fill for the freehand. </param>
      <param name="points"> The initial point for the freehand. </param>
      <exception cref="T:System.ArgumentNullException" caption="">Thrown if the points parameter is null or if both outline and fill parameters are null.</exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.FreehandAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen,System.Drawing.PointF[])">
      <summary>
        <para>
          <FONT color="#ff0000">This overload is obsolete and may be removed in a future
            release.</FONT>
        </para>
        <para>Creates a new instance of <STRONG>FreehandAnnotation</STRONG> specifying the outline and initial
            points.</para>
      </summary>
      <param name="outline"> The outline for the freehand. </param>
      <param name="points"> The initial points for the freehand. </param>
      <exception cref="T:System.ArgumentNullException">Thrown if a parameter is null.</exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.FreehandAnnotation.#ctor(Atalasoft.Annotate.FreehandData)">
      <summary> Creates a new instance of <STRONG>FreehandAnnotation</STRONG> specifying the <see cref="T:Atalasoft.Annotate.FreehandData" />
            object for this annotation. </summary>
      <param name="data"> A <see cref="T:Atalasoft.Annotate.FreehandData" /> object used for this annotation. </param>
      <exception cref="!:" caption="ArgumentNullException">Thrown if the data parameter is null.</exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.FreehandAnnotation.#ctor(Atalasoft.Annotate.PointFCollection,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,System.Boolean)">
      <summary> Creates a new instance of <STRONG>FreehandAnnotation</STRONG> specifying the point collection, fill,
            outline and translucent properties. </summary>
      <param name="points"> The initial point collection for the freehand. </param>
      <param name="fill"> The fill for the freehand. </param>
      <param name="outline"> The outline for the freehand. </param>
      <param name="translucent">
        <para>Indicates whether the line will be translucent, giving it a highlighter
            effect.</para>
      </param>
      <exception> Thrown if both fill and outline are null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.FreehandAnnotation.#ctor(System.Drawing.PointF[])">
      <summary> Creates a new instance of <STRONG>FreehandAnnotation</STRONG> specifying the initial points. </summary>
      <param name="points"> The initial points for the freehand. </param>
      <exception cref="T:System.ArgumentNullException">Thrown if the points parameter is null.</exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.FreehandAnnotation.#ctor(System.Drawing.PointF[],Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,System.Boolean)">
      <summary> Creates a new instance of <STRONG>FreehandAnnotation</STRONG> specifying the points, fill, outline and
            translucent properties. </summary>
      <param name="points"> The initial points for the freehand. </param>
      <param name="fill"> The fill for the freehand. </param>
      <param name="outline"> The outline for the freehand. </param>
      <param name="translucent">
        <para>Indicates whether the line will be translucent, giving it a highlighter
            effect.</para>
      </param>
      <exception> Thrown if points is null or if both fill and outline are null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.FreehandAnnotation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>FreehandAnnotation</STRONG> from serialized information. </summary>
      <param name="info"> The SerializationInfo object containing information about this annotation. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.FreehandAnnotation.Clone"></member>
    <member name="P:Atalasoft.Annotate.UI.FreehandAnnotation.ClosedShape">
      <summary> Gets or sets a value indicating whether the freehand is a closed shape. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.FreehandAnnotation.Fill">
      <summary> Gets or sets the fill for the freehand. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.FreehandAnnotation.GetRegion(Atalasoft.Annotate.AnnotateSpace)">
      <summary>Returns a region for this annotation.</summary>
      <returns>A region for this annotation.</returns>
    </member>
    <member name="P:Atalasoft.Annotate.UI.FreehandAnnotation.LineType"></member>
    <member name="M:Atalasoft.Annotate.UI.FreehandAnnotation.OnAnnotationControllerNotification(Atalasoft.Annotate.AnnotationControllerNotificationEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.FreehandAnnotation.OnMouseUp(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)"></member>
    <member name="P:Atalasoft.Annotate.UI.FreehandAnnotation.Outline">
      <summary> Gets or sets the outline for this freehand. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.FreehandAnnotation.Points">
      <summary> Gets a <see cref="T:Atalasoft.Annotate.PointFCollection" /> containing the points for the freehand. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.FreehandAnnotation.Translucent">
      <summary> Gets or sets a value indicating whether this annotation is used as a highlighter. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.FreehandAnnotationFactory">
      <summary> This class generates a <see cref="T:Atalasoft.Annotate.UI.FreehandAnnotation" /> object from a <see cref="T:Atalasoft.Annotate.FreehandData" /> class for
            use with the <see cref="T:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.FreehandAnnotationFactory.#ctor">
      <summary> Creates a new instance of <STRONG>FreehandAnnotationFactory</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.FreehandAnnotationFactory.GetAnnotationUI(Atalasoft.Annotate.AnnotationData)">
      <summary> Returns an <see cref="T:Atalasoft.Annotate.UI.FreehandAnnotation" /> if the data object is an <see cref="T:Atalasoft.Annotate.FreehandData" /> class.
            </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.FreehandData" /> object for the annotation. </param>
      <returns> A <see cref="T:Atalasoft.Annotate.UI.FreehandAnnotation" /> or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic) if
            the <EM>data</EM> parameter is not a <see cref="T:Atalasoft.Annotate.FreehandData" /> object. </returns>
      <exception> Thrown if the data argument is null (Nothing in VB). </exception>
    </member>
    <member name="T:Atalasoft.Annotate.UI.GripPositionChangedEventHandler">
      <summary> This event handler is used with the <see cref="E:Atalasoft.Annotate.UI.AnnotationUI.GripPositionChanged" /> event. </summary>
      <param name="sender"> The object sending the event. </param>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.UI.AnnotationGripChangedEventArgs" /> containing information about this event. </param>
    </member>
    <member name="T:Atalasoft.Annotate.UI.HotSpotAnnotation">
      <summary>
        <para>This annotations can be used to add rectangular hot spots on a document.  When the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.InteractMode" /> is set to <STRONG>View</STRONG> the hot spot annotations will be
            invisible but the cursor will change when hovering over it to indicate that area can be clicked.</para>
        <para>For a non-rectangular area use the <see cref="T:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation" />.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.HotSpotAnnotation.#ctor">
      <summary> Creates a new instance of <STRONG>HotSpotAnnotation</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.HotSpotAnnotation.#ctor(Atalasoft.Annotate.HotSpotData)">
      <summary> Creates a new instance of <STRONG>HotSpotAnnotation</STRONG> specifying the annotation data. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.HotSpotData" /> for this annotation. </param>
      <exception> Thrown if the data argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.HotSpotAnnotation.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationBrush)">
      <summary> Creates a new instance of <STRONG>HotSpotAnnotation</STRONG> specifying the rectangle bounds fill.
            </summary>
      <param name="rectangle"> The bounding rectangle for this object. </param>
      <param name="fill"> The fill used when not active. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.HotSpotAnnotation.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen)">
      <summary> Creates a new instance of <STRONG>HotSpotAnnotation</STRONG> specifying the rectangle bounds, fill and
            outline. </summary>
      <param name="rectangle"> The bounding rectangle for this object. </param>
      <param name="fill"> The fill used when not active. </param>
      <param name="outline"> The outline used when not active. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.HotSpotAnnotation.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen)">
      <summary> Creates a new instance of <STRONG>HotSpotAnnotation</STRONG> specifying the rectangle bounds, active and
            inactive fill, and outline. </summary>
      <param name="rectangle"> The bounding rectangle for this object. </param>
      <param name="fill"> The fill used when not active. </param>
      <param name="outline"> The outline used when not active. </param>
      <param name="activeFill"> The fill used when the annotation is active. </param>
      <param name="activeOutline"> The outline used when the annotation is active. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.HotSpotAnnotation.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationPen)">
      <summary> Creates a new instance of <STRONG>HotSpotAnnotation</STRONG> specifying the rectangle bounds and outline.
            </summary>
      <param name="rectangle"> The bounding rectangle for this object. </param>
      <param name="outline"> The outline used when not active. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.HotSpotAnnotation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>HotSpotAnnotation</STRONG> from serialized information. </summary>
      <param name="info"> The serialization information of this object. </param>
      <param name="context"> A context containing information about this object. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Annotate.UI.HotSpotAnnotation.Active"></member>
    <member name="P:Atalasoft.Annotate.UI.HotSpotAnnotation.ActiveFill"></member>
    <member name="P:Atalasoft.Annotate.UI.HotSpotAnnotation.ActiveOutline"></member>
    <member name="M:Atalasoft.Annotate.UI.HotSpotAnnotation.Clone"></member>
    <member name="P:Atalasoft.Annotate.UI.HotSpotAnnotation.Fill"></member>
    <member name="P:Atalasoft.Annotate.UI.HotSpotAnnotation.HitTestRectangle"></member>
    <member name="M:Atalasoft.Annotate.UI.HotSpotAnnotation.OnMoving(Atalasoft.Annotate.AnnotationLocationChangedEventArgs)"></member>
    <member name="P:Atalasoft.Annotate.UI.HotSpotAnnotation.Outline"></member>
    <member name="T:Atalasoft.Annotate.UI.HotSpotAnnotationFactory">
      <summary> This class generates a <see cref="T:Atalasoft.Annotate.UI.HotSpotAnnotation" /> object from a <see cref="T:Atalasoft.Annotate.AnnotationData" /> class
            for use with the <see cref="T:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.HotSpotAnnotationFactory.#ctor">
      <summary> Creates a new instance of <STRONG>HotSpotAnnotationFactory</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.HotSpotAnnotationFactory.GetAnnotationUI(Atalasoft.Annotate.AnnotationData)">
      <summary> Returns a <see cref="T:Atalasoft.Annotate.UI.HotSpotAnnotation" /> if the data object is a <see cref="T:Atalasoft.Annotate.HotSpotData" /> class.
            </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.HotSpotData" /> object for the annotation. </param>
      <returns> A <see cref="T:Atalasoft.Annotate.UI.HotSpotAnnotation" /> or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic) if
            the <EM>data</EM> parameter is not a <see cref="T:Atalasoft.Annotate.HotSpotData" /> object. </returns>
      <exception> Thrown if the data argument is null (Nothing in VB). </exception>
    </member>
    <member name="T:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation">
      <summary>
        <para>This annotation can be used to create a freehand hot spot area on the document.  When the <see cref="P:Atalasoft.Annotate.UI.AnnotationController.InteractMode" /> is set to <STRONG>View</STRONG> the hot spot annotations will be
            invisible but the cursor will change when hovering over it to indicate that area can be clicked.</para>
        <para>For a rectangular hot spot use the <see cref="T:Atalasoft.Annotate.UI.HotSpotAnnotation" />.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation.#ctor">
      <summary> Creates a new instance of <STRONG>HotSpotFreehandAnnotation</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation.#ctor(Atalasoft.Annotate.AnnotationBrush)">
      <summary> Creates a new instance of <STRONG>HotSpotFreehandAnnotation</STRONG> specifying the fill. </summary>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the fill. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush)">
      <summary> Creates a new instance of <STRONG>HotSpotFreehandAnnotation</STRONG> specifying the fill and active fill.
            </summary>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the fill. </param>
      <param name="activeFill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used when the <see cref="P:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation.Active" /> property is true. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF[])">
      <summary> Creates a new instance of <STRONG>HotSpotFreehandAnnotation</STRONG> specifying the outline, fill and
            initial points. </summary>
      <param name="fill"> The fill for the freehand. </param>
      <param name="activeFill"> The fill used when the hotspot is active. </param>
      <param name="points"> The initial point for the freehand. </param>
      <exception cref="T:System.ArgumentNullException">Thrown if a parameter is null.</exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation.#ctor(Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF[])">
      <summary> Creates a new instance of <STRONG>HotSpotFreehandAnnotation</STRONG> specifying the outline, fill and
            initial points. </summary>
      <param name="fill"> The fill for the freehand. </param>
      <param name="points"> The initial point for the freehand. </param>
      <exception cref="T:System.ArgumentNullException">Thrown if a parameter is null.</exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation.#ctor(Atalasoft.Annotate.HotSpotFreehandData)">
      <summary> Creates a new instance of <STRONG>HotSpotFreehandAnnotation</STRONG> specifying the annotation data.
            </summary>
      <param name="data"> A <see cref="T:Atalasoft.Annotate.HotSpotFreehandData" /> object for this annotation. </param>
      <exception> Thrown if the data argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation.#ctor(System.Drawing.PointF[])">
      <summary> Creates a new instance of <STRONG>HotSpotFreehandAnnotation</STRONG> specifying the initial points.
            </summary>
      <param name="points"> The initial points for the freehand.  These must be specified in annotation space. </param>
      <exception> Thrown if the points parameter is null. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>HotSpotFreehandAnnotation</STRONG> from serialized information.
            </summary>
      <param name="info"> The serialization information for this object. </param>
      <param name="context"> The streaming context for this object. </param>
      <exception cref="T:System.ArgumentNullException">Thrown if a parameter is null.</exception>
    </member>
    <member name="P:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation.Active">
      <summary> Gets or sets whether this hot spot is active. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation.ActiveFill">
      <summary>
            Gets or sets the fill used when the HotSpot is active.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation.Clone"></member>
    <member name="P:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation.Fill">
      <summary>
            Gets or sets the fill used when the HotSpot is not active.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation.GetRegion(Atalasoft.Annotate.AnnotateSpace)">
      <summary>Returns a region for this annotation.</summary>
      <returns>A region for this annotation.</returns>
    </member>
    <member name="P:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation.LineType">
      <summary>Gets or sets the LineType used for the lines or curves of this annotation.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation.OnMouseUp(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)"></member>
    <member name="P:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation.Points">
      <summary>
            Gets the PointFCollection used for this freehand.
            </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.HotSpotFreehandAnnotationFactory">
      <summary> This class generates a <see cref="T:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation" /> object from a <see cref="T:Atalasoft.Annotate.HotSpotFreehandData" /> class for use with the <see cref="T:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.HotSpotFreehandAnnotationFactory.#ctor">
      <summary> Creates a new instance of <STRONG>HotSpotFreehandAnnotationFactory</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.HotSpotFreehandAnnotationFactory.GetAnnotationUI(Atalasoft.Annotate.AnnotationData)">
      <summary> Returns a <see cref="T:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation" /> if the data object is a <see cref="T:Atalasoft.Annotate.HotSpotFreehandData" /> class. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.HotSpotFreehandData" /> object for the annotation. </param>
      <returns> A <see cref="T:Atalasoft.Annotate.UI.HotSpotFreehandAnnotation" /> or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual
            Basic) if the <EM>data</EM> parameter is not a <see cref="T:Atalasoft.Annotate.HotSpotFreehandData" /> object. </returns>
      <exception> Thrown if the data argument is null (Nothing in VB). </exception>
    </member>
    <member name="T:Atalasoft.Annotate.UI.IAnnotate">
      <summary>
            This interface must be implemented by any control hosting annotations. The
               <a href="DotAnnotate~Atalasoft.Annotate.UI.AnnotationController.html">AnnotationController</a>
               requires the properties of this interface for rendering and user interaction.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.IAnnotate.Control">
      <summary>Gets the control used to render the annotations onto.</summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.IAnnotate.DocumentBounds">
      <summary>Gets the bounding rectangle of the document area.</summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.IAnnotate.KeyBinder">
      <summary>
            Gets the
            <a href="DotAnnotate~Atalasoft.Annotate.UI.AnnotationKeyBinder.html">AnnotationKeyBinder</a>
            used for binding annotation actions to key press events.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.IAnnotate.Resolution">
      <summary>Gets the resolution of the document.</summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.IAnnotate.Transform">
      <summary>Gets a transformation matrix used by the host control.</summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.IAnnotate.Units">
      <summary>Gets the units of measure for the document.</summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.IAnnotationGrips">
      <summary> This interface must be implemented by any class acting as annotation grips. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.IAnnotationGrips.Count">
      <summary> Gets the number of <see cref="T:Atalasoft.Annotate.UI.AnnotationGrip" /> objects in the collection. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.IAnnotationGrips.Fill">
      <summary> Gets the <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for filling the grips. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.IAnnotationGrips.GetEnumerator">
      <summary> An <STRONG>IEnumerator</STRONG> used to allow enumeration through the collection. </summary>
      <returns> The IEnumerator for this class. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.UI.IAnnotationGrips.GetRegion">
      <summary> Returns a Region for the grips. </summary>
      <returns> A render for the grips. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.UI.IAnnotationGrips.GripFromPoint(System.Drawing.PointF)">
      <summary> Returns a grip from the specified position. </summary>
      <param name="point"> The point to search for. This position must be in annotation space. </param>
      <returns> The grip at the location provided or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB) if there was
            no grip found. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.UI.IAnnotationGrips.Item(System.Int32)">
      <summary>
            Returns an <see cref="T:Atalasoft.Annotate.UI.AnnotationGrip" /> object from the collection at the specified index.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.IAnnotationGrips.Outline">
      <summary> Gets the <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the outline of the grip. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.IAnnotationGrips.RotationFill">
      <summary> Gets the <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill a rotation grip. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.IAnnotationGrips.RotationOutline">
      <summary> Gets the <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the outline of a rotation grip. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.IAnnotationGrips.Size">
      <summary> Gets the size of the grips in pixels. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.IAnnotationUIFactory">
      <summary> This interface must be implemented by any class used as an annotation UI factory. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.IAnnotationUIFactory.GetAnnotationUI(Atalasoft.Annotate.AnnotationData)">
      <summary> Returns the <see cref="T:Atalasoft.Annotate.UI.AnnotationUI" /> object for a specific <see cref="T:Atalasoft.Annotate.AnnotationData" /> class.
            </summary>
      <param name="data"> The annotation data from which a UI is requested. </param>
      <returns> The <see cref="T:Atalasoft.Annotate.UI.AnnotationUI" /> object or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB) if the
            factory is unable to create the object. </returns>
    </member>
    <member name="T:Atalasoft.Annotate.UI.LayerAnnotation">
      <summary> A <STRONG>LayerAnnotation</STRONG> is a collection of other annotations, including other
            <STRONG>LayerAnnotation</STRONG> objects. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.#ctor">
      <summary> Creates a new instance of <STRONG>LayerAnnotation</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.#ctor(Atalasoft.Annotate.LayerData)">
      <summary> Creates a new instance of <STRONG>LayerAnnotation</STRONG> specifying the <see cref="T:Atalasoft.Annotate.LayerData" /> for this
            annotation. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.LayerData" /> for this annotation. </param>
      <exception cref="T:System.ArgumentNullException"> Thrown if the data argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.#ctor(Atalasoft.Annotate.UI.AnnotationUICollection)">
      <summary> Creates a new instance of <STRONG>LayerAnnotation</STRONG> specifying an <see cref="T:Atalasoft.Annotate.UI.AnnotationUICollection" /> for this layer. </summary>
      <param name="annotations"> An <see cref="T:Atalasoft.Annotate.UI.AnnotationUICollection" /> for this layer. </param>
      <exception cref="T:System.ArgumentNullException"> Thrown if the annotations argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>LayerAnnotation</STRONG> from serialized information. </summary>
      <param name="info"> The SerializationInfo object containing information for this layer. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Annotate.UI.LayerAnnotation.Bounds"></member>
    <member name="E:Atalasoft.Annotate.UI.LayerAnnotation.ChildAnnotationPropertyChanged">
      <summary> This event is raised when a property of an annotation contained in the layer has been changed. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.Clone"></member>
    <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.CreateAnnotationUIObjects(Atalasoft.Annotate.UI.AnnotationUIFactoryCollection)">
      <summary> Use this method to force the <STRONG>LayerAnnotation</STRONG> to create <see cref="T:Atalasoft.Annotate.UI.AnnotationUI" /> objects
            for its <see cref="T:Atalasoft.Annotate.AnnotationData" /> objects after deserialization or after using the constructor taking a <see cref="T:Atalasoft.Annotate.LayerData" />. </summary>
      <param name="factories"> The UI factories that will be used to create the annotation objects.  Normally this will be
            the <STRONG>AnnotationController</STRONG>.<see cref="P:Atalasoft.Annotate.UI.AnnotationController.Factories" /> property. </param>
      <exception cref="T:System.ArgumentNullException">Thrown if the factories argument is null (Nothing in VB).</exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.Dispose">
      <summary> Disposes this layer and all items it contains. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.Dispose(System.Boolean)">
      <summary> Releases resources used by the layer and its contained annotations. </summary>
      <param name="disposing"> Indicates if this method was called from the public <see cref="M:Atalasoft.Annotate.UI.LayerAnnotation.Dispose" />
            method. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.Finalize"></member>
    <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this layer. </summary>
      <param name="info"> The SerializationInfo object where information is stored. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.GetRegion(Atalasoft.Annotate.AnnotateSpace)">
      <summary> Gets the combined region for all annotations contained in this layer. </summary>
      <param name="space"> Indicates the space coordinates to return. </param>
      <returns> A Region for this layer. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.UI.LayerAnnotation.GroupAnnotation">
      <summary> Gets or sets a value indicating whether the annotations in this layer are acting as a single group.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.LayerAnnotation.Items">
      <summary> Gets an <see cref="T:Atalasoft.Annotate.UI.AnnotationUICollection" /> for this layer. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.OnAnnotationControllerNotification(Atalasoft.Annotate.AnnotationControllerNotificationEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.OnChildAnnotationPropertyChanged(System.Object,Atalasoft.Annotate.AnnotationPropertyChangedEventArgs)">
      <summary> Called when a property of a child annotation has changed. </summary>
      <param name="sender"> The annotation that has changed. </param>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationPropertyChangedEventArgs" /> containing information for this change.
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.OnControllerChanged(System.EventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.OnDeserialization(System.Object)">
      <summary> Called when a formatter is finished deserializing the <STRONG>LayerAnnotation</STRONG>. </summary>
      <param name="sender"> The object calling this method.  This is normally null (Nothing in VB). </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.OnMoving(Atalasoft.Annotate.AnnotationLocationChangedEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.LayerAnnotation.OnResizing(System.EventArgs)"></member>
    <member name="T:Atalasoft.Annotate.UI.LayerAnnotationFactory">
      <summary> This class generates a <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation" /> object from a <see cref="T:Atalasoft.Annotate.LayerData" /> class for use
            with the <see cref="T:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerAnnotationFactory.#ctor">
      <summary> Creates a new instance of <STRONG>LayerAnnotationFactory</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerAnnotationFactory.GetAnnotationUI(Atalasoft.Annotate.AnnotationData)">
      <summary> Returns a <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation" /> if the data object is a <see cref="T:Atalasoft.Annotate.LayerData" /> class. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.LayerData" /> object for the annotation. </param>
      <returns> A <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation" /> or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic) if the
            <EM>data</EM> parameter is not a <see cref="T:Atalasoft.Annotate.LayerData" /> object. </returns>
      <exception> Thrown if the data argument is null (Nothing in VB). </exception>
    </member>
    <member name="T:Atalasoft.Annotate.UI.LayerCollection">
      <summary> This class is used to hold a collection of <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation" /> objects. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerCollection.#ctor">
      <summary> Creates a new instance of <STRONG>LayerCollection</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>LayerCollection</STRONG> from serialized information. </summary>
      <param name="info"> The SerializationInfo object containing information about this collection. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception cref="T:System.ArgumentNullException"> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerCollection.Add(Atalasoft.Annotate.UI.LayerAnnotation)">
      <summary>
            Adds a layer to the collection.
            </summary>
      <param name="layer">The layer to add.</param>
      <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">Thrown if the layer parameter is null.</exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerCollection.AddRange(Atalasoft.Annotate.UI.LayerAnnotation[])">
      <summary> Adds an array of layers to the collection. </summary>
      <param name="layers"> An array of layers to add. </param>
      <exception cref="T:System.ArgumentNullException"> Thrown if the layers parameter is null. </exception>
    </member>
    <member name="E:Atalasoft.Annotate.UI.LayerCollection.AnnotationControllerNotification">
      <summary> Raised after this collection or an item in the collection has been changed. </summary>
    </member>
    <member name="E:Atalasoft.Annotate.UI.LayerCollection.CollectionChanged">
      <summary> Raised when there has been a change in the collection. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerCollection.Contains(Atalasoft.Annotate.UI.LayerAnnotation)">
      <summary> Returns a value indicating whether a layer is contains within the collection. </summary>
      <param name="layer"> The layer to search for. </param>
      <exception cref="T:System.ArgumentNullException">Thrown if the layer parameter is null.</exception>
    </member>
    <member name="P:Atalasoft.Annotate.UI.LayerCollection.Controller">
      <summary> Gets the <see cref="T:Atalasoft.Annotate.UI.AnnotationController" /> for this <STRONG>LayerCollection</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerCollection.CopyTo(Atalasoft.Annotate.UI.LayerAnnotation[],System.Int32)">
      <summary> Copies items into the specified array. </summary>
      <param name="array"> The array to copy items into. </param>
      <param name="index"> The index in the target array to begin copying items. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerCollection.Dispose">
      <summary> Releases memory used by this collection and all of its annotations. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerCollection.Dispose(System.Boolean)">
      <summary> Releases resources used by the collection and all of its <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation" /> objects. </summary>
      <param name="disposing"> Indicates if this method was called from the public <see cref="M:Atalasoft.Annotate.UI.LayerCollection.Dispose" />
            method. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerCollection.Finalize"></member>
    <member name="M:Atalasoft.Annotate.UI.LayerCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this collection. </summary>
      <param name="info"> The SerializationInfo object where information will be stored. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception cref="T:System.ArgumentNullException"> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerCollection.IndexOf(Atalasoft.Annotate.UI.LayerAnnotation)">
      <summary> Returns the position of a layer within the collection or -1 if the layer is not in the collection.
            </summary>
      <param name="layer"> The layer to search for. </param>
      <exception cref="T:System.ArgumentNullException">Thrown if the layer parameter is null.</exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerCollection.Insert(System.Int32,Atalasoft.Annotate.UI.LayerAnnotation)">
      <summary> Inserts a layer into the collection at the specified index. </summary>
      <param name="index"> The position within the collection this layer should be placed. </param>
      <param name="layer"> The layer to insert. </param>
      <exception cref="T:System.ArgumentNullException">Thrown if the layer parameter is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the index parameter is out of range for this collection.</exception>
    </member>
    <member name="P:Atalasoft.Annotate.UI.LayerCollection.Item(System.Int32)">
      <summary>
            Gets the
            <a href="DotAnnotate~Atalasoft.Annotate.UI.LayerAnnotation.html">LayerAnnotation</a> at
            the specified index in the collection.
            </summary>
      <param name="index">The index of the item to get.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">Thrown if the index is out of range for this collection.</exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerCollection.OnAnnotationControllerNotification(Atalasoft.Annotate.AnnotationControllerNotificationEventArgs)">
      <summary> Called when a change has been made to the collection or an object in the collection. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationControllerNotificationEventArgs" /> containing information about this
            change. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerCollection.OnClear">
      <summary> Called when the <STRONG>Clear</STRONG> method is invoked. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerCollection.OnClearComplete">
      <summary> Called when the Clear method has completed. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerCollection.OnCollectionChanged(Atalasoft.Utils.CollectionChangedEventArgs)">
      <summary> Called when there is any change to the collection. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Utils.CollectionChangedEventArgs" /> containing information about this event.
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerCollection.OnControllerChanged">
      <summary> Called when the <see cref="T:Atalasoft.Annotate.UI.AnnotationController" /> using this <STRONG>LayerCollection</STRONG> has
            changed. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerCollection.OnDeserialization(System.Object)">
      <summary> Called after an object has been fully deserialized by a serialization formatter. </summary>
      <param name="sender"> The formatter deserializing the data. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerCollection.OnInsertComplete(System.Int32,System.Object)">
      <summary> Called when an item has been added or inserted into the collection. </summary>
      <param name="index"> The index where the item was placed. </param>
      <param name="value"> The items that was added. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerCollection.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)">
      <summary> Called before this collection or an object in the collection has been changed. </summary>
      <param name="e"> An <see cref="T:Atalasoft.Annotate.AnnotationPropertyChangingEventArgs" /> containing information about this change.
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerCollection.OnRemoveComplete(System.Int32,System.Object)">
      <summary> Called when a remove method has completed. </summary>
      <param name="index"> The index of the item that was removed. </param>
      <param name="value"> The item that was removed. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
      <summary> Called when an item in the collection has been changed. </summary>
      <param name="index"> The index of the item that was changed. </param>
      <param name="oldValue"> The old value of the item. </param>
      <param name="newValue"> The new value of the item. </param>
    </member>
    <member name="E:Atalasoft.Annotate.UI.LayerCollection.PropertyChanging">
      <summary> Raised before this collection or an item in the collection has been changed. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerCollection.Remove(Atalasoft.Annotate.UI.LayerAnnotation)">
      <summary> Removes a layer from the collection. </summary>
      <param name="layer"> The layer to remove. </param>
      <exception cref="T:System.ArgumentNullException">Thrown if the layer parameter is null.</exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerCollection.Remove(Atalasoft.Annotate.UI.LayerAnnotation[])">
      <summary> Removes an array of <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation" /> objects from the collection. </summary>
      <param name="layers"> An array of <see cref="T:Atalasoft.Annotate.UI.LayerAnnotation" /> to remove. </param>
      <exception cref="T:System.ArgumentNullException"> Thrown if the layers argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerCollection.Replace(Atalasoft.Annotate.UI.LayerAnnotation,Atalasoft.Annotate.UI.LayerAnnotation)">
      <summary> Replaces an existing layer with another one. </summary>
      <param name="oldLayer"> The layer currently in the collection. </param>
      <param name="newLayer"> The layer to insert into the collection. </param>
      <exception cref="T:System.ArgumentNullException"> Thrown if either argument is null (Nothing in VB). </exception>
      <exception cref="T:System.ArgumentException"> Thrown if the old layer does not exist in the collection. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LayerCollection.Replace(System.Int32,Atalasoft.Annotate.UI.LayerAnnotation)">
      <summary> Replaces a layer at the specified index with the provided layer. </summary>
      <param name="index"> The index of the layer to replace. </param>
      <param name="newLayer"> The new layer to insert into the collection. </param>
      <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if the index is invalid for this collection. </exception>
      <exception cref="T:System.ArgumentNullException"> Thrown if the new layer is null (Nothing in VB). </exception>
    </member>
    <member name="T:Atalasoft.Annotate.UI.LineAnnotation">
      <summary> This is a single line annotation from <see cref="P:Atalasoft.Annotate.UI.LineAnnotation.StartPoint" /> to <see cref="P:Atalasoft.Annotate.UI.LineAnnotation.EndPoint" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LineAnnotation.#ctor">
      <summary> Creates a new instance of <STRONG>LineAnnotation</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LineAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen)">
      <summary> Creates a new instance of <STRONG>LineAnnotation</STRONG> specifying the outline. </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the line. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LineAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen,System.Boolean)">
      <summary> Creates a new instance of <STRONG>LineAnnotation</STRONG> specifying the outline and translucent
            properties. </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the line. </param>
      <param name="translucent"> A value indicating whether the line will be translucent, giving it a highlighter effect.
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LineAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen,System.Drawing.PointF,System.Drawing.PointF)">
      <summary>
        <para>
          <FONT color="#ff0000">This overload is obsolete and may be removed in a future
            release.</FONT>
        </para>
        <para>Creates a new instance of <STRONG>LineAnnotation</STRONG> specifying the outline, starting and ending
            points.</para>
      </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the line. </param>
      <param name="startPoint"> The starting point of the line. </param>
      <param name="endPoint"> The ending point of the line. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LineAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen,System.Drawing.PointF,System.Drawing.PointF,System.Boolean)">
      <summary>
        <para>
          <STRONG>This overload is obsolete and may be removed in a future
            release.</STRONG>
        </para>
        <para>Creates a new instance of <STRONG>LineAnnotation</STRONG> specifying the outline, starting and ending
            points.</para>
      </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the line. </param>
      <param name="startPoint"> The starting point of the line. </param>
      <param name="endPoint"> The ending point of the line. </param>
      <param name="translucent"> A value indicating if this annotation should act as a highlighter. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LineAnnotation.#ctor(Atalasoft.Annotate.LineData)">
      <summary> Creates a new instance of <STRONG>LineAnnotation</STRONG> specifying the <see cref="T:Atalasoft.Annotate.LineData" /> used for
            this annotation. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.LineData" /> object for the annotation. </param>
      <exception> Thrown if the data argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LineAnnotation.#ctor(System.Drawing.PointF,System.Drawing.PointF,Atalasoft.Annotate.AnnotationPen,System.Boolean)">
      <summary> Creates a new instance of <STRONG>LineAnnotation</STRONG> specifying the start and end points, outline and
            translucent properties. </summary>
      <param name="startPoint"> The starting point of the line. </param>
      <param name="endPoint"> The ending point of the line. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the line. </param>
      <param name="translucent"> A value indicating whether the line will be translucent, giving it a highlighter effect.
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LineAnnotation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>LineAnnotation</STRONG> from serialized information. </summary>
      <param name="info"> The SerializationInfo object containing information for this annotation. </param>
      <param name="context"> The StreamingContext of this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LineAnnotation.BeginCreate"></member>
    <member name="P:Atalasoft.Annotate.UI.LineAnnotation.Bounds"></member>
    <member name="M:Atalasoft.Annotate.UI.LineAnnotation.Clone"></member>
    <member name="P:Atalasoft.Annotate.UI.LineAnnotation.EndPoint">
      <summary> Gets or sets the ending point for the line. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LineAnnotation.GetRegion(Atalasoft.Annotate.AnnotateSpace)"></member>
    <member name="M:Atalasoft.Annotate.UI.LineAnnotation.OnGripPositionChanged(Atalasoft.Annotate.UI.AnnotationGripChangedEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.LineAnnotation.OnMouseDown(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.LineAnnotation.OnMouseMove(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.LineAnnotation.OnMouseUp(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.LineAnnotation.OnSizeChanged(Atalasoft.Annotate.AnnotationSizeChangedEventArgs)"></member>
    <member name="P:Atalasoft.Annotate.UI.LineAnnotation.Outline">
      <summary> Gets or sets the outline for this annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.LineAnnotation.StartPoint">
      <summary> Gets or sets the starting point for the line. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.LineAnnotation.Translucent">
      <summary> Gets or sets a value indicating whether this annotation is used has a highlighter. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.LineAnnotationFactory">
      <summary> This class generates a <see cref="T:Atalasoft.Annotate.UI.LineAnnotation" /> object from a <see cref="T:Atalasoft.Annotate.LineData" /> class for use
            with the <see cref="T:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LineAnnotationFactory.#ctor">
      <summary> Creates a new instance of <STRONG>LineAnnotationFactory</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LineAnnotationFactory.GetAnnotationUI(Atalasoft.Annotate.AnnotationData)">
      <summary> Returns a <see cref="T:Atalasoft.Annotate.UI.LineAnnotation" /> if the data object is a <see cref="T:Atalasoft.Annotate.LineData" /> class. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.LineData" /> object for the annotation. </param>
      <returns> A <see cref="T:Atalasoft.Annotate.UI.LineAnnotation" /> or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic) if the
            <EM>data</EM> parameter is not a <see cref="T:Atalasoft.Annotate.LineData" /> object. </returns>
      <exception> Thrown if the data argument is null (Nothing in VB). </exception>
    </member>
    <member name="T:Atalasoft.Annotate.UI.LinesAnnotation">
      <summary> The <STRONG>LinesAnnoation</STRONG> represents a series of points connected by straight lines. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LinesAnnotation.#ctor">
      <summary> Creates a new instance of <STRONG>LinesAnnotation</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LinesAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen)">
      <summary> Creates a new instance of <STRONG>LinesAnnotation</STRONG> specifying the outline. </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the lines. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LinesAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.PointFCollection)">
      <summary>
        <para>
          <STRONG>This overload is obsolete and may be removed in a future
            release.</STRONG>
        </para>
        <para>Creates a new instance of <STRONG>LinesAnnotation</STRONG> specifying the outline and end points.</para>
      </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the lines. </param>
      <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection" /> containing the line end points. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LinesAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.PointFCollection,System.Boolean)">
      <summary>
        <para>
          <STRONG>This overload is obsolete and may be removed in a future
            release.</STRONG>
        </para>
        <para>Creates a new instance of <STRONG>LinesAnnotation</STRONG> specifying the outline, points and whether this
            annotation is a highlighter.</para>
      </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the lines. </param>
      <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection" /> containing the line end points. </param>
      <param name="translucent"> A value indicating whether this annotation is a highlighter. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LinesAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen,System.Drawing.PointF[])">
      <summary>
        <para>
          <STRONG>This overload is obsolete and may be removed in a future
            release.</STRONG>
        </para>
        <para>Creates a new instance of <STRONG>LinesAnnotation</STRONG> specifying the outline and an array of end
            points.</para>
      </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the lines. </param>
      <param name="points"> An array of end points for the lines.  These must be specified in annotation space. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LinesAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen,System.Drawing.PointF[],System.Boolean)">
      <summary>
        <para>
          <STRONG>This overload is obsolete and may be removed in a future
            release.</STRONG>
        </para>
        <para>Creates a new instance of <STRONG>LinesAnnotation</STRONG> specifying the outline, an array of points and
            whether this annotation is a highlighter.</para>
      </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the lines. </param>
      <param name="points"> An array of end points for the lines.  These must be specified in annotation space. </param>
      <param name="translucent"> A value indicating whether this annotation is a highlighter. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LinesAnnotation.#ctor(Atalasoft.Annotate.LinesData)">
      <summary> Creates a new instance of <STRONG>LinesAnnotation</STRONG> specifying the <see cref="T:Atalasoft.Annotate.LinesData" /> used by
            this annotation. </summary>
      <param name="data"> A <see cref="T:Atalasoft.Annotate.LinesData" /> object for this annotation. </param>
      <exception> Thrown if the data argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LinesAnnotation.#ctor(Atalasoft.Annotate.PointFCollection,Atalasoft.Annotate.AnnotationPen,System.Boolean)">
      <summary> Creates a new instance of <STRONG>LinesAnnotation</STRONG> specifying the point collection, outline and
            translucent properties. </summary>
      <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection" /> containing the line end points. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the lines. </param>
      <param name="translucent"> A value indicating whether the lines will be translucent, giving it a highlighter effect.
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LinesAnnotation.#ctor(System.Drawing.PointF[],Atalasoft.Annotate.AnnotationPen,System.Boolean)">
      <summary> Creates a new instance of <STRONG>LinesAnnotation</STRONG> specifying the points, outline and translucent
            properties. </summary>
      <param name="points"> An array of end points for the lines.  These must be specified in annotation space. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the lines. </param>
      <param name="translucent"> A value indicating whether the lines will be translucent, giving it a highlighter effect.
            </param>
      <exception> Thrown if the points argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LinesAnnotation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>LinesAnnotation</STRONG> from serialized information. </summary>
      <param name="info"> The serialization information containing data for this object. </param>
      <param name="context"> The StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LinesAnnotation.Clone"></member>
    <member name="M:Atalasoft.Annotate.UI.LinesAnnotation.GetRegion(Atalasoft.Annotate.AnnotateSpace)">
      <summary>Returns a region for this annotation.</summary>
      <returns>A region for this LinesAnnotation.</returns>
    </member>
    <member name="P:Atalasoft.Annotate.UI.LinesAnnotation.Outline">
      <summary> Gets or sets the outline for the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.LinesAnnotation.Points">
      <summary> Gets a <see cref="T:Atalasoft.Annotate.PointFCollection" /> containing the points for this annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.LinesAnnotation.Translucent">
      <summary> Gets or sets a value indicating whether the line is drawn as a highlighter. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.LinesAnnotationFactory">
      <summary> This class generates a <see cref="T:Atalasoft.Annotate.UI.LinesAnnotation" /> object from a <see cref="T:Atalasoft.Annotate.LinesData" /> class for use
            with the <see cref="T:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LinesAnnotationFactory.#ctor">
      <summary> Creates a new instance of <STRONG>LinesAnnotationFactory</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.LinesAnnotationFactory.GetAnnotationUI(Atalasoft.Annotate.AnnotationData)">
      <summary> Returns a <see cref="T:Atalasoft.Annotate.UI.LinesAnnotation" /> if the data object is a <see cref="T:Atalasoft.Annotate.LinesData" /> class. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.LinesData" /> object for the annotation. </param>
      <returns> A <see cref="T:Atalasoft.Annotate.UI.LinesAnnotation" /> or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic) if the
            <EM>data</EM> parameter is not a <see cref="T:Atalasoft.Annotate.LinesData" /> object. </returns>
      <exception> Thrown if the data argument is null (Nothing in VB). </exception>
    </member>
    <member name="T:Atalasoft.Annotate.UI.OcrRegionAnnotation">
      <summary> This annotation is used to select an area of the image to OCR is a separate process. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.OcrRegionAnnotation.#ctor">
      <summary> Creates a new instance of <STRONG>OcrRegionAnnotation</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.OcrRegionAnnotation.#ctor(Atalasoft.Annotate.OcrRegionData)">
      <summary> Creates a new instance of <STRONG>OcrRegionAnnotation</STRONG> from an <see cref="T:Atalasoft.Annotate.OcrRegionData" /> object.
            </summary>
      <param name="data"> The data object for this annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.OcrRegionAnnotation.#ctor(System.Drawing.RectangleF,System.Int32,System.Drawing.Color)">
      <summary> Creates a new instance of <STRONG>OcrRegionAnnotation</STRONG> specifying its bounds, sequence order and
            color. </summary>
      <param name="bounds"> The selection bounds for the annotation. </param>
      <param name="sequenceOrder"> The sequence number for the annotation.  This must be 1 or greater. </param>
      <param name="color"> The color for this annotation. </param>
      <exception> Thrown if the sequenceOrder is less than 1. </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.OcrRegionAnnotation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>OcrRegionAnnotation</STRONG> from serialization information. </summary>
      <param name="info"> A <STRONG>SerializationInfo</STRONG> object containing information for this annotation. </param>
      <param name="context"> A <STRONG>StreamingContext</STRONG> for this information. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.OcrRegionAnnotation.Clone"></member>
    <member name="P:Atalasoft.Annotate.UI.OcrRegionAnnotation.Color"></member>
    <member name="P:Atalasoft.Annotate.UI.OcrRegionAnnotation.HitTestRectangle"></member>
    <member name="P:Atalasoft.Annotate.UI.OcrRegionAnnotation.SequenceOrder"></member>
    <member name="T:Atalasoft.Annotate.UI.OcrRegionAnnotationFactory">
      <summary> This class generates a <see cref="T:Atalasoft.Annotate.UI.OcrRegionAnnotation" /> object from a <see cref="T:Atalasoft.Annotate.OcrRegionData" /> class
            for use with the <see cref="T:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.OcrRegionAnnotationFactory.#ctor">
      <summary> Creates a new instance of <STRONG>OcrRegionAnnotationFactory</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.OcrRegionAnnotationFactory.GetAnnotationUI(Atalasoft.Annotate.AnnotationData)">
      <summary> Returns a <see cref="T:Atalasoft.Annotate.UI.OcrRegionAnnotation" /> if the data object is a <see cref="T:Atalasoft.Annotate.OcrRegionData" /> class.
            </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.OcrRegionData" /> object for the annotation. </param>
      <returns> A <see cref="T:Atalasoft.Annotate.UI.OcrRegionAnnotation" /> or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic) if
            the <EM>data</EM> parameter is not a <see cref="T:Atalasoft.Annotate.OcrRegionData" /> object. </returns>
      <exception> Thrown if the data argument is null (Nothing in VB). </exception>
    </member>
    <member name="T:Atalasoft.Annotate.UI.PointBaseAnnotation">
      <summary>
            This abstract class is used to simplify creating annotations that are defined
            with multiple points instead of a rectangular structure.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PointBaseAnnotation.#ctor(Atalasoft.Annotate.PointBaseData)">
      <summary>Creates a new instance of PointBaseAnnotation.</summary>
      <param name="data">A PointBaseData object for this annotation.</param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PointBaseAnnotation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Creates a new instance of PointBaseAnnotation from serialized data.</summary>
      <param name="info">The SerializationInfo object containing information about this annotation.</param>
      <param name="context">A StreamingContext for this information.</param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PointBaseAnnotation.BeginCreate"></member>
    <member name="P:Atalasoft.Annotate.UI.PointBaseAnnotation.FreehandStyle">
      <summary>
            Gets or sets a value indicating whether this annotation should create in the same
            style as a FreehandAnnotation.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PointBaseAnnotation.GetConfinedLocation(System.Drawing.RectangleF,System.Drawing.PointF)"></member>
    <member name="M:Atalasoft.Annotate.UI.PointBaseAnnotation.GetConfinedRotation(System.Drawing.RectangleF,System.Single)"></member>
    <member name="M:Atalasoft.Annotate.UI.PointBaseAnnotation.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this annotation. </summary>
      <param name="info"> The SerializationInfo where data will be stored. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Annotate.UI.PointBaseAnnotation.GripMode">
      <summary>
            Gets or sets whether a RectangleGrips or PointGrips object is used for this
            annotation.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PointBaseAnnotation.OnAnnotationControllerNotification(Atalasoft.Annotate.AnnotationControllerNotificationEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.PointBaseAnnotation.OnGripPositionChanged(Atalasoft.Annotate.UI.AnnotationGripChangedEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.PointBaseAnnotation.OnMirror(Atalasoft.Annotate.MirrorDirection,System.Boolean)"></member>
    <member name="M:Atalasoft.Annotate.UI.PointBaseAnnotation.OnMouseDown(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.PointBaseAnnotation.OnMouseMove(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.PointBaseAnnotation.OnMouseUp(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.PointBaseAnnotation.OnMoving(Atalasoft.Annotate.AnnotationLocationChangedEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.PointBaseAnnotation.OnResized(System.EventArgs)"></member>
    <member name="T:Atalasoft.Annotate.UI.PointGrips">
      <summary>
        <para>
          <STRONG>PointGrips</STRONG> is the base class implementation used for annotation grips. All
            annotations in <STRONG>DotImage</STRONG> use <STRONG>PointGrips</STRONG> or <see cref="T:Atalasoft.Annotate.UI.RectangleGrips" />, which
            derives from <STRONG>PointGrips</STRONG>.</para>
        <para>In essence, <STRONG>PointGrips</STRONG> is a collection of <see cref="T:Atalasoft.Annotate.UI.AnnotationGrip" /> objects.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PointGrips.#ctor">
      <summary> Creates a new instance of <STRONG>PointGrips</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PointGrips.#ctor(Atalasoft.Annotate.UI.AnnotationGrip[])">
      <summary> Creates a new instance of <STRONG>PointGrips</STRONG> specifying an array of <see cref="T:Atalasoft.Annotate.UI.AnnotationGrip" />
            objects. </summary>
      <param name="grips"> An array of <see cref="T:Atalasoft.Annotate.UI.AnnotationGrip" /> objects to add to the collection. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PointGrips.#ctor(System.Drawing.PointF[])">
      <summary> Creates a new instance of <STRONG>PointGrips</STRONG> specifying an array of points. </summary>
      <param name="points"> An array of points that will be used to generate <see cref="T:Atalasoft.Annotate.UI.AnnotationGrip" /> objects which
            are then added to the collection. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PointGrips.Add(Atalasoft.Annotate.UI.AnnotationGrip)">
      <summary> Adds an <see cref="T:Atalasoft.Annotate.UI.AnnotationGrip" /> to the collection. </summary>
      <param name="grip"> The <see cref="T:Atalasoft.Annotate.UI.AnnotationGrip" /> to add. </param>
      <exception cref="T:System.ArgumentNullException"> Thrown if the grip argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PointGrips.AddRange(Atalasoft.Annotate.UI.AnnotationGrip[])">
      <summary> Adds an array of <see cref="T:Atalasoft.Annotate.UI.AnnotationGrip" /> objects to the collection. </summary>
      <param name="grips"> An array of <see cref="T:Atalasoft.Annotate.UI.AnnotationGrip" /> objects to add. </param>
      <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">Thrown if the grips argument is null (Nothing in VB).</exception>
    </member>
    <member name="P:Atalasoft.Annotate.UI.PointGrips.Bounds">
      <summary> Returns a bounding rectangle for all of the grips. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PointGrips.Clear">
      <summary> Clears the collection. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.PointGrips.Count">
      <summary> Returns the number of grips in the collection. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.PointGrips.Fill"></member>
    <member name="M:Atalasoft.Annotate.UI.PointGrips.GetEnumerator">
      <summary> Returns an <STRONG>IEnumerator</STRONG> for this grip collection. </summary>
      <returns> An <STRONG>IEnumerator</STRONG> for the collection. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PointGrips.GetGripBounds(Atalasoft.Annotate.UI.AnnotationGrip)">
      <summary> Returns a bounding rectangle for a single grip. </summary>
      <param name="grip"> The grip to get bounds from. </param>
      <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">Thrown if the grip argument is null (Nothing in VB).</exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PointGrips.GetRegion">
      <summary> Returns a region for the grips. </summary>
      <returns> A region for the annotation grips. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PointGrips.GripFromPoint(System.Drawing.PointF)">
      <summary> Returns the <see cref="T:Atalasoft.Annotate.UI.AnnotationGrip" /> located at a specified point. </summary>
      <param name="point"> The point to search for a grip. </param>
      <returns> The <see cref="T:Atalasoft.Annotate.UI.AnnotationGrip" /> found at the specified point or <STRONG>null</STRONG>
            (<STRONG>Nothing</STRONG> in Visual Basic) if no grip exists at that point. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PointGrips.IndexOf(Atalasoft.Annotate.UI.AnnotationGrip)">
      <summary> Returns the index of a grip within the collection. </summary>
      <param name="grip"> The grip to search for. </param>
      <returns> The index of the grip or -1 if the grip was not found in the collection. </returns>
      <exception cref="T:System.ArgumentNullException"> Thrown if the grip argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PointGrips.Insert(System.Int32,Atalasoft.Annotate.UI.AnnotationGrip)">
      <summary> Inserts an <see cref="T:Atalasoft.Annotate.UI.AnnotationGrip" /> object into the collection at the specified index. </summary>
      <param name="index"> The index where the grip will be placed. </param>
      <param name="grip"> The <see cref="T:Atalasoft.Annotate.UI.AnnotationGrip" /> object to add. </param>
      <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">Thrown if the index value is out of range for this collection.</exception>
      <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">Thrown if the grip argument is null (Nothing in VB).</exception>
    </member>
    <member name="P:Atalasoft.Annotate.UI.PointGrips.Item(System.Int32)"></member>
    <member name="M:Atalasoft.Annotate.UI.PointGrips.OffsetPoints(System.Single,System.Single)">
      <summary> Applies an offset to all of the grip positions. </summary>
      <param name="x"> The amount to offset the grip positions in the x-axis. </param>
      <param name="y"> The amount to offset the grip position in the y-axis. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.PointGrips.Outline"></member>
    <member name="M:Atalasoft.Annotate.UI.PointGrips.Remove(Atalasoft.Annotate.UI.AnnotationGrip)">
      <summary> Removes a grip from the collection. </summary>
      <param name="grip"> The grip to remove. </param>
      <exception cref="T:System.ArgumentNullException"> Thrown if the grip argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PointGrips.RemoveAt(System.Int32)">
      <summary> Removes a grip at the specified index from the collection. </summary>
      <param name="index"> The index of the grip to remove. </param>
      <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">Thrown if the index argument is out of range for this collection.</exception>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PointGrips.Replace(System.Int32,Atalasoft.Annotate.UI.AnnotationGrip)">
      <summary> Replaces a grip in the collection with another one. </summary>
      <param name="index"> The index of the grip to replace. </param>
      <param name="newGrip"> The new grip that will be used. </param>
      <exception cref="T:System.ArgumentOutOfRangeException" caption="ArgumentOutOfRangeException">Thrown if the index argument is out of range for this collection.</exception>
      <exception cref="T:System.ArgumentNullException" caption="ArgumentNullException">Thrown if the newGrip argument is null (Nothing in VB).</exception>
    </member>
    <member name="P:Atalasoft.Annotate.UI.PointGrips.RotationFill"></member>
    <member name="P:Atalasoft.Annotate.UI.PointGrips.RotationOutline"></member>
    <member name="P:Atalasoft.Annotate.UI.PointGrips.Size"></member>
    <member name="T:Atalasoft.Annotate.UI.PolygonAnnotation">
      <summary> A <STRONG>PolygonAnnotation</STRONG> is a series of points used to draw a polygon with an optional fill.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PolygonAnnotation.#ctor">
      <summary> Creates a new instance of <STRONG>PolygonAnnotation</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PolygonAnnotation.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF,System.Boolean)">
      <summary> Creates a new instance of <STRONG>PolygonAnnotation</STRONG> specifying its fill, outline, shadow, shadow
            offset and translucent properties. </summary>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the outline of the annotation. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for a drop shadow. </param>
      <param name="shadowOffset"> The offset for the shadow. </param>
      <param name="translucent"> A value indicating whether the annotation will be translucent, giving it a highlighter
            effect. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PolygonAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush)">
      <summary> Creates a new instance of <STRONG>PolygonAnnotation</STRONG> specifying the outline and fill. </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the outline of the annotation. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PolygonAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
      <summary> Creates a new instance of <STRONG>PolygonAnnotation</STRONG> specifying the outline, fill and shadow
            settings. </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the outline of the annotation. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the annotation. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for a drop shadow. </param>
      <param name="shadowOffset"> The offset for the shadow. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PolygonAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF,Atalasoft.Annotate.PointFCollection)">
      <summary>
        <para>
          <FONT color="#ff0000">This overload is obsolete and may be removed in a future
            release.</FONT>
        </para>
        <para>Creates a new instance of <STRONG>PolygonAnnotation</STRONG> specifying the outline, fill, shadow settings and
            points of the polygon.</para>
      </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the outline of the annotation. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the annotation. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for a drop shadow. </param>
      <param name="shadowOffset"> The offset for the shadow. </param>
      <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection" /> containing the initial points for the polygon in annotation
            space. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PolygonAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF,System.Drawing.PointF[])">
      <summary>
        <para>
          <FONT color="#ff0000">This overload is obsolete and may be removed in a future
            release.</FONT>
        </para>
        <para>Creates a new instance of <STRONG>PolygonAnnotation</STRONG> specifying the outline, fill, shadow settings and
            array of points for the polygon.</para>
      </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the outline of the annotation. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the annotation. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for a drop shadow. </param>
      <param name="shadowOffset"> The offset for the shadow. </param>
      <param name="points"> An array of PointF objects specifying the initial points of the polygon in annotation space.
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PolygonAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.PointFCollection)">
      <summary>
        <para>
          <FONT color="#ff0000">This overload is obsolete and may be removed in a future
            release.</FONT>
        </para>
        <para>Creates a new instance of <STRONG>PolygonAnnotation</STRONG> specifying the outline, fill and points
            collection.</para>
      </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the outline of the annotation. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the annotation. </param>
      <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection" /> containing the initial points for the polygon in annotation
            space. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PolygonAnnotation.#ctor(Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF[])">
      <summary>
        <para>This overload is obsolete and may be removed in a future release.</para>
        <para>Creates a new instance of <STRONG>PolygonAnnotation</STRONG> specifying the outline, fill and an array of
            points.</para>
      </summary>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the outline of the annotation. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the annotation. </param>
      <param name="points"> An array of PointF objects specifying the initial points of the polygon in annotation space.
            </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PolygonAnnotation.#ctor(Atalasoft.Annotate.PointFCollection,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF,System.Boolean)">
      <summary> Creates a new instance of <STRONG>PolygonAnnotation</STRONG> specifying the point collection, fill,
            outline, shadow, shadow offset and translucent properties. </summary>
      <param name="points"> A <see cref="T:Atalasoft.Annotate.PointFCollection" /> containing the initial points for the polygon in annotation
            space. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the outline of the annotation. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for a drop shadow. </param>
      <param name="shadowOffset"> The offset for the shadow. </param>
      <param name="translucent"> A value indicating whether the annotation will be translucent, giving it a highlighter
            effect. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PolygonAnnotation.#ctor(Atalasoft.Annotate.PolygonData)">
      <summary> Creates a new instance of <STRONG>PolygonAnnotation</STRONG> specifying the <see cref="T:Atalasoft.Annotate.PolygonData" /> for
            this annotation. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.PolygonData" /> for this annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PolygonAnnotation.#ctor(System.Drawing.PointF[],Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF,System.Boolean)">
      <summary> Creates a new instance of <STRONG>PolygonAnnotation</STRONG> specifying the points, fill, outline, shadow,
            shadow offset and translucent properties. </summary>
      <param name="points"> An array of PointF objects specifying the initial points of the polygon in annotation space.
            </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to draw the outline of the annotation. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for a drop shadow. </param>
      <param name="shadowOffset"> The offset for the shadow. </param>
      <param name="translucent"> A value indicating whether the annotation will be translucent, giving it a highlighter
            effect. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PolygonAnnotation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>PolygonAnnotation</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo object containing information about the annotation. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.PolygonAnnotation.Bounds"></member>
    <member name="M:Atalasoft.Annotate.UI.PolygonAnnotation.Clone"></member>
    <member name="P:Atalasoft.Annotate.UI.PolygonAnnotation.Fill">
      <summary> Gets or sets the fill for the annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PolygonAnnotation.GetRegion(Atalasoft.Annotate.AnnotateSpace)">
      <summary>Returns a region for the PolygonAnnotation.</summary>
      <returns>The region for this annotation.</returns>
    </member>
    <member name="P:Atalasoft.Annotate.UI.PolygonAnnotation.Outline">
      <summary> Gets or sets the outline for the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.PolygonAnnotation.Points">
      <summary> Gets a <see cref="T:Atalasoft.Annotate.PointFCollection" /> containing the points for this polygon in annotation space.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.PolygonAnnotation.Shadow">
      <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the drop shadow. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.PolygonAnnotation.ShadowOffset">
      <summary> Gets or sets the drop shadow offset. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.PolygonAnnotation.Translucent">
      <summary> Gets or sets a value indicating whether this annotation is used as a highlighter. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.PolygonAnnotationFactory">
      <summary> This class generates a <see cref="T:Atalasoft.Annotate.UI.PolygonAnnotation" /> object from a <see cref="T:Atalasoft.Annotate.PolygonData" /> class for
            use with the <see cref="T:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PolygonAnnotationFactory.#ctor">
      <summary> Creates a new instance of <STRONG>PolygonAnnotationFactory</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.PolygonAnnotationFactory.GetAnnotationUI(Atalasoft.Annotate.AnnotationData)">
      <summary> Returns a <see cref="T:Atalasoft.Annotate.UI.PolygonAnnotation" /> if the data object is a <see cref="T:Atalasoft.Annotate.PolygonData" /> class.
            </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.PolygonData" /> object for the annotation. </param>
      <returns> A <see cref="T:Atalasoft.Annotate.UI.PolygonAnnotation" /> or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic) if
            the <EM>data</EM> parameter is not a <see cref="T:Atalasoft.Annotate.PolygonData" /> object. </returns>
      <exception> Thrown if the data argument is null (Nothing in VB). </exception>
    </member>
    <member name="T:Atalasoft.Annotate.UI.RectangleAnnotation">
      <summary> This is a rectangular annotation with an optional shadow brush. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RectangleAnnotation.#ctor">
      <summary> Creates a new instance of <STRONG>RectangleAnnotation</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RectangleAnnotation.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen)">
      <summary> Creates a new instance of <STRONG>RectangleAnnotation</STRONG> specifying the fill and outline. </summary>
      <param name="fill"> The fill used for the annotation. </param>
      <param name="outline"> The outline used for the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RectangleAnnotation.#ctor(Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
      <summary> Creates a new instance of <STRONG>RectangleAnnotation</STRONG> specifying the fill, outline and shadow
            options. </summary>
      <param name="fill"> The fill for the annotation. </param>
      <param name="outline"> The outline for the annotation. </param>
      <param name="shadow"> The shadow brush for the annotation. </param>
      <param name="shadowOffset"> The offset used for the shadow. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RectangleAnnotation.#ctor(Atalasoft.Annotate.RectangleData)">
      <summary> Creates a new instance of <STRONG>RectangleAnnotation</STRONG> specifying the <see cref="T:Atalasoft.Annotate.RectangleData" />.
            </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.RectangleData" /> for this annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RectangleAnnotation.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen)">
      <summary> Creates a new instance of <STRONG>RectangleAnnotation</STRONG> specifying the rectangle, fill and outline.
            </summary>
      <param name="rectangle"> The rectangle for the annotation. </param>
      <param name="fill"> The fill for this annotation. </param>
      <param name="outline"> The outline for this annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RectangleAnnotation.#ctor(System.Drawing.RectangleF,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
      <summary> Creates a new instance of <STRONG>RectangleAnnotation</STRONG> specifying the rectangle, fill, outline and
            shadow options. </summary>
      <param name="rectangle"> The rectangle for the annotation. </param>
      <param name="fill"> The fill for the annotation. </param>
      <param name="outline"> The outline for the annotation. </param>
      <param name="shadow"> The shadow brush for the annotation. </param>
      <param name="shadowOffset"> The offset for the shadow. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RectangleAnnotation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>RectangleAnnotation</STRONG> from serialized data. </summary>
      <param name="info"> A SerializationInfo object containing the information for this annotation. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RectangleAnnotation.Clone"></member>
    <member name="P:Atalasoft.Annotate.UI.RectangleAnnotation.Fill">
      <summary>Gets or sets the fill used for the annotation.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RectangleAnnotation.GetRegion(Atalasoft.Annotate.AnnotateSpace)"></member>
    <member name="P:Atalasoft.Annotate.UI.RectangleAnnotation.Outline">
      <summary>Gets or sets the outline of the annotation.</summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.RectangleAnnotation.Shadow">
      <summary>Gets or sets the AnnotationBrush used draw the drop shadow.</summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.RectangleAnnotation.ShadowOffset">
      <summary>Gets or sets the shadow offset.</summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.RectangleAnnotation.Translucent">
      <summary>
            Gets or sets a value indicating whether this annotation is used as a
            highlighter.
            </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.RectangleAnnotationFactory">
      <summary> This class generates a <see cref="T:Atalasoft.Annotate.UI.RectangleAnnotation" /> object from a <see cref="T:Atalasoft.Annotate.RectangleData" /> class
            for use with the <see cref="T:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RectangleAnnotationFactory.#ctor">
      <summary> Creates a new instance of <STRONG>RectangleAnnotationFactory</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RectangleAnnotationFactory.GetAnnotationUI(Atalasoft.Annotate.AnnotationData)">
      <summary> Returns a <see cref="T:Atalasoft.Annotate.UI.RectangleAnnotation" /> if the data object is a <see cref="T:Atalasoft.Annotate.RectangleData" /> class.
            </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.RectangleData" /> object for the annotation. </param>
      <returns> A <see cref="T:Atalasoft.Annotate.UI.RectangleAnnotation" /> or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic) if
            the <EM>data</EM> parameter is not a <see cref="T:Atalasoft.Annotate.RectangleData" /> object. </returns>
      <exception> Thrown if the data argument is null (Nothing in VB). </exception>
    </member>
    <member name="T:Atalasoft.Annotate.UI.RectangleGrips">
      <summary>
            This class represents a group of AnnotationGrip objects for rectangular shaped
            annotations.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RectangleGrips.#ctor">
      <summary> Creates a new instance of <STRONG>RectangleGrips</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RectangleGrips.#ctor(Atalasoft.Annotate.RectangleGripDisplay)">
      <summary> Creates a new instance of <STRONG>RectangleGrips</STRONG> specifying the grips to display. </summary>
      <param name="gripsToDisplay"> The grips to display. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.RectangleGrips.AspectRatio">
      <summary> Gets or sets a value used for the width-to-height ratio. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RectangleGrips.GetGripDefinition(Atalasoft.Annotate.UI.AnnotationGrip)">
      <summary> Returns which rectangle grip the <see cref="T:Atalasoft.Annotate.UI.AnnotationGrip" /> object represents. </summary>
      <param name="grip"> The grip to lookup. </param>
      <returns> A <see cref="T:Atalasoft.Annotate.RectangleGrip" /> value for this grip. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.UI.RectangleGrips.GripsToDisplay">
      <summary> Gets or sets the grips to display. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.RectangleGrips.Rectangle">
      <summary> Gets the bounding rectangle of the grips. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.RectangleGrips.ShowRotationGrips">
      <summary> Gets or sets a value indicating whether rotation grips are displayed. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RectangleGrips.UpdatePositions(System.Drawing.RectangleF,System.Drawing.PointF,System.Drawing.PointF)">
      <summary> Forces the grips to reset their positions based on a bounding rectangle. </summary>
      <param name="bounds"> A bounding rectangle defining the grip locations. </param>
      <param name="resolution"> The viewer resolution. </param>
      <param name="scale"> The scale (zoom) of the viewer. </param>
    </member>
    <member name="T:Atalasoft.Annotate.UI.ReferencedImageAnnotation">
      <summary> This annotation references a local image by filename. When viewing this annotation on multiple systems,
            the image file must be provided at the same location of each system. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.ReferencedImageAnnotation.#ctor">
      <summary> Creates a new instance of <STRONG>ReferencedImageAnnotation</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.ReferencedImageAnnotation.#ctor(Atalasoft.Annotate.ReferencedImageData)">
      <summary> Creates a new instance of <STRONG>ReferencedImageAnnotation</STRONG> specifying the annotation data.
            </summary>
      <param name="data"> A <see cref="T:Atalasoft.Annotate.ReferencedImageData" /> object for this annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.ReferencedImageAnnotation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>ReferencedImageAnnotation</STRONG> from serialized information.
            </summary>
      <param name="info"> The SerializationInfo object containing information for this object. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.ReferencedImageAnnotation.#ctor(System.String)">
      <summary> Creates a new instance of <STRONG>ReferencedImageAnnotation</STRONG> specifying the filename of the image.
            </summary>
      <param name="fileName"> The filename of the image for this annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.ReferencedImageAnnotation.#ctor(System.String,System.Boolean)">
      <summary> Creates an instance of <STRONG>ReferencedImageAnnotation</STRONG> specifying the filename of the image and
            indicating whether the aspect ratio should be maintained. </summary>
      <param name="fileName"> The filename of the image for this annotation. </param>
      <param name="keepAspectRatio"> Indicates if the image ratio is maintained. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.ReferencedImageAnnotation.#ctor(System.String,System.Boolean,System.Drawing.PointF)">
      <summary> Creates a new instance of <STRONG>ReferencedImageAnnotation</STRONG> specifying the filename, location and
            whether the aspect ratio should be maintained. </summary>
      <param name="fileName"> The filename of the image for this annotation. </param>
      <param name="keepAspectRatio"> Indicates if the image ratio is maintained. </param>
      <param name="location"> The location of the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.ReferencedImageAnnotation.#ctor(System.String,System.Boolean,System.Drawing.PointF,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF)">
      <summary> Creates a new instance of <STRONG>ReferencedImageAnnotation</STRONG> specifying the filename, initial
            location, shadow, shadow offset and indicates whether the image aspect ratio should be maintained. </summary>
      <param name="fileName"> The filename of the image for this annotation. </param>
      <param name="keepAspectRatio"> Indicates if the image ratio is maintained. </param>
      <param name="location"> The location of the annotation. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the drop shadow. </param>
      <param name="shadowOffset"> The offset used to specifying the position of the drop shadow. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.ReferencedImageAnnotation.AllowClickThrough">
      <summary> Gets or sets a value indicating whether mouse clicks will pass through transparent areas of the image.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.ReferencedImageAnnotation.Clone"></member>
    <member name="M:Atalasoft.Annotate.UI.ReferencedImageAnnotation.Dispose">
      <summary> Releases resources used by the annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.ReferencedImageAnnotation.Dispose(System.Boolean)">
      <summary> Called by <see cref="M:Atalasoft.Annotate.UI.ReferencedImageAnnotation.Dispose" /> or the finalizer to release resources.
            </summary>
      <param name="disposing"> A value indicating whether this method was called from <see cref="M:Atalasoft.Annotate.UI.ReferencedImageAnnotation.Dispose" /> or the finalizer. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.ReferencedImageAnnotation.FileName">
      <summary> Gets or sets the filename of the annotation image. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.ReferencedImageAnnotation.Finalize"></member>
    <member name="M:Atalasoft.Annotate.UI.ReferencedImageAnnotation.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="M:Atalasoft.Annotate.UI.ReferencedImageAnnotation.GetRegion(Atalasoft.Annotate.AnnotateSpace)"></member>
    <member name="P:Atalasoft.Annotate.UI.ReferencedImageAnnotation.HitTestRectangle"></member>
    <member name="P:Atalasoft.Annotate.UI.ReferencedImageAnnotation.KeepAspectRatio">
      <summary> Gets or sets a value indicating whether the image ratio is maintained while resizing. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.ReferencedImageAnnotation.Shadow">
      <summary> Gets or sets the <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used draw the drop shadow. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.ReferencedImageAnnotation.ShadowOffset">
      <summary>Gets or sets the shadow offset.</summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.ReferencedImageAnnotationFactory">
      <summary> This class generates a <see cref="T:Atalasoft.Annotate.UI.ReferencedImageAnnotation" /> object from a <see cref="T:Atalasoft.Annotate.ReferencedImageData" /> class for use with the <see cref="T:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.ReferencedImageAnnotationFactory.#ctor">
      <summary> Creates a new instance of <STRONG>ReferencedImageAnnotationFactory</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.ReferencedImageAnnotationFactory.GetAnnotationUI(Atalasoft.Annotate.AnnotationData)">
      <summary> Returns a <see cref="T:Atalasoft.Annotate.UI.ReferencedImageAnnotation" /> if the data object is a <see cref="T:Atalasoft.Annotate.ReferencedImageData" /> class. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.ReferencedImageData" /> object for the annotation. </param>
      <returns> A <see cref="T:Atalasoft.Annotate.UI.ReferencedImageAnnotation" /> or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual
            Basic) if the <EM>data</EM> parameter is not a <see cref="T:Atalasoft.Annotate.ReferencedImageData" /> object. </returns>
      <exception> Thrown if the data argument is null (Nothing in VB). </exception>
    </member>
    <member name="T:Atalasoft.Annotate.UI.RubberStampAnnotation">
      <summary> This annotation provides a text message with a rounded rectangle outline similar to a rubber stamp.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RubberStampAnnotation.#ctor">
      <summary> Creates a new instance of <STRONG>RubberStampAnnotation</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RubberStampAnnotation.#ctor(Atalasoft.Annotate.RubberStampData)">
      <summary> Creates a new instance of <STRONG>RubberStampAnnotation</STRONG> providing the <see cref="T:Atalasoft.Annotate.RubberStampData" /> used by the annotation. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.RubberStampData" /> used by this annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RubberStampAnnotation.#ctor(System.Drawing.RectangleF)">
      <summary> Creates a new instance of <STRONG>RubberStampAnnotation</STRONG> specifying the rectangle. </summary>
      <param name="bounds"> The rectangle for this annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RubberStampAnnotation.#ctor(System.Drawing.RectangleF,System.String)">
      <summary> Creates a new instance of <STRONG>RubberStampAnnotation</STRONG> specifying the rectangle and text.
            </summary>
      <param name="bounds"> The rectangle for this annotation. </param>
      <param name="text"> The text for this annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RubberStampAnnotation.#ctor(System.Drawing.RectangleF,System.String,Atalasoft.Annotate.AnnotationFont)">
      <summary> Creates a new instance of <STRONG>RubberStampAnnotation</STRONG> specifying the rectangle, text and font.
            </summary>
      <param name="bounds"> The rectangle for the annotation. </param>
      <param name="text"> The text for the annotation. </param>
      <param name="font"> The font used to render the text. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RubberStampAnnotation.#ctor(System.Drawing.RectangleF,System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,System.Single,System.Single)">
      <summary> Creates a new instance of <STRONG>RubberStampAnnotation</STRONG> specifying the annotation parameters.
            </summary>
      <param name="bounds"> The rectangle for the annotation. </param>
      <param name="text"> The text for the annotation. </param>
      <param name="font"> The font used to render the text. </param>
      <param name="fontBrush"> The brush used for the text. </param>
      <param name="fill"> The fill for the annotation. </param>
      <param name="outline"> The outline for the annotation. </param>
      <param name="cornerRadius"> A value providing the rounding radius of the rectangle corners. </param>
      <param name="padding"> Padding applied around the text. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RubberStampAnnotation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>RubberStampAnnotation</STRONG> from serialized information. </summary>
      <param name="info"> The SerializationInfo object containing the annotation information. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RubberStampAnnotation.#ctor(System.String)">
      <summary> Creates a new instance of <STRONG>RubberStampAnnotation</STRONG> specifying the annotation text.
            </summary>
      <param name="text"> The annotation text. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RubberStampAnnotation.#ctor(System.String,Atalasoft.Annotate.AnnotationFont)">
      <summary> Creates a new instance of <STRONG>RubberStampAnnotation</STRONG> specifying the text and font. </summary>
      <param name="text"> The text for the annotation. </param>
      <param name="font"> The font used to render the text. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RubberStampAnnotation.#ctor(System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,System.Single,System.Single)">
      <summary> Creates a new instance of <STRONG>RubberStampAnnotation</STRONG> specifying its parameters. </summary>
      <param name="text"> The text for the annotation. </param>
      <param name="font"> The font used to render the text. </param>
      <param name="fontBrush"> The brush used for the text. </param>
      <param name="fill"> The fill for the annotation. </param>
      <param name="outline"> The outline for the annotation. </param>
      <param name="cornerRadius"> A value providing the rounding radius of the rectangle corners. </param>
      <param name="padding"> Padding applied around the text. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.RubberStampAnnotation.AllowClickThrough">
      <summary> Gets or sets a value indicating whether mouse clicks will pass through transparent areas of the
            annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RubberStampAnnotation.Clone"></member>
    <member name="P:Atalasoft.Annotate.UI.RubberStampAnnotation.CornerRadius"></member>
    <member name="P:Atalasoft.Annotate.UI.RubberStampAnnotation.Fill">
      <summary>Gets or sets the fill used for the annotation.</summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.RubberStampAnnotation.Font">
      <summary>Gets or sets the font for the text.</summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.RubberStampAnnotation.FontBrush">
      <summary>Gets or sets the AnnotationBrush used for the font.</summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RubberStampAnnotation.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="P:Atalasoft.Annotate.UI.RubberStampAnnotation.HitTestRectangle"></member>
    <member name="P:Atalasoft.Annotate.UI.RubberStampAnnotation.Outline">
      <summary>Gets or sets the outline of the annotation.</summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.RubberStampAnnotation.Padding">
      <summary> Gets or sets the padding around the text. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.RubberStampAnnotation.Text">
      <summary>Gets or sets the text for this annotation.</summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.RubberStampAnnotationFactory">
      <summary> This class generates a <see cref="T:Atalasoft.Annotate.UI.RubberStampAnnotation" /> object from a <see cref="T:Atalasoft.Annotate.RubberStampData" />
            class for use with the <see cref="T:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RubberStampAnnotationFactory.#ctor">
      <summary> Creates a new instance of <STRONG>RubberStampAnnotationFactory</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.RubberStampAnnotationFactory.GetAnnotationUI(Atalasoft.Annotate.AnnotationData)">
      <summary> Returns a <see cref="T:Atalasoft.Annotate.UI.RubberStampAnnotation" /> if the data object is a <see cref="T:Atalasoft.Annotate.RubberStampData" /> class.
            </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.RubberStampData" /> object for the annotation. </param>
    </member>
    <member name="T:Atalasoft.Annotate.UI.ScrollPositionChangedEventArgs">
      <summary> This class is used with the <see cref="M:Atalasoft.Annotate.UI.AnnotationController.OnScrollPositionChanged(Atalasoft.Annotate.UI.ScrollPositionChangedEventArgs)" /> method. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.ScrollPositionChangedEventArgs.#ctor(System.Drawing.PointF,System.Drawing.PointF)">
      <summary> Creates a new instance of <STRONG>ScrollPositionChangedEventArgs</STRONG>. </summary>
      <param name="previousPosition"> The previous scroll position. </param>
      <param name="newPosition"> The new scroll position. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.ScrollPositionChangedEventArgs.NewPosition">
      <summary> Gets the new scroll position. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.ScrollPositionChangedEventArgs.PreviousPosition">
      <summary> Gets the previous scroll position. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.TextAnnotation">
      <summary> This annotation displays text which can be edited by the user. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.TextAnnotation.#ctor">
      <summary> Creates a new instance of <STRONG>TextAnnotation</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.TextAnnotation.#ctor(Atalasoft.Annotate.TextData)">
      <summary> Creates a new instance of <STRONG>TextAnnotation</STRONG> specifying the <see cref="T:Atalasoft.Annotate.TextData" /> object
            used for this annotation. </summary>
      <param name="data"> The <see cref="T:Atalasoft.Annotate.TextData" /> object used by this annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.TextAnnotation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>TextAnnotation</STRONG> from serialized information. </summary>
      <param name="info"> The SerializationInfo object containing information for this object. </param>
      <param name="context"> A StreamingContext for the information. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.TextAnnotation.#ctor(System.String)">
      <summary> Creates a new instance of <STRONG>TextAnnotation</STRONG> specifying the annotation text. </summary>
      <param name="text"> The text for the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.TextAnnotation.#ctor(System.String,Atalasoft.Annotate.AnnotationFont)">
      <summary> Creates a new instance of <STRONG>TextAnnotation</STRONG> specifying the text and font. </summary>
      <param name="text"> The text for this annotation. </param>
      <param name="font"> The font used for rendering the text. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.TextAnnotation.#ctor(System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen)">
      <summary> Creates a new instance of <STRONG>TextAnnotation</STRONG> specifying the text, font, font brush, fill and
            outline for the annotation. </summary>
      <param name="text"> The text for this annotation. </param>
      <param name="font"> The font used for rendering the text. </param>
      <param name="fontBrush"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for rendering the text. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the background of the annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to render the outline of the annotation. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.TextAnnotation.#ctor(System.String,Atalasoft.Annotate.AnnotationFont,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationBrush,Atalasoft.Annotate.AnnotationPen,Atalasoft.Annotate.AnnotationBrush,System.Drawing.PointF,Atalasoft.Annotate.ShadowMode)">
      <summary> Creates a new instance of <STRONG>TextAnnotation</STRONG> specifying the properties for this object.
            </summary>
      <param name="text"> The text for this annotation. </param>
      <param name="font"> The font used for rendering the text. </param>
      <param name="fontBrush"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for rendering the text. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used to fill the background of the annotation. </param>
      <param name="outline"> The <see cref="T:Atalasoft.Annotate.AnnotationPen" /> used to render the outline of the annotation. </param>
      <param name="shadow"> The <see cref="T:Atalasoft.Annotate.AnnotationBrush" /> used for the drop shadow. </param>
      <param name="shadowOffset"> The offset for the shadow. </param>
      <param name="shadowMode"> The type of shadow to render. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.TextAnnotation.Alignment"></member>
    <member name="P:Atalasoft.Annotate.UI.TextAnnotation.AllowClickThrough">
      <summary> Gets or sets a value indicating whether mouse clicks can pass through transparent areas of the annotation.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.TextAnnotation.AllowEditing">
      <summary> Gets or sets a value indicating whether double-clicking on the annotation will switch into edit mode.
            </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.TextAnnotation.AutoSelectOnEdit">
      <summary> Gets or sets a value indicating whether the text is automatically selected when the annotation is put into
            'Edit' mode. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.TextAnnotation.AutoSize"></member>
    <member name="M:Atalasoft.Annotate.UI.TextAnnotation.Clone"></member>
    <member name="M:Atalasoft.Annotate.UI.TextAnnotation.CreateFont(Atalasoft.Annotate.AnnotationFont)">
      <summary> Creates a <STRONG>System.Drawing.Font</STRONG> from an <see cref="T:Atalasoft.Annotate.AnnotationFont" />. </summary>
      <param name="annFont"> The <see cref="T:Atalasoft.Annotate.AnnotationFont" /> used to create the Font. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.TextAnnotation.Dispose">
      <summary> Releases resources used by the annotation. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.TextAnnotation.Dispose(System.Boolean)">
      <summary> Releases resources used by the annotation. </summary>
      <param name="disposing"> Indicates if this method is called from the public <see cref="M:Atalasoft.Annotate.UI.TextAnnotation.Dispose" />
            method. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.TextAnnotation.EditMode">
      <summary> Gets or sets a value indicating whether the annotation text is currently in edit mode. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.TextAnnotation.Fill"></member>
    <member name="M:Atalasoft.Annotate.UI.TextAnnotation.Finalize"></member>
    <member name="P:Atalasoft.Annotate.UI.TextAnnotation.Font"></member>
    <member name="P:Atalasoft.Annotate.UI.TextAnnotation.FontBrush"></member>
    <member name="P:Atalasoft.Annotate.UI.TextAnnotation.FormatFlags"></member>
    <member name="M:Atalasoft.Annotate.UI.TextAnnotation.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="M:Atalasoft.Annotate.UI.TextAnnotation.HideEditDialog">
      <summary> Removes the edit control from the viewer. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.TextAnnotation.HitTestRectangle"></member>
    <member name="P:Atalasoft.Annotate.UI.TextAnnotation.LineAlignment"></member>
    <member name="M:Atalasoft.Annotate.UI.TextAnnotation.OnDoubleClick(System.EventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.TextAnnotation.OnMouseUp(Atalasoft.Annotate.UI.AnnotationMouseEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.TextAnnotation.OnMoving(Atalasoft.Annotate.AnnotationLocationChangedEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.TextAnnotation.OnPropertyChanging(Atalasoft.Annotate.AnnotationPropertyChangingEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.TextAnnotation.OnResizing(System.EventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.TextAnnotation.OnRotating(System.EventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.TextAnnotation.OnScrollPositionChanged(Atalasoft.Annotate.UI.ScrollPositionChangedEventArgs)"></member>
    <member name="M:Atalasoft.Annotate.UI.TextAnnotation.OnSelectedChanged(System.EventArgs)"></member>
    <member name="P:Atalasoft.Annotate.UI.TextAnnotation.Outline"></member>
    <member name="P:Atalasoft.Annotate.UI.TextAnnotation.Padding"></member>
    <member name="P:Atalasoft.Annotate.UI.TextAnnotation.RenderingHint"></member>
    <member name="P:Atalasoft.Annotate.UI.TextAnnotation.Shadow"></member>
    <member name="P:Atalasoft.Annotate.UI.TextAnnotation.ShadowOffset"></member>
    <member name="M:Atalasoft.Annotate.UI.TextAnnotation.ShowEditDialog">
      <summary> Displays an edit control in the viewer to allow text to be edited. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.TextAnnotation.Text"></member>
    <member name="P:Atalasoft.Annotate.UI.TextAnnotation.Trimming"></member>
    <member name="T:Atalasoft.Annotate.UI.TextAnnotationFactory">
      <summary> This class generates a <see cref="T:Atalasoft.Annotate.UI.TextAnnotation" /> object from a <see cref="T:Atalasoft.Annotate.TextData" /> class for use
            with the <see cref="T:Atalasoft.Annotate.UI.AnnotationUIFactoryCollection" />. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.TextAnnotationFactory.#ctor">
      <summary> Creates a new instance of <STRONG>TextAnnotationFactory</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.TextAnnotationFactory.GetAnnotationUI(Atalasoft.Annotate.AnnotationData)">
      <param name="data"> The <see cref="T:Atalasoft.Annotate.TextData" /> object for the annotation. </param>
      <returns> A <see cref="T:Atalasoft.Annotate.UI.TextAnnotation" /> or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic) if the
            <EM>data</EM> parameter is not a <see cref="T:Atalasoft.Annotate.TextData" /> object. </returns>
    </member>
    <member name="T:Atalasoft.Annotate.UI.TransparentRichTextBox">
      <summary> This class is used by the <see cref="T:Atalasoft.Annotate.UI.TextAnnotation" /> and <see cref="T:Atalasoft.Annotate.UI.CalloutAnnotation" /> for editing
            text. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.TransparentRichTextBox.#ctor(System.Boolean)">
      <summary> Creates a new instance of <STRONG>TransparentRichTextBox</STRONG>. </summary>
      <param name="transparentBackground"> Indicates if the textbox will have a transparent background. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.TransparentRichTextBox.CreateParams">
      <summary> Gets the required creation parameters when the control handle is created. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.TransparentRichTextBox.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
      <summary>
        <para>Paints the background of the control.</para>
      </summary>
      <param name="pevent"> A <STRONG>PaintEventArgs</STRONG> that contains information about the control to paint.
            </param>
    </member>
    <member name="T:Atalasoft.Annotate.UI.UndoEventArgs">
      <summary> This class contains information for the <see cref="E:Atalasoft.Annotate.UI.AnnotationUndoManager.UndoRequest" /> and <see cref="E:Atalasoft.Annotate.UI.AnnotationUndoManager.RedoRequest" /> events. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.UndoEventArgs.#ctor(Atalasoft.Annotate.UI.AnnotationUndo)">
      <summary> Creates a new instance of <STRONG>UndoEventArgs</STRONG> specifying the <see cref="T:Atalasoft.Annotate.UI.AnnotationUndo" /> for
            this action. </summary>
      <param name="undo"> The undo for this action. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.UndoEventArgs.Undo">
      <summary> Gets the undo for this operation. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.UndoEventHandler">
      <summary> This delegate is used for the <see cref="E:Atalasoft.Annotate.UI.AnnotationUndoManager.UndoRequest" /> and <see cref="E:Atalasoft.Annotate.UI.AnnotationUndoManager.RedoRequest" /> events of the <see cref="T:Atalasoft.Annotate.UI.AnnotationUndoManager" />. </summary>
      <param name="sender"> The <see cref="T:Atalasoft.Annotate.UI.AnnotationUndoManager" /> sending the request. </param>
      <param name="e"> The <see cref="T:Atalasoft.Annotate.UI.UndoEventArgs" /> containing information about this event. </param>
    </member>
    <member name="T:Atalasoft.Annotate.UI.Exporters.AnnotationExporter">
      <summary> An abstract base class that encompasses elements for exporting annotations. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.Exporters.AnnotationExporter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Annotate.UI.Exporters.AnnotationExporter" /> class</summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.Exporters.AnnotationExporter.CanExport">
      <summary> Indicates whether or not this AnnotationExporter can do a simple export. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.Exporters.AnnotationExporter.CanExportOver">
      <summary> Indicates whether or not this AnnotationExporter can write annotations to a stream without affecting
            existing contents. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.Exporters.AnnotationExporter.Construct">
      <summary> A factory method to construct a new AnnotationExporter. </summary>
      <returns> A new AnnotationExporter object. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.UI.Exporters.AnnotationExporter.CopyStream(System.IO.Stream,System.IO.Stream)">
      <summary> Copies the entire source stream to the destination stream. </summary>
      <param name="sourceStream"> A non-null stream with annotation source data </param>
      <param name="destStream"> a non-null stream to which the source data will be copied. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.Exporters.AnnotationExporter.Export(System.IO.Stream,System.IO.Stream,System.Drawing.SizeF,Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi,Atalasoft.Annotate.UI.LayerAnnotation,System.Int32)">
      <summary> Exports a single page of annotations to a given stream. </summary>
      <param name="sourceStream"> The original source stream for the document. </param>
      <param name="destStream"> The destination stream for the document. </param>
      <param name="pageSize"> The size of the source page. </param>
      <param name="units"> The units in which the page size is expressed. </param>
      <param name="resolution"> The resolution of the page. </param>
      <param name="layer"> The page of annotations to export. </param>
      <param name="frameIndex"> The page number for exporting. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.Exporters.AnnotationExporter.Export(System.IO.Stream,System.IO.Stream,System.Drawing.SizeF[],Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi[],Atalasoft.Annotate.UI.LayerCollection)">
      <summary> Exports a multiple pages of annotations to a given stream. </summary>
      <param name="sourceStream"> The original source stream for the document. </param>
      <param name="destStream"> The destination stream for the document. </param>
      <param name="pageSizes"> An array of sizes of the source pages. </param>
      <param name="units"> An array of units in which the page sizes are expressed. </param>
      <param name="resolutions"> An array of resolutions of the pages. </param>
      <param name="layers"> A collection of pages of annotations. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.Exporters.AnnotationExporter.ExportOver(System.IO.Stream,System.Drawing.SizeF,Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi,Atalasoft.Annotate.UI.LayerAnnotation,System.Int32)">
      <summary> Export a set of annotations over an existing stream. </summary>
      <param name="destStream"> The destination stream for the document. </param>
      <param name="pageSize"> The size of the source page. </param>
      <param name="units"> The units in which the page size is expressed. </param>
      <param name="resolution"> The resolution of the page. </param>
      <param name="layer"> The page of annotations to export. </param>
      <param name="frameIndex"> The page number for exporting. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.Exporters.AnnotationExporter.ExportOver(System.IO.Stream,System.Drawing.SizeF[],Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi[],Atalasoft.Annotate.UI.LayerCollection)">
      <summary> Export a set of annotations over an existing stream. </summary>
      <param name="destStream"> The destination stream for the document. </param>
      <param name="pageSizes"> An array of sizes of the source pages. </param>
      <param name="units"> An array of units in which the page sizes are expressed. </param>
      <param name="resolutions"> An array of resolutions of the pages. </param>
      <param name="layers"> A collection of pages of annotations. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.Exporters.AnnotationExporter.IsValidFormat(System.IO.Stream)">
      <summary> Determines if the stream is the correct format. </summary>
      <param name="stm"> A non-null stream </param>
      <returns> Returns true if the stream contains valid data for this AnnotationExporter, false otherwise. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.UI.Exporters.AnnotationExporter.LLExport(System.IO.Stream,System.IO.Stream,System.Drawing.SizeF,Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi,Atalasoft.Annotate.UI.LayerAnnotation,System.Int32)"></member>
    <member name="M:Atalasoft.Annotate.UI.Exporters.AnnotationExporter.LLExport(System.IO.Stream,System.IO.Stream,System.Drawing.SizeF[],Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi[],Atalasoft.Annotate.UI.LayerCollection)"></member>
    <member name="M:Atalasoft.Annotate.UI.Exporters.AnnotationExporter.LLExportOver(System.IO.Stream,System.Drawing.SizeF,Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi,Atalasoft.Annotate.UI.LayerAnnotation,System.Int32)"></member>
    <member name="M:Atalasoft.Annotate.UI.Exporters.AnnotationExporter.LLExportOver(System.IO.Stream,System.Drawing.SizeF[],Atalasoft.Annotate.AnnotationUnit,Atalasoft.Imaging.Dpi[],Atalasoft.Annotate.UI.LayerCollection)"></member>
    <member name="T:Atalasoft.Annotate.UI.Importers.AnnotationImporter">
      <summary>
        <para>AnnotationImporter is an abstract base class used to define how annotations are imported from
            arbitrary data files into DotImage.</para>
        <para>
          <FONT color="#ff0000">This class is obsolete:  Use <see cref="T:Atalasoft.Annotate.UI.Importers.AnnotationImporter" /> instead.</FONT>
        </para>
      </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.Importers.AnnotationImporter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Annotate.UI.Importers.AnnotationImporter" /> class</summary>
    </member>
    <member name="E:Atalasoft.Annotate.UI.Importers.AnnotationImporter.AnnotationImported">
      <summary> Raised after a single annotation has been imported. </summary>
    </member>
    <member name="E:Atalasoft.Annotate.UI.Importers.AnnotationImporter.AnnotationPageImported">
      <summary> Raised after a page of annotations has been imported. </summary>
    </member>
    <member name="E:Atalasoft.Annotate.UI.Importers.AnnotationImporter.AnnotationPageImporting">
      <summary> Raised before a page of annotations will be imported. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.Importers.AnnotationImporter.FailsafeAnnotationFactory">
      <summary> Gets or sets a delegate that is used to create annotations if an importer is unable to do so. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.Importers.AnnotationImporter.FromStream(System.IO.Stream)">
      <summary> Constructs a new annotation importer associated with a given stream. </summary>
      <param name="stm"> A non-null stream containing annotation data. </param>
      <returns> A new annotation importer for importing annotations. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.UI.Importers.AnnotationImporter.GetAnnotationCount(System.Int32)">
      <summary> Returns the number of annotations on a conceptual page of a document. </summary>
      <param name="page"> page is an integer that represents the conceptual zero based page index of a document.  It will
            be range checked against the total number of pages in the document. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.Importers.AnnotationImporter.Import">
      <summary> Imports all annotations as LayerCollection. </summary>
      <returns> A new LayerCollection object representing annotations for the entire document.  Each LayerAnnotation
            within the collection represents one page of annotations.  If a page has no annotations, the LayerAnnotation will be
            non-null, but empty. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.UI.Importers.AnnotationImporter.Import(System.Int32)">
      <summary> Imports a page of annotations as LayerAnnotation. </summary>
      <param name="page"> The zero-based page from which annotations will be imported.  page is range checked against the
            document. </param>
      <returns> A LayerAnnotation containing a set of annotations from the page. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.UI.Importers.AnnotationImporter.Import(System.Int32,System.Int32)">
      <summary> Imports a single annotation from a given page of annotations. </summary>
      <param name="page"> The zero-based page from which annotations will be imported.  page is range checked against the
            document. </param>
      <param name="annotIndex"> The zero-based annotation which will be imported.  annotIndex is range checked against the
            number of annotations of the page.  The number of annotations on a page is available through <see cref="M:Atalasoft.Annotate.UI.Importers.AnnotationImporter.GetAnnotationCount(System.Int32)" />. </param>
      <returns> A single AnnotationUI object representing the imported annotation. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.UI.Importers.AnnotationImporter.IsValidFormat(System.IO.Stream)">
      <summary> Indicates whether or not an AnnotationImporter can recognize a particular data format. </summary>
      <param name="stm"> A non-null stream used to recognize file format. </param>
      <returns> true indicates that the AnnotationImporter recognizes this format. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.UI.Importers.AnnotationImporter.LastErrors">
      <summary> Gets a collection of strings representing errors encountered while importing annotations. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.Importers.AnnotationImporter.LLGetAnnotationCount(System.Int32)">
      <summary> Low level implementation of GetAnnotationCount </summary>
      <param name="page"> A zero-based integer representing the page from which the annotations are being counted.  Page
            will always be in range. </param>
      <returns> An integer representing the number of annotations on the page. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.UI.Importers.AnnotationImporter.LLGetPageCount">
      <summary> The low-level implementation of PageCount </summary>
      <returns> Returns the number of pages in the document. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.UI.Importers.AnnotationImporter.LLImport(System.Int32)">
      <summary> Imports all annotations as LayerCollection. </summary>
      <param name="page"> The zero-based page from which annotations will be imported.  page is range checked against the
            document. </param>
      <returns> A LayerAnnotation containing a set of annotations from the page. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.UI.Importers.AnnotationImporter.LLImport(System.Int32,System.Int32)"></member>
    <member name="M:Atalasoft.Annotate.UI.Importers.AnnotationImporter.LLLoad">
      <summary> The low-level implementation of Load </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.Importers.AnnotationImporter.Load">
      <summary> The load method is used to allow an AnnotationImporter to load and to possibly cache annotations.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.Importers.AnnotationImporter.OnAnnotationImported(Atalasoft.Annotate.UI.Importers.AnnotationImportEventArgs)">
      <summary> Fires the AnnotationImported event. </summary>
      <param name="e"> The AnnotationImportEventArgs for this event </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.Importers.AnnotationImporter.OnAnnotationPageImported(Atalasoft.Annotate.UI.Importers.AnnotationPageImportEventArgs)">
      <summary> Fires the AnnotationPageImported event. </summary>
      <param name="e"> The AnnotationPageImportEventArgs for this event. </param>
      <returns> The event is fired after a page of annotations has been imported. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.UI.Importers.AnnotationImporter.OnAnnotationPageImporting(Atalasoft.Annotate.UI.Importers.AnnotationPageImportEventArgs)">
      <summary> Fires the AnnotationPageImporting event. </summary>
      <param name="e"> The AnnotationPageImport events args for this event. </param>
      <returns> This event is fired before a page of annotations will be imported. </returns>
    </member>
    <member name="P:Atalasoft.Annotate.UI.Importers.AnnotationImporter.PageCount">
      <summary> Returns the total number of pages in a document. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.Importers.AnnotationImporter.Resolution">
      <summary> Sets or gets the resolution of the target for the annotations. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.Importers.AnnotationImporter.ThrowOnError">
      <summary> Gets or sets whether or not the importer will throw or suppress exceptions. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.Importers.AnnotationImporter.Units">
      <summary> Sets or gets the units of the target for the annotations. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.Importers.AnnotationImporterCollection">
      <summary> This is a collection used to contain a set of AnnotationImporter objects. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.Importers.AnnotationImporterCollection.#ctor">
      <summary> Constructs a new AnnotationImporterCollection. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.Importers.AnnotationImporterCollection.Add(Atalasoft.Annotate.UI.Importers.AnnotationImporter)">
      <summary> Adds an AnnotationImporter to the end of the collection. </summary>
      <param name="value"> The AnnotationImporter to add. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.Importers.AnnotationImporterCollection.Contains(Atalasoft.Annotate.UI.Importers.AnnotationImporter)">
      <summary> Returns true if the collection contains a given AnnotationImporter. </summary>
      <param name="value"> The AnnotationImported that to search for. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.Importers.AnnotationImporterCollection.CopyTo(Atalasoft.Annotate.UI.Importers.AnnotationImporter[],System.Int32)">
      <summary> Copies the entire contents of the collection to an array. </summary>
      <param name="array"> The array that will be used for copying. </param>
      <param name="index"> The start of the array. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.Importers.AnnotationImporterCollection.IndexOf(Atalasoft.Annotate.UI.Importers.AnnotationImporter)">
      <summary> Finds the index of a given AnnotationImporter within the collection. </summary>
      <param name="value"> The AnnotationImporter to find. </param>
      <returns> A value 0 or greater if the AnnotationImporter was found, less than zero if not. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.UI.Importers.AnnotationImporterCollection.Insert(System.Int32,Atalasoft.Annotate.UI.Importers.AnnotationImporter)">
      <summary> Inserts an AnnotationImporter into the collection. </summary>
      <param name="index"> The index before which the AnnotationImporter will be inserted. </param>
      <param name="value"> The AnnotationImporter to insert. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.Importers.AnnotationImporterCollection.Item(System.Int32)"></member>
    <member name="M:Atalasoft.Annotate.UI.Importers.AnnotationImporterCollection.Remove(Atalasoft.Annotate.UI.Importers.AnnotationImporter)">
      <summary> Removes an AnnotationImporter from the colection. </summary>
      <param name="value"> The AnnotationImporter to remove. </param>
    </member>
    <member name="T:Atalasoft.Annotate.UI.Importers.AnnotationImporterFactory">
      <summary> A delegate for constructing annotations from data that a given AnnotationImporter doesn't understand.
            </summary>
      <param name="importer"> The AnnotationImporter that attempted to import the annotation </param>
      <param name="location"> The location on the target page where the annotation will go </param>
      <param name="data"> The data used to construct the annotation. </param>
      <returns> A new AnnotationUI object or null.  If the delegate returns null, this annotation is ignored. </returns>
    </member>
    <member name="T:Atalasoft.Annotate.UI.Importers.AnnotationImportEventArgs">
      <summary> An object representing information about an annotation being imported. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.Importers.AnnotationImportEventArgs.#ctor(Atalasoft.Annotate.UI.Importers.AnnotationImporter,Atalasoft.Annotate.UI.AnnotationUI,System.Int32,System.Int32)">
      <summary> Constructs a new AnnotationImportEventArgs object. </summary>
      <param name="importer"> The AnnotationImporter that has imported the annotation. </param>
      <param name="annotation"> The AnnotationUI object that was imported. </param>
      <param name="page"> The page from which the AnnotationUI object was imported. </param>
      <param name="annotIndex"> The index on the page of the AnnotationUI object. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.Importers.AnnotationImportEventArgs.Annotation">
      <summary> Gets the AnnotationImporter that has imported the annotation. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.Importers.AnnotationImportEventArgs.AnnotationIndex">
      <summary> Gets the index on the page of the AnnotationUI object. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.Importers.AnnotationImportEventArgs.Importer">
      <summary> Gets the index on the page of the AnnotationUI object. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.Importers.AnnotationImportEventArgs.Page">
      <summary> Gets the index on the page of the AnnotationUI object. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.Importers.AnnotationImportEventHandler"></member>
    <member name="T:Atalasoft.Annotate.UI.Importers.AnnotationPageImportEventArgs">
      <summary> An object representing information about a page of annotations being imported. </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.Importers.AnnotationPageImportEventArgs.#ctor(Atalasoft.Annotate.UI.Importers.AnnotationImporter,Atalasoft.Annotate.UI.LayerAnnotation,System.Int32)">
      <summary> Constructs a new AnnotationPageImportEventArgs object. </summary>
      <param name="importer"> The AnnotationImporter importing the page. </param>
      <param name="layer"> The layer of annotations imported. </param>
      <param name="page"> The page number of the annotations being imported. </param>
    </member>
    <member name="P:Atalasoft.Annotate.UI.Importers.AnnotationPageImportEventArgs.Importer">
      <summary> Gets the AnnotationImporter importing the page. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.Importers.AnnotationPageImportEventArgs.Layer">
      <summary> Gets the layer of annotations imported. </summary>
    </member>
    <member name="P:Atalasoft.Annotate.UI.Importers.AnnotationPageImportEventArgs.Page">
      <summary> Gets the page number of the annotations being imported. </summary>
    </member>
    <member name="T:Atalasoft.Annotate.UI.Importers.AnnotationPageImportEventHandler"></member>
    <member name="T:Atalasoft.Annotate.UI.Importers.XmpAnnotationImporter">
      <summary>
            Summary description for XmpImporter.
            </summary>
    </member>
    <member name="M:Atalasoft.Annotate.UI.Importers.XmpAnnotationImporter.#ctor(Atalasoft.Annotate.UI.AnnotationController)">
      <summary> Constructs a new XmpAnnotationImporter object. </summary>
      <param name="controller"> A hosting AnnotationController object. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.Importers.XmpAnnotationImporter.#ctor(Atalasoft.Annotate.UI.AnnotationController,System.IO.Stream)">
      <summary> Constructs a new XmpAnnotationImporter object. </summary>
      <param name="controller"> A hosting AnnotationController object. </param>
      <param name="stm"> A stream from which annotations will be imported. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.Importers.XmpAnnotationImporter.FromStream(System.IO.Stream)">
      <summary> Constructs a new XmpAnnotationImporter for the given stream. </summary>
      <param name="stm"> A non-null stream containing XMP data. </param>
    </member>
    <member name="M:Atalasoft.Annotate.UI.Importers.XmpAnnotationImporter.IsValidFormat(System.IO.Stream)">
      <summary> Indicates if the stream contains XMP data. </summary>
      <param name="stm"> A non-null stream containing XMP data. </param>
      <returns> Returns true if the stream contains XMP data; false otherwise. </returns>
    </member>
    <member name="M:Atalasoft.Annotate.UI.Importers.XmpAnnotationImporter.LLGetAnnotationCount(System.Int32)"></member>
    <member name="M:Atalasoft.Annotate.UI.Importers.XmpAnnotationImporter.LLGetPageCount"></member>
    <member name="M:Atalasoft.Annotate.UI.Importers.XmpAnnotationImporter.LLImport(System.Int32)"></member>
    <member name="M:Atalasoft.Annotate.UI.Importers.XmpAnnotationImporter.LLImport(System.Int32,System.Int32)"></member>
    <member name="M:Atalasoft.Annotate.UI.Importers.XmpAnnotationImporter.LLLoad"></member>
    <member name="T:Atalasoft.Converters.PointFTypeConverter">
      <summary> A TypeConverter for a <STRONG>PointF</STRONG> object. </summary>
    </member>
    <member name="M:Atalasoft.Converters.PointFTypeConverter.#ctor">
      <summary> Creates a new instance of <STRONG>PointFTypeConverter</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Converters.PointFTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary> Returns whether this converter can convert an object of the given type to the type of this converter,
            using the specified context. </summary>
      <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
      <param name="sourceType"> A Type that represents the type you want to convert from. </param>
      <returns>
        <para>
          <B>True</B> if this converter can perform the conversion; otherwise, <B>false</B>.</para>
      </returns>
    </member>
    <member name="M:Atalasoft.Converters.PointFTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary> Converts the given object to the type of this converter, using the specified context and culture
            information. </summary>
      <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
      <param name="culture"> The CultureInfo to use as the current culture. </param>
      <param name="value"> The Object to convert. </param>
      <returns> An Object that represents the converted value. </returns>
    </member>
    <member name="M:Atalasoft.Converters.PointFTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
        <para>Converts the given value object to the specified type, using the specified context and culture
            information.</para>
      </summary>
      <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
      <param name="culture"> A CultureInfo object. If a null reference (Nothing in Visual Basic) is passed, the current
            culture is assumed. </param>
      <param name="value"> The Object to convert. </param>
      <param name="destinationType"> The Type to convert the value parameter to. </param>
      <returns> An Object that represents the converted value. </returns>
    </member>
    <member name="T:Atalasoft.Converters.RectangleFTypeConverter">
      <summary> A TypeConverter for the <STRONG>RectangleF</STRONG> object. </summary>
    </member>
    <member name="M:Atalasoft.Converters.RectangleFTypeConverter.#ctor">
      <summary> Creates a new instance of <STRONG>RectangleFTypeConverter</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Converters.RectangleFTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary> Returns whether this converter can convert an object of the given type to the type of this converter,
            using the specified context. </summary>
      <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
      <param name="sourceType"> A Type that represents the type you want to convert from. </param>
      <returns>
        <para>
          <B>True</B> if this converter can perform the conversion; otherwise, <B>false</B>.</para>
      </returns>
    </member>
    <member name="M:Atalasoft.Converters.RectangleFTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary> Converts the given object to the type of this converter, using the specified context and culture
            information. </summary>
      <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
      <param name="culture"> The CultureInfo to use as the current culture. </param>
      <param name="value"> The Object to convert. </param>
      <returns> An Object that represents the converted value. </returns>
    </member>
    <member name="M:Atalasoft.Converters.RectangleFTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
        <para>Converts the given value object to the specified type, using the specified context and culture
            information.</para>
      </summary>
      <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
      <param name="culture"> A CultureInfo object. If a null reference (Nothing in Visual Basic) is passed, the current
            culture is assumed. </param>
      <param name="value"> The Object to convert. </param>
      <param name="destinationType"> The Type to convert the value parameter to. </param>
      <returns> An Object that represents the converted value. </returns>
    </member>
    <member name="T:Atalasoft.Converters.SizeFTypeConverter">
      <summary> A TypeConverter for a <STRONG>SizeF</STRONG> object. </summary>
    </member>
    <member name="M:Atalasoft.Converters.SizeFTypeConverter.#ctor">
      <summary> Creates a new instance of <STRONG>SizeFConverter</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Converters.SizeFTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary> Returns whether this converter can convert an object of the given type to the type of this converter,
            using the specified context. </summary>
      <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
      <param name="sourceType"> A Type that represents the type you want to convert from. </param>
      <returns>
        <para>
          <B>True</B> if this converter can perform the conversion; otherwise, <B>false</B>.</para>
      </returns>
    </member>
    <member name="M:Atalasoft.Converters.SizeFTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary> Converts the given object to the type of this converter, using the specified context and culture
            information. </summary>
      <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
      <param name="culture"> The CultureInfo to use as the current culture. </param>
      <param name="value"> The Object to convert. </param>
      <returns> An Object that represents the converted value. </returns>
    </member>
    <member name="M:Atalasoft.Converters.SizeFTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
        <para>Converts the given value object to the specified type, using the specified context and culture
            information.</para>
      </summary>
      <param name="context"> An ITypeDescriptorContext that provides a format context. </param>
      <param name="culture"> A CultureInfo object. If a null reference (Nothing in Visual Basic) is passed, the current
            culture is assumed. </param>
      <param name="value"> The Object to convert. </param>
      <param name="destinationType"> The Type to convert the value parameter to. </param>
      <returns> An Object that represents the converted value. </returns>
    </member>
    <member name="T:Atalasoft.Imaging.AtalaFileStream">
      <summary> A custom Stream object that is used to read and write images to a file.  This is the default stream object
            used when specifying filenames for images. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
      <summary> Initializes a new instance of <STRONG>AtalaFileStream</STRONG>. </summary>
      <param name="fileName"> The file name that this stream will write to or read from. </param>
      <param name="fileMode"> Specifies how the operating system should open the file to read or write. </param>
      <param name="fileAccess"> Specified if the file is read, write, or read/write. </param>
    </member>
    <member name="P:Atalasoft.Imaging.AtalaFileStream.CanRead">
      <summary> Gets a value indicating if the stream can be read. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.AtalaFileStream.CanSeek">
      <summary> Gets a value indicating if the steam is seekable. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.AtalaFileStream.CanWrite">
      <summary> Gets a value indicating if the stream can be written to. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaFileStream.Close">
      <summary> Closes the stream. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaFileStream.Dispose">
      <summary> This will dispose of any resources used by the stream. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaFileStream.Flush">
      <summary> Forces any unwritten data to be committed. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.AtalaFileStream.Handle">
      <summary> Gets or sets the unmanaged handle to the file stream. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.AtalaFileStream.Length">
      <summary> Gets the length of the stream in bytes. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.AtalaFileStream.Name">
      <summary> Gets the name of the file for this stream. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.AtalaFileStream.Position">
      <summary> Gets the current position of the stream pointer. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaFileStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary> Reads data from the stream into a byte array. </summary>
      <param name="buffer"> The byte array that will hold the image data. </param>
      <param name="offset"> The starting position in the byte array to begin storing data. </param>
      <param name="count"> The number of bytes to read. </param>
      <returns> The number of bytes read. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaFileStream.Seek">
      <summary> Moves the file pointer to the beginning of the stream. </summary>
      <returns> The new position within the file. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaFileStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary> Moves the file pointer to a specific position within the stream. </summary>
      <param name="offset"> The number of bytes to move the pointer. </param>
      <param name="origin"> Specifies whether the <EM>offset</EM> is from the beginning, end or current position. </param>
      <returns> The new position within the file. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaFileStream.SetLength(System.Int64)">
      <summary> Sets the size of the stream. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaFileStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary> Writes data to the stream. </summary>
      <param name="buffer"> A byte array containing the data to write. </param>
      <param name="offset"> The starting position within the buffer to begin writing from. </param>
      <param name="count"> The number of bytes to write. </param>
    </member>
    <member name="T:Atalasoft.Imaging.AtalaImage">
      <summary> The <STRONG>AtalaImage</STRONG> object holds the raw image data, a <STRONG>Palette</STRONG>, and methods
            used to access this data. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.AtalaImage" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.#ctor(Atalasoft.Imaging.Memory.PixelMemory,System.Int32,System.Int32,Atalasoft.Imaging.PixelFormat)">
      <summary> Initialize a new instance of the %AtalaImage% class specifying the PixelMemory, Width, Height, and
            PixelFormat. </summary>
      <param name="memory"> A PixelMemory object that represents an image's memory </param>
      <param name="width"> Width of the image. </param>
      <param name="height"> Height of the image. </param>
      <param name="pixelFormat"> PixelFormat of the image. </param>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.#ctor(System.Int32,System.Int32,Atalasoft.Imaging.PixelFormat)">
      <summary> Initialize a new instance of the <see cref="T:Atalasoft.Imaging.AtalaImage" /> class specifying the Width, Height, and PixelFormat.
            </summary>
      <param name="width"> Width of the image. </param>
      <param name="height"> Height of the image. </param>
      <param name="pixelFormat"> PixelFormat of the image. </param>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.#ctor(System.Int32,System.Int32,Atalasoft.Imaging.PixelFormat,System.Byte)">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.AtalaImage" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.#ctor(System.Int32,System.Int32,Atalasoft.Imaging.PixelFormat,System.Drawing.Color)">
      <summary> Initialize a new instance of the <see cref="T:Atalasoft.Imaging.AtalaImage" /> class specifying the Width, Height, PixelFormat, and Color
            to initialize the image background to. </summary>
      <param name="width"> Width of the image. </param>
      <param name="height"> Height of the image. </param>
      <param name="pixelFormat"> PixelFormat of the image. </param>
      <param name="fillColor"> The color to fill the image with. </param>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.#ctor(System.IntPtr,System.Int32,System.Int32,Atalasoft.Imaging.PixelFormat)">
      <summary>
        <para>Initialize a new instance of the %AtalaImage% class specifying the image pointer, Width, Height, and
            PixelFormat. </para>
        <para>This method is obsolete.  Please use the constructor that takes a PixelMemory object instead.</para>
      </summary>
      <param name="imageData"> The memory pointer of the image bits of an unpacked DIB (Device Independent Bitmap).
            </param>
      <param name="width"> Width of the image. </param>
      <param name="height"> Height of the image. </param>
      <param name="pixelFormat"> PixelFormat of the image. </param>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.#ctor(System.IO.Stream)">
      <summary> Initialize a new instance of a <STRONG>AtalaImage</STRONG> class specifying a <STRONG>Stream</STRONG>.
            </summary>
      <param name="stream"> A stream containing the encoded image data. </param>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.#ctor(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Initialize a new instance of a %AtalaImage% class specifying a <see cref="T:System.IO.Stream" /> and a progress
            delegate. </summary>
      <param name="stream"> A stream containing the encoded image data. </param>
      <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            VB). </param>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.#ctor(System.IO.Stream,System.Int32,Atalasoft.Imaging.Codec.ImageDecoder,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Initialize a new instance of an <STRONG>AtalaImage</STRONG> class specifying a <STRONG>Stream</STRONG>,
            <STRONG>ImageDecoder</STRONG> to use for decoding the image, and a progress delegate. </summary>
      <param name="stream"> A stream containing the encoded image data. </param>
      <param name="frameIndex"> If the image contains multiple frames, this is the zero based index to load. </param>
      <param name="decoder"> The <STRONG>ImageDecoder</STRONG> to use for loading the specified encoded image. </param>
      <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.#ctor(System.IO.Stream,System.Int32,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Initialize a new instance of an <STRONG>AtalaImage</STRONG> class specifying an image
            <STRONG>Stream</STRONG> and a page index to decode. </summary>
      <param name="stream"> A stream containing the encoded image data. </param>
      <param name="frameIndex"> If the image contains multiple frames, this is the zero based index to load. </param>
      <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates an instance of an <STRONG>AtalaImage</STRONG>, with serialization info. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.#ctor(System.String)">
      <summary>
            Initialize a new instance of a <see cref="T:Atalasoft.Imaging.AtalaImage" /> class specifying the file of the image to open.
            </summary>
      <param name="Filename">The path of the file to open.</param>
      <param name="fileName"> The path of the file to open. </param>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.#ctor(System.String,Atalasoft.Imaging.ProgressEventHandler)">
      <summary>
            Initialize a new instance of a <see cref="T:Atalasoft.Imaging.AtalaImage" /> class specifying the file of the image to open.
            </summary>
      <param name="Filename">The path of the file to open.</param>
      <param name="fileName"> The path of the file to open. </param>
      <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.#ctor(System.String,System.Int32,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Initialize a new instance of an <STRONG>AtalaImage</STRONG> class specifying an image file and a page
            index to decode. </summary>
      <param name="fileName"> The path of the file to open. </param>
      <param name="frameIndex"> If the image contains multiple frames, this is the zero based index to load. </param>
      <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
    </member>
    <member name="P:Atalasoft.Imaging.AtalaImage.BitmapMirror">
      <summary> Gets the Bitmap mirror of this %AtalaImage%. </summary>
    </member>
    <member name="E:Atalasoft.Imaging.AtalaImage.ChangePixelFormat">
      <summary>
            Occurs when the image data changes PixelFormats.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.Clone">
      <summary>
            Returns a deep copy of this <see cref="T:Atalasoft.Imaging.AtalaImage" />.
            </summary>
      <returns>A deep copy of this <see cref="T:Atalasoft.Imaging.AtalaImage" />.</returns>
    </member>
    <member name="P:Atalasoft.Imaging.AtalaImage.ColorDepth">
      <summary>
            Returns the number of bits per pixel of this <see cref="T:Atalasoft.Imaging.AtalaImage" />.
            </summary>
      <returns>The number of bits per pixel of this <see cref="T:Atalasoft.Imaging.AtalaImage" />.</returns>
    </member>
    <member name="P:Atalasoft.Imaging.AtalaImage.ColorProfile">
      <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ColorManagement.ColorProfile" /> associated with this <see cref="T:Atalasoft.Imaging.AtalaImage" />.</summary>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.CombineChannels(Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.AtalaImage[])"></member>
    <member name="M:Atalasoft.Imaging.AtalaImage.CopyToClipboard(System.IntPtr)">
      <summary>Copies the image data onto the clipboard.</summary>
      <param name="ownerHandle">Handle to a window which will act as the clipboard parent.</param>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.CountColors">
      <summary>
            Count the number of unique colors in this <see cref="T:Atalasoft.Imaging.AtalaImage" />.
            </summary>
      <returns>The number of unique colors in this <see cref="T:Atalasoft.Imaging.AtalaImage" />.</returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.Dispose">
      <summary> Call this method to destroy this <STRONG>AtalaImage</STRONG> data and free memory. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:Atalasoft.Imaging.AtalaImage" /> and optionally releases the managed resources</summary>
      <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources</param>
    </member>
    <member name="P:Atalasoft.Imaging.AtalaImage.DitherErrorMax">
      <summary> Gets or sets the diffusion or dither error that's applied to an image when converting to from a continuous
            tone to colormapped format. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.Draw(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary> Draws this <STRONG>AtalaImage</STRONG> onto a <STRONG>System.Drawing.Graphics</STRONG> object at a
            specified location and size. </summary>
      <param name="graphics"> The Graphics object to draw on. </param>
      <param name="destRect"> The rectangular area of the Graphics object to draw on. </param>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.Draw(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle)">
      <summary> Draws a specified area of this <STRONG>AtalaImage</STRONG> onto a <STRONG>System.Drawing.Graphics</STRONG>
            object at the specified location and size. </summary>
      <param name="graphics"> The Graphics object to draw on. </param>
      <param name="destRect"> The rectangular area of the Graphics object to draw on. </param>
      <param name="srcRect"> The rectangular area of the source image to draw. </param>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.Draw(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Boolean)">
      <summary> Draws a specified area of this <STRONG>AtalaImage</STRONG> onto a <STRONG>System.Drawing.Graphics</STRONG>
            object at the specified location and size. </summary>
      <param name="graphics"> The Graphics object to draw on. </param>
      <param name="destRect"> The rectangular area of the Graphics object to draw on. </param>
      <param name="srcRect"> The rectangular area of the source image to draw. </param>
      <param name="renderBottomTop"> When true, the image will be forced to draw bottom to top. </param>
    </member>
    <member name="P:Atalasoft.Imaging.AtalaImage.Edition">
      <summary> Gets the type of license being used. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.FillRectangle(System.Drawing.Rectangle,System.Drawing.Color)">
      <summary> Fills a specified rectangle in this image with a specified solid color. </summary>
      <param name="rect"> The rectangular area to fill. </param>
      <param name="fillColor"> The color of the fill area. </param>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.FillRectangle(System.Drawing.Rectangle,System.Int32)">
      <summary> Fills a specified rectangle in this image with a specified index. </summary>
      <param name="rect"> The rectangular area to fill. </param>
      <param name="fillIndex"> The palette index or grayscale value to fill. </param>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.Finalize">
      <summary>
            The Destructor that will automatically be called by the garbage collector
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.Flip(Atalasoft.Imaging.FlipDirection)"></member>
    <member name="M:Atalasoft.Imaging.AtalaImage.FromBitmap(System.Drawing.Bitmap)">
      <summary> Returns an AtalaImage containing a copy of the Bitmap. </summary>
      <param name="bitmap"> The bitmap to create a copy from. </param>
      <returns> A copy of the Bitmap data in the form of an AtalaImage object. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.FromBitmap(System.Drawing.Bitmap,System.Boolean)">
      <summary> Converts a specified Bitmap into an AtalaImage by taking ownership of the Bitmap data, or returning a copy
            of the Bitmap data. </summary>
      <param name="bitmap"> The source Bitmap to convert </param>
      <param name="atalaImageWillOwnBitmap"> When true, the Bitmap data will be owned by the AtalaImage. </param>
      <returns> A copy of a GDI+ <STRONG>System.Drawing.Bitmap</STRONG> object in the form of an <see cref="T:Atalasoft.Imaging.AtalaImage" /> object.
            </returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.FromBitmapData(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.ColorPalette)">
      <summary> Returns an %AtalaImage% that contains the same image pointer that's in the specified
            <STRONG>BitmapData</STRONG> object. </summary>
      <param name="bd"> The <STRONG>BitmapData</STRONG> created from a Bitmap by locking the bits. </param>
      <param name="palette"> The palette of the Bitmap.  Set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual
            Basic) if the Bitmap doesn't contain a palette. </param>
      <returns> An %AtalaImage% that contains the same image pointer that's in the specified BitmapData object. 
            </returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.FromByteArray(System.Byte[])">
      <summary> Creates a new <STRONG> AtalaImage</STRONG>    from a byte array containing an encoded image. </summary>
      <param name="buffer"> A byte array containing the encoded image. </param>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.FromByteArray(System.Byte[],Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Creates a new <STRONG></STRONG>AtalaImage from a byte array containing an encoded image. </summary>
      <param name="buffer"> A byte array containing the encoded image. </param>
      <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.FromDib(System.IntPtr,System.Boolean)">
      <summary> Returns an <STRONG> AtalaImage</STRONG>    from a DIB (Device Independent Bitmap) pointer. </summary>
      <param name="dibPointer"> The DIB (device independent bitmap) pointer. </param>
      <param name="copy"> Indicates if the DIB data is copied into the <STRONG> AtalaImage</STRONG>   . </param>
      <returns> An <STRONG> AtalaImage</STRONG>    from a DIB (Device Independent Bitmap) pointer. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.FromHBitmap(System.IntPtr)"></member>
    <member name="M:Atalasoft.Imaging.AtalaImage.FromURL(System.String,System.Boolean,Atalasoft.Imaging.ProgressEventHandler)">
      <summary>
            Returns an <see cref="T:Atalasoft.Imaging.AtalaImage" /> loaded from the url.
            </summary>
      <param name="url"> The URL string </param>
      <param name="cacheOnClient"> When true, will cache the data on the client, using the IE Local cache </param>
      <param name="progress"> A progress delegate </param>
      <returns>The <see cref="T:Atalasoft.Imaging.AtalaImage" /> loaded from this URL.</returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.FromURL(System.String,System.Int32,System.Boolean,Atalasoft.Imaging.ProgressEventHandler)">
      <summary>
            Returns an <see cref="T:Atalasoft.Imaging.AtalaImage" /> loaded from the url.
            </summary>
      <param name="url">A URL to an image</param>
      <param name="frameIndex">The frame of the image to load from a multi-framed image.</param>
      <param name="cacheOnClient">true if you want to cache the image in the local Windows Temporary Internet Files folder.</param>
      <param name="progress">A handler to receive progress events while loading the image.</param>
      <returns>The <see cref="T:Atalasoft.Imaging.AtalaImage" /> loaded from this URL.</returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.GetBitmap">
      <summary> Returns a <STRONG>System.Drawing.Bitmap</STRONG> object copied from this %AtalaImage%.  </summary>
      <returns>A <see cref="T:System.Drawing.Bitmap" /> object from this <see cref="T:Atalasoft.Imaging.AtalaImage" /> data.</returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.GetChangedPixelFormat(Atalasoft.Imaging.PixelFormat)">
      <summary> Returns a new <see cref="T:Atalasoft.Imaging.AtalaImage" /> object with a different <see cref="P:Atalasoft.Imaging.AtalaImage.PixelFormat" /> from this <STRONG>AtalaImage</STRONG>.
            </summary>
      <param name="newPixelFormat"> The PixelFormat that the new AtalaImage will contain. </param>
      <returns> An <see cref="T:Atalasoft.Imaging.AtalaImage" /> object from a Bitmap object. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.GetChangedPixelFormat(Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.ColorManagement.ColorProfile)">
      <summary> Returns a new <see cref="T:Atalasoft.Imaging.AtalaImage" /> object with a different <see cref="P:Atalasoft.Imaging.AtalaImage.PixelFormat" /> from this <STRONG>AtalaImage</STRONG>.
            </summary>
      <returns> A new <see cref="T:Atalasoft.Imaging.AtalaImage" /> object with a different %PixelFormat% from this <STRONG>AtalaImage</STRONG>. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.GetChangedPixelFormat(Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.ColorManagement.ColorProfile,System.Boolean)">
      <summary> Returns a new <see cref="T:Atalasoft.Imaging.AtalaImage" /> object with a different <see cref="P:Atalasoft.Imaging.AtalaImage.PixelFormat" /> from this <STRONG>AtalaImage</STRONG>
            specifying a <see cref="T:Atalasoft.Imaging.ColorManagement.ColorProfile" /> and if the <see cref="!:ChangedPixelFormat" /> event
            should fire. </summary>
      <param name="newPixelFormat"> The PixelFormat that the new AtalaImage will contain. </param>
      <param name="destProfile"> The color profile to use when converting to and from the CMYK colorspace. </param>
      <param name="fireChangedPixelFormatEvent"> Speicifies if the <see cref="!:ChangedPixelFormat" /> should fire. </param>
      <returns>An <see cref="T:Atalasoft.Imaging.AtalaImage" /> object with a different <see cref="T:Atalasoft.Imaging.PixelFormat" /> from this AtalaImage.</returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.GetGraphics">
      <summary> Returns a <STRONG>System.Drawing.Graphics</STRONG> object allowing GDI+ operations to draw onto this
            <STRONG>AtalaImage</STRONG>. </summary>
      <returns> A <STRONG>System.Drawing.Graphics</STRONG> object allowing GDI+ operations to draw onto this
            <STRONG>AtalaImage</STRONG>. </returns>
      <exception> Thrown by the .NET Framework if the Graphics object does not support an image of the source AtalaImage
            PixelFormat. </exception>
      <exception> Thrown if the PixelFormat of this AtalaImage is not supported by a System.Drawing.Bitmap. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Used to serialize this <STRONG>AtalaImage</STRONG>. </summary>
      <param name="info"> The SerializationInfo object used to store this <STRONG>AtalaImage</STRONG>. </param>
      <param name="context"> The <STRONG>StreamingContext</STRONG> for this serialization. </param>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.GetPackedBuffer(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="M:Atalasoft.Imaging.AtalaImage.GetPixelCmykColor(System.Int32,System.Int32)">
      <summary> Get the color of a pixel in CMYK space </summary>
      <param name="x"> The x coordinate of the pixel </param>
      <param name="y"> The y coordinate of the pixel </param>
      <returns> A structure of type CmykColor representing the color of the pixel. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.GetPixelColor(System.Int32,System.Int32)">
      <summary> Returns the <STRONG>System.Drawing.Color</STRONG> of the specified pixel in this
            <STRONG>AtalaImage</STRONG>. </summary>
      <param name="x">
        <B>x</B> coordinate in the image. </param>
      <param name="y">
        <B>y</B> coordinate in the image. </param>
      <returns> The <STRONG>System.Drawing.Color</STRONG> of the specified pixel. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.GetPixelFormatDepth(Atalasoft.Imaging.PixelFormat)">
      <summary> Returns the color depth in bits per pixels associated with a specified <see cref="P:Atalasoft.Imaging.AtalaImage.PixelFormat" />. </summary>
      <param name="pixelFormat"> The <see cref="P:Atalasoft.Imaging.AtalaImage.PixelFormat" /> to retrieve the color depth from. </param>
      <returns> The color depth in bits per pixels associated with a specified <see cref="P:Atalasoft.Imaging.AtalaImage.PixelFormat" />. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.GetPixelIndex(System.Int32,System.Int32)">
      <summary> Gets the palette index of the specified pixel in this <STRONG>AtalaImage</STRONG>. </summary>
      <param name="x">
        <B>x</B> coordinate in the image. </param>
      <param name="y">
        <B>y</B> coordinate in the image. </param>
      <returns> The palette index of the specified pixel. </returns>
    </member>
    <member name="P:Atalasoft.Imaging.AtalaImage.Height">
      <summary> Gets the height of this AtalaImage in pixels. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.AtalaImage.ImageData">
      <summary> Gets the memory address of this AtalaImage. This property is unsupported.  Using it
            will cause a compilation error.  Use PixelMemory instead.</summary>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.ImageFromClipboard(System.IntPtr)">
      <summary>
            Creates a new AtalaImage from data on the clipboard.
            </summary>
      <param name="ownerHandle">Handle to a window which will act as the clipboard parent.</param>
      <returns>An AtalaImage object or null on failure.</returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.OnChangePixelFormat(Atalasoft.Imaging.PixelFormatChangeEventArgs)"></member>
    <member name="P:Atalasoft.Imaging.AtalaImage.Palette">
      <summary>
            Returns the palette object of this <see cref="T:Atalasoft.Imaging.AtalaImage" />.
            </summary>
    </member>
    <member name="P:Atalasoft.Imaging.AtalaImage.PixelFormat">
      <summary>
            Sets or returns the <see cref="T:Atalasoft.Imaging.PixelFormat" /> of this <see cref="T:Atalasoft.Imaging.AtalaImage" />.
            </summary>
    </member>
    <member name="P:Atalasoft.Imaging.AtalaImage.PixelFormatChanger">
      <summary> Get or set the class used to convert image pixel formats. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.PixelFormatHasAlpha(Atalasoft.Imaging.PixelFormat)">
      <summary> Returns <EM>true</EM> if the specified <STRONG>PixelFormat</STRONG> contains an alpha channel. </summary>
      <param name="pixelFormat"> The <see cref="P:Atalasoft.Imaging.AtalaImage.PixelFormat" /> to use when determining if there is an alpha channel. </param>
      <returns>
        <EM>True</EM> if this <STRONG>AtalaImage</STRONG> contains an alpha channel. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.PixelFormatIsColormapped(Atalasoft.Imaging.PixelFormat)">
      <summary> Returns <B>true</B> if the specified <see cref="P:Atalasoft.Imaging.AtalaImage.PixelFormat" /> contains a palette. </summary>
      <param name="pixelFormat"> The <see cref="P:Atalasoft.Imaging.AtalaImage.PixelFormat" /> to use when determining if there is an palette. </param>
      <returns>
        <B>True</B> if this AtalaImage contains a palette, <B>false</B> if it does not. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.PixelFormatIsContinuous(Atalasoft.Imaging.PixelFormat)">
      <summary>
        <para>Returns <STRONG>true</STRONG> if the <see cref="P:Atalasoft.Imaging.AtalaImage.PixelFormat" /> passed in is a continuous-tone format. </para>
      </summary>
      <param name="pixelFormat"> The <see cref="P:Atalasoft.Imaging.AtalaImage.PixelFormat" /> to test for continuous-tone. </param>
      <returns>
        <B>true</B> if continuous, <B>false</B> if not. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.PixelFormatIsTwoBytePerComponent(Atalasoft.Imaging.PixelFormat)">
      <summary> This method can be used to determine if a PixelFormat is a "Two Byte Per Component" image format.
            </summary>
      <param name="pixelFormat"> The PixelFormat to test. </param>
      <returns> True if the <EM>pixelFormat</EM> parameter is a "Two Byte Per Component" image format. </returns>
    </member>
    <member name="P:Atalasoft.Imaging.AtalaImage.PixelMemory">
      <summary> Provides access to the memory that represents an image. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.AtalaImage.Resolution">
      <summary>
            Get or set the Resolution of this <see cref="T:Atalasoft.Imaging.AtalaImage" /> object
            </summary>
    </member>
    <member name="P:Atalasoft.Imaging.AtalaImage.RowStride">
      <summary>
            Get the number of bytes in each row of this <see cref="T:Atalasoft.Imaging.AtalaImage" />.
            </summary>
      <returns>The number of bytes in each row of this <see cref="T:Atalasoft.Imaging.AtalaImage" />.</returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.Save(System.IO.Stream,Atalasoft.Imaging.Codec.ImageEncoder,Atalasoft.Imaging.ProgressEventHandler)">
      <summary>
            Saves this <see cref="T:Atalasoft.Imaging.AtalaImage" /> to a <see cref="T:System.IO.Stream" /> object specifying an <see cref="T:Atalasoft.Imaging.Codec.ImageType" />.
            </summary>
      <param name="stream"> A stream containing the file which the image will be encoded to. </param>
      <param name="encoder"> The <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder" /> which will be used to encode the image. </param>
      <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            VB). </param>
      <returns>The number of bytes saved to the file.</returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.Save(System.String,Atalasoft.Imaging.Codec.ImageEncoder,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Saves this %AtalaImage% to a  file specifying an <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder" /> and progress callback.
            </summary>
      <param name="fileName"> The filename to save this %AtalaImage% to. </param>
      <param name="encoder"> The <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder" /> which will be used to encode the image. </param>
      <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            VB). </param>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.Save(System.String,Atalasoft.Imaging.Codec.ImageType,Atalasoft.Imaging.ProgressEventHandler)">
      <summary>
            Saves this <see cref="T:Atalasoft.Imaging.AtalaImage" /> to a file specifying an <see cref="T:Atalasoft.Imaging.Codec.ImageType" /> and a <see cref="P:Atalasoft.Imaging.AtalaImage.PixelFormat" />.
            </summary>
      <param name="fileName"> The filename to save this %AtalaImage% to. </param>
      <param name="type"> The image type to save this image as. </param>
      <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            VB). </param>
      <returns>The number of bytes saved to the file.</returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.SetPixelCmykColor(System.Int32,System.Int32,Atalasoft.Imaging.CmykColor)">
      <summary> Set the color of a pixel in CMYK space </summary>
      <param name="x"> The X coordinate of the pixel </param>
      <param name="y"> The Y coordinate of the pixel </param>
      <param name="newColor"> The color to set </param>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.SetPixelColor(System.Int32,System.Int32,System.Drawing.Color)"></member>
    <member name="M:Atalasoft.Imaging.AtalaImage.SetPixelIndex(System.Int32,System.Int32,System.Byte)"></member>
    <member name="P:Atalasoft.Imaging.AtalaImage.Size">
      <summary> Gets the size of this <see cref="T:Atalasoft.Imaging.AtalaImage" /> in pixels. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.SplitChannels">
      <summary> Returns an array of grayscale <see cref="T:Atalasoft.Imaging.AtalaImage" /> objects representing each 8-bit or 16-bit channel in the source
            image. </summary>
      <returns> An array of grayscale <see cref="T:Atalasoft.Imaging.AtalaImage" /> objects composing of individual channels of the source image.
            </returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.SplitChannels(Atalasoft.Imaging.ImageProcessing.ChannelFlags)">
      <summary> Returns an array of grayscale %AtalaImage% objects representing specified 8-bit or 16-bit channels in the
            source image. </summary>
      <param name="channels"> The channels mask to apply.  The returned array will contain a null AtalaImage if that
            particular channel's bit flag is not set. </param>
      <returns> An array of grayscale %AtalaImage% objects representing specified 8-bit or 16-bit channels in the source
            image. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.ToBitmap">
      <summary>
            Returns a <see cref="T:System.Drawing.Bitmap" /> object from this <see cref="T:Atalasoft.Imaging.AtalaImage" /> data.
            </summary>
      <returns>A <see cref="T:System.Drawing.Bitmap" /> object from this <see cref="T:Atalasoft.Imaging.AtalaImage" /> data.</returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.ToByteArray(Atalasoft.Imaging.Codec.ImageEncoder)">
      <summary> Returns a byte array containing an encoded image. </summary>
      <param name="encoder"> The <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder" /> which will be used to encode the image. </param>
      <returns> A byte array containing an encoded image. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.ToByteArray(Atalasoft.Imaging.Codec.ImageEncoder,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Returns a byte array containing an encoded image. </summary>
      <param name="encoder"> The <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder" /> which will be used to encode the image. </param>
      <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            VB). </param>
      <returns> A byte array containing an encoded image. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.ToDib">
      <summary> Returns a pointer to a DIB (Device Independent Bitmap) copied from this AtalaImage. </summary>
      <returns> A DIB (device independent bitmap) pointer. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.ToDib(System.IO.Stream)">
      <summary> Fills the given stream with a DIB (Device Independent Bitmap) copied from this AtalaImage. </summary>
      <param name="stream"> The stream which will be filled with the DIB </param>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.ToString">
      <summary>
        <para>Returns a textual description of this <STRONG>AtalaImage</STRONG> object.</para>
      </summary>
      <returns> A string containing the width, height and pixel format of this image. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImage.UnregisteredWatermark(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="P:Atalasoft.Imaging.AtalaImage.Width">
      <summary>
            Returns the width of this <see cref="T:Atalasoft.Imaging.AtalaImage" /> in pixels.
            </summary>
    </member>
    <member name="T:Atalasoft.Imaging.AtalaImageEditor">
      <summary> Allows visual designers to add <STRONG>AtalaImage</STRONG> objects in design time. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImageEditor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.AtalaImageEditor" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaImageEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)"></member>
    <member name="M:Atalasoft.Imaging.AtalaImageEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)"></member>
    <member name="M:Atalasoft.Imaging.AtalaImageEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)"></member>
    <member name="M:Atalasoft.Imaging.AtalaImageEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)"></member>
    <member name="T:Atalasoft.Imaging.AtalaInt128">
      <summary> A 128 bit Integer value type used in JPEG2000 metadata. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaInt128.#ctor(Atalasoft.Imaging.AtalaInt128)">
      <summary> Creates a new copy of an <STRONG>AtalaInt128</STRONG>. </summary>
      <param name="i128"> The <STRONG>AtalaInt128</STRONG> to create a copy of. </param>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaInt128.#ctor(System.Byte[])">
      <summary> Creates a new instance of <STRONG>AtalaInt128</STRONG> from an array of bytes. </summary>
      <param name="inData">
        <para>The byte values.  </para>
        <para>The lowest index of the input byte array (i.e [0]) should contain the most significant byte of the number, and
            the highest index should contain the least significant byte.</para>
      </param>
      <exception> Thrown if the inData argument is null (Nothing in VB). </exception>
      <exception> Thrown if the inData argument contains too many bytes. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaInt128.#ctor(System.Byte[],System.Int32)">
      <summary> Creates a new instance of <STRONG>AtalaInt128</STRONG> from an array of bytes. </summary>
      <param name="inData">
        <para>The byte values.  </para>
        <para>The lowest index of the input byte array (i.e [0]) should contain the most significant byte of the number, and
            the highest index should contain the least significant byte.</para>
      </param>
      <param name="inLen"> The number of bytes from the inData to use. </param>
      <exception> Thrown if the inLen is greater than the inData length or if inLen is greater than 4. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaInt128.#ctor(System.Int64)">
      <summary> Creates a new instance of <STRONG>AtalaInt128</STRONG> from a long. </summary>
      <param name="value"> The value to use for the <STRONG>AtalaInt128</STRONG>. </param>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaInt128.#ctor(System.String,System.Int32)">
      <summary> Creates a new instance of <STRONG>AtalaInt128</STRONG> from a string. </summary>
      <param name="value"> The numeric string to build the <STRONG>AtalaInt128</STRONG> from. </param>
      <param name="radix"> The numeric base.  Values of 10 and 16 are common. </param>
      <exception> Thrown if the value argument is null (Nothing in VB). </exception>
      <exception> Thrown if the string value is invalid. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaInt128.Add(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)">
      <summary> Performs an addition of two <STRONG>AtalaInt128</STRONG> objects. </summary>
      <param name="bi1"> The first <STRONG>AtalaInt128</STRONG> in the calculation. </param>
      <param name="bi2"> The second <STRONG>AtalaInt128</STRONG> in the calculation. </param>
      <returns> The results of the calculation. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaInt128.BitwiseAnd(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)">
      <summary> Performs a bitwise AND of two <STRONG>AtalaInt128</STRONG> objects. </summary>
      <param name="bi1"> The first <STRONG>AtalaInt128</STRONG> in the calculation. </param>
      <param name="bi2"> The second <STRONG>AtalaInt128</STRONG> in the calculation. </param>
      <returns> The results of the calculation. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaInt128.BitwiseOr(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)">
      <summary> Performs a bitwise OR on two <STRONG>AtalaInt128</STRONG> objects. </summary>
      <param name="bi1"> The first <STRONG>AtalaInt128</STRONG> in the calculation. </param>
      <param name="bi2"> The second <STRONG>AtalaInt128</STRONG> in the calculation. </param>
      <returns> The results of the calculation. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaInt128.Compare(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)">
      <summary> Compares two <STRONG>AtalaInt128</STRONG> objects. </summary>
      <param name="bi1"> The first <STRONG>AtalaInt128</STRONG> to compare. </param>
      <param name="bi2"> The <STRONG>AtalaInt128</STRONG> to compare against. </param>
      <returns> Returns -1 if bi1 is less than bi2, 1 of bi1 is greater than bi2 or 0 if the values are equal. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaInt128.Decrement(Atalasoft.Imaging.AtalaInt128)">
      <summary> Reduces the value by 1. </summary>
      <param name="bi1"> The <STRONG>AtalaInt128</STRONG> to decrement. </param>
      <returns> The new value. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaInt128.Divide(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)">
      <summary> Performs a division on two <STRONG>AtalaInt128</STRONG> objects. </summary>
      <param name="bi1"> The first <STRONG>AtalaInt128</STRONG> in the calculation. </param>
      <param name="bi2"> The second <STRONG>AtalaInt128</STRONG> in the calculation. </param>
      <returns> The results of the calculation. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaInt128.Equals(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)">
      <summary> Returns true if both <STRONG>AtalaInt128</STRONG> objects are equal. </summary>
      <param name="bi1"> The first <STRONG>AtalaInt128</STRONG> to test. </param>
      <param name="bi2"> The <STRONG>AtalaInt128</STRONG> to test against. </param>
      <returns> True if the values are equal. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaInt128.Equals(System.Object)">
      <summary> Returns a value indicating whether another <STRONG>AtalaInt128</STRONG> is equal to this instance.</summary>
      <param name="obj"> An <STRONG>AtalaInt128</STRONG> to test against. </param>
      <returns> True if the value is equal to the <STRONG>AtalaInt128</STRONG>. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaInt128.GetHashCode">
      <summary> Returns the hash code for this <STRONG>AtalaInt128</STRONG>. </summary>
      <returns> The <STRONG>AtalaInt128</STRONG> hash code. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaInt128.Increment(Atalasoft.Imaging.AtalaInt128)">
      <summary> Increments the <STRONG>AtalaInt128</STRONG>. </summary>
      <param name="bi1"> The <STRONG>AtalaInt128</STRONG> to increment. </param>
      <returns> The new value. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaInt128.IntValue">
      <summary> Returns the lowest 4 bytes of the <STRONG>AtalaInt128</STRONG> as an Integer. </summary>
      <returns> The lowest 4 bytes of the value. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaInt128.LeftShift(Atalasoft.Imaging.AtalaInt128,System.Int32)">
      <summary> Performs a left bit shift on an <STRONG>AtalaInt128</STRONG>. </summary>
      <param name="bi1"> The <STRONG>AtalaInt128</STRONG> to shift. </param>
      <param name="shiftVal"> The amount to shift. </param>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaInt128.LongValue">
      <summary> Returns the lowest 8 bytes of the <STRONG>AtalaInt128</STRONG> as a Long. </summary>
      <returns> The lowest 8 bytes of the value. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaInt128.Modulus(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)">
      <summary> Performs a modulus calculation on two <STRONG>AtalaInt128</STRONG> objects. </summary>
      <param name="bi1"> The first <STRONG>AtalaInt128</STRONG> in the calculation. </param>
      <param name="bi2"> The second <STRONG>AtalaInt128</STRONG> in the calculation. </param>
      <returns> The results of the calculation. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaInt128.Multiply(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)">
      <summary> Performs a multiplication operation on two <STRONG>AtalaInt128</STRONG> objects. </summary>
      <param name="bi1"> The first <STRONG>AtalaInt128</STRONG> in the calculation. </param>
      <param name="bi2"> The second <STRONG>AtalaInt128</STRONG> in the calculation. </param>
      <returns> The results of the calculation. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaInt128.Negate(Atalasoft.Imaging.AtalaInt128)">
      <summary> Negates an <STRONG>AtalaInt128</STRONG> object. </summary>
      <param name="bi1"> The <STRONG>AtalaInt128</STRONG> to negate. </param>
      <returns> The results of the calculation. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaInt128.OnesComplement(Atalasoft.Imaging.AtalaInt128)">
      <summary> Performs a bitwise complement on an <STRONG>AtalaInt128</STRONG>. </summary>
      <param name="bi1"> The <STRONG>AtalaInt128</STRONG> for this calculation. </param>
      <returns> The results of the calculation. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaInt128.op_Addition(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)">
      <summary>
            operator overloading +
            </summary>
      <param name="bi1">AtalaInt128</param>
      <param name="bi2">AtalaInt128</param>
      <returns>AtalaInt128</returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaInt128.op_BitwiseAnd(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)"></member>
    <member name="M:Atalasoft.Imaging.AtalaInt128.op_BitwiseOr(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)"></member>
    <member name="M:Atalasoft.Imaging.AtalaInt128.op_Decrement(Atalasoft.Imaging.AtalaInt128)"></member>
    <member name="M:Atalasoft.Imaging.AtalaInt128.op_Division(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)"></member>
    <member name="M:Atalasoft.Imaging.AtalaInt128.op_Equality(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)"></member>
    <member name="M:Atalasoft.Imaging.AtalaInt128.op_ExclusiveOr(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)"></member>
    <member name="M:Atalasoft.Imaging.AtalaInt128.op_GreaterThan(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)"></member>
    <member name="M:Atalasoft.Imaging.AtalaInt128.op_GreaterThanOrEqual(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)"></member>
    <member name="M:Atalasoft.Imaging.AtalaInt128.op_Implicit(System.Int32)~Atalasoft.Imaging.AtalaInt128">
      <summary>
            Overloading of the typecast operator
            </summary>
      <param name="value">int</param>
      <returns>AtalaInt128</returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaInt128.op_Implicit(System.Int64)~Atalasoft.Imaging.AtalaInt128">
      <summary>
            Overloading of the typecast operator
            </summary>
      <param name="value">long</param>
      <returns>AtalaInt128</returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaInt128.op_Increment(Atalasoft.Imaging.AtalaInt128)"></member>
    <member name="M:Atalasoft.Imaging.AtalaInt128.op_Inequality(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)"></member>
    <member name="M:Atalasoft.Imaging.AtalaInt128.op_LeftShift(Atalasoft.Imaging.AtalaInt128,System.Int32)"></member>
    <member name="M:Atalasoft.Imaging.AtalaInt128.op_LessThan(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)"></member>
    <member name="M:Atalasoft.Imaging.AtalaInt128.op_LessThanOrEqual(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)"></member>
    <member name="M:Atalasoft.Imaging.AtalaInt128.op_Modulus(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)"></member>
    <member name="M:Atalasoft.Imaging.AtalaInt128.op_Multiply(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)"></member>
    <member name="M:Atalasoft.Imaging.AtalaInt128.op_OnesComplement(Atalasoft.Imaging.AtalaInt128)"></member>
    <member name="M:Atalasoft.Imaging.AtalaInt128.op_RightShift(Atalasoft.Imaging.AtalaInt128,System.Int32)"></member>
    <member name="M:Atalasoft.Imaging.AtalaInt128.op_Subtraction(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)"></member>
    <member name="M:Atalasoft.Imaging.AtalaInt128.op_UnaryNegation(Atalasoft.Imaging.AtalaInt128)"></member>
    <member name="M:Atalasoft.Imaging.AtalaInt128.RightShift(Atalasoft.Imaging.AtalaInt128,System.Int32)">
      <summary> Performs a right bit shift on an <STRONG>AtalaInt128</STRONG>. </summary>
      <param name="bi1"> The <STRONG>AtalaInt128</STRONG> to shift. </param>
      <param name="shiftVal"> The amount of shifting to apply. </param>
      <returns> The results of the calculation. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaInt128.Subtract(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)">
      <summary> Performs a subtraction of two <STRONG>AtalaInt128</STRONG> objects. </summary>
      <param name="bi1"> The first <STRONG>AtalaInt128</STRONG> in the calculation. </param>
      <param name="bi2"> The second <STRONG>AtalaInt128</STRONG> in the calculation. </param>
      <returns> The results of the calculation. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaInt128.ToHexString">
      <summary> Returns a hex string with the contents of the <STRONG>AtalaInt128.</STRONG></summary>
      <returns> A hex string representation of the <STRONG>AtalaInt128</STRONG>. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaInt128.ToString">
      <summary> Returns a string representing the <STRONG>AtalaInt128</STRONG> in base 10. </summary>
      <returns> A string representing the <STRONG>AtalaInt128</STRONG> in base 10. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaInt128.ToString(System.Int32)">
      <summary> Returns a string representing the <STRONG>AtalaInt128</STRONG> in sign-and-magnitude format in the
            specified radix. </summary>
      <param name="radix"> The numeric base to use in the string. </param>
      <returns> A string representing the <STRONG>AtalaInt128</STRONG> in sign-and-magnitude format in the specified
            radix. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaInt128.Xor(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)">
      <summary> Performs an XOR operation on two <STRONG>AtalaInt128</STRONG> objects. </summary>
      <param name="bi1"> The first <STRONG>AtalaInt128</STRONG> in the calculation. </param>
      <param name="bi2"> The second <STRONG>AtalaInt128</STRONG> in the calculation. </param>
      <returns> The results of the calculation. </returns>
    </member>
    <member name="T:Atalasoft.Imaging.AtalaInt128Collection">
      <summary> A collection of AtalaInt128 structures. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaInt128Collection.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaInt128Collection.Add(Atalasoft.Imaging.AtalaInt128)">
      <summary>
            Adds 'source' to the end of the CollectionBase.
            </summary>
      <param name="source">given object of UuidBox</param>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaInt128Collection.Contains(Atalasoft.Imaging.AtalaInt128)">
      <summary>
            Determines whether the CollectionBase contains 'source'.
            </summary>
      <param name="source">given object of UuidBox</param>
      <returns>boolean</returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaInt128Collection.CopyTo(Atalasoft.Imaging.AtalaInt128[],System.Int32)">
      <summary>
            Copies the entire CollectionBase to 'dest', starting at 'index' of the target array.
            </summary>
      <param name="dest">target array of UuidBox</param>
      <param name="index">index of target array</param>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaInt128Collection.IndexOf(Atalasoft.Imaging.AtalaInt128)">
      <summary>
            Searches for 'source' and returns the zero-based index of the first occurrence 
            within the entire CollectionBase.
            </summary>
      <param name="source">given object of UuidBox</param>
      <returns>the zero-based index of the first occurrence</returns>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaInt128Collection.Insert(System.Int32,Atalasoft.Imaging.AtalaInt128)">
      <summary>
            Inserts 'source' into the CollectionBase at 'index'.
            </summary>
      <param name="index">specified index</param>
      <param name="source">given object of UuidBox</param>
    </member>
    <member name="P:Atalasoft.Imaging.AtalaInt128Collection.Item(System.Int32)">
      <summary>
            Indexer
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaInt128Collection.Remove(Atalasoft.Imaging.AtalaInt128)">
      <summary>
            Removes the first occurrence of 'source' from the CollectionBase.
            </summary>
      <param name="source">given object of UuidBox</param>
    </member>
    <member name="T:Atalasoft.Imaging.AtalaPixelFormatChanger">
      <summary> This is the standard PixelFormat changer class. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaPixelFormatChanger.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.AtalaPixelFormatChanger" /> class</summary>
    </member>
    <member name="P:Atalasoft.Imaging.AtalaPixelFormatChanger.DitherErrorMax">
      <summary> Gets or sets the diffusion or dither error that's applied to an image when converting to from a continuous
            tone to colormapped format. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.AtalaPixelFormatChanger.LowLevelChangePixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.ColorManagement.ColorProfile)"></member>
    <member name="T:Atalasoft.Imaging.BinaryPaletteEnforcer">
      <summary>
            A <see cref="T:Atalasoft.Imaging.ResourceReleaser`1" /> that inverts a 1BPP <see cref="T:Atalasoft.Imaging.AtalaImage" /> on creation if it does not
            have the desired photometric interpretation, and inverts it again at the end of its lifetime.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.BinaryPaletteEnforcer.EnforceMinIsBlack(Atalasoft.Imaging.AtalaImage)">
      <summary>
            Returns an instance of a <see cref="T:Atalasoft.Imaging.BinaryPaletteEnforcer" /> that enforces a MinIsBlack
            photometric interpretation of the image until it is released.
            </summary>
      <param name="image">The image to enforce upon.</param>
      <returns>An auto-releasing <see cref="T:Atalasoft.Imaging.ResourceReleaser`1" />.</returns>
    </member>
    <member name="M:Atalasoft.Imaging.BinaryPaletteEnforcer.EnforceMinIsWhite(Atalasoft.Imaging.AtalaImage)">
      <summary>
            Returns an instance of a <see cref="T:Atalasoft.Imaging.BinaryPaletteEnforcer" /> that enforces a MinIsWhite
            photometric interpretation of the image until it is released.
            </summary>
      <param name="image">The image to enforce upon.</param>
      <returns>An auto-releasing <see cref="T:Atalasoft.Imaging.ResourceReleaser`1" />.</returns>
    </member>
    <member name="T:Atalasoft.Imaging.BinaryPaletteEnforcer.EnforcerState">
      <summary>
            The internal state of a <see cref="T:Atalasoft.Imaging.BinaryPaletteEnforcer" /> instance.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.BinaryPaletteEnforcer.EnforcerState.#ctor(Atalasoft.Imaging.AtalaImage,System.Boolean)">
      <summary>
            Creates a new instance of a <see cref="T:Atalasoft.Imaging.BinaryPaletteEnforcer" /> state object with a given
            image and enforcement.
            </summary>
      <param name="image">The image to enforce upon.</param>
      <param name="enforceMinIsWhite">The interpretation to enforce.</param>
    </member>
    <member name="M:Atalasoft.Imaging.BinaryPaletteEnforcer.EnforcerState.Release">
      <summary>
            Releases the image from enforcement.
            </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ChangedImageEventArgs">
      <summary> This class is used to indicate when an AtalaImage has changed. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ChangedImageEventArgs.#ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage)">
      <summary> Constructs a new ChangedImageEventArgs object </summary>
      <param name="originalImage"> The original image </param>
      <param name="newImage"> The image that is replacing the original image. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ChangedImageEventArgs.NewImage">
      <summary> Gets the new AtalaImage that will replace the old image. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ChangedImageEventArgs.OriginalImage">
      <summary> Gets the AtalaImage that represents an image to be replaced. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ChangedImageEventHandler">
      <summary> This EventHandler is used to update AtalaImage objects in various classes. </summary>
      <param name="sender"> The object in which the exception occurred. </param>
      <param name="e"> The ChangedImageEventArgs containing information about the images. </param>
    </member>
    <member name="T:Atalasoft.Imaging.CmykColor">
      <summary> CmykColor defines a color that consists of cyan, magenta, yellow, and black components. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.CmykColor.#ctor(System.Drawing.Color)">
      <summary> Construct a new CmykColor from the RGB color. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.CmykColor.#ctor(System.Int32)">
      <summary> Construct a new CmykColor from the 32-bit integer provided. </summary>
      <param name="packedCmyk"> PackedCmyk represents the 4 components as 4 8 bit values with c in the upper byte,
            followed by m, y, and k. </param>
    </member>
    <member name="M:Atalasoft.Imaging.CmykColor.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary> Construct a new CmykColor from the four components provided </summary>
      <param name="c"> The cyan component of this color. </param>
      <param name="m"> The magenta component of this color. </param>
      <param name="y"> The yellow component of this color. </param>
      <param name="k"> The black component of this color. </param>
    </member>
    <member name="P:Atalasoft.Imaging.CmykColor.C">
      <summary> Set or get the cyan component of this color. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.CmykColor.Equals(System.Object)">
      <summary> Test for equality with another object. </summary>
      <param name="obj"> The compare to compare against. </param>
    </member>
    <member name="M:Atalasoft.Imaging.CmykColor.GetHashCode">
      <summary> Get the hash code for this object. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.CmykColor.K">
      <summary> Set or get the black component of this color. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.CmykColor.M">
      <summary> Set or get the magenta component of this color. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.CmykColor.op_Equality(Atalasoft.Imaging.CmykColor,Atalasoft.Imaging.CmykColor)">
      <summary> Implements the equality operator. </summary>
      <param name="c1"> The first color to compare </param>
      <param name="c2"> The second color to compare </param>
      <returns> True if the objects represent the same color, false otherwise. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.CmykColor.op_Inequality(Atalasoft.Imaging.CmykColor,Atalasoft.Imaging.CmykColor)">
      <summary> Implements the not-equals operator </summary>
      <param name="c1"> The first color to compare </param>
      <param name="c2"> The second color to compare </param>
      <returns> True if the colors are different, false otherwise. </returns>
    </member>
    <member name="P:Atalasoft.Imaging.CmykColor.Rgb">
      <summary> Gets the value of the color an RGB Color object. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.CmykColor.Y">
      <summary> Set or get the yellow component of this color. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Dpi">
      <summary> Holds the Resolution information. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Dpi.#ctor(System.Double,System.Double,Atalasoft.Imaging.ResolutionUnit)">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Dpi" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.Dpi.#ctor(System.Int32,System.Int32,Atalasoft.Imaging.ResolutionUnit)">
      <summary>
            Create a new Dpi structure at a specified resolution.
            </summary>
      <param name="x">Horizontal Resolution.</param>
      <param name="y">Vertical Resolution.</param>
      <param name="units">Resolution Units.</param>
    </member>
    <member name="M:Atalasoft.Imaging.Dpi.Compare(Atalasoft.Imaging.Dpi,Atalasoft.Imaging.Dpi)"></member>
    <member name="M:Atalasoft.Imaging.Dpi.ConvertTo(Atalasoft.Imaging.ResolutionUnit)"></member>
    <member name="M:Atalasoft.Imaging.Dpi.Equals(System.Object)"></member>
    <member name="M:Atalasoft.Imaging.Dpi.GetHashCode"></member>
    <member name="M:Atalasoft.Imaging.Dpi.op_Equality(Atalasoft.Imaging.Dpi,Atalasoft.Imaging.Dpi)"></member>
    <member name="M:Atalasoft.Imaging.Dpi.op_Inequality(Atalasoft.Imaging.Dpi,Atalasoft.Imaging.Dpi)"></member>
    <member name="M:Atalasoft.Imaging.Dpi.ToString"></member>
    <member name="P:Atalasoft.Imaging.Dpi.Units">
      <summary> Gets the resolution Units. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Dpi.X">
      <summary> Gets the horizontal resolution. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Dpi.Y">
      <summary> Gets the vertical resolution. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ExceptionEventArgs">
      <summary> Provides data for the <see cref="E:Atalasoft.Imaging.Workspace.ProcessError" /> event. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ExceptionEventArgs.#ctor">
      <summary> Creates a new instance of ExceptionEventArgs. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ExceptionEventArgs.#ctor(System.Exception)">
      <summary> Creates a new instance of ExceptionEventArgs specifying the Exception that was thrown. </summary>
      <param name="exception"> The Exception that was thrown. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ExceptionEventArgs.Exception">
      <summary> Gets the Exception that was thrown. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ExceptionEventHandler">
      <summary> This EventHandler is used to pass along an exception during an image processing operation. </summary>
      <param name="sender"> The object in which the exception occurred. </param>
      <param name="e"> An ExceptionEventArgs object containing information about the exception. </param>
    </member>
    <member name="T:Atalasoft.Imaging.FileMapIOException">
      <summary> This exception is thrown when an error occurs when allocating an image with file memory mapping.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.FileMapIOException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.FileMapIOException" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.FileMapIOException.#ctor(System.Int32)">
      <summary> Creates a new instance of FileMapIOException specifying the Windows API error code. </summary>
      <param name="error"> The Windows API error code. </param>
    </member>
    <member name="M:Atalasoft.Imaging.FileMapIOException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.FileMapIOException" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.FileMapIOException.#ctor(System.String)">
      <summary> Creates a new instance of FileMapIOException specifying the Exception message. </summary>
      <param name="message"> A description of the exception. </param>
    </member>
    <member name="M:Atalasoft.Imaging.FileMapIOException.#ctor(System.String,System.Exception)">
      <summary> Creates an instance of FileMapIOException specifying the Exception message and inner Exception. </summary>
      <param name="message"> A description of the exception. </param>
      <param name="innerException"> The inner exception. </param>
    </member>
    <member name="M:Atalasoft.Imaging.FileMapIOException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="P:Atalasoft.Imaging.FileMapIOException.Message">
      <summary> Gets a description about the Exception. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.FileMapIOException.Win32ErrorCode">
      <summary> Gets the Windows API error code for this Exception. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.FileReloader">
      <summary> FileReloader is an implementation of the <see cref="T:Atalasoft.Imaging.IImageReloader" /> interface.  It encapsulates
            information about an image stored in a file system and can reload that image at any point. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.FileReloader.#ctor(Atalasoft.Imaging.AtalaImage)">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.FileReloader" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.FileReloader.#ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.Codec.ImageEncoder)">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.FileReloader" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.FileReloader.#ctor(Atalasoft.Imaging.AtalaImage,System.String)">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.FileReloader" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.FileReloader.#ctor(Atalasoft.Imaging.AtalaImage,System.String,Atalasoft.Imaging.Codec.ImageEncoder)">
      <summary> Constructs a new FileReloader object. </summary>
      <returns> A new AtalaImage or null if the image can't be loaded. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.FileReloader.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.FileReloader" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.FileReloader.Dispose">
      <summary> Dispose releases resources associated with this class. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.FileReloader.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:Atalasoft.Imaging.FileReloader" /> and optionally releases the managed resources</summary>
      <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources</param>
    </member>
    <member name="P:Atalasoft.Imaging.FileReloader.Path">
      <summary> Gets the path to the file referenced by this reloader. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.FileReloader.Reload">
      <summary> Reload the image into memory. </summary>
      <returns> A new AtalaImage or null if the image can't be loaded. </returns>
    </member>
    <member name="T:Atalasoft.Imaging.FileSystemImageSource">
      <summary> This is an implementation of an <see cref="T:Atalasoft.Imaging.ImageSource" /> using a file system as a provider of images.</summary>
    </member>
    <member name="M:Atalasoft.Imaging.FileSystemImageSource.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>FileSystemImageSource</STRONG> from serialization information.</summary>
      <param name="info"> A SerializationInfo containing information for this object. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Imaging.FileSystemImageSource.#ctor(System.String,System.Boolean)">
      <summary> Provides access to all image files from a directory or file </summary>
      <param name="path"> A path to a directory or file containing image files. </param>
      <param name="doAllFrames"> If true, this image source will provide access to every available frame in every file.
            </param>
      <returns> A new FileSystemImageSource object. </returns>
      <exception> Thrown if the path is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.FileSystemImageSource.#ctor(System.String,System.String,System.Boolean)">
      <summary> Provides access to all image files from a directory that match a pattern or from a single file. </summary>
      <param name="path"> A path to a directory containing image files or to a single file. </param>
      <param name="pattern"> A regular expression used to match files in the directory. </param>
      <param name="doAllFrames"> If true, this image source will provide access to every available frame in every file.
            </param>
      <exception> Thrown if the path or pattern is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.FileSystemImageSource.#ctor(System.String[],System.Boolean)">
      <summary> Provides access to a list of image files. </summary>
      <param name="fileNames"> A list of file names to be loaded as images. </param>
      <param name="doAllFrames"> If true, this image source will provide access to every available frame in every file.
            </param>
      <exception> Thrown if the fileNames argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.FileSystemImageSource.AllowFile(System.String,System.Int32,System.Int32)">
      <summary> Called to determine whether a file is allowed. </summary>
      <param name="path"> The filename of the file. </param>
      <param name="frameIndex"> The index of the frame. </param>
      <param name="frameCount"> The number of frames to allow. </param>
    </member>
    <member name="P:Atalasoft.Imaging.FileSystemImageSource.FileFilter">
      <summary> Gets or sets a delegate that is invoked for each file, allowing the files to be filtered with custom
            rules. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.FileSystemImageSource.GetFrameCount(System.Int32)">
      <summary> Returns the number of frames in for an image in a <STRONG>FileSystemImageSource</STRONG>. </summary>
      <param name="index"> The index of the file to return a frame count. </param>
      <returns> The number of frames in the image. </returns>
      <exception> Thrown if the index is invalid for the FileSystemImageSource. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.FileSystemImageSource.GetFrameNumber(System.Int32)">
      <summary> Return the frame index of an image in the <STRONG>FileSystemImageSource</STRONG>. </summary>
      <param name="index"> The index of the image in the ImageSource. </param>
      <returns> The frame index of the image. </returns>
      <exception> Thrown if the index is invalid for the FileSystemImageSource. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.FileSystemImageSource.GetImageStream(System.Int32)"></member>
    <member name="M:Atalasoft.Imaging.FileSystemImageSource.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with object information. </summary>
      <param name="info"> A SerializationInfo object that will be filled. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Imaging.FileSystemImageSource.GetPath(System.Int32)">
      <summary> Returns the path of the image in a <STRONG>FileSystemImageSource</STRONG>. </summary>
      <param name="index"> The index of the image. </param>
      <returns> The path of the image file. </returns>
      <exception> Thrown if the index is invalid for the FileSystemImageSource. </exception>
    </member>
    <member name="E:Atalasoft.Imaging.FileSystemImageSource.ImageAcquired">
      <summary> Invoked when an image is acquired into memory. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.FileSystemImageSource.LowLevelAcquire(System.Int32)"></member>
    <member name="M:Atalasoft.Imaging.FileSystemImageSource.LowLevelAcquireNextImage"></member>
    <member name="M:Atalasoft.Imaging.FileSystemImageSource.LowLevelDispose"></member>
    <member name="M:Atalasoft.Imaging.FileSystemImageSource.LowLevelFlushOnReset"></member>
    <member name="M:Atalasoft.Imaging.FileSystemImageSource.LowLevelHasMoreImages"></member>
    <member name="M:Atalasoft.Imaging.FileSystemImageSource.LowLevelReplaceImage(Atalasoft.Imaging.ImageSourceNode,Atalasoft.Imaging.AtalaImage)"></member>
    <member name="M:Atalasoft.Imaging.FileSystemImageSource.LowLevelReset"></member>
    <member name="M:Atalasoft.Imaging.FileSystemImageSource.LowLevelSkipNextImage"></member>
    <member name="M:Atalasoft.Imaging.FileSystemImageSource.LowLevelTotalImages"></member>
    <member name="M:Atalasoft.Imaging.FileSystemImageSource.ToPath(Atalasoft.Imaging.AtalaImage)">
      <summary> Retrieves the path associated with a previously acquired image. </summary>
      <param name="image"> An image that had been previously acquired by the FileSystemImageSource </param>
      <returns> A string representing the path to the file from which the image was derived.  If the image had not been
            previously acquired by the FileSystemImage source, ToPath will return null. </returns>
    </member>
    <member name="T:Atalasoft.Imaging.FileSystemImageSource.FileEventHandler">
      <summary> This event is used for tracking when a file or a frame within a file has been loaded. </summary>
      <param name="sender"> The sender of this event. </param>
      <param name="e"> Information about the files and frame being loaded. </param>
    </member>
    <member name="T:Atalasoft.Imaging.FileSystemImageSource.FileFilterDelegate"></member>
    <member name="T:Atalasoft.Imaging.FileSystemImageSourceEventArgs">
      <summary> This object is used for events fired by a <see cref="T:Atalasoft.Imaging.FileSystemImageSource" />. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.FileSystemImageSourceEventArgs.#ctor(System.String,System.Int32,System.Int32,Atalasoft.Imaging.AtalaImage)">
      <summary> Constructs a new FileSystemImageSourceEventArgs object. </summary>
      <param name="path"> The path to the image file. </param>
      <param name="frameIndex"> The frame index of the image. </param>
      <param name="frameCount"> The total number of frames in this files. </param>
      <param name="image"> The image that was loaded. </param>
    </member>
    <member name="P:Atalasoft.Imaging.FileSystemImageSourceEventArgs.FrameCount">
      <summary> The total number of frames in this image file. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.FileSystemImageSourceEventArgs.FrameIndex">
      <summary> The index of this frame in the image file. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.FileSystemImageSourceEventArgs.Image">
      <summary> The image that has been acquired. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.FileSystemImageSourceEventArgs.Path">
      <summary> The path to the image file. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.FlipDirection">
      <summary> Specifies the flip direction. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.FlipDirection.Vertical">
      <summary> Flip Vertically. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.FlipDirection.Horizontal">
      <summary> Flip Horizontally. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.FormDataCollection">
      <summary> The FormDataCollection is used with the <see cref="T:Atalasoft.Imaging.HttpPost" /> class to send form information to a web
            server. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.FormDataCollection.Add(System.String,Atalasoft.Imaging.AtalaImage)">
      <summary> Adds an image to the collection. </summary>
      <param name="fieldName"> The form field name used to identify the image. </param>
      <param name="image"> The AtalaImage to add. </param>
    </member>
    <member name="M:Atalasoft.Imaging.FormDataCollection.Add(System.String,Atalasoft.Imaging.AtalaImage,System.String)">
      <summary> Adds an image to the collection specifying the filename. </summary>
      <param name="fieldName"> The form field name used to identify this image. </param>
      <param name="image"> The AtalaImage to add. </param>
      <param name="fileName"> The original filename of this image. </param>
    </member>
    <member name="M:Atalasoft.Imaging.FormDataCollection.Add(System.String,System.IO.Stream,System.String,System.String)">
      <summary> Adds an image to the collection specifying the filename. </summary>
      <param name="fieldName"> The form field name used to identify this image. </param>
      <param name="data"> The data stream </param>
      <param name="fileName"> The original filename of this image. </param>
      <param name="contextType"> Also known as mime type, for example "image\jpeg". </param>
    </member>
    <member name="M:Atalasoft.Imaging.FormDataCollection.Add(System.String,System.String)">
      <summary> Adds form data to the collection. </summary>
      <param name="fieldName"> The field name of the form object. </param>
      <param name="fieldValue"> The value of the field object. </param>
    </member>
    <member name="M:Atalasoft.Imaging.FormDataCollection.AddFromBrowser(System.String,System.Object,System.String)">
      <summary>
        <para>Adds an image or form field to the collection.</para>
        <para>You must use this method when posting from a web browser.</para>
      </summary>
      <param name="fieldName"> The field name of the form object. </param>
      <param name="image"> The image you want to upload. </param>
      <param name="fieldValue"> The value of the field object or the filename of the image. </param>
    </member>
    <member name="M:Atalasoft.Imaging.FormDataCollection.Contains(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="M:Atalasoft.Imaging.FormDataCollection.CopyTo(Atalasoft.Imaging.AtalaImage[],System.Int32)"></member>
    <member name="M:Atalasoft.Imaging.FormDataCollection.IndexOf(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="M:Atalasoft.Imaging.FormDataCollection.Insert(System.Int32,Atalasoft.Imaging.AtalaImage)"></member>
    <member name="P:Atalasoft.Imaging.FormDataCollection.Item(System.Int32)"></member>
    <member name="M:Atalasoft.Imaging.FormDataCollection.Remove(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.GdiException">
      <summary> This exception is thrown when a GDI function fails. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.GdiException.#ctor">
      <summary> Creates a new instance of GdiException. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.GdiException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.GdiException" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.GdiException.#ctor(System.String)">
      <summary> Creates a new instance of GdiException specifying the exception message. </summary>
      <param name="message"> The exception message. </param>
    </member>
    <member name="M:Atalasoft.Imaging.GdiException.#ctor(System.String,System.Exception)">
      <summary> Creates a new instance of GdiException specifying the exception message and inner exception. </summary>
      <param name="message"> The exception message. </param>
      <param name="innerException"> The inner exception. </param>
    </member>
    <member name="T:Atalasoft.Imaging.HttpPost">
      <summary>
        <para>This class allows you to post data to a server without user interaction.</para>
        <para>The data is posted as if it were being sent from an HTML Form, allowing any form handling component to be used
            on the server.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.HttpPost.#ctor">
      <summary> Creates a new instance of HttpPost. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.HttpPost.#ctor(Atalasoft.Imaging.Codec.ImageEncoder)">
      <summary> Creates a new instance of HttpPost specifying the <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder" /> to use. </summary>
      <param name="encoder"> The ImageEncoder to use when posting images to the server. </param>
    </member>
    <member name="M:Atalasoft.Imaging.HttpPost.#ctor(Atalasoft.Imaging.Codec.ImageEncoder,System.Boolean)">
      <summary> Creates a new instance of HttpPost specifying the <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder" /> to use and whether or not to
            combine multiple images into one post. </summary>
      <param name="encoder"> The ImageEncoder to use when posting images to the server. </param>
      <param name="combineImages"> Whether or not to combine multiple images into one post. </param>
    </member>
    <member name="P:Atalasoft.Imaging.HttpPost.CombineImages">
      <summary> Sets or gets whether or not multiple images will be combined into one post. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.HttpPost.FormData">
      <summary> Gets the <see cref="T:Atalasoft.Imaging.FormDataCollection" /> object that will be posted to the server. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.HttpPost.GetData(System.String)">
      <summary> This method can be used to retrieve information from a server. </summary>
      <param name="url"> A web address to request data from. </param>
      <returns> A string containing the data returned by the server. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.HttpPost.PostData(System.String)">
      <summary> This method will send the internal <see cref="T:Atalasoft.Imaging.FormDataCollection" /> entries to a server for processing.</summary>
      <param name="url"> The web address to send the data to. </param>
      <returns> A string containing returned data from the server. </returns>
    </member>
    <member name="P:Atalasoft.Imaging.HttpPost.SessionCookies"></member>
    <member name="P:Atalasoft.Imaging.HttpPost.Timeout"></member>
    <member name="T:Atalasoft.Imaging.IImageReloader">
      <summary> IImageReloader provides a mechanism to bring unloaded images back into memory.  This interface is used by
            <see cref="T:Atalasoft.Imaging.ImageSource" />. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.IImageReloader.Reload">
      <summary> Reload an image into memory. </summary>
      <returns> An <see cref="T:Atalasoft.Imaging.AtalaImage" /> representing a previously loaded image. </returns>
    </member>
    <member name="T:Atalasoft.Imaging.ImageCancelEventArgs">
      <summary> Provides data for the event which allow an operation using an image to be cancelled. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageCancelEventArgs.#ctor(Atalasoft.Imaging.AtalaImage)">
      <summary> Creates a new instance of ImageCancelEventArgs. </summary>
      <param name="image"> The image being processed. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageCancelEventArgs.Cancel">
      <summary>
        <para>Gets or sets a value that when true will cancel the current operation.</para>
      </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageCancelEventHandler">
      <summary> Handles canceling operations. </summary>
      <param name="sender"> The object raising the event. </param>
      <param name="e"> An ImageCancelEventArgs object for this event. </param>
    </member>
    <member name="T:Atalasoft.Imaging.ImageCollection">
      <summary> This collection holds multiple <see cref="T:Atalasoft.Imaging.AtalaImage" /> objects useful for various features like working
            with multi-paged images, animations, and layering. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageCollection" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageCollection.#ctor(Atalasoft.Imaging.AtalaImage[])">
      <summary> Initializes a new instance of the %ImageCollection% object specifying one or multiple %AtalaImage% objects
            to add to the collection. </summary>
      <param name="images"> A parameter array of one or many %AtalaImage% objects. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageCollection.#ctor(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Initializes a new instance of the %ImageCollection% object specifying a <see cref="T:System.IO.Stream" /> containing
            image data to load. </summary>
      <param name="stream"> A Stream of image data. </param>
      <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageCollection.#ctor(System.String,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Initializes a new instance of the %ImageCollection% object specifying a filename containing image data to
            load. </summary>
      <param name="fileName"> The filename of the image (or images) to load into the %ImageCollection%. </param>
      <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageCollection.Add(Atalasoft.Imaging.AtalaImage)">
      <summary> Adds an <see cref="T:Atalasoft.Imaging.AtalaImage" /> to the collection. </summary>
      <param name="image"> The image to add. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageCollection.Contains(Atalasoft.Imaging.AtalaImage)">
      <summary> Returns a value Indicating if a specified image exists within this collection. </summary>
      <param name="image"> The AtalaImage to test. </param>
      <returns> A value Indicating if a specified image exists within this collection. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageCollection.CopyTo(Atalasoft.Imaging.AtalaImage[],System.Int32)">
      <summary> Copy this ImageCollection into an existing AtalaImage array. </summary>
      <param name="images"> The existing AtalaImage array. </param>
      <param name="index"> The index in the array begin copying. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageCollection.Current">
      <summary> Gets or sets the current image in this collection. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageCollection.Dispose">
      <summary> Remove unmanaged resources in each AtalaImage in the collection. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageCollection.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:Atalasoft.Imaging.ImageCollection" /> and optionally releases the managed resources</summary>
      <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources</param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageCollection.IndexOf(Atalasoft.Imaging.AtalaImage)">
      <summary> Returns the index of a specified image in the collection. </summary>
      <param name="image"> The AtalaImage to test. </param>
      <returns> The index of a specified image in the collection. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageCollection.Insert(System.Int32,Atalasoft.Imaging.AtalaImage)">
      <summary>
            Insert an <see cref="T:Atalasoft.Imaging.AtalaImage" /> at the specified index.
            </summary>
      <param name="Image">The <see cref="T:Atalasoft.Imaging.AtalaImage" /> to insert into the collection.</param>
      <param name="Index">The index to insert the image after.</param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageCollection.Item(System.Int32)">
      <summary> Allows the image collection to be accessed through an indexer and enumerated with foreach. </summary>
      <param name="index"> The index of the image. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageCollection.MoveNext">
      <summary> Set the Current image to the next image in the collection. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageCollection.MovePrevious">
      <summary> Set the Current image to the previous image in the collection. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageCollection.OnClearComplete"></member>
    <member name="M:Atalasoft.Imaging.ImageCollection.OnRemoveComplete(System.Int32,System.Object)"></member>
    <member name="M:Atalasoft.Imaging.ImageCollection.ReadImages(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Read all images from a multipage image file into this image collection. </summary>
      <param name="stream"> A stream containing the encoded image data. </param>
      <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageCollection.Remove(Atalasoft.Imaging.AtalaImage)">
      <summary> Removes a specified <STRONG>AtalaImage</STRONG> from this <STRONG>ImageCollection</STRONG>. </summary>
      <param name="image"> The image in the collection to remove. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageCollection.Replace(Atalasoft.Imaging.AtalaImage)">
      <summary> Replaces the <see cref="P:Atalasoft.Imaging.ImageCollection.Current" /> image in the collection with a new image. </summary>
      <param name="image">
        <para>The new image.</para>
      </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageCollection.Save(System.IO.Stream,Atalasoft.Imaging.Codec.ImageEncoder,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Save the images in this ImageCollection to a stream specifying the %ImageEncoder% to use for encoding the
            image data. </summary>
      <param name="stream"> A stream containing the file which the image will be encoded to. This stream must have
            FileAccess.ReadWrite set or else only the first image will be saved. </param>
      <param name="encoder"> The <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder" /> which will be used to encode the image. </param>
      <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            VB). </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageCollection.Save(System.String,Atalasoft.Imaging.Codec.ImageEncoder,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Save each <see cref="T:Atalasoft.Imaging.ImageCollection" /> in a multipaged or multiframed format.</summary>
      <param name="fileName"> The name of the file to save. </param>
      <param name="encoder"> The <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder" /> which will be used to encode the image. </param>
      <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            VB). </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageCollection.Save(System.String,Atalasoft.Imaging.Codec.ImageType,Atalasoft.Imaging.ProgressEventHandler)">
      <summary>Save each <see cref="T:Atalasoft.Imaging.ImageCollection" /> in a multipaged or multiframed format.</summary>
      <param name="fileName"> The name of the file to save. </param>
      <param name="imageType"> The image format to save. </param>
      <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            VB). </param>
      <returns> Filesize of saved image. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageCollection.ToByteArray(Atalasoft.Imaging.Codec.ImageEncoder,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Saves the image into a byte array. </summary>
      <param name="encoder"> The ImageEncoder to use. </param>
      <param name="progress"> A progress event handler used during the save process. </param>
      <returns> A byte array containing the image data. </returns>
    </member>
    <member name="T:Atalasoft.Imaging.ImageCollectionEventArgs">
      <summary> Provides data for the <see cref="!:Workspace.NewImage" /> and <see cref="!:Workspace.ChangedImage" /> events.</summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageCollectionEventArgs.#ctor">
      <summary> Creates a new instance of ImageCollectionEventArgs. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageCollectionEventArgs.#ctor(Atalasoft.Imaging.ImageCollection)">
      <summary> Creates a new instance of ImageCollectionEventArgs specifying the ImageCollection. </summary>
      <param name="images"> The ImageCollection for this event. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageCollectionEventArgs.Images">
      <summary> Gets or sets the ImageCollection. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageCollectionImageSource">
      <summary> ImageCollectionImageSource is an adapter class to make an ImageCollection compatible with the ImageSource
            class. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageCollectionImageSource.#ctor(Atalasoft.Imaging.ImageCollection)">
      <summary> Constructs a new ImageCollectionImageSource with the given ImageCollection. </summary>
      <param name="collection"> The collection to be used in the ImageSource. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageCollectionImageSource.LowLevelAcquire(System.Int32)"></member>
    <member name="M:Atalasoft.Imaging.ImageCollectionImageSource.LowLevelAcquireNextImage"></member>
    <member name="M:Atalasoft.Imaging.ImageCollectionImageSource.LowLevelDispose"></member>
    <member name="M:Atalasoft.Imaging.ImageCollectionImageSource.LowLevelFlushOnReset"></member>
    <member name="M:Atalasoft.Imaging.ImageCollectionImageSource.LowLevelHasMoreImages"></member>
    <member name="M:Atalasoft.Imaging.ImageCollectionImageSource.LowLevelReplaceImage(Atalasoft.Imaging.ImageSourceNode,Atalasoft.Imaging.AtalaImage)"></member>
    <member name="M:Atalasoft.Imaging.ImageCollectionImageSource.LowLevelReset"></member>
    <member name="M:Atalasoft.Imaging.ImageCollectionImageSource.LowLevelSkipNextImage"></member>
    <member name="M:Atalasoft.Imaging.ImageCollectionImageSource.LowLevelTotalImages"></member>
    <member name="M:Atalasoft.Imaging.ImageCollectionImageSource.LowLevelTotalImagesKnown"></member>
    <member name="T:Atalasoft.Imaging.ImageEventArgs">
      <summary> Provides data for the <see cref="P:Atalasoft.Imaging.ChangedImageEventArgs.NewImage" /> and <see cref="E:Atalasoft.Imaging.Workspace.ImageChanged" /> events.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageEventArgs.#ctor">
      <summary> Creates a new instance of ImageEventArgs. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageEventArgs.#ctor(Atalasoft.Imaging.AtalaImage)">
      <summary> Creates a new instance of ImageEventArgs specifying the AtalaImage for this event. </summary>
      <param name="image"> The AtalaImage for this event. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageEventArgs.Image">
      <summary> Gets or sets the AtalaImage. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageEventHandler">
      <summary> Event Handler for events requiring the image information. </summary>
      <param name="sender"> The object raising the event. </param>
      <param name="e"> An ImageEventArgs object for this event. </param>
    </member>
    <member name="T:Atalasoft.Imaging.ImageFileIOEventHandler">
      <summary> Event Handler requiring the a Stream object. </summary>
      <param name="sender"> The object raising the event. </param>
      <param name="e"> an ImageStreamEventArgs object for this event. </param>
    </member>
    <member name="T:Atalasoft.Imaging.ImageMemory">
      <summary>
        <para>This class handles memory associated with an image. It controls how the memory is allocated and
            freed. Use this class to enable memory file mapping.</para>
        <para>This class is no longer used in DotImage.  Please use PixelMemory instead.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageMemory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageMemory" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageMemory.#ctor(System.Int32)">
      <summary> Initializes a new instance of <STRONG>ImageMemory</STRONG> indicating the number of bytes to allocate. </summary>
      <param name="bytes"> number of bytes to allocate </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageMemory.#ctor(System.Int32,System.Boolean)">
      <summary> Initializes a new instance of <STRONG>ImageMemory</STRONG> indicating the number of bytes to allocate and if this object should handle the freeing of that memory. </summary>
      <param name="bytes"> number of bytes to allocate </param>
      <param name="zeroMemory"> indicates if the memory should be freed when disposing </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageMemory.#ctor(System.IntPtr)">
      <summary> Initializes a new instance of <STRONG>ImageMemory</STRONG> setting the pre allocated memory pointer. </summary>
      <param name="imagePointer"> The memory pointer </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageMemory.#ctor(System.IntPtr,System.Boolean)">
      <summary> Initializes a new instance of <STRONG>ImageMemory</STRONG> setting the pre allocated memory pointer and if this object should handle the freeing of that memory. </summary>
      <param name="imagePointer"> The memory pointer </param>
      <param name="preventDispose"> indicates if the memory should be freed when disposing </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageMemory.Dispose">
      <summary>Releases all resources used by the <see cref="T:Atalasoft.Imaging.ImageMemory" /></summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageMemory.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:Atalasoft.Imaging.ImageMemory" /> and optionally releases the managed resources</summary>
      <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources</param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageMemory.EnableMemoryFileMapping">
      <summary> File mapping is no longer supported.  This property will throw on set. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageMemory.FileMapped">
      <summary> File mapping is no longer supported. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageMemory.Finalize"></member>
    <member name="P:Atalasoft.Imaging.ImageMemory.Handle">
      <summary>Gets the pointer to the memory handled by this object.</summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageMemory.MemoryMapTempPath">
      <summary> File mapping is no longer supported.  This property will throw on set. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageMemory.MemoryMapThreshold">
      <summary> File mapping is no longer supported.  This property will throw on set. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageMemory.PreventDispose">
      <summary>Gets or sets a value indicating if the memory should be freed when disposing.</summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessException">
      <summary> This exception is thrown when an error occurs during processing of an image </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessException.#ctor">
      <summary> Creates a new instance of ImageProcessException. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessException" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessException.#ctor(System.String)">
      <summary> Creates a new instance of ImageProcessException specifying the exception message. </summary>
      <param name="message"> The exception message. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessException.#ctor(System.String,Atalasoft.Imaging.AtalaImage)">
      <summary> Creates a new instance of ImageProcessException specifying the exception message and AtalaImage.
            </summary>
      <param name="message"> The exception message. </param>
      <param name="image"> The AtalaImage causing this exception. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessException.#ctor(System.String,System.Exception)">
      <summary> Creates a new instance of ImageProcessException specifying the exception message and inner exception.
            </summary>
      <param name="message"> The exception message. </param>
      <param name="innerException"> The inner exception. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Provide serialization information </summary>
      <param name="info"> The information for this object. </param>
      <param name="context"> The context in which this object is being streamed. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessException.Image">
      <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.AtalaImage" /> object which is causing the error. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageSource">
      <summary> An abstract class that is used to define a flexible mechanism for managing large quantities of images
            without having to keep them all in memory at once. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSource.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageSource" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSource.Acquire(Atalasoft.Imaging.AtalaImage)">
      <summary> This method has been deprecated.  Use the <see cref="M:Atalasoft.Imaging.ImageSource.ReAcquire(Atalasoft.Imaging.AtalaImage)" />
            method instead.
             </summary>
      <param name="image"> The image to acquire. </param>
      <returns> True if the image has successfully acquired. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSource.Acquire(System.Int32)">
      <summary> This method has been deprecated.  Use the method instead.</summary>
      <param name="index"> The index of the image to acquire. </param>
      <returns> The acquired image. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSource.AcquireNext">
      <summary> Acquire the next available image from the ImageSource. </summary>
      <returns> A new AtalaImage or null if the image can't be loaded or there is no image to load. </returns>
    </member>
    <member name="P:Atalasoft.Imaging.ImageSource.ActiveImages"></member>
    <member name="M:Atalasoft.Imaging.ImageSource.AllImagesAreReleased"></member>
    <member name="E:Atalasoft.Imaging.ImageSource.ChangedImage">
      <summary> This event is fired whenever an image has been replaced. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSource.ContainsImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="P:Atalasoft.Imaging.ImageSource.CulledImages"></member>
    <member name="M:Atalasoft.Imaging.ImageSource.CullNode(Atalasoft.Imaging.ImageSourceNode)"></member>
    <member name="M:Atalasoft.Imaging.ImageSource.CullReleasedImages(System.Boolean)"></member>
    <member name="P:Atalasoft.Imaging.ImageSource.Current">
      <summary> Returns the index of the current image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSource.Dispose">
      <summary> Free up resources used by this ImageSource </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSource.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:Atalasoft.Imaging.ImageSource" /> and optionally releases the managed resources</summary>
      <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources</param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSource.Finalize"></member>
    <member name="M:Atalasoft.Imaging.ImageSource.Find(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="M:Atalasoft.Imaging.ImageSource.Flush">
      <summary> Flush all released images out of memory. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSource.HasMoreImages">
      <summary> Determines if there are more images to load. </summary>
      <returns> True if there are more images to load, false otherwise. </returns>
    </member>
    <member name="P:Atalasoft.Imaging.ImageSource.ImmediateUnload">
      <summary> Determines if an image should be unloaded from memory immediately. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSource.LowLevelAcquireNextImage"></member>
    <member name="M:Atalasoft.Imaging.ImageSource.LowLevelDispose"></member>
    <member name="M:Atalasoft.Imaging.ImageSource.LowLevelFlushOnReset"></member>
    <member name="M:Atalasoft.Imaging.ImageSource.LowLevelHasMoreImages"></member>
    <member name="M:Atalasoft.Imaging.ImageSource.LowLevelReplaceImage(Atalasoft.Imaging.ImageSourceNode,Atalasoft.Imaging.AtalaImage)"></member>
    <member name="M:Atalasoft.Imaging.ImageSource.LowLevelReset"></member>
    <member name="M:Atalasoft.Imaging.ImageSource.LowLevelSkipNextImage"></member>
    <member name="M:Atalasoft.Imaging.ImageSource.LowLevelTotalImages"></member>
    <member name="M:Atalasoft.Imaging.ImageSource.LowLevelTotalImagesKnown"></member>
    <member name="P:Atalasoft.Imaging.ImageSource.MemoryInUse">
      <summary> Returns an estimate of the number of bytes of memory currently in use by images in this
            <STRONG>ImageSource</STRONG>. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageSource.MemoryLimit">
      <summary> This sets the limit for memory usage for this <STRONG>ImageSource</STRONG>.  If memory usage goes beyond
            this, images will be dropped from memory until memory usage is below the limit. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSource.NotifyChangedImage(Atalasoft.Imaging.AtalaImage)">
      <summary> This method is used to inform an ImageSource that one of its current acquired images has changed.</summary>
      <param name="originalImage"> The original image acquired through one of Acquire methods. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSource.NotifyChangedImage(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage)">
      <summary> This method is used to inform an ImageSource that one of its current acquired images has changed.
            </summary>
      <param name="originalImage"> The original image acquired through one of Acquire methods. </param>
      <param name="newImage"> An entirely new image that will replace the original image. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSource.OnChangedImage(Atalasoft.Imaging.ChangedImageEventArgs)"></member>
    <member name="M:Atalasoft.Imaging.ImageSource.OnReleasing(Atalasoft.Imaging.ReleasingImageSourceNodeEventArgs)">
      <summary> Called when <see cref="M:Atalasoft.Imaging.ImageSource.Release(Atalasoft.Imaging.AtalaImage)" /> was performed on an <see cref="T:Atalasoft.Imaging.ImageSourceNode" />.</summary>
      <param name="e"> A <see cref="T:Atalasoft.Imaging.ReleasingImageSourceNodeEventArgs" /> containing the node that was released. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSource.ReAcquire(Atalasoft.Imaging.AtalaImage)">
      <summary> Acquire an <STRONG>AtalaImage</STRONG> that has been previously acquired. </summary>
      <param name="image"> The image to re-acquire. </param>
      <returns> True if the image has successfully acquired. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSource.ReAcquire(System.Int32)">
      <summary> Acquire a previous image by index. </summary>
      <param name="index"> The index of the image to re-acquire. </param>
      <returns> The acquired image or <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in VB) if the image was not
            previously acquired. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSource.Release(Atalasoft.Imaging.AtalaImage)">
      <summary> Release a previously acquired image. </summary>
      <param name="image"> The image to release. </param>
      <returns> True if the image was fully released, false otherwise. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSource.ReleaseChangedImage(Atalasoft.Imaging.AtalaImage)">
      <summary> Release an image that has changed, notifying other clients that the image has changed. </summary>
      <param name="originalImage"> The original image acquired through one of Acquire methods. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSource.ReleaseChangedImage(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage)">
      <summary> Release an image that has changed, notifying other clients that the image has changed. </summary>
      <param name="originalImage"> The original image acquired through one of Acquire methods. </param>
      <param name="newImage"> An entirely new image that will replace the original image. </param>
    </member>
    <member name="E:Atalasoft.Imaging.ImageSource.Releasing">
      <summary> Raised when the <see cref="M:Atalasoft.Imaging.ImageSource.Release(Atalasoft.Imaging.AtalaImage)" /> method is called on an <see cref="T:Atalasoft.Imaging.ImageSourceNode" />.</summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSource.Reset">
      <summary> Resets the <STRONG>ImageSource</STRONG> to start over again. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageSource.TotalImages">
      <summary> Returns the total number of available images in this <STRONG>ImageSource</STRONG>. </summary>
      <exception> Thrown if this method is invoked when TotalImagesKnown is false. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageSource.TotalImagesKnown">
      <summary> Gets a value indicating whether or not the total number of images in this image source can be known.</summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageSourceNode">
      <summary> This is an object used to hold <STRONG>AtalaImage</STRONG> objects in the <STRONG>ImageSource</STRONG>. 
            This object is only of interest if you are writing your own <STRONG>ImageSource</STRONG> implementation. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSourceNode.#ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.IImageReloader)">
      <summary> Constructs a new ImageSourceNode using the supplied image and reloader. </summary>
      <param name="image"> The image to hold onto. </param>
      <param name="reloader"> An IImageReloader to load the object back into memory.  This can be null. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSourceNode.Acquire">
      <summary> Acquire a lock on this node. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSourceNode.Dispose">
      <summary> Release resources used by this node. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSourceNode.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:Atalasoft.Imaging.ImageSourceNode" /> and optionally releases the managed resources</summary>
      <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources</param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSourceNode.Finalize"></member>
    <member name="P:Atalasoft.Imaging.ImageSourceNode.Image">
      <summary> The image in this node. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageSourceNode.ImageSize">
      <summary> The number of bytes used by this image when in memory. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageSourceNode.Index">
      <summary> The index of this image in the ImageSource. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSourceNode.LetGo">
      <summary> Unload the image from memory. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageSourceNode.ReferenceCount"></member>
    <member name="M:Atalasoft.Imaging.ImageSourceNode.Release">
      <summary> Release a lock on this image. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageSourceNode.Released">
      <summary> Determines if this image is fully released. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageSourceNode.Reloader">
      <summary> Gets the reloader, if any, associated with this node. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageStreamEventArgs">
      <summary> Provides data for the <see cref="!:ImageStreamCompleted" /> event. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageStreamEventArgs.#ctor">
      <summary> Creates a new ImageStreamEventArgs object. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageStreamEventArgs.#ctor(System.IO.Stream,System.Int32)">
      <summary> Creates a new instance of ImageStreamEventArgs specifying the stream and number of bytes. </summary>
      <param name="stream"> The stream for this event. </param>
      <param name="bytes"> The number of bytes for this event. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageStreamEventArgs.Bytes">
      <summary> Gets the number of bytes written to or read from the image stream. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageStreamEventArgs.Stream">
      <summary>
        <para>Gets the Steam object of interest.</para>
      </summary>
    </member>
    <member name="T:Atalasoft.Imaging.IncompatiblePixelFormatException">
      <summary> This exception is thrown when the image to be processed does not contain a %PixelFormat% compatible with
            the function of interest. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.IncompatiblePixelFormatException.#ctor">
      <summary> Creates a new instance of IncompatiblePixelFormatException. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.IncompatiblePixelFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.IncompatiblePixelFormatException" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.IncompatiblePixelFormatException.#ctor(System.String)">
      <summary> Creates a new instance of IncompatiblePixelFormatException specifying the exception message. </summary>
      <param name="message"> The exception message. </param>
    </member>
    <member name="M:Atalasoft.Imaging.IncompatiblePixelFormatException.#ctor(System.String,System.Exception)">
      <summary> Creates a new instance of IncompatiblePixelFormatException specifying the exception message and inner
            exception. </summary>
      <param name="message"> The exception message. </param>
      <param name="innerException"> The inner exception for this error. </param>
    </member>
    <member name="T:Atalasoft.Imaging.IndirectionImageSource">
      <summary> The <STRONG>IndirectionImageSource</STRONG> class is used to provide an <see cref="T:Atalasoft.Imaging.ImageSource" /> which
            can be modified after its initial creation.  The <see cref="!:ThumbnailImageViewerSynchronizer" /> uses this class to
            handle changes to the original <STRONG>ImageSource</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.IndirectionImageSource.#ctor(Atalasoft.Imaging.RandomAccessImageSource)">
      <summary> Creates a new instance of <STRONG>IndirectionImageSource</STRONG> specifying the initial <see cref="T:Atalasoft.Imaging.RandomAccessImageSource" /> to use. </summary>
      <param name="imageSource"> The initial <see cref="T:Atalasoft.Imaging.RandomAccessImageSource" /> to use. </param>
    </member>
    <member name="M:Atalasoft.Imaging.IndirectionImageSource.Add(Atalasoft.Imaging.AtalaImage)">
      <summary> Adds an <see cref="T:Atalasoft.Imaging.AtalaImage" /> to the end of the image source. </summary>
      <param name="image"> The image to add. </param>
      <exception> Thrown if the image is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.IndirectionImageSource.Add(System.IO.Stream,System.Int32)">
      <summary> Adds an image to the end of the image source from a stream. </summary>
      <param name="stream"> The stream containing the image. </param>
      <param name="frameIndex"> The frame index to add.  If this value is -1, all pages will be added to the image source.
            </param>
      <exception> Thrown if the stream is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.IndirectionImageSource.Add(System.String,System.Int32)">
      <summary> Adds an image to the end of the image source from a filename. </summary>
      <param name="fileName"> The filename of the image to add. </param>
      <param name="frameIndex"> The frame index to add.  If this value is -1, all pages will be added to the image source.</param>
      <exception> Thrown if the filename is null (Nothing in VB) or empty. </exception>
      <exception> Thrown if the file is not found. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.IndirectionImageSource.Clear">
      <summary> Removes all items from the image source. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.IndirectionImageSource.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:Atalasoft.Imaging.IndirectionImageSource" /> and optionally releases the managed resources</summary>
      <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources</param>
    </member>
    <member name="M:Atalasoft.Imaging.IndirectionImageSource.Insert(System.Int32,Atalasoft.Imaging.AtalaImage)"></member>
    <member name="M:Atalasoft.Imaging.IndirectionImageSource.Insert(System.Int32,System.IO.Stream,System.Int32)">
      <summary> Adds or inserts one or more images from a stream. </summary>
      <param name="index"> The index where the image should be inserted or -1 to add the image to the end of the
            collection. </param>
      <param name="stream">
        <para>A stream containing the image(s).  This stream must be seekable.</para>
      </param>
      <param name="frameIndex"> The frame index to insert or -1 to insert all pages of a multipage document. </param>
      <exception> Thrown if the stream argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.IndirectionImageSource.Insert(System.Int32,System.String,System.Int32)">
      <summary> Adds or inserts one or more images from a file. </summary>
      <param name="index"> The index where the image should be inserted or -1 to add the image to the end of the
            collection. </param>
      <param name="fileName"> The full path and filename of the image to insert. </param>
      <param name="frameIndex"> The frame index to insert or -1 to insert all pages of a multipage document. </param>
      <exception> Thrown if the fileName argument is null. </exception>
      <exception> Thrown if the fileName is invalid. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.IndirectionImageSource.LowLevelAcquire(System.Int32)"></member>
    <member name="M:Atalasoft.Imaging.IndirectionImageSource.LowLevelAcquireNextImage"></member>
    <member name="M:Atalasoft.Imaging.IndirectionImageSource.LowLevelDispose"></member>
    <member name="M:Atalasoft.Imaging.IndirectionImageSource.LowLevelFlushOnReset"></member>
    <member name="M:Atalasoft.Imaging.IndirectionImageSource.LowLevelHasMoreImages"></member>
    <member name="M:Atalasoft.Imaging.IndirectionImageSource.LowLevelReplaceImage(Atalasoft.Imaging.ImageSourceNode,Atalasoft.Imaging.AtalaImage)"></member>
    <member name="M:Atalasoft.Imaging.IndirectionImageSource.LowLevelReset"></member>
    <member name="M:Atalasoft.Imaging.IndirectionImageSource.LowLevelSkipNextImage"></member>
    <member name="M:Atalasoft.Imaging.IndirectionImageSource.LowLevelTotalImages"></member>
    <member name="M:Atalasoft.Imaging.IndirectionImageSource.OnNodeIndexSet(Atalasoft.Imaging.ImageSourceNode)">
      <summary> Called when the index of a node is modified. </summary>
      <param name="node"> The node being modified. </param>
    </member>
    <member name="M:Atalasoft.Imaging.IndirectionImageSource.OnReleasing(Atalasoft.Imaging.ReleasingImageSourceNodeEventArgs)"></member>
    <member name="M:Atalasoft.Imaging.IndirectionImageSource.ReAcquire(System.Int32)"></member>
    <member name="M:Atalasoft.Imaging.IndirectionImageSource.RemoveAt(System.Int32)">
      <summary> Removes an image from the <STRONG>IndirectionImageSource</STRONG> at the specified index. </summary>
      <param name="index"> The index of the item to remove. </param>
      <exception> Thrown if the index argument is invalid for this IndirectionImageSource. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.IndirectionImageSource.ReorderIndex(System.Int32,System.Int32)">
      <summary> Moves one item to a different position within the <STRONG>IndirectionImageSource</STRONG>. </summary>
      <param name="currentIndex"> The index of the item to move. </param>
      <param name="newIndex"> The new index for the item. </param>
      <exception> Thrown if the currentIndex or newIndex values are invalid for this IndirectionImageSource. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.IndirectionImageSource.RetainInMemory">
      <summary> Gets or sets a value indicating whether the images should remain in memory once read. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.InternalErrorException">
      <summary> This exception is for generic errors within the DotImage codebase. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.InternalErrorException.#ctor">
      <summary> Creates a new instance of InternalErrorException. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.InternalErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.InternalErrorException" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.InternalErrorException.#ctor(System.String)">
      <summary> Creates a new instance of <STRONG>InternalErrorException</STRONG> specifying the error message. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.InternalErrorException.#ctor(System.String,System.Exception)">
      <summary> Creates a new instance of <STRONG>InternalErrorException</STRONG> specifying the error message and inner
            exception. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.InternetConnectException">
      <summary> This exception is thrown when there is an error opening an internet connection. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.InternetConnectException.#ctor">
      <summary> Creates a new instance of InternetConnectException. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.InternetConnectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.InternetConnectException" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.InternetConnectException.#ctor(System.String)">
      <summary> Creates a new instance of InternetConnectException specifying the exception message. </summary>
      <param name="message"> The exception message. </param>
    </member>
    <member name="M:Atalasoft.Imaging.InternetConnectException.#ctor(System.String,System.Exception)">
      <summary> Creates a new instance of InternetConnectException specifying the exception message and inner exception.
            </summary>
      <param name="message"> The exception message. </param>
      <param name="innerException"> The inner exception. </param>
    </member>
    <member name="T:Atalasoft.Imaging.InternetInvalidPasswordException">
      <summary> This exception is thrown when an invalid password was detected while attempting to connect to an HTTP or
            FTP site to download an image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.InternetInvalidPasswordException.#ctor">
      <summary> Creates a new instance of InternetInvalidPasswordException. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.InternetInvalidPasswordException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.InternetInvalidPasswordException" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.InternetInvalidPasswordException.#ctor(System.String)">
      <summary> Creates a new instance of InternetInvalidPasswordException specifying the exception message. </summary>
      <param name="message"> The exception message. </param>
    </member>
    <member name="M:Atalasoft.Imaging.InternetInvalidPasswordException.#ctor(System.String,System.Exception)">
      <summary> Creates a new instance of InternetInvalidPasswordException specifying the exception message and inner
            exception. </summary>
      <param name="message"> The exception message. </param>
      <param name="innerException"> The inner exception for the error. </param>
    </member>
    <member name="T:Atalasoft.Imaging.LicenseEdition">
      <summary> This enumeration indicates the type of license found by DotImage. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.LicenseEdition.Photo">
      <summary> DotImage Photo </summary>
    </member>
    <member name="F:Atalasoft.Imaging.LicenseEdition.PhotoPro">
      <summary> DotImage Photo Pro </summary>
    </member>
    <member name="F:Atalasoft.Imaging.LicenseEdition.Document">
      <summary> DotImage Document Imaging </summary>
    </member>
    <member name="F:Atalasoft.Imaging.LicenseEdition.Standard">
      <summary> DotImage Photo (deprecated) </summary>
    </member>
    <member name="F:Atalasoft.Imaging.LicenseEdition.Professional">
      <summary> DotImage Photo Professional (deprecated) </summary>
    </member>
    <member name="T:Atalasoft.Imaging.MarshalByRefCollectionBase">
      <summary>
        <para>A base <STRONG>abstract</STRONG> (<STRONG>MustInherit</STRONG> in Visual Basic) collection class
            intended for strongly typed collections containing unmanaged data.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.MarshalByRefCollectionBase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.MarshalByRefCollectionBase" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.MarshalByRefCollectionBase.Clear">
      <summary> Clears the collection. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.MarshalByRefCollectionBase.CopyTo(System.Array,System.Int32)">
      <summary> Copies the collection items into an array. </summary>
      <param name="array"> The array that will hold the collection items. </param>
    </member>
    <member name="P:Atalasoft.Imaging.MarshalByRefCollectionBase.Count">
      <summary> Gets the number of items in the collection. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.MarshalByRefCollectionBase.GetEnumerator">
      <summary> Returns a reference to an <B>IEnumerator</B> interface, whose purpose is to grant access to an
            enumeration's items. </summary>
      <returns> A reference to an <STRONG>IEnumerator</STRONG> interface. </returns>
    </member>
    <member name="P:Atalasoft.Imaging.MarshalByRefCollectionBase.InnerList">
      <summary> Gets the <STRONG>ArrayList</STRONG> stored within the collection. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.MarshalByRefCollectionBase.IsSynchronized">
      <summary>
        <para>Gets a value indicating whether access to the collection is synchronized (thread-safe).</para>
      </summary>
    </member>
    <member name="P:Atalasoft.Imaging.MarshalByRefCollectionBase.SyncRoot">
      <summary>
        <para>Gets an object that can be used to synchronize access to the collection.</para>
      </summary>
    </member>
    <member name="T:Atalasoft.Imaging.MarshalByRefReadOnlyCollectionBase">
      <summary>
        <para>A base <STRONG>abstract</STRONG> (<STRONG>MustInherit</STRONG> in Visual Basic)
            collection class intended for strongly typed read-only collections containing unmanaged data.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.MarshalByRefReadOnlyCollectionBase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.MarshalByRefReadOnlyCollectionBase" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.MarshalByRefReadOnlyCollectionBase.CopyTo(System.Array,System.Int32)">
      <summary> Copies the collection items into an array. </summary>
      <param name="array"> The array that will hold the collection items. </param>
    </member>
    <member name="P:Atalasoft.Imaging.MarshalByRefReadOnlyCollectionBase.Count">
      <summary> The number of items in the collection. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.MarshalByRefReadOnlyCollectionBase.GetEnumerator">
      <summary> Returns a reference to an <B>IEnumerator</B> interface, whose purpose is to grant access to an
            enumeration's items. </summary>
      <returns> A reference to an <STRONG>IEnumerator</STRONG> interface. </returns>
    </member>
    <member name="P:Atalasoft.Imaging.MarshalByRefReadOnlyCollectionBase.InnerList">
      <summary> Gets the <STRONG>ArrayList</STRONG> stored within the collection. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.MarshalByRefReadOnlyCollectionBase.IsSynchronized">
      <summary>
        <para>Gets a value indicating whether access to the collection is synchronized (thread-safe).</para>
      </summary>
    </member>
    <member name="P:Atalasoft.Imaging.MarshalByRefReadOnlyCollectionBase.SyncRoot">
      <summary>
        <para>Gets an object that can be used to synchronize access to the collection.</para>
      </summary>
    </member>
    <member name="T:Atalasoft.Imaging.OperationCancelledException">
      <summary> This class is used to cancel running operations. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.OperationCancelledException.#ctor">
      <summary> Creates a new instance of OperationCancelledException. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.OperationCancelledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.OperationCancelledException" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.OperationCancelledException.#ctor(System.String)">
      <summary> Creates a new instance of OperationCancelledException specifying the exception message. </summary>
      <param name="message"> A text description of the exception. </param>
    </member>
    <member name="M:Atalasoft.Imaging.OperationCancelledException.#ctor(System.String,System.Exception)">
      <summary> Creates a new instance of OperationCancelledException specifying an exception message and the inner
            exception. </summary>
      <param name="message"> A text description of the exception. </param>
      <param name="innerException"> The inner exception. </param>
    </member>
    <member name="T:Atalasoft.Imaging.Palette">
      <summary> The palette contains color information that is applied to colormapped images.  Use this object to modify
            and read the palette colors. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Palette.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Palette" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.Palette.#ctor(Atalasoft.Imaging.PaletteType)">
      <summary> Initialize a new instance of a Palette class specifying the PaletteType. </summary>
      <param name="palType"> The type of palette to create. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Palette.#ctor(System.Drawing.Color[])">
      <summary> Creates a new instance of Palette specifying the colors of the palette. </summary>
      <param name="colors"> An array of System.Drawing.Color objects used to fill the palette. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Palette.#ctor(System.Drawing.Imaging.ColorPalette)">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Palette" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.Palette.#ctor(System.Int32)">
      <summary> Initialize a new instance of a Palette specifying the number of colors to start with. </summary>
      <param name="colors"> The number of colors in the palette. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Palette.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Palette" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.Palette.Clone">
      <summary>
            Returns a deep copy of this <see cref="T:Atalasoft.Imaging.Palette" />.
            </summary>
      <returns>A deep copy of this <see cref="T:Atalasoft.Imaging.Palette" />.</returns>
    </member>
    <member name="P:Atalasoft.Imaging.Palette.Colors">
      <summary> Returns the number of colors in the palette. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Palette.Dispose">
      <summary>Releases all resources used by the <see cref="T:Atalasoft.Imaging.Palette" /></summary>
    </member>
    <member name="M:Atalasoft.Imaging.Palette.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:Atalasoft.Imaging.Palette" /> and optionally releases the managed resources</summary>
      <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources</param>
    </member>
    <member name="M:Atalasoft.Imaging.Palette.Finalize"></member>
    <member name="M:Atalasoft.Imaging.Palette.GetClosestPaletteIndex(System.Drawing.Color)">
      <summary> Returns the palette index that best matches a specified color. </summary>
      <param name="color"> The color to look up in the palette. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Palette.GetClosestPaletteIndex(System.Drawing.Color,System.Boolean@)">
      <summary> Returns the palette index that best matches a specified color, returning a value if there was an exact match. </summary>
      <param name="color"> The color to look up in the palette. </param>
      <param name="exact"> This value is set to <STRONG>true</STRONG> if there is an exact match, otherwise <STRONG>false</STRONG>. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Palette.GetEntry(System.Int32)">
      <summary>
            Returns the color of a particular index entry in
            the palette. See <see cref="M:Atalasoft.Imaging.Palette.SetEntry(System.Int32,System.Drawing.Color)" /> to change the color of a palette entry.
            </summary>
      <param name="Index">The palette index <i>(0 - 255)</i>.</param>
      <returns>The color of the palette entry.</returns>
    </member>
    <member name="M:Atalasoft.Imaging.Palette.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Provide information for object serialization. </summary>
      <param name="info"> The object that will hold the serialization information. </param>
      <param name="context"> The context into which this object is being streamed. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Palette.GetSystemPalette">
      <summary> Returns the system palette of the current display if it's an 8-bit device, <STRONG>null</STRONG>
            (<STRONG>Nothing</STRONG> in Visual Basic) if the device is greater then 8 bits. </summary>
      <returns> A Palette containing the system palette colors. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.Palette.GetSystemPalette(System.IntPtr)">
      <summary> Returns the system palette of the specified device if it's 8-bit, <STRONG>null</STRONG>
            (<STRONG>Nothing</STRONG> in Visual Basic) if the device is greater then 8 bits. </summary>
      <param name="device"> A handle to the device context. </param>
      <returns> A Palette containing the system palette colors. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.Palette.HasAlpha"></member>
    <member name="M:Atalasoft.Imaging.Palette.IsGray"></member>
    <member name="M:Atalasoft.Imaging.Palette.SetEntry(System.Int32,System.Drawing.Color)">
      <summary>
            Sets the color of a particular index entry in the palette.  See
            <see cref="M:Atalasoft.Imaging.Palette.GetEntry(System.Int32)" /> to retreive the color of the palette entry.
            </summary>
      <param name="Index">The palette index <i>(0 - 255)</i>.</param>
      <param name="NewColor">The color to set the Palette index to.</param>
    </member>
    <member name="M:Atalasoft.Imaging.Palette.SetPalette(Atalasoft.Imaging.PaletteType)">
      <summary>
            Change the palette to a standard <see cref="T:Atalasoft.Imaging.PaletteType" />.
            </summary>
      <param name="PalType">The type of palette to change to.</param>
    </member>
    <member name="M:Atalasoft.Imaging.Palette.ToArray"></member>
    <member name="T:Atalasoft.Imaging.PaletteType">
      <summary> Contains the standard palette types that a palette can be set to. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.PaletteType.Grayscale">
      <summary> The standard grayscale palette with gray colors. Entry 0 corresponds to Black and entry 255 corresponds
            with white, with gray shades between. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.PaletteType.Web">
      <summary> A palette where each primitive is a multiple of 51. (0, 51, 102, 153, 204, 255). With six possible values
            per primitive and 3 primitives (red, green and blue) the maximum colors are 216. (6^3=216) </summary>
    </member>
    <member name="F:Atalasoft.Imaging.PaletteType.SixteenColor">
      <summary> Standard windows 16 color palette. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.PaletteType.BlackAndWhite">
      <summary> Two color black and white palette </summary>
    </member>
    <member name="F:Atalasoft.Imaging.PaletteType.WebExtended">
      <summary>Includes all colors of the 215 color web palette with the addition of 40 grayscale colors.</summary>
    </member>
    <member name="T:Atalasoft.Imaging.PixelFormat">
      <summary> Specifies the format of the color data for each pixel in the image. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.PixelFormat.Pixel1bppIndexed">
      <summary>
            One bit per pixel.  A two color palette defines the colors associated with bit values of 0 and 1.
            </summary>
    </member>
    <member name="F:Atalasoft.Imaging.PixelFormat.Pixel4bppIndexed">
      <summary>Four bits per pixel.  A 16 color palette defines the colors associated with each pixel.</summary>
    </member>
    <member name="F:Atalasoft.Imaging.PixelFormat.Pixel8bppIndexed">
      <summary> Eight bits per pixel. A palette of up to 256 colors may be used. Can contain alpha palette values.</summary>
    </member>
    <member name="F:Atalasoft.Imaging.PixelFormat.Pixel24bppBgr">
      <summary> Twenty-four bits per pixel with pixel channels containing Blue, Green, and Red values in that order.  This
            is also called an RGB image despite the order of the channels. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.PixelFormat.Pixel32bppBgra">
      <summary> Thirty-two bits per pixel with pixel channels containing Blue, Green, Red, and Alpha values in that order.
            This is also called an RGBA image despite the order of the channels. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.PixelFormat.Pixel32bppBgr">
      <summary> Thirty-two bits per pixel with pixel channels containing Blue, Green, and Red values in that order.  This
            is also called an RGB image despite the order of the channels.  The last channel is unused. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.PixelFormat.Pixel8bppGrayscale">
      <summary> Eight bits per pixel. Each pixel is a shade of gray, from 0 (black) to 255 (white). </summary>
    </member>
    <member name="F:Atalasoft.Imaging.PixelFormat.Pixel16bppGrayscaleAlpha">
      <summary> Sixteen bits per pixel. A standard grayscale palette is used where pal(0)=RGB(0,0,0) up to
            pal(255)=RGB(255,255,255). The second channel contains an alpha (transparency) value for each pixel. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.PixelFormat.Pixel32bppCmyk">
      <summary> Thirty-Two bits per pixel with pixels containing the colors Cyan, Magenta, Yellow, and Black.  This is a
            subtractive colorspace with 0, 0, 0, 0 corresponding to pure white and 255, 255, 255, 255 corresponding to pure
            black. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.PixelFormat.Pixel16bppGrayscale">
      <summary> Sixteen bits per component. This format allows for greater detailed grayscale images.  Each pixel can have
            a value from 0 (black) to 65535 (white). </summary>
    </member>
    <member name="F:Atalasoft.Imaging.PixelFormat.Pixel48bppBgr">
      <summary> Fourty-Eight bits per pixel with pixel channels containing Blue, Green and Red. This is a two byte per
            component image with values ranging from 0 to 65535 for each color component. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.PixelFormat.Pixel64bppBgra">
      <summary> Sixty-Four bits per pixel with pixel channels containing Blue, Green, Red and Alpha values in that order.
            This is a two byte per component image with values ranging from 0 to 65535 for each color component. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.PixelFormatChangeEventArgs">
      <summary> Provides data for the <see cref="!:PixelFormatChange" /> event. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.PixelFormatChangeEventArgs.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.PixelFormatChangeEventArgs" /> class.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.PixelFormatChangeEventArgs.#ctor(Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.PixelFormatChangeEventArgs" /> class specifying the current and new
            <see cref="T:Atalasoft.Imaging.PixelFormat" />.</para>
      </summary>
      <param name="currentPixelFormat"> The current <STRONG>PixelFormat</STRONG>. </param>
      <param name="newPixelFormat"> The new <STRONG>PixelFormat</STRONG>. </param>
    </member>
    <member name="P:Atalasoft.Imaging.PixelFormatChangeEventArgs.Cancel">
      <summary>
        <para>When setting this property to true, the current operation will be cancelled.</para>
      </summary>
    </member>
    <member name="P:Atalasoft.Imaging.PixelFormatChangeEventArgs.CurrentPixelFormat">
      <summary> Gets the <see cref="T:Atalasoft.Imaging.PixelFormat" /> of the current image. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.PixelFormatChangeEventArgs.NewPixelFormat">
      <summary> Gets the <see cref="T:Atalasoft.Imaging.PixelFormat" /> to change the image to. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.PixelFormatChangeEventHandler">
      <summary> Handles operations that require the PixelFormat of an image to change. </summary>
      <param name="sender"> The object raising the event. </param>
      <param name="e"> The PixelFormatChangeEventArgs for this event. </param>
    </member>
    <member name="T:Atalasoft.Imaging.PixelFormatChanger">
      <summary> This is an abstract class that defines how an image should be changed from one pixel format to another.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.PixelFormatChanger.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.PixelFormatChanger" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.PixelFormatChanger.ChangePixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.ColorManagement.ColorProfile)">
      <summary> Allocate a new AtalaImage based on the sourceImage, using the requested pixel format. </summary>
      <param name="sourceImage"> The image to be converted to a new format. </param>
      <param name="targetPixelFormat"> The requested PixelFormat </param>
      <param name="destProfile"> An optional color profile to use for the conversion. </param>
      <returns> A new AtalaImage of the requested PixelFormat. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.PixelFormatChanger.LowLevelChangePixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.ColorManagement.ColorProfile)"></member>
    <member name="T:Atalasoft.Imaging.PixelFormatUtilities">
      <summary> PixelFormatUtilities is a toolbox of utilities for manipulating and asking questions about PixelFormat
            enumerated values. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.PixelFormatUtilities.BitsPerChannel(Atalasoft.Imaging.PixelFormat)">
      <summary> Returns the number of bits in each channel of this image. </summary>
      <param name="pf"> An input PixelFormat </param>
    </member>
    <member name="M:Atalasoft.Imaging.PixelFormatUtilities.BitsPerPixel(Atalasoft.Imaging.PixelFormat)">
      <summary> Returns the number of bits used per pixel in total. </summary>
      <param name="pf"> An input PixelFormat </param>
    </member>
    <member name="M:Atalasoft.Imaging.PixelFormatUtilities.ChannelsPerPixel(Atalasoft.Imaging.PixelFormat)">
      <summary> Returns the number of channels in this pixel format </summary>
      <param name="pf"> An input PixelFormat </param>
    </member>
    <member name="M:Atalasoft.Imaging.PixelFormatUtilities.HasAlpha(Atalasoft.Imaging.PixelFormat)">
      <summary> Returns true if the pixel format contains an alpha channel </summary>
      <param name="pf"> An input PixelFormat </param>
    </member>
    <member name="M:Atalasoft.Imaging.PixelFormatUtilities.ImageSize(Atalasoft.Imaging.PixelFormat,System.Int32,System.Int32)">
      <summary> Given a pixel format, ImageSize will return the number of bytes necessary to represent that image.
            </summary>
      <param name="pf"> An input PixelFormat </param>
      <param name="w"> The width of the image </param>
      <param name="h"> The height of the image </param>
    </member>
    <member name="M:Atalasoft.Imaging.PixelFormatUtilities.IsColor(Atalasoft.Imaging.PixelFormat)">
      <summary> Indicates whether or not a pixel format represents a color image </summary>
      <param name="pf"> An input PixelFormat </param>
      <returns> True if the pixel format is a color format, false if it is gray or colormapped. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.PixelFormatUtilities.IsColorMapped(Atalasoft.Imaging.PixelFormat)">
      <summary> Indicated whether or not the pixel format represents a color mapped format </summary>
      <param name="pf"> An input PixelFormat </param>
      <returns> True if the pixel format will use a color map, false otherwise. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.PixelFormatUtilities.IsContinuous(Atalasoft.Imaging.PixelFormat)">
      <summary> Indicates whether or not the pixel format represents a continuous pixel format </summary>
      <param name="pf"> An input PixelFormat </param>
      <returns> True if the pixel format is continuous, false otherwise. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.PixelFormatUtilities.IsGray(Atalasoft.Imaging.PixelFormat)">
      <summary> Indicates whether or not the pixel format represents a gray image. </summary>
      <param name="pf"> An input PixelFormat </param>
      <returns> Returns true if the image format is gray, false otherwise. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.PixelFormatUtilities.IsMultiByte(Atalasoft.Imaging.PixelFormat)">
      <summary> Indicates whether or not any channel in this image requires multiple bytes. </summary>
      <param name="pf"> An input PixelFormat </param>
      <returns> Returns true if a channels needs multiple bytes, false otherwise. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.PixelFormatUtilities.IsValid(System.Drawing.Imaging.PixelFormat)">
      <param name="bpf"> A .NET PixelFormat type </param>
      <returns> Returns true if the value is valid, false otherwise. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.PixelFormatUtilities.IsValid(System.Int32)">
      <param name="ipf"> An integer representing a pixel format </param>
      <returns> Returns true if the value is valid, false otherwise. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.PixelFormatUtilities.RowStride(Atalasoft.Imaging.PixelFormat,System.Int32)">
      <summary> Calculates the width in bytes of a row in an image. </summary>
      <param name="pf"> An input PixelFormat </param>
      <param name="w"> The width of an image in pixels </param>
    </member>
    <member name="M:Atalasoft.Imaging.PixelFormatUtilities.RowStride(System.Int32,System.Int32)">
      <summary> Calculates the width in bytes of a row in an image. </summary>
      <param name="bitsPerPixel"> The number of bits per pixel </param>
      <param name="w"> The width of an image in pixels </param>
    </member>
    <member name="T:Atalasoft.Imaging.PixelMemoryException">
      <summary>
            This exception is thrown when an error occurs that is related to PixelMemory
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.PixelMemoryException.#ctor">
      <summary> Creates a new instance of <STRONG>PixelMemoryException</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.PixelMemoryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.PixelMemoryException" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.PixelMemoryException.#ctor(System.String)">
      <summary> Creates a new instance of <STRONG>PixelMemoryException </STRONG>specifying the error message. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.PixelMemoryException.#ctor(System.String,System.Exception)">
      <summary> Creates a new instance of <STRONG>PixelMemoryException </STRONG>specifying the error message and inner
            exception. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ProcessQueue">
      <summary> Holds a collection of <see cref="T:Atalasoft.Imaging.ProcessQueue" /> that are awaiting asynchronous processing.</summary>
    </member>
    <member name="M:Atalasoft.Imaging.ProcessQueue.#ctor">
      <summary>
            Create a instance of the <see cref="T:Atalasoft.Imaging.ProcessQueue" />.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ProcessQueue.CopyTo(Atalasoft.Imaging.ProcessQueuedItem[],System.Int32)">
      <summary> Copies ProcessQueuedItems from this collection to an array. </summary>
      <param name="queuedItems"> The array to copy the items into. </param>
      <param name="index"> The starting index in the array where the items will be copied. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ProcessQueue.CurrentItem">
      <summary> Gets the ProcessQueuedItem that is currently being processed. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ProcessQueue.Dequeue">
      <summary> Remove the next item from the queue. </summary>
      <returns> The queued item that was removed. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ProcessQueue.Enqueue(Atalasoft.Imaging.ProcessQueuedItem)">
      <summary> Add a new item into the process queue. </summary>
      <param name="item"> The <see cref="T:Atalasoft.Imaging.ProcessQueuedItem" /> containing the thread information to process. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ProcessQueue.Peek">
      <summary> Return the next item in the process queue without removing it. </summary>
      <returns> The next item in the process queue. </returns>
    </member>
    <member name="T:Atalasoft.Imaging.ProcessQueuedItem">
      <summary>
        <para>This class contains information regarding the image processing function that is to be run when the
            <see cref="T:Atalasoft.Imaging.ProcessQueue" /> is ready.</para>
      </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ProcessQueuedItem.ProcessingClass">
      <summary> The instance of a class that will be processed in a new thread. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ProcessQueuedItem.ProcessUndo">
      <summary> Indicates if an undo should be created before the thread begins. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ProcessQueuedItem.Thread">
      <summary> Gets or sets the thread that the process is running in. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ProcessUndo">
      <summary> Contains information about an undo level that will be used in the %ProcessQueue%. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ProcessUndo.#ctor">
      <summary> Initialize a new instance of %ProcessUndo%. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ProcessUndo.#ctor(System.String,System.Boolean)">
      <summary> Initialize a new instance of %ProcessUndo% specifying the Undo Description and if the image should be
            copied. </summary>
      <param name="undoDescription"> The undo description. </param>
      <param name="copyCurrent"> Specifies if the image should be copied before undoing. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ProcessUndo.CopyCurrent">
      <summary> If <STRONG>true</STRONG>, the image will be copied before placing into the <STRONG>undo</STRONG>.
            </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ProcessUndo.UndoDescription">
      <summary> The description of the undo level. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ProgressEventArgs">
      <summary> Provides data for the <see cref="!:Progress" /> event. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ProgressEventArgs.#ctor">
      <summary> Creates a new instance of ProgressEventArgs. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ProgressEventArgs.#ctor(System.Int32,System.Int32)">
      <summary> Creates a new instance of ProgressEventArgs specifying the current and total progress values. </summary>
      <param name="current"> The current progress value. </param>
      <param name="total"> The total progress value at 100% completion. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ProgressEventArgs.#ctor(System.Int32,System.Int32,System.String)">
      <summary> Creates a new instance of ProgressEventArgs specifying the current and total values, and the name of the
            method. </summary>
      <param name="current"> The current progress value. </param>
      <param name="total"> The total progress value at 100% completion. </param>
      <param name="methodName"> The name of the method raising the progress event. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ProgressEventArgs.Cancel">
      <summary> When set to <STRONG>true</STRONG>, allows the current image processing function to be cancelled.</summary>
    </member>
    <member name="P:Atalasoft.Imaging.ProgressEventArgs.Current">
      <summary> Gets the current value of the progress operation. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ProgressEventArgs.MethodName">
      <summary> The name of the method calling the progress event. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ProgressEventArgs.Total">
      <summary> Gets the total number of units for this operation. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ProgressEventHandler">
      <summary> Handles the progress event for operations. </summary>
      <param name="sender"> The object raising the event. </param>
      <param name="e"> The ProgressEventArgs for this event. </param>
    </member>
    <member name="T:Atalasoft.Imaging.RandomAccessImageSource">
      <summary> This is an abstract class which is used to define ImageSource objects that can be accessed in any order.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.RandomAccessImageSource.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.RandomAccessImageSource" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.RandomAccessImageSource.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.RandomAccessImageSource" /> class</summary>
    </member>
    <member name="P:Atalasoft.Imaging.RandomAccessImageSource.Count">
      <summary> Returns the total number of images in the image source. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.RandomAccessImageSource.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="P:Atalasoft.Imaging.RandomAccessImageSource.Item(System.Int32)">
      <summary> Acquires the image at location i within the image source and returns it. </summary>
      <param name="i"> The index of the image to be acquired. </param>
    </member>
    <member name="M:Atalasoft.Imaging.RandomAccessImageSource.LowLevelAcquire(System.Int32)"></member>
    <member name="M:Atalasoft.Imaging.RandomAccessImageSource.LowLevelTotalImagesKnown"></member>
    <member name="M:Atalasoft.Imaging.RandomAccessImageSource.OnNodeIndexSet(Atalasoft.Imaging.ImageSourceNode)">
      <summary> This method is called from the <STRONG>RandomAccessImageSource</STRONG> indexer after it has set the <see cref="T:Atalasoft.Imaging.ImageSourceNode" />.<see cref="P:Atalasoft.Imaging.ImageSourceNode.Index" /> value. </summary>
      <param name="node"> The node returned by <see cref="M:Atalasoft.Imaging.RandomAccessImageSource.LowLevelAcquire(System.Int32)" /> after its Index has
            been changed. </param>
    </member>
    <member name="T:Atalasoft.Imaging.ReleasingImageSourceNodeEventArgs">
      <summary> This class is passed in the <see cref="E:Atalasoft.Imaging.ImageSource.Releasing" /> event to provide the <see cref="T:Atalasoft.Imaging.ImageSourceNode" /> that has been released. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ReleasingImageSourceNodeEventArgs.#ctor(Atalasoft.Imaging.ImageSourceNode)">
      <summary> Creates a new instance of <STRONG>ReleasingImageSourceNodeEventArgs</STRONG> with the <see cref="T:Atalasoft.Imaging.ImageSourceNode" /> that has been released. </summary>
      <param name="node"> The <see cref="T:Atalasoft.Imaging.ImageSourceNode" /> that has been released. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ReleasingImageSourceNodeEventArgs.Node">
      <summary> Gets the <see cref="T:Atalasoft.Imaging.ImageSourceNode" /> that has been released. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ReleasingImageSourceNodeEventHandler"></member>
    <member name="T:Atalasoft.Imaging.ResolutionUnit">
      <summary> Defines the units associated with Resolution, or Dpi. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ResolutionUnit.Undefined">
      <summary> Units are not defined. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ResolutionUnit.DotsPerInch">
      <summary> Units are expressed in inches. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ResolutionUnit.DotsPerCentimeters">
      <summary> Units are expressed in centimeters. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ResourceReleaser`1">
      <summary> This is a tool that can be used for managing the automatic releasing of resources via the using statement.</summary>
      <typeparam> The type of the object that will be managed. </typeparam>
    </member>
    <member name="M:Atalasoft.Imaging.ResourceReleaser`1.#ctor(`0,System.Action{`0})">
      <summary> Constructs a new ResourceReleaser object with the value and action given. </summary>
      <param name="val"> Val is an object that should be managed by the ResourceReleaser </param>
      <param name="action"> Action is an action that will be executed upon disposal of the ResourceReleaser.  Action will
            be passed val when it is executed. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ResourceReleaser`1.Dispose">
      <summary>Disposes the ResourceReleaser.</summary>
    </member>
    <member name="M:Atalasoft.Imaging.ResourceReleaser`1.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:Atalasoft.Imaging.ResourceReleaser`1" /> and optionally releases the managed resources</summary>
      <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources</param>
    </member>
    <member name="M:Atalasoft.Imaging.ResourceReleaser`1.Finalize"></member>
    <member name="F:Atalasoft.Imaging.ResourceReleaser`1.mVal"></member>
    <member name="T:Atalasoft.Imaging.SerializationHelper">
      <summary> SerializationHelper is a set of static methods to help in the process of deserialization of an object
            graph. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.SerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Boolean@)">
      <summary>
            Get a value from a SerializationInfo object
            </summary>
      <param name="info">The object in which to look for the value.</param>
      <param name="name">The name of the value.</param>
      <param name="val">The place to store the retrieved value.</param>
      <returns>true if the value was found, false otherwise.</returns>
    </member>
    <member name="M:Atalasoft.Imaging.SerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Byte@)">
      <summary>
            Get a value from a SerializationInfo object
            </summary>
      <param name="info">The object in which to look for the value.</param>
      <param name="name">The name of the value.</param>
      <param name="val">The place to store the retrieved value.</param>
      <returns>true if the value was found, false otherwise.</returns>
    </member>
    <member name="M:Atalasoft.Imaging.SerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Char@)">
      <summary>
            Get a value from a SerializationInfo object
            </summary>
      <param name="info">The object in which to look for the value.</param>
      <param name="name">The name of the value.</param>
      <param name="val">The place to store the retrieved value.</param>
      <returns>true if the value was found, false otherwise.</returns>
    </member>
    <member name="M:Atalasoft.Imaging.SerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.DateTime@)">
      <summary>
            Get a value from a SerializationInfo object
            </summary>
      <param name="info">The object in which to look for the value.</param>
      <param name="name">The name of the value.</param>
      <param name="val">The place to store the retrieved value.</param>
      <returns>true if the value was found, false otherwise.</returns>
    </member>
    <member name="M:Atalasoft.Imaging.SerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Decimal@)">
      <summary>
            Get a value from a SerializationInfo object
            </summary>
      <param name="info">The object in which to look for the value.</param>
      <param name="name">The name of the value.</param>
      <param name="val">The place to store the retrieved value.</param>
      <returns>true if the value was found, false otherwise.</returns>
    </member>
    <member name="M:Atalasoft.Imaging.SerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Double@)">
      <summary>
            Get a value from a SerializationInfo object
            </summary>
      <param name="info">The object in which to look for the value.</param>
      <param name="name">The name of the value.</param>
      <param name="val">The place to store the retrieved value.</param>
      <returns>true if the value was found, false otherwise.</returns>
    </member>
    <member name="M:Atalasoft.Imaging.SerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Int16@)">
      <summary>
            Get a value from a SerializationInfo object
            </summary>
      <param name="info">The object in which to look for the value.</param>
      <param name="name">The name of the value.</param>
      <param name="val">The place to store the retrieved value.</param>
      <returns>true if the value was found, false otherwise.</returns>
    </member>
    <member name="M:Atalasoft.Imaging.SerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Int32@)">
      <summary>
            Get a value from a SerializationInfo object
            </summary>
      <param name="info">The object in which to look for the value.</param>
      <param name="name">The name of the value.</param>
      <param name="val">The place to store the retrieved value.</param>
      <returns>true if the value was found, false otherwise.</returns>
    </member>
    <member name="M:Atalasoft.Imaging.SerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Int64@)">
      <summary>
            Get a value from a SerializationInfo object
            </summary>
      <param name="info">The object in which to look for the value.</param>
      <param name="name">The name of the value.</param>
      <param name="val">The place to store the retrieved value.</param>
      <returns>true if the value was found, false otherwise.</returns>
    </member>
    <member name="M:Atalasoft.Imaging.SerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Single@)">
      <summary>Get a value from a SerializationInfo object</summary>
      <param name="info">The object in which to look for the value.</param>
      <param name="name">The name of the value.</param>
      <param name="val">The place to store the retrieved value.</param>
      <returns>true if the value was found, false otherwise.</returns>
    </member>
    <member name="M:Atalasoft.Imaging.SerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Type)">
      <summary> Get an object from a SerializationInfo object. </summary>
      <param name="info"> The object in which to look for the value. </param>
      <param name="name"> The name of the value. </param>
      <param name="type"> The expected type of the object. </param>
      <returns>an object of the Type specified if found, null otherwise</returns>
    </member>
    <member name="T:Atalasoft.Imaging.UndoCollection">
      <summary>
        <para>The <STRONG>UndoCollection </STRONG>class is used to manage operations that need undo/redo
            functinality.  The collection contains properties to specify the number of allowed operations to undo or
            redo.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.UndoCollection.Add(System.String,System.Boolean)">
      <summary> Add a new undo level to the undo collection specifying the description and if the Image is copied.</summary>
      <param name="undoDescription"> The textual description of this undo level. </param>
      <param name="copyCurrent"> If <STRONG>true</STRONG>, the image will be copied into the undo collection. </param>
    </member>
    <member name="M:Atalasoft.Imaging.UndoCollection.Clear">
      <summary> Clears the undo/redo collection items. </summary>
      <returns> Clears the collection. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.UndoCollection.CopyTo(Atalasoft.Imaging.UndoLevel[],System.Int32)">
      <summary>
        <para>Copies the UndoLevels into an array.</para>
      </summary>
      <param name="undos"> An array of UndoLevel where the collection items will be stored. </param>
      <param name="index"> An index in the array where items will be stored. </param>
    </member>
    <member name="M:Atalasoft.Imaging.UndoCollection.Dispose">
      <summary> Clean up unmanaged resources by disposing each AtalaImage in the collection. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.UndoCollection.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:Atalasoft.Imaging.UndoCollection" /> and optionally releases the managed resources</summary>
      <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources</param>
    </member>
    <member name="M:Atalasoft.Imaging.UndoCollection.Finalize"></member>
    <member name="P:Atalasoft.Imaging.UndoCollection.Item(System.Int32)">
      <summary> Gets the undo item. </summary>
      <param name="index"> Zero based Index of the undo item. </param>
    </member>
    <member name="P:Atalasoft.Imaging.UndoCollection.Levels">
      <summary> Gets or set the number of Undo levels in this collection. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.UndoCollection.NumRedos">
      <summary> Gets the current number of redos in the collection. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.UndoCollection.NumUndos">
      <summary> Gets the current number of undos in the collection. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.UndoCollection.OnGetCurrentImageCollection(Atalasoft.Imaging.ImageCollectionEventArgs)"></member>
    <member name="M:Atalasoft.Imaging.UndoCollection.OnNewImageCollection(Atalasoft.Imaging.ImageCollectionEventArgs)"></member>
    <member name="M:Atalasoft.Imaging.UndoCollection.Redo">
      <summary> The <STRONG>Redo </STRONG>method redo's the most recent udno in this <STRONG>UndoCollection</STRONG>.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.UndoCollection.Undo">
      <summary> The <STRONG>Undo </STRONG>method undo's the most recently added item to this
            <STRONG>UndoCollection</STRONG>. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.UndoLevel">
      <summary> The <STRONG>UndoLevel</STRONG> class is used to store a single operation, in an UndoCollection, that can
            be un-done or re-done.  Every instance of this class holds an <see cref="T:Atalasoft.Imaging.ImageCollection" /> which are the set of
            images that will be restored to 'undo' the operation that this <STRONG>UndoLevel</STRONG> represents. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.UndoLevel.#ctor">
      <summary>Creates a new instance of <c>UndoLevel</c>.</summary>
    </member>
    <member name="M:Atalasoft.Imaging.UndoLevel.#ctor(Atalasoft.Imaging.ImageCollection,System.String)">
      <summary>
        <para>Creates a new instance of <STRONG>UndoLevel</STRONG> specifying the <see cref="T:Atalasoft.Imaging.ImageCollection" /> and undo <see cref="P:Atalasoft.Imaging.UndoLevel.Description" />.</para>
      </summary>
      <param name="images"> The <STRONG>ImageCollection</STRONG> that this undo level will contain. </param>
      <param name="description"> The description of this undo level. </param>
    </member>
    <member name="P:Atalasoft.Imaging.UndoLevel.Description">
      <summary> Gets the undo description associated with this <STRONG>UndoLevel</STRONG>. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.UndoLevel.Images">
      <summary> Gets the undo image collection associated with this <STRONG>UndoLevel</STRONG>. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Workspace">
      <summary>
        <para>The <STRONG>workspace </STRONG>object is the container that is used to manage changes to images and
            provide an interface to open, save, and manipulate images either synchronously or asynchronously.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Workspace.#ctor">
      <summary>
            Creates a new instance of dotImage
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Workspace.ApplyCommand(Atalasoft.Imaging.ImageProcessing.ImageCommand)">
      <summary> Applies an <see cref="T:Atalasoft.Imaging.ImageProcessing.ImageCommand" /> to the current image in order to process it. </summary>
      <param name="command"> The Command to apply.  Any object that inherits <see cref="T:Atalasoft.Imaging.ImageProcessing.ImageCommand" /> can be passed into
            this method. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Workspace.ApplyCommand(Atalasoft.Imaging.ImageProcessing.ImageCommand,System.String)">
      <summary> Creates an undo level, then applies an <see cref="T:Atalasoft.Imaging.ImageProcessing.ImageCommand" /> to the current image in order to process
            it. </summary>
      <param name="command"> The Command to apply.  Any object that inherits <see cref="T:Atalasoft.Imaging.ImageProcessing.ImageCommand" /> can be passed into
            this method. </param>
      <param name="undoDescription"> A description of the undo level that will be added before processing. </param>
    </member>
    <member name="P:Atalasoft.Imaging.Workspace.Asynchronous">
      <summary> Gets or sets a value indicating if method calls through this <STRONG>Workspace </STRONG>object are
            processed asynchronously in a background thread. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Workspace.AutoDispose">
      <summary> Gets or sets a value indicating if the <STRONG>Workspace</STRONG> should dispose all images it contains
            when finalized. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Workspace.Dispose">
      <summary> Cleans up all resources held by this <see cref="T:Atalasoft.Imaging.Workspace" /> including all images in the <see cref="T:Atalasoft.Imaging.ImageCollection" /> and undos
            in the <see cref="T:Atalasoft.Imaging.UndoCollection" />. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Workspace.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:Atalasoft.Imaging.Workspace" /> and optionally releases the managed resources</summary>
      <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources</param>
    </member>
    <member name="E:Atalasoft.Imaging.Workspace.DisposeImage">
      <summary> Fired when an image in the ImageCollection or UndoCollection is disposed. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Workspace.Finalize"></member>
    <member name="P:Atalasoft.Imaging.Workspace.Image">
      <summary> Gets or sets the current <see cref="T:Atalasoft.Imaging.AtalaImage" /> that is active in this <STRONG>Workspace</STRONG>.</summary>
    </member>
    <member name="E:Atalasoft.Imaging.Workspace.ImageChanged">
      <summary> Occurs when the current image in the ImageCollection changes. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Workspace.Images">
      <summary> Gets the <see cref="T:Atalasoft.Imaging.ImageCollection" /> of this <STRONG>Workspace </STRONG>object. </summary>
    </member>
    <member name="E:Atalasoft.Imaging.Workspace.ImageStreamCompleted">
      <summary> Fires after an image has been read or saved signifying that the <STRONG>Stream</STRONG> which was passed
            in can be closed. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Workspace.OnDisposeImage(Atalasoft.Imaging.ImageCancelEventArgs)">
      <summary> Invoked when pixel data in the current image changes without setting a new image.  Fires the <see cref="E:Atalasoft.Imaging.Workspace.DisposeImage" /> event. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Workspace.OnImageChanged(Atalasoft.Imaging.ImageEventArgs)"></member>
    <member name="M:Atalasoft.Imaging.Workspace.OnImageStreamCompleted(Atalasoft.Imaging.ImageStreamEventArgs)">
      <summary> Invoked after an image has been read or saved signifying that the <STRONG>Stream</STRONG> which was passed
            in can be closed.  Fires the <see cref="E:Atalasoft.Imaging.Workspace.ImageStreamCompleted" /> event. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Workspace.OnNewImage(Atalasoft.Imaging.ImageEventArgs)"></member>
    <member name="M:Atalasoft.Imaging.Workspace.OnProcessCompleted(Atalasoft.Imaging.ImageEventArgs)">
      <summary> Invoked when an asynchronous process has completed.  Fires the <see cref="E:Atalasoft.Imaging.Workspace.ProcessCompleted" />
            event. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Workspace.OnProcessError(Atalasoft.Imaging.ExceptionEventArgs)">
      <summary> Invoked when an error occurs in a separate thread when being processed asynchronously.  Fires the <see cref="E:Atalasoft.Imaging.Workspace.ProcessError" /> event. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Workspace.Open(System.IO.Stream)">
      <summary> Decodes an image from a stream and sets it to the current image. </summary>
      <param name="stream"> A stream containing the encoded image data. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Workspace.Open(System.IO.Stream,System.Int32)">
      <summary> Decodes an image from a stream specifying the frame index of a multipaged file, and sets it to the current
            image. </summary>
      <param name="stream"> A stream containing the encoded image data. </param>
      <param name="frameIndex"> If the image contains multiple frames, this is the zero based index to load. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Workspace.Open(System.String)">
      <summary> Decodes an image from a file and sets it to the current image. </summary>
      <param name="fileName"> The path of the file to open. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Workspace.Open(System.String,System.Int32)">
      <summary> Decodes an image from a file specifying the frame index of a multipaged file, and sets it to the current
            image. </summary>
      <param name="fileName"> The path of the file to open. </param>
      <param name="frameIndex"> If the image contains multiple frames, this is the zero based index to load. </param>
    </member>
    <member name="E:Atalasoft.Imaging.Workspace.ProcessCompleted">
      <summary> Fires when an asynchronous process has completed. </summary>
    </member>
    <member name="E:Atalasoft.Imaging.Workspace.ProcessError">
      <summary> Fires when an error occurs in a separate thread when being processed asynchronously. </summary>
    </member>
    <member name="E:Atalasoft.Imaging.Workspace.Progress">
      <summary> Fires while an image is being processed. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Workspace.Queue">
      <summary> Gets the <see cref="T:Atalasoft.Imaging.ProcessQueue" /> containing queued items that this <see cref="T:Atalasoft.Imaging.Workspace" /> object is
            currently processing. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Workspace.Save(System.IO.Stream,Atalasoft.Imaging.Codec.ImageEncoder)">
      <summary> Writes the current <see cref="T:Atalasoft.Imaging.AtalaImage" /> or <see cref="T:Atalasoft.Imaging.ImageCollection" /> to a stream specifying the <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder" />
            to use to encode the image. </summary>
      <param name="stream"> A stream containing the file which the current image will be encoded to. </param>
      <param name="encoder"> The <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder" /> which will be used to encode the image. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Workspace.Save(System.IO.Stream,Atalasoft.Imaging.Codec.ImageEncoder,System.Int32)">
      <summary> Writes the current <see cref="T:Atalasoft.Imaging.AtalaImage" /> or <see cref="T:Atalasoft.Imaging.ImageCollection" /> to a stream specifying the <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder" />
            to use to encode the image and the image index in the collection to save. </summary>
      <param name="stream"> A stream containing the file which the current image will be encoded to. </param>
      <param name="encoder"> The <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder" /> which will be used to encode the image. </param>
      <param name="frameIndex"> The index in the <STRONG>ImageCollection</STRONG> to save. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Workspace.Save(System.String,Atalasoft.Imaging.Codec.ImageEncoder)">
      <summary> Writes the current <see cref="T:Atalasoft.Imaging.AtalaImage" /> or <see cref="T:Atalasoft.Imaging.ImageCollection" /> to a file specifying the <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder" />
            to use to encode the image. </summary>
      <param name="fileName"> The filename to save the current image to. </param>
      <param name="encoder"> The <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder" /> which will be used to encode the image. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Workspace.Save(System.String,Atalasoft.Imaging.Codec.ImageEncoder,System.Int32)">
      <summary> Writes the current %AtalaImage% or %ImageCollection% to a file specifying the <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder" />
            to use to encode the image and the image index in the collection to save. </summary>
      <param name="fileName"> The filename to save the current image to. </param>
      <param name="encoder"> The <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder" /> which will be used to encode the image. </param>
      <param name="frameIndex"> The index in the <STRONG>ImageCollection</STRONG> to save. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Workspace.Save(System.String,Atalasoft.Imaging.Codec.ImageType)">
      <summary> Writes the current <see cref="T:Atalasoft.Imaging.AtalaImage" /> or <see cref="T:Atalasoft.Imaging.ImageCollection" /> to a file specifying the <see cref="T:Atalasoft.Imaging.Codec.ImageType" /> to
            use to encode the image. </summary>
      <param name="fileName"> The filename to save the current image to. </param>
      <param name="imageType"> The image type to save this image as. </param>
    </member>
    <member name="P:Atalasoft.Imaging.Workspace.Undos">
      <summary> Gets the UndoCollection object containing the undo history of this <STRONG>Workspace</STRONG>. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.BmpCompression">
      <summary> Contains the various compression types available for Bmp images. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.BmpCompression.None">
      <summary> No compression. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.BmpCompression.Rle">
      <summary> Run Length Compression, only valid for 8-bit image saves. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.BmpDecoder">
      <summary>
        <para>An <see cref="T:Atalasoft.Imaging.Codec.ImageDecoder" /> used to read Windows Bitmap (BMP) images from a <see cref="T:System.IO.Stream" />.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.BmpDecoder.#ctor">
      <summary> Initializes a new instance of a %BmpDecoder%. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.BmpDecoder.GetImageInfo(System.IO.Stream)">
      <summary> Retreive information from a Bmp image stored in a Stream without decoding the image data. </summary>
      <param name="stream"> A stream containing the encoded image data. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.BmpDecoder.IsValidFormat(System.IO.Stream)">
      <summary>
        <para>Returns true if the specified Stream contains a Bmp image.</para>
      </summary>
      <param name="stream"> A stream containing the encoded image data. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.BmpDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Returns an %AtalaImage% from a Stream containing a Bmp encoded image. </summary>
      <param name="stream"> A stream containing the encoded image data. </param>
      <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
      <returns> An AtalaImage containing the image data. </returns>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.BmpDecoder.SupportedImageType">
      <summary> Returns a Bmp ImageType enumeration value. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.BmpEncoder">
      <summary>
        <para>An <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder" /> that will write Windows Bitmap (BMP) images to a <see cref="T:System.IO.Stream" />.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.BmpEncoder.#ctor">
      <summary> Initializes a new instance of a <see cref="T:Atalasoft.Imaging.Codec.BmpEncoder" />. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.BmpEncoder.#ctor(Atalasoft.Imaging.Codec.BmpCompression)">
      <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.Codec.BmpEncoder" /> specifying the compression to use. </summary>
      <param name="compression"> The compression to use when writing Bmp images. </param>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.BmpEncoder.Compression">
      <summary> The compression to use when writing Bmp images. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.BmpEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Encode an <see cref="T:Atalasoft.Imaging.AtalaImage" /> as a Bmp image to a stream. </summary>
      <param name="stream"> A stream that the encoded image data will be saved to. </param>
      <param name="image"> The <see cref="T:Atalasoft.Imaging.AtalaImage" /> to encode. </param>
      <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.BmpEncoder.SupportedPixelFormats">
      <summary> Returns an array of pixel formats supported by this encoder. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.CodecCompression">
      <summary> Derive from this class for any codec's specific compression type. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.CodecCompression.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Codec.CodecCompression" /> class</summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.CodecErrorEventArgs">
      <summary> This class is used for encapsulating errors encountered while encoding or decoding image files. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.CodecErrorEventArgs.#ctor(System.String,Atalasoft.Imaging.Codec.ErrorLevel)">
      <summary> Construct a new set CodecErrorEventArgs object. </summary>
      <param name="description"> A string description of the error that has occurred. </param>
      <param name="level"> The severity of the error that has occurred. </param>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.CodecErrorEventArgs.Description">
      <summary> Get the description of the error that has occurred. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.CodecErrorEventArgs.ErrorLevel">
      <summary> Get the severity of the error that has occurred. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.CodecErrorEventHandler">
      <summary> Event handler when errors occur when reading images. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.CodecException">
      <summary> This exception is thrown when there is an error in the codec (decoder or encoder). </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.CodecException.#ctor">
      <summary> Creates a new instance of <STRONG>CodecException</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.CodecException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Codec.CodecException" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.CodecException.#ctor(System.String)">
      <summary> Creates a new instance of <STRONG>CodecException</STRONG> specifying the error message. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.CodecException.#ctor(System.String,System.Exception)">
      <summary> Creates a new instance of <STRONG>CodecException</STRONG> specifying the error message and inner
            exception. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.DecoderCollection">
      <summary>
        <para>A collection of <see cref="T:Atalasoft.Imaging.Codec.ImageDecoder" />.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.DecoderCollection.#ctor">
      <summary> Creates a new instance of DecoderCollection. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.DecoderCollection.Add(Atalasoft.Imaging.Codec.ImageDecoder)">
      <summary> Adds an ImageDecoder to the collection. </summary>
      <param name="decoder"> The ImageDecoder to add. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.DecoderCollection.Contains(Atalasoft.Imaging.Codec.ImageDecoder)">
      <summary> Determines if a specific ImageDecoder is contained within the collection. </summary>
      <param name="decoder"> The ImageDecoder to search for. </param>
      <returns>
        <STRONG>True</STRONG> if the decoder is in the collection. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.DecoderCollection.CopyTo(Atalasoft.Imaging.Codec.ImageDecoder[],System.Int32)">
      <summary> Copies the decoders to an array. </summary>
      <param name="decoders"> An array to hold the ImageDecoders. </param>
      <param name="index"> The starting index in the array to start copying data. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.DecoderCollection.IndexOf(Atalasoft.Imaging.Codec.ImageDecoder)">
      <summary> Returns the index of a specific ImageDecoder within the collection. </summary>
      <param name="decoder"> The ImageDecoder to look for. </param>
      <returns> The index of the ImageDecoder or -1 if the decoder is not in the collection. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.DecoderCollection.Insert(System.Int32,Atalasoft.Imaging.Codec.ImageDecoder)">
      <summary> Inserts an ImageDecoder into the collection at the specified index. </summary>
      <param name="index"> The index to place the ImageDecoder. </param>
      <param name="decoder"> The ImageDecoder to insert. </param>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.DecoderCollection.Item(System.Int32)">
      <summary> The indexer of this collection. </summary>
      <param name="index"> The index of the ImageDecoder to retrieve. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.DecoderCollection.Remove(Atalasoft.Imaging.Codec.ImageDecoder)">
      <summary> Removes an ImageDecoder from the collection. </summary>
      <param name="decoder"> The ImageDecoder to remove. </param>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.DecoderDictionary">
      <summary> A dictionary of <see cref="!:ImageDecoders" />. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.DecoderDictionary.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Codec.DecoderDictionary" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.DecoderDictionary.Add(Atalasoft.Imaging.Codec.ImageType,Atalasoft.Imaging.Codec.ImageDecoder)">
      <summary> Add a decoder to the project. </summary>
      <param name="imageType"> The image type for the decoder. </param>
      <param name="decoder"> The ImageDecoder to add. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.DecoderDictionary.Contains(Atalasoft.Imaging.Codec.ImageType)">
      <summary> Determines if a decoder is in the dictionary. </summary>
      <param name="imageType"> The image decoder type. </param>
      <returns>
        <STRONG>True</STRONG> if the dictionary contains the decoder. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.DecoderDictionary.CopyTo(System.Collections.DictionaryEntry[],System.Int32)"></member>
    <member name="P:Atalasoft.Imaging.Codec.DecoderDictionary.Item(Atalasoft.Imaging.Codec.ImageType)">
      <summary> Allows the decoders to be enumerated. </summary>
      <param name="index"> The index of the item to retrieve. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.DecoderDictionary.Remove(Atalasoft.Imaging.Codec.ImageType)">
      <summary> Removes a decoder from the dictionary. </summary>
      <param name="imageType"> The image type to remove. </param>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.EmfDecoder">
      <summary>
        <para>An <see cref="T:Atalasoft.Imaging.Codec.ImageDecoder" /> used to read Enhanced Metafiles (EMF) images from a <see cref="T:System.IO.Stream" />.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.EmfDecoder.#ctor">
      <summary> Initializes a new instance of a %EmfDecoder%. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.EmfDecoder.GetImageInfo(System.IO.Stream)">
      <summary> Retreive information from an Emf image stored in a Stream without decoding the image data. </summary>
      <param name="stream"> A stream containing the encoded image data. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.EmfDecoder.IsValidFormat(System.IO.Stream)">
      <summary>
        <para>Returns true if the specified Stream contains an Emf image.</para>
      </summary>
      <param name="stream"> A stream containing the encoded image data. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.EmfDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Returns an %AtalaImage% from a Stream containing an Emf encoded image. </summary>
      <param name="stream"> A stream containing the encoded image data. </param>
      <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.EmfDecoder.SupportedImageType">
      <summary> Returns an Emf ImageType enumeration value. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.EmfEncoder">
      <summary>
            Summary description for EmfEncoder.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.EmfEncoder.#ctor">
      <summary> Initializes a new instance of a <see cref="T:Atalasoft.Imaging.Codec.EmfEncoder" />. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.EmfEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Encode an %AtalaImage% as a Emf image to a stream. </summary>
      <param name="stream"> A stream that the encoded image data will be saved to. </param>
      <param name="image"> The <see cref="T:Atalasoft.Imaging.AtalaImage" /> to encode. </param>
      <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.EmfEncoder.SupportedPixelFormats">
      <summary> Returns an array of pixel formats supported by this encoder. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.EncoderCompressionEventArgs">
      <summary> This object is used for events fired by an <see cref="T:Atalasoft.Imaging.Codec.MultiFramedImageEncoder" /> when requesting a
            compression type. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.EncoderCompressionEventArgs.#ctor(Atalasoft.Imaging.AtalaImage,System.Int32,Atalasoft.Imaging.Codec.CodecCompression)">
      <summary> Creates a new instance of <STRONG>EncoderCompressionEventArgs</STRONG>. </summary>
      <param name="image"> The AtalaImage that is to be encoded. </param>
      <param name="frameIndex"> The zero based frame index that will be encoded. </param>
      <param name="compression"> Specifies the compression that will be used to encode the image. </param>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.EncoderCompressionEventArgs.Compression">
      <summary> Gets or sets the compression that will be used to encode the image. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.EncoderCompressionEventArgs.FrameIndex">
      <summary> Gets the zero based frame index that will be encoded. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.EncoderCompressionEventArgs.Image">
      <summary> Gets the AtalaImage that will be encoded. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.EncoderCompressionEventHandler">
      <summary> Event handler used when specifying compression in the MultiFramedImageEncoder. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.EpsEncoder">
      <summary>
        <para>An <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder" /> that will write Adobe Encapsulated PostScript images to a
            <see cref="T:System.IO.Stream" />.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.EpsEncoder.#ctor">
      <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.Codec.EpsEncoder" />. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.EpsEncoder.Creator">
      <summary> This property represents the creator field in the header of the resulting EPS image. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.EpsEncoder.IgnoreColorProfile">
      <summary> Allow the EPS encoder to ignore the color profile provided by an image. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.EpsEncoder.ImageLocation">
      <summary> This sets the relative location of the image in page space in units of points. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.EpsEncoder.IncludeShowPage">
      <summary> Determines whether or not this image will include the PostScript showpage command. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.EpsEncoder.InvertBW">
      <summary> Switches the sense of black and white in 1 bit-per-pixel images </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.EpsEncoder.Resolution">
      <summary> Sets the output resolution of the image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.EpsEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Encode an <see cref="T:Atalasoft.Imaging.AtalaImage" /> as an EPS image to a stream. </summary>
      <param name="stream"> A stream that the encoded image data will be saved to. </param>
      <param name="image"> The <see cref="T:Atalasoft.Imaging.AtalaImage" /> to encode. </param>
      <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.EpsEncoder.Scale">
      <summary> Sets the output scale of the image. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.EpsEncoder.SupportedPixelFormats"></member>
    <member name="P:Atalasoft.Imaging.Codec.EpsEncoder.Title">
      <summary> Set the title of the image in the EPS header </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.EpsEncoder.UseImageResolution">
      <summary> Determine whether or not to use the resolution of the image to be saved. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.ErrorLevel"></member>
    <member name="F:Atalasoft.Imaging.Codec.ErrorLevel.None">
      <summary> This value denotes that there is no error present.  While it is not presently used, it is included for the
            sake of completeness. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.ErrorLevel.Warning">
      <summary> This value denotes that a problem of very mild severity has been detected in a codec. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.ErrorLevel.Error">
      <summary> This value denotes that a problem of moderate to high severity has been detected in a codec. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.ErrorLevel.Fatal">
      <summary> This value denotes that there a severe error has occurred that could be fatal to the CLR or the current
            application.  This severity should never be used in released software. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.GifDecoder">
      <summary>
        <para>An <see cref="T:Atalasoft.Imaging.Codec.ImageDecoder" /> used to read Compuserve Graphics Interchange (GIF) images from a
            <see cref="T:System.IO.Stream" />.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.GifDecoder.#ctor">
      <summary> Initializes a new instance of a %GifDecoder%. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.GifDecoder.Dispose">
      <summary>Releases all resources used by the <see cref="T:Atalasoft.Imaging.Codec.GifDecoder" /></summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.GifDecoder.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:Atalasoft.Imaging.Codec.GifDecoder" /> and optionally releases the managed resources</summary>
      <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources</param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.GifDecoder.Finalize"></member>
    <member name="P:Atalasoft.Imaging.Codec.GifDecoder.Frames">
      <summary> Gets a GifFrameCollection from an animated GIF. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.GifDecoder.GetFrameCount(System.IO.Stream)">
      <summary>
        <para>Gets the number of frames in a GIF.</para>
      </summary>
      <param name="stream"> A stream containing the encoded image data. </param>
      <returns> The number of frames in a GIF. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.GifDecoder.GetImageInfo(System.IO.Stream)">
      <summary> Retreive information from a Gif image stored in a Stream without decoding the image data. </summary>
      <param name="stream"> A stream containing the encoded image data. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.GifDecoder.GetImageInfo(System.IO.Stream,System.Int32)">
      <summary> Retreive information from a specified frame in a Gif image stored in a Stream without decoding the image
            data. </summary>
      <param name="stream"> A stream containing the encoded image data. </param>
      <param name="frameIndex"> The zero based frame index to load from an animated GIF. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.GifDecoder.IsValidFormat(System.IO.Stream)">
      <summary>
        <para>Returns true if the specified Stream contains a Gif image.</para>
      </summary>
      <param name="stream"> A stream containing the encoded image data. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.GifDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Returns an %AtalaImage% from a Stream containing a Gif encoded image. </summary>
      <param name="stream"> A stream containing the encoded image data. </param>
      <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.GifDecoder.Read(System.IO.Stream,System.Int32,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Returns a specified frame to an %AtalaImage% from a Stream containing an animated Gif encoded image.
            </summary>
      <param name="stream"> A stream containing the encoded image data. </param>
      <param name="frameIndex"> The zero based frame index to load from an animated GIF. </param>
      <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.GifDecoder.SupportedImageType">
      <summary> Returns a Gif ImageType enumeration value. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.GifEncoder">
      <summary>
        <para>An <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder" /> that will write Compuserve Graphics Interchange (GIF) images to a
            <see cref="T:System.IO.Stream" />.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.GifEncoder.#ctor">
      <summary> Initializes a new instance of a %GifEncoder%. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.GifEncoder.#ctor(System.Boolean)">
      <summary> Initializes a new instance of a %BmpEncoder% specifying the interlace setting. </summary>
      <param name="interlace"> A value indicating if the image is saved with a pixel row interlacing pattern. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.GifEncoder.#ctor(System.Boolean,System.Boolean)">
      <summary> Creates a new instance of GifEncoder specifying whether to interlace the image and optimize color depth.
            </summary>
      <param name="interlace"> A value indicating if the image is saved with a pixel row
            interlacing pattern. </param>
      <param name="optimizeColorDepth"> A value indicating whether to optimize the color depth. </param>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.GifEncoder.BackgroundIndex">
      <summary> Gets or sets the background index to store in the GIF file. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.GifEncoder.Interlace">
      <summary> Gets or sets a value indicating if the image is saved with a pixel row interlacing pattern.  Default
            <STRONG>false</STRONG></summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.GifEncoder.OptimizeColorDepth">
      <summary> Gets or sets a value indicating if the bitdepth is optimized based on the number of colors in the palette.
            Default <STRONG>true</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.GifEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Encode an <see cref="T:Atalasoft.Imaging.AtalaImage" /> as a Gif image to a stream. </summary>
      <param name="stream"> A stream that the encoded image data will be saved to. </param>
      <param name="image"> The <see cref="T:Atalasoft.Imaging.AtalaImage" /> to encode. </param>
      <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.GifEncoder.Save(System.IO.Stream,Atalasoft.Imaging.Codec.GifFrameCollection,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Saves an animated GIF image. </summary>
      <param name="stream"> The stream to save the image into. </param>
      <param name="frameCollection"> The GifFrameCollection containing information about each frame in the animation.
            </param>
      <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.GifEncoder.SupportedPixelFormats">
      <summary> Returns an array of pixel formats supported by this encoder. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.GifFrame">
      <summary> The GifFrame class holds information about a single frame in an animated GIF file. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.GifFrame.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Codec.GifFrame" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.GifFrame.#ctor(Atalasoft.Imaging.AtalaImage)">
      <summary> Creates a new instance of GifFrame specifying the frame image. </summary>
      <param name="image"> The image for this frame. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.GifFrame.#ctor(Atalasoft.Imaging.AtalaImage,System.Drawing.Point)">
      <summary> Creates a new instance of GifFrame specifying the frame image and location. </summary>
      <param name="image"> The image for this frame. </param>
      <param name="location"> The location to render the image on the animated canvas. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.GifFrame.#ctor(Atalasoft.Imaging.AtalaImage,System.Drawing.Point,System.Int32)">
      <summary> Creates a new instance of GifFrame specifying the frame image, location and delay time. </summary>
      <param name="image"> The image for this frame. </param>
      <param name="location"> The location to render the image on the animated canvas. </param>
      <param name="delayTime"> The number of milliseconds this frame should be displayed. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.GifFrame.#ctor(Atalasoft.Imaging.AtalaImage,System.Drawing.Point,System.Int32,System.Boolean,Atalasoft.Imaging.Codec.GifFrameDisposal,System.Int32,System.Boolean)">
      <summary> Creates a new instance of GifFrame specifying the frame image, location, delay time, interlaced, frame
            disposal, transparent index and local palette settings. </summary>
      <param name="image"> The image for this frame. </param>
      <param name="location"> The location to render the image on the animated canvas. </param>
      <param name="delayTime"> The number of milliseconds this frame should be displayed. </param>
      <param name="interlaced"> A value indicating whether the image is interlaced. </param>
      <param name="frameDisposal"> The method of frame disposal to use before rendering the next frame. </param>
      <param name="transparentIndex"> The transparent index for this image. </param>
      <param name="useLocalPalette"> A value indicating whether this image uses the global palette or it's own palette.
            </param>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.GifFrame.DelayTime">
      <summary> Gets or sets the number of milliseconds this frame should be displayed. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.GifFrame.Dispose">
      <summary>Releases all resources used by the <see cref="T:Atalasoft.Imaging.Codec.GifFrame" /></summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.GifFrame.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:Atalasoft.Imaging.Codec.GifFrame" /> and optionally releases the managed resources</summary>
      <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources</param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.GifFrame.Finalize"></member>
    <member name="P:Atalasoft.Imaging.Codec.GifFrame.FrameDisposal">
      <summary> Gets or sets the method of frame disposal to use before rendering the next frame. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.GifFrame.Image">
      <summary> Gets or sets the image for this frame. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.GifFrame.Interlaced">
      <summary> Gets or sets a value indicating whether the image is interlaced. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.GifFrame.Location">
      <summary> Gets or sets the location to render the image on the animated canvas. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.GifFrame.TransparentIndex">
      <summary> Gets or sets the transparent index for this image. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.GifFrame.UseLocalPalette">
      <summary> Gets or sets a value indicating whether this image uses the global palette or it's own palette. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.GifFrameCollection">
      <summary>
        <para>The GifFrameCollection class represents an animated GIF file.  It contains all of the frames and
            properties for the animation. </para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.GifFrameCollection.#ctor">
      <summary> Creates a new instance of GifFrameCollection. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.GifFrameCollection.Add(Atalasoft.Imaging.Codec.GifFrame)">
      <summary> Adds a frame to the collection. </summary>
      <param name="frame"> The GifFrame to add. </param>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.GifFrameCollection.BackgroundColorIndex">
      <summary> Gets or sets the index in the global palette used as the background color for the animation canvas.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.GifFrameCollection.Contains(Atalasoft.Imaging.Codec.GifFrame)">
      <summary> Checks to see if a specific frame already exists in the collection. </summary>
      <param name="frame"> The GifFrame to look for. </param>
      <returns> True if the frame exists. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.GifFrameCollection.CopyTo(Atalasoft.Imaging.Codec.GifFrame[],System.Int32)">
      <summary> Copies the GifFrames into an array. </summary>
      <param name="frames"> An array of GifFrame in which the collection will be copied. </param>
      <param name="index"> The index in the frames array to begin copying to. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.GifFrameCollection.Dispose">
      <summary> Releases all of the frames from the collection. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.GifFrameCollection.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:Atalasoft.Imaging.Codec.GifFrameCollection" /> and optionally releases the managed resources</summary>
      <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources</param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.GifFrameCollection.Finalize"></member>
    <member name="P:Atalasoft.Imaging.Codec.GifFrameCollection.GlobalPalette">
      <summary> Gets or sets the palette used by frames in the GIF. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.GifFrameCollection.Height">
      <summary> Gets or sets the height of the animation canvas. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.GifFrameCollection.IndexOf(Atalasoft.Imaging.Codec.GifFrame)">
      <summary> Looks up the index for a specific frame. </summary>
      <param name="frame"> The GifFrame to look for. </param>
      <returns> The index of the frame. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.GifFrameCollection.Insert(System.Int32,Atalasoft.Imaging.Codec.GifFrame)">
      <summary> Inserts a frame into the collection at the specified position. </summary>
      <param name="index"> The index position which the frame should be placed. </param>
      <param name="frame"> The GifFrame to insert. </param>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.GifFrameCollection.Item(System.Int32)">
      <summary> Gets a GifFrame at the specified index. </summary>
      <param name="index"> The index of the GifFrame to retrieve. </param>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.GifFrameCollection.LoopCount">
      <summary> Gets or sets the number of times to loop through the animation. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.GifFrameCollection.Remove(Atalasoft.Imaging.Codec.GifFrame)">
      <summary> Removes a frame from the collection. </summary>
      <param name="frame"> The GifFrame to remove. </param>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.GifFrameCollection.TransparentIndex">
      <summary> Gets or sets the index in the global palette which represents the transparent color. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.GifFrameCollection.Width">
      <summary> Gets or sets the width of the animation canvas. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.GifFrameDisposal">
      <summary> The frame disposal method to use for animated GIF images. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.GifFrameDisposal.None">
      <summary> No action is taken. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.GifFrameDisposal.LeaveImage">
      <summary> Leaves the image in place when the next frame is drawn. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.GifFrameDisposal.RestorePrevious">
      <summary> Restores the previous frame. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.GifFrameDisposal.RestoreBackgroundColor">
      <summary> Restores the area occupied by the image with the animation background color. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.GifImageInfo">
      <summary> Summary description for PngImageInfo. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.GifImageInfo.#ctor">
      <summary> Initializes a new instance of %GifImageInfo%. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.GifImageInfo.#ctor(System.Drawing.Size,System.Int32,Atalasoft.Imaging.Codec.ImageType,Atalasoft.Imaging.Dpi,Atalasoft.Imaging.PixelFormat,System.Int32)">
      <summary> Initialize a new instance of %GifImageInfo% specifying it's properties. </summary>
      <param name="size"> The width and height of the image. </param>
      <param name="colorDepth"> The bits per pixel of the image. </param>
      <param name="imageType"> The image type. </param>
      <param name="resolution"> The image resolution, usually expressed in dots per inch. </param>
      <param name="pixelFormat"> The <STRONG>PixelFormat</STRONG> which will be returned when the image is read. </param>
      <param name="transIndex"> The transparent pixel index. </param>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.GifImageInfo.BackgroundIndex">
      <summary> Gets the background index in the GIF file. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.GifImageInfo.DelayTime">
      <summary> Gets or sets the amount of time to display this frame in milliseconds. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.GifImageInfo.FrameDisposal">
      <summary> Gets or sets the frame disposal method to use for this frame. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.GifImageInfo.Interlaced">
      <summary> Gets a value indicating if the GIF is interlaced. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.GifImageInfo.LeftOffset">
      <summary> Gets or sets the pixel offset from the left side of the animated screen area. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.GifImageInfo.TopOffset">
      <summary> Gets or sets the pixel offset from the top of the animated screen area. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.GifImageInfo.TransparentIndex">
      <summary> Gets the transparent index of the Gif. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.IAnnotationEncoder">
      <summary>
            Used with encoders that support saving XMP data.
            </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.IAppendable">
      <summary>
        <para>An interface that an <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder" /> can implement when it supports appending an image to the end of
            an existing file.</para>
      </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.IAppendable.Append">
      <summary> Gets or sets a value indicating if the image will be appended to the end of a file. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.ImageDecoder">
      <summary> An <STRONG>abstract</STRONG> (<STRONG>MustInherit</STRONG> in Visual Basic) base class that defines a file
            format decoder to read an image from a Stream.  All image decoders used in dotImage must inherit this class.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.ImageDecoder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Codec.ImageDecoder" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.ImageDecoder.GetImageInfo(System.IO.Stream)">
      <summary> Retreive information from an image stored in a file without decoding the image data. </summary>
      <param name="stream"> A stream containing the encoded image data. </param>
      <returns> An <see cref="T:Atalasoft.Imaging.Codec.ImageInfo" /> object containing information about the image such as size and bitdepth. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.ImageDecoder.IsValidFormat(System.IO.Stream)">
      <summary> Checks the stream to determine if the image can be read by the decoder that derives this class. </summary>
      <param name="stream"> A stream containing the encoded image data. </param>
      <returns>
        <STRONG>True </STRONG>if the encoded image can be read by this decoder, otherwise <STRONG>false</STRONG>.
            </returns>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.ImageDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Decode an image in a specified image <STRONG>Stream</STRONG>. </summary>
      <param name="stream"> A stream containing the encoded image data. </param>
      <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
      <returns> An <STRONG>AtalaImage</STRONG> containing the decoded image. </returns>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.ImageDecoder.SupportedImageType">
      <summary> Returns the <see cref="T:Atalasoft.Imaging.Codec.ImageType" /> that the implemented decoder class supports. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.ImageEncoder">
      <summary> An <STRONG>abstract</STRONG> (<STRONG>MustInherit</STRONG> in Visual Basic) base class that defines a file
            format encoder to save an image to a file.  All image encoders used in dotImage must inherit this class. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.ImageEncoder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.ImageEncoder.IsPixelFormatSupported(Atalasoft.Imaging.PixelFormat)">
      <summary> Returns true if the given PixelFormat can be encoded with the derived encoder. </summary>
      <param name="format"> The PixelFormat </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.ImageEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Save an image using this encoder. </summary>
      <param name="stream"> A stream containing the file which the image will be encoded to. </param>
      <param name="image"> The image to save. </param>
      <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
      <returns> The number of bytes written to the file. </returns>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.ImageEncoder.SupportedPixelFormats">
      <summary> Returns an array of pixel formats supported by this encoder. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.ImageInfo">
      <summary> Contains information from an encoded image file. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.ImageInfo.#ctor(System.Drawing.Size,System.Int32,Atalasoft.Imaging.Codec.ImageType,Atalasoft.Imaging.Dpi,Atalasoft.Imaging.PixelFormat)">
      <summary> Initialize a new instance of <see cref="T:Atalasoft.Imaging.Codec.ImageInfo" /> specifying its properties. </summary>
      <param name="size"> The width and height of the image. </param>
      <param name="colorDepth"> The bits per pixel of the image. </param>
      <param name="imageType"> The image type. </param>
      <param name="resolution"> The image resolution, usually expressed in dots per inch. </param>
      <param name="pixelFormat"> The <STRONG>PixelFormat</STRONG> which will be returned when the image is read. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.ImageInfo.#ctor(System.Drawing.Size,System.Int32,Atalasoft.Imaging.Codec.ImageType,Atalasoft.Imaging.Dpi,Atalasoft.Imaging.PixelFormat,System.Int32)">
      <summary> Initialize a new instance of ImageInfo specifying its properties for a multi-frame image. </summary>
      <param name="size"> The width and height of the image. </param>
      <param name="colorDepth"> The bits per pixel of the image. </param>
      <param name="imageType"> The image type. </param>
      <param name="resolution"> The image resolution, usually expressed in dots per inch. </param>
      <param name="pixelFormat"> The <STRONG>PixelFormat</STRONG> which will be returned when the image is read. </param>
      <param name="frameCount">
        <para>The number of frames in the image.</para>
      </param>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.ImageInfo.ColorDepth">
      <summary> Gets the bits per pixel of the image. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.ImageInfo.FrameCount">
      <summary> Gets the number of frames in the image. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.ImageInfo.ImageType">
      <summary> Gets the image type. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.ImageInfo.PixelFormat">
      <summary> Gets the <strong>PixelFormat</strong> which will be returned when the image is read. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.ImageInfo.Resolution">
      <summary> Gets the image resolution, usually expressed in dots per inch. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.ImageInfo.Size">
      <summary> Gets the width and height of the image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.ImageInfo.ToString"></member>
    <member name="T:Atalasoft.Imaging.Codec.ImageReadException">
      <summary> This exception is thrown when there is a problem reading an image </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.ImageReadException.#ctor">
      <summary> Creates a new instance of ImageReadException. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.ImageReadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Codec.ImageReadException" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.ImageReadException.#ctor(System.String)">
      <summary> Creates a new instance of ImageReadException specifying the exception message. </summary>
      <param name="message"> The exception message. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.ImageReadException.#ctor(System.String,System.Exception)">
      <summary> Creates a new instance of ImageReadException specifying the exception message and inner exception.
            </summary>
      <param name="message"> The exception message. </param>
      <param name="innerException"> The inner exception for this error. </param>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.ImageType">
      <summary> The supported image file formats that dotImage can either read or write. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.ImageType.Unknown">
      <summary> Image file format is undefined </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.ImageType.Jpeg">
      <summary> Joint Photographic Experts Group. Uses lossy compression commonly used for Photographic type images. Read
            and Write. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.ImageType.Png">
      <summary> Portable Network Graphic supporting lossless compression. Read and Write. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.ImageType.Tiff">
      <summary> Tagged Image File. This is a universal and well known format for many uses inluding FAX and multipaged
            images. Read and Write. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.ImageType.Pcx">
      <summary> ZSoft PaintBrush. Read and Write. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.ImageType.Tga">
      <summary> Truevision Targa. May include an alpha channel. Read and Write. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.ImageType.Bmp">
      <summary> Windows Bitmap. Read and Write. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.ImageType.Wmf">
      <summary> Windows Meta File. Read and Write (raster only). </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.ImageType.Emf">
      <summary> Enhanced Windows Meta File. Read and Write (raster only). </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.ImageType.Psd">
      <summary> Adobe (tm) Photoshop format. Read and Write (flattened image only). </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.ImageType.Wbmp">
      <summary> Wireless Bitmap. Black and White format used with portable devices. Read and Write </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.ImageType.Gif">
      <summary> Graphics Interchange Format (LZW license required). Read and Write. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.ImageType.Tla">
      <summary> A lossless compressed image format similar to PNG with optional encryption. It can store 32, 24, 16, or
            8-bit data. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.ImageType.Pcd">
      <summary> Kodak (tm) PhotoCD. Read only. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.ImageType.J2k">
      <summary> Jpeg2000. Separate Plug-In requred to read and write. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.ImageWriteException">
      <summary> This exception is thrown when there is a problem writing an image </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.ImageWriteException.#ctor">
      <summary> Creates a new instance of ImageWriteException. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.ImageWriteException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Codec.ImageWriteException" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.ImageWriteException.#ctor(System.String)">
      <summary> Creates a new instance of ImageWriteException specifying the exception message. </summary>
      <param name="message"> The exception message. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.ImageWriteException.#ctor(System.String,System.Exception)">
      <summary> Creates a new instance of ImageWriteException specifying the exception message and inner exception.
            </summary>
      <param name="message"> The exception message. </param>
      <param name="innerException"> The inner exception for this error. </param>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.IMultiFramedVectorDecoder"></member>
    <member name="M:Atalasoft.Imaging.Codec.IMultiFramedVectorDecoder.RasterizeScaledRegion(System.IO.Stream,System.Int32,System.Drawing.RectangleF,System.Drawing.SizeF,Atalasoft.Imaging.ProgressEventHandler)"></member>
    <member name="T:Atalasoft.Imaging.Codec.IRegionReadable">
      <summary> This interface is applied to ImageDecoders to enable them to read a specified region of the image without
            decoding the entire image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.IRegionReadable.ReadRegion(System.IO.Stream,System.Drawing.Rectangle,System.Int32,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Decodes the specified region and returns an AtalaImage object representing the image data. </summary>
      <param name="stream"> The encoded image stream. </param>
      <param name="region"> The rectangular image to read. </param>
      <param name="frameIndex"> The zero based frame index if the image supports multiple frames. </param>
      <param name="progress"> Progress Delegate </param>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.IScaledDecoder">
      <summary> This interface is applied to ImageDecoders that have the ability to decode an image stream to a specified
            scale. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.IScaledDecoder.GetBestScale(System.IO.Stream,System.Int32,System.Double)">
      <summary> If the codec can efficiently generate a scaled image without actually resampling, this will return the
            closest scale given an input scale factor. </summary>
      <param name="stream"> The encoded image stream </param>
      <param name="frameIndex"> The zero based frame index if the source image is multiframed </param>
      <param name="requestedScale"> The scale to request </param>
      <returns> The closest stored scale greater than or equal to the requested scale. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.IScaledDecoder.ReadScaled(System.IO.Stream,System.Int32,System.Double,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Decodes an image to a specified scale. </summary>
      <param name="stream"> The encoded image </param>
      <param name="frameIndex"> The zero based frame index if the source image is multiframed </param>
      <param name="scaleFactor"> The scale factor to request (ie. 0.5 is 1/2 scale, 1 is full scale) </param>
      <param name="progress"> The progress callback </param>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.IVectorDecoder"></member>
    <member name="M:Atalasoft.Imaging.Codec.IVectorDecoder.RasterizeScaledRegion(System.IO.Stream,System.Drawing.RectangleF,System.Drawing.SizeF,Atalasoft.Imaging.ProgressEventHandler)"></member>
    <member name="T:Atalasoft.Imaging.Codec.JpegDctMode">
      <summary> The DCT compression used when saving a JPEG image. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.JpegDctMode.Default">
      <summary> The default compression; usually <STRONG>Slow</STRONG>. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.JpegDctMode.Slow">
      <summary> Slow but accurate integer algorithm. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.JpegDctMode.Fast">
      <summary> Faster, less accurate integer method. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.JpegDctMode.FloatingPoint">
      <summary> Floating-point method. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.JpegDecoder">
      <summary>
        <para>An <see cref="T:Atalasoft.Imaging.Codec.ImageDecoder" /> used to read JPEG images from a <see cref="T:System.IO.Stream" />.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.JpegDecoder.#ctor">
      <summary> Initializes a new instance of a <see cref="T:Atalasoft.Imaging.Codec.JpegDecoder" />. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.JpegDecoder.#ctor(Atalasoft.Imaging.Codec.JpegScaleFactor)">
      <summary> Initializes a new instance of a <see cref="T:Atalasoft.Imaging.Codec.JpegDecoder" /> specifying the Jpeg scaling factor. </summary>
      <param name="scaleFactor"> The Jpeg scaling factor to use when reading the image. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.JpegDecoder.GetBestScale(System.IO.Stream,System.Int32,System.Double)">
      <summary> Gets the best scale given a requested scale factor.  For a JPEG, this would result in either 1, 1/2, 1/4,
            1/16, or 1/32 </summary>
      <param name="stream"> The encoded image stream </param>
      <param name="frameIndex"> not used for JPEG's </param>
      <param name="requestedScale"> The scale to request </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.JpegDecoder.GetImageInfo(System.IO.Stream)">
      <summary> Retreive information from a Jpeg image stored in a Stream without decoding the image data. </summary>
      <param name="stream"> A stream containing the encoded image data. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.JpegDecoder.IsValidFormat(System.IO.Stream)">
      <summary>
        <para>Returns true if the specified Stream contains a Jpeg image.</para>
      </summary>
      <param name="stream"> A stream containing the encoded image data. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.JpegDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Returns an <see cref="T:Atalasoft.Imaging.AtalaImage" /> from a Stream containing a Jpeg encoded image. </summary>
      <param name="stream"> A stream containing the encoded image data. </param>
      <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.JpegDecoder.ReadScaled(System.IO.Stream,System.Int32,System.Double,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Gets an AtalaImage of the requested scale. </summary>
      <param name="stream"> The encoded image </param>
      <param name="frameIndex"> Not used for JPEG's </param>
      <param name="scaleFactor"> The scale factor </param>
      <param name="progress"> A progress delegate </param>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.JpegDecoder.ScaleFactor">
      <summary> Gets or sets a value indicating the scale factor to use when reading Jpeg's. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.JpegDecoder.SupportedImageType">
      <summary> Returns a Jpeg ImageType enumeration value. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.JpegEncoder">
      <summary>
        <para>An <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder" /> that will write JPEG images to a <see cref="T:System.IO.Stream" />.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.JpegEncoder.#ctor">
      <summary> Initializes a new instance of a <strong>JpegEncoder</strong>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.JpegEncoder.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of <see cref="!:JpegEncoderSettings" /> specifying the quality.
            </summary>
      <param name="quality">The quality level.</param>
      <param name="quality"> The quality level. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.JpegEncoder.#ctor(System.Int32,System.Int32)">
      <summary> Initializes a new instance of a <see cref="T:Atalasoft.Imaging.Codec.JpegEncoder" /> specifying the quality and smoothing. </summary>
      <param name="quality"> The quality level. </param>
      <param name="smoothing"> The smoothing level. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.JpegEncoder.#ctor(System.Int32,System.Int32,System.Boolean)">
      <summary> Initializes a new instance of a <see cref="T:Atalasoft.Imaging.Codec.JpegEncoder" /> specifying the quality, smoothing, and progressive value.
            </summary>
      <param name="quality"> The quality level. </param>
      <param name="smoothing"> The smoothing level. </param>
      <param name="progressive"> A value indicating if the image is saved progressively. </param>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.JpegEncoder.AppMarkers">
      <summary> Gets or sets the JPEG APPn Markers that will be saved with the image. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.JpegEncoder.ComText">
      <summary> Gets or sets COM Text Markers that are to be saved with the image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.JpegEncoder.CopyJpegWithNewMarkers(System.IO.Stream,System.IO.Stream)">
      <summary> Performs a lossless copy of the JPEG image data into a new image while replacing the JPEG metadata with
            new metadata. </summary>
      <param name="source"> The source image stream to copy from. </param>
      <param name="dest"> The destintation image stream to copy to. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.JpegEncoder.CopyJpegWithNewMarkers(System.IO.Stream,System.IO.Stream,Atalasoft.Imaging.Metadata.JpegMarkerCopyFlags)">
      <summary> These methods perform a lossless copy of the JPEG image data into a new image while replacing the JPEG
            metadata with new metadata. </summary>
      <param name="source"> The source image stream to copy from. </param>
      <param name="dest"> The destintation image stream to copy to. </param>
      <param name="flags"> Specifies the metadata to copy into the new image. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.JpegEncoder.CopyJpegWithNewMarkers(System.String,System.String)">
      <summary> These methods perform a lossless copy of the JPEG image data into a new image while replacing the JPEG
            metadata with new metadata. </summary>
      <param name="source"> The source image filename to copy from. </param>
      <param name="dest"> The destintation image filename to copy to. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.JpegEncoder.CopyJpegWithNewMarkers(System.String,System.String,Atalasoft.Imaging.Metadata.JpegMarkerCopyFlags)">
      <summary> These methods perform a lossless copy of the JPEG image data into a new image while replacing the JPEG
            metadata with new metadata. </summary>
      <param name="source"> The source image filename to copy from. </param>
      <param name="dest"> The destintation image filename to copy to. </param>
      <param name="flags"> Specifies the metadata to copy into the new image. </param>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.JpegEncoder.DctMode">
      <summary> Gets or sets the DCT compression mode used for encoding. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.JpegEncoder.ImageType">
      <summary> Get the <STRONG>ImageType</STRONG> associated with this Encoder Setting. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.JpegEncoder.IptcTags">
      <summary> Gets or sets IPTC Metadata that will be saved with the image. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.JpegEncoder.PhotoshopResources">
      <summary> Gets or sets Photoshop resources to be saved with the image. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.JpegEncoder.Progressive">
      <summary> Gets or sets a value indicating if the image is saved progressively. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.JpegEncoder.Quality">
      <summary> Gets or sets the quality level of the Jpeg as it's encoded to a file.  Valid values are 1 - 100 with a
            default of 75. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.JpegEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Encode an <see cref="T:Atalasoft.Imaging.AtalaImage" /> as a Jpeg image to a stream. </summary>
      <param name="stream"> A stream that the encoded image data will be saved to. </param>
      <param name="image"> The <see cref="T:Atalasoft.Imaging.AtalaImage" /> to encode. </param>
      <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.JpegEncoder.SetDownsamplingFactors(System.Int32[],System.Int32[])">
      <summary> Sets the downsampling factors used when compressing the image data.  This will affect both quality and
            file size of the saved image. </summary>
      <param name="horizontalFactors"> An array of horizontal factors used.  This can be <STRONG>null</STRONG>
            (<STRONG>Nothing</STRONG> in VB) to use the default settings.  See remarks below for more information. </param>
      <param name="verticalFactors"> An array of vertical factors used.  This can be <STRONG>null</STRONG>
            (<STRONG>Nothing</STRONG> in VB) to use the default settings.  See remarks below for more information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.JpegEncoder.Smoothing">
      <summary> Gets or sets the smoothing level when saving a Jpeg image. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.JpegEncoder.SupportedPixelFormats">
      <summary> Returns an array of pixel formats supported by this encoder. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.JpegEncoder.Xmp">
      <summary> Gets or sets a byte array containing XMP data. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.JpegImageInfo">
      <summary> Summary description for JpegImageInfo. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.JpegImageInfo.#ctor">
      <summary> Initialize a new instance of a %JpegImageInfo%. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.JpegImageInfo.#ctor(System.Drawing.Size,System.Int32,Atalasoft.Imaging.Codec.ImageType,Atalasoft.Imaging.Dpi,Atalasoft.Imaging.PixelFormat,System.Boolean,System.Boolean)">
      <summary> Initialize a new instance of a <see cref="T:Atalasoft.Imaging.Codec.JpegImageInfo" /> specifying it's properties. </summary>
      <param name="size"> The width and height of the image. </param>
      <param name="colorDepth"> The bits per pixel of the image. </param>
      <param name="imageType"> The image type. </param>
      <param name="resolution"> The image resolution, usually expressed in dots per inch. </param>
      <param name="pixelFormat"> The <STRONG>PixelFormat</STRONG> which will be returned when the image is read. </param>
      <param name="progressive"> A value indicating if the Jpeg is encoded progressively. </param>
      <param name="arithmetic"> A value indicating if the Jpeg is encoded with arithmetic compression. </param>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.JpegImageInfo.Arithmetic">
      <summary> Gets a value indicating if the Jpeg is encoded with arithmetic compression. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.JpegImageInfo.Progressive">
      <summary> Gets a value indicating if the Jpeg is encoded progressively. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.JpegScaleFactor">
      <summary> The scaling factor to use when reading a Jpeg image. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.JpegScaleFactor.Full">
      <summary> The full encoded size. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.JpegScaleFactor.Half">
      <summary> 1/2 the encoded size. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.JpegScaleFactor.Quarter">
      <summary> 1/4 the encoded size. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.JpegScaleFactor.Eighth">
      <summary>
        <para>1/8 the encoded size.</para>
      </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.LzwNotLicensedException">
      <summary> This exception is fired when LZW is not licensed yet an attempt is made to use LZW functionality.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.LzwNotLicensedException.#ctor">
      <summary> Creates a new instance of LzwNotLicensedException. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.LzwNotLicensedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Codec.LzwNotLicensedException" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.LzwNotLicensedException.#ctor(System.String)">
      <summary> Creates a new instance of LzwNotLicensedException specifying the exception message. </summary>
      <param name="message"> The exception message. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.LzwNotLicensedException.#ctor(System.String,System.Exception)">
      <summary> Creates a new instance of LzwNotLicensedException specifying the exception message and inner exception.
            </summary>
      <param name="message"> The exception message. </param>
      <param name="innerException"> The inner exception for this error. </param>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.MultiFramedImageDecoder">
      <summary> A decoder for multiframed images such as multiple page TIFF's and animiated GIF's. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.MultiFramedImageDecoder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Codec.MultiFramedImageDecoder" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.MultiFramedImageDecoder.GetFrameCount(System.IO.Stream)">
      <summary> Returns the number of frames in the image </summary>
      <param name="stream"> The input Stream. </param>
      <returns> The number of frames in the image </returns>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.MultiFramedImageDecoder.GetImageInfo(System.IO.Stream,System.Int32)">
      <param name="stream"> The input Stream. </param>
      <param name="frameIndex"> The zero based frame index. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.MultiFramedImageDecoder.Read(System.IO.Stream,System.Int32,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Read a given frame in an encoded image using this decoder. </summary>
      <param name="stream"> The input Stream. </param>
      <param name="frameIndex"> The zero based frame index. </param>
      <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.MultiFramedImageEncoder">
      <summary> An encoder for multiframed formats such as PDF and animated GIF's. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.MultiFramedImageEncoder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Codec.MultiFramedImageEncoder" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.MultiFramedImageEncoder.OnSetEncoderCompression(System.Object,Atalasoft.Imaging.Codec.EncoderCompressionEventArgs)"></member>
    <member name="M:Atalasoft.Imaging.Codec.MultiFramedImageEncoder.Save(System.IO.Stream,Atalasoft.Imaging.ImageCollection,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Saves the image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.MultiFramedImageEncoder.Save(System.IO.Stream,Atalasoft.Imaging.ImageSource,Atalasoft.Imaging.ProgressEventHandler)"></member>
    <member name="E:Atalasoft.Imaging.Codec.MultiFramedImageEncoder.SetEncoderCompression"></member>
    <member name="T:Atalasoft.Imaging.Codec.PcdDecoder">
      <summary>
        <para>An <see cref="T:Atalasoft.Imaging.Codec.ImageDecoder" /> used to read Kodak Photo CD (PCD) images from a <see cref="T:System.IO.Stream" />.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.PcdDecoder.#ctor">
      <summary> Initializes a new instance of a %PcdDecoder%. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.PcdDecoder.#ctor(Atalasoft.Imaging.Codec.PcdResolution)">
      <summary> Initializes a new instance of a <see cref="T:Atalasoft.Imaging.Codec.PcdDecoder" /> specifying a resolution. </summary>
      <param name="resolution">
        <para>Sets the resolution to read in a PhotoCD image.</para>
      </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.PcdDecoder.GetImageInfo(System.IO.Stream)">
      <summary> Retreive information from a PhotoCD image stored in a Stream without decoding the image data. </summary>
      <param name="stream"> A stream containing the encoded image data. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.PcdDecoder.IsValidFormat(System.IO.Stream)">
      <summary>
        <para>Returns true if the specified Stream contains a PhotoCD image.</para>
      </summary>
      <param name="stream"> The input Stream. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.PcdDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Returns an <see cref="T:Atalasoft.Imaging.AtalaImage" /> from a Stream containing a PhotoCD encoded image. </summary>
      <param name="stream"> A stream containing the encoded image data. </param>
      <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.PcdDecoder.Resolution">
      <summary>
        <para>Gets or sets the resolution to read in a PhotoCD image.</para>
      </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.PcdDecoder.SupportedImageType">
      <summary> Returns a PhotoCD ImageType enumeration value. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.PcdResolution">
      <summary> PhotoCD Resolution (image size) to load. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.PcdResolution.BaseQuarter">
      <summary> 1/4 the size and 1/16 the memory of the base image. <I>192 x 128 pixels</I></summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.PcdResolution.BaseHalf">
      <summary> 1/2 the size and 1/4 the memory of the base image. <I>384 x 256 pixels</I></summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.PcdResolution.Base">
      <summary> The base size of the PCD image. <I>768 x 512 pixels</I></summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.PcdResolution.BaseX2">
      <summary> Double the size and 4 times the memory of the base image. <I>1536 x 1024 pixels</I></summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.PcdResolution.BaseX4">
      <summary> 4 times the size and 16 times the memory of the base image. <I>3072 x 2048 pixels</I></summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.PcdResolution.BaseX8">
      <summary> 8 times the size and 64 times the memory of the base image. <I>6144 x 4096 pixels</I></summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.PcxDecoder">
      <summary>
        <para>An <see cref="T:Atalasoft.Imaging.Codec.ImageDecoder" /> used to read Zsoft Paintbrush (PCX) images from a %System.IO.Stream%.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.PcxDecoder.#ctor">
      <summary> Initializes a new instance of a <see cref="T:Atalasoft.Imaging.Codec.PcxDecoder" />. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.PcxDecoder.GetImageInfo(System.IO.Stream)">
      <summary> Retreive information from a Pcx image stored in a Stream without decoding the image data. </summary>
      <param name="stream"> A stream containing the encoded image data. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.PcxDecoder.IsValidFormat(System.IO.Stream)">
      <summary>
        <para>Returns true if the specified Stream contains a Pcx image.</para>
      </summary>
      <param name="stream"> A stream containing the encoded image data. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.PcxDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Returns an <see cref="T:Atalasoft.Imaging.AtalaImage" /> from a Stream containing a Pcx encoded image. </summary>
      <param name="stream"> The stream containing the image data. </param>
      <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.PcxDecoder.SupportedImageType">
      <summary> Returns a Pcx ImageType enumeration value. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.PcxEncoder">
      <summary>
        <para>An <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder" /> that will write ZSoft Paintbrush (PCX) images to a %System.IO.Stream%.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.PcxEncoder.#ctor">
      <summary> Initializes a new instance of a %PcxEncoder%. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.PcxEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Encode an %AtalaImage% as a Pcx image to a stream. </summary>
      <param name="stream"> A stream that the encoded image data will be saved to. </param>
      <param name="image"> The <see cref="T:Atalasoft.Imaging.AtalaImage" /> to encode. </param>
      <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.PcxEncoder.SupportedPixelFormats">
      <summary> Returns an array of pixel formats supported by this encoder. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.PngDecoder">
      <summary>
        <para>An <see cref="T:Atalasoft.Imaging.Codec.ImageDecoder" /> used to read Portable Network Graphics (PNG) images from a
            <see cref="T:System.IO.Stream" />.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.PngDecoder.#ctor">
      <summary> Initializes a new instance of a <see cref="T:Atalasoft.Imaging.Codec.PngDecoder" />. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.PngDecoder.#ctor(System.Double)">
      <summary> Initializes a new instance of a <see cref="T:Atalasoft.Imaging.Codec.PcdDecoder" /> with a specified screen gamma. </summary>
      <param name="screenGamma"> The screen gamma value that will be used to adjust the colors of a PNG image when read if
            the image contains gamma. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.PngDecoder.GetImageInfo(System.IO.Stream)">
      <summary> Retreive information from a Png image stored in a Stream without decoding the image data. </summary>
      <param name="stream"> A stream containing the encoded image data. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.PngDecoder.IsValidFormat(System.IO.Stream)">
      <summary>
        <para>Returns true if the specified Stream contains an Png image.</para>
      </summary>
      <param name="stream"> A stream containing the encoded image data. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.PngDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Returns an <see cref="T:Atalasoft.Imaging.AtalaImage" /> from a Stream containing a Png encoded image. </summary>
      <param name="stream"> A stream containing the encoded image data. </param>
      <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.PngDecoder.ScreenGamma">
      <summary> Gets or sets the screen gamma value that will be used to adjust the colors of a PNG image when read if the
            image contains gamma. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.PngDecoder.SetAlphaFromTransparentColor">
      <summary> Indicates whether or not the PngDcoder should set the alpha channel in the image using the Png file's
            transparent color. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.PngDecoder.SupportedImageType">
      <summary> Returns a Png ImageType enumeration value. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.PngDecoder.TwoBytePerComponentSupport">
      <summary> Gets or sets a value indicating whether 16-bit per component images are read as 16 or 8-bit per component
            images. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.PngEncoder">
      <summary>
        <para>An <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder" /> that will write Portable Network Graphics (PNG) images to a
            <see cref="T:System.IO.Stream" />.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.PngEncoder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Codec.PngEncoder" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.PngEncoder.#ctor(Atalasoft.Imaging.Metadata.ComTextCollection)">
      <summary> Initializes a new instance of a <see cref="T:Atalasoft.Imaging.Codec.PngEncoder" /> specifying the COM Text metadata to save. </summary>
      <param name="comText"> The COM text metadata to save with the image. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.PngEncoder.#ctor(System.Drawing.Color,System.Double,System.Boolean,Atalasoft.Imaging.Metadata.ComTextCollection)">
      <summary> Initializes a new instance of a %PngEncoder% specifying the background color, gamma, interlace, and COM
            Text value to save. </summary>
      <param name="backgroundColor"> The color to use as the default background color for Png images with alpha. </param>
      <param name="gamma"> The gamma value to write to a PNG image. </param>
      <param name="interlaced"> The Png Interlace setting. </param>
      <param name="comText"> The COM text metadata to save with the image. </param>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.PngEncoder.BackgroundColor">
      <summary> Gets or sets the color to use as the default background color for Png images with alpha. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.PngEncoder.BackgroundIndex">
      <summary> Gets or sets the palette index or grayscale value to use as the default background color for colormapped
            Png images with alpha. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.PngEncoder.ComText">
      <summary> Gets or sets the COM text metadata to save with the image. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.PngEncoder.Gamma">
      <summary> Gets or sets the gamma value to write to a PNG image. 0 will not write any value, 2.2 is a typical value
            for PC's. Default 0. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.PngEncoder.Interlace">
      <summary> Gets or sets whether Png files are saved with a pixel row interlacing pattern. <I>Defaults
            <B>False</B></I>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.PngEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Encode an %AtalaImage% as a Png image to a stream. </summary>
      <param name="stream"> A stream that the encoded image data will be saved to. </param>
      <param name="image"> The <see cref="T:Atalasoft.Imaging.AtalaImage" /> to encode. </param>
      <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.PngEncoder.SupportedPixelFormats">
      <summary> Returns an array of pixel formats supported by this encoder. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.PngImageInfo">
      <summary>
            Summary description for PngImageInfo.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.PngImageInfo.#ctor">
      <summary> Initialize a new instance of a <see cref="T:Atalasoft.Imaging.Codec.PngImageInfo" />.</summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.PngImageInfo.#ctor(System.Drawing.Size,System.Int32,Atalasoft.Imaging.Codec.ImageType,Atalasoft.Imaging.Dpi,Atalasoft.Imaging.PixelFormat,System.Boolean)">
      <summary> Initialize a new instance of a %PngImageInfo% specifying it's properties. </summary>
      <param name="size"> The width and height of the image. </param>
      <param name="colorDepth"> The bits per pixel of the image. </param>
      <param name="imageType"> The image type. </param>
      <param name="resolution"> The image resolution, usually expressed in dots per inch. </param>
      <param name="pixelFormat"> The <STRONG>PixelFormat</STRONG> which will be returned when the image is read. </param>
      <param name="pngInterlaced"> A value indicating if the PNG is interlaced. </param>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.PngImageInfo.HasTransparentColor">
      <summary> Indicates that the image contains a transparency color. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.PngImageInfo.PngInterlaced">
      <summary> Gets a value indicating if the PNG is interlaced. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.PngImageInfo.TransparentColor">
      <summary> Gets or sets the transparent color for the PNG image. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.PnmDecoder">
      <summary>
        <para>An <see cref="T:Atalasoft.Imaging.Codec.ImageDecoder" /> used to read PNM/PBM/PGM/PPM images from a <see cref="T:System.IO.Stream" />.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.PnmDecoder.#ctor">
      <summary> Initializes an instance of the PnmDecoder. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.PnmDecoder.GetImageInfo(System.IO.Stream)">
      <summary> Gets image information from a PNM image given an encoded image stream. </summary>
      <param name="stream"> The encoded image stream </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.PnmDecoder.IsValidFormat(System.IO.Stream)">
      <summary> Returns true of the given stream is a PNM image. </summary>
      <param name="stream"> The encoded image stream </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.PnmDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Decodes a PNG image stream into an AtalaImage. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.PnmEncoder">
      <summary> Encodes an AtalaImage into a PNM image file. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.PnmEncoder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Codec.PnmEncoder" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.PnmEncoder.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Codec.PnmEncoder" /> class</summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.PnmEncoder.MaxValue"></member>
    <member name="M:Atalasoft.Imaging.Codec.PnmEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Method that encodes an AtalaImage into a PNM image file given an Atalaimage and stream. </summary>
      <param name="stream"> Stream to encode the image into </param>
      <param name="image">
        <para>AtalaImage to encode</para>
      </param>
      <param name="progress"> Progress delegate </param>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.PnmEncoder.SupportedPixelFormats">
      <summary> Returns an array of pixel formats supported by this encoder. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.PnmImageInfo">
      <summary> Information about a PNM Image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.PnmImageInfo.#ctor(System.Drawing.Size,System.Int32,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.Codec.PnmImageType,System.Int32)">
      <summary> Creates a new instance of PnmImageInfo. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.PnmImageInfo.Format">
      <summary> Gets the PNM Format. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.PnmImageInfo.MaxValue">
      <summary> Gets the maximum pixel value, as specified in the file. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.PnmImageType">
      <summary> The type of Pnm image </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.PnmImageType.PbmAscii">
      <summary> Blak and White image, ASCII encoded </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.PnmImageType.PbmBinary">
      <summary> Black and White image </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.PnmImageType.PgmAscii">
      <summary> Grayscale image, ASCII encoded </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.PnmImageType.Pgmbinary">
      <summary> Grayscale image </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.PnmImageType.PpmAscii">
      <summary> RGB image, ASCII encoded </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.PnmImageType.PpmBinary">
      <summary> RGB image </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.PsdDecoder">
      <summary>
        <para>An <see cref="T:Atalasoft.Imaging.Codec.ImageDecoder" /> used to read Adobe Photoshop (PSD) images from a <see cref="T:System.IO.Stream" />.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.PsdDecoder.#ctor">
      <summary> Initializes a new instance of a %PsdDecoder%. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.PsdDecoder.GetImageInfo(System.IO.Stream)">
      <summary> Retreive information from a Psd image stored in a Stream without decoding the image data. </summary>
      <param name="stream"> A stream containing the encoded image data. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.PsdDecoder.GetThumbnail(System.IO.Stream)">
      <summary> Gets the thumbnail image stored in the Photoshop Resource of the image. </summary>
      <param name="stream"> The PSD image stream. </param>
      <returns> An <STRONG>AtalaImage</STRONG> containing the thumbnail image. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.PsdDecoder.IsValidFormat(System.IO.Stream)">
      <summary>
        <para>Returns true if the specified Stream contains an Psd image.</para>
      </summary>
      <param name="stream"> A stream containing the encoded image data. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.PsdDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Returns an <see cref="T:Atalasoft.Imaging.AtalaImage" /> from a Stream containing a Psd encoded image. </summary>
      <param name="stream"> A stream containing the encoded image data. </param>
      <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.PsdDecoder.SupportedImageType">
      <summary> Gets a Psd ImageType enumeration value. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.PsdEncoder">
      <summary>
        <para>An <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder" /> that will write Adobe Photoshop (PSD) images to a <see cref="T:System.IO.Stream" />.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.PsdEncoder.#ctor">
      <summary> Initializes a new instance of a %PsdEncoder%. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.PsdEncoder.IptcTags">
      <summary> Gets or sets IPTC Tags that will be saved with the image. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.PsdEncoder.PhotoshopResources">
      <summary> Gets or sets Photoshop resources to be saved with the image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.PsdEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Encode an %AtalaImage% as a Psd image to a stream. </summary>
      <param name="stream"> A stream that the encoded image data will be saved to. </param>
      <param name="image"> The <see cref="T:Atalasoft.Imaging.AtalaImage" /> to encode. </param>
      <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.PsdEncoder.SupportedPixelFormats">
      <summary> Returns an array of pixel formats supported by this encoder. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.RegisteredDecoders">
      <summary> This class includes static members containing information on image decoders to use in the project when
            reading images as well as methods to obtain a an appropriate decoder based on an image stream or filename.
            </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.RegisteredDecoders.Decoders">
      <summary> Gets a static collection of Image Decoders that will be used to decode any arbitrary image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.RegisteredDecoders.GetDecoder(System.IO.Stream)">
      <summary> Returns an <see cref="T:Atalasoft.Imaging.Codec.ImageDecoder" />that can be used to decode the given stream. </summary>
      <param name="stream"> A stream containing the encoded image data. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.RegisteredDecoders.GetDecoderFromType(System.Type)">
      <summary> Returns an <STRONG>ImageDecoder </STRONG>that matches a specific type. </summary>
      <param name="codecType"> The type of decoder to retreive. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.RegisteredDecoders.GetImageInfo(System.IO.Stream)">
      <summary> Returns information about an encoded image file specifying a stream. </summary>
      <param name="stream"> A stream containing the encoded image data. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.RegisteredDecoders.GetImageInfo(System.IO.Stream,System.Int32)">
      <summary> Returns information about an encoded image file specifying a stream and frame index. </summary>
      <param name="stream"> A stream containing the encoded image data. </param>
      <param name="frameIndex"> If the image contains multiple frames, this is the zero based index to retreive
            information from. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.RegisteredDecoders.GetImageInfo(System.String)">
      <summary> Returns information about an encoded image file specifying a filename. </summary>
      <param name="fileName"> A file name containing the encoded image data. </param>
      <returns> The <a href="Atalasoft.dotImage~Atalasoft.Imaging.Codec.ImageInfo.html">ImageInfo</a> from an existing
            file. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.RegisteredDecoders.GetImageInfo(System.String,System.Int32)">
      <summary> Returns information about an encoded image file specifying a filename and frame index. </summary>
      <param name="fileName"> A file name containing the encoded image data. </param>
      <param name="frameIndex"> If the image contains multiple frames, this is the zero based index to retreive
            information from. </param>
      <returns> The <a href="Atalasoft.dotImage~Atalasoft.Imaging.Codec.ImageInfo.html">ImageInfo</a> from an existing
            file. </returns>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.RegisteredDecoders.KnownTypeDecoders"></member>
    <member name="P:Atalasoft.Imaging.Codec.RegisteredDecoders.UnknownTypeDecoders">
      <summary> Returns a reference to the decoders that are used for reading images that dotImage doesn't recognize as a
            standard <see cref="T:Atalasoft.Imaging.Codec.ImageType" />. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.TgaDecoder">
      <summary>
        <para>An <see cref="T:Atalasoft.Imaging.Codec.ImageDecoder" /> used to read Truevision Targa (TGA) images from a <see cref="T:System.IO.Stream" />.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.TgaDecoder.#ctor">
      <summary> Initializes a new instance of a <see cref="T:Atalasoft.Imaging.Codec.TgaDecoder" />. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.TgaDecoder.GetImageInfo(System.IO.Stream)">
      <summary> Retreive information from a Targa image stored in a Stream without decoding the image data. </summary>
      <param name="stream"> A stream containing the encoded image data. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.TgaDecoder.IsValidFormat(System.IO.Stream)">
      <summary>
        <para>Returns true if the specified Stream contains an Targa image.</para>
      </summary>
      <param name="stream"> A stream containing the encoded image data. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.TgaDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Returns an <see cref="T:Atalasoft.Imaging.AtalaImage" /> from a Stream containing a Targa encoded image. </summary>
      <param name="stream"> A stream containing the encoded image data. </param>
      <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.TgaDecoder.SupportedImageType">
      <summary> Returns a Tga ImageType enumeration value. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.TgaEncoder">
      <summary>
            Summary description for TgaEncoder.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.TgaEncoder.#ctor">
      <summary> Initializes a new instance of a %TgaEncoder%. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.TgaEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Encode an <see cref="T:Atalasoft.Imaging.AtalaImage" /> as a Tga image to a stream. </summary>
      <param name="stream"> A stream that the encoded image data will be saved to. </param>
      <param name="image"> The <see cref="T:Atalasoft.Imaging.AtalaImage" /> to encode. </param>
      <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.TgaEncoder.SupportedPixelFormats">
      <summary> Returns an array of pixel formats supported by this encoder. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.TiffCodecCompression">
      <summary> This class represents the compression for a TIFF image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.TiffCodecCompression.#ctor(Atalasoft.Imaging.Codec.TiffCompression)">
      <summary> Creates a new instance of <STRONG>TiffCodecCompression</STRONG> specifying the compression type.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.TiffCodecCompression.#ctor(Atalasoft.Imaging.Codec.TiffCompression,System.Int32)">
      <summary> Creates a new instance of <STRONG>TiffCodecCompression</STRONG> specifying the compression type and JPEG
            quality. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.TiffCodecCompression.#ctor(Atalasoft.Imaging.Codec.TiffCompression,System.Int32,System.Boolean)">
      <summary> Creates a new instance of <STRONG>TiffCodecCompression</STRONG> specifying the compression type, JPEG
            Quality, and LZW Predictor. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.TiffCodecCompression.#ctor(Atalasoft.Imaging.Codec.TiffCompression,System.Int32,System.Boolean,System.Boolean)">
      <summary> Creates a new instance of <STRONG>TiffCodecCompression</STRONG> specifying the compression type, JPEG
            Quality, and LZW Predictor, and whether to use old style JPEG compression. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.TiffCodecCompression.Compression">
      <summary> Gets or sets the TIFF compression to use. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.TiffCodecCompression.JpegQuality">
      <summary> Gets or sets the JPEG quality when Compression is set to JPEG. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.TiffCodecCompression.UseLzwPredictor">
      <summary> Gets or sets the LZW predictor value. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.TiffCodecCompression.UseOldJpegCompression">
      <summary> Gets or sets a value indicating if Old Style JPEG compression should be used when Compression is set to
            JPEG. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.TiffCompression">
      <summary> Contains the various compression types available for TIFF images. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.TiffCompression.NoCompression">
      <summary> Specify no compression. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.TiffCompression.Group3FaxEncoding">
      <summary> CCITT Group 3 fax encoding. Used on 1-bit images only, otherwise uses no compression. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.TiffCompression.Group4FaxEncoding">
      <summary> CCITT Group 4 fax encoding. Used on 1-bit images only, otherwise uses no compression. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.TiffCompression.JpegCompression">
      <summary> Lossy JPEG compression. Used on 8-bit grayscale and 24-bit RGB images only, otherwise uses no compression.
            </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.TiffCompression.MacintoshPackbits">
      <summary> A modified RLE (run length encoding) style of compression </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.TiffCompression.Deflate">
      <summary> ZIPLib compression, similar to PNG and WinZip </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.TiffCompression.Lzw">
      <summary> LZW compression. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.TiffCompression.ModifiedHuffman">
      <summary> CCITT modified Huffman RLE. Used on 1-bit images only, otherwise uses no compression. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Codec.TiffCompression.Default">
      <summary> Chooses the most appropriate compression depending on the pixel
            format.  1-bpp image will be saved with CCITG4 compression, and everything
            else will use LZW. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.TiffDecoder">
      <summary>
        <para>An <STRONG>ImageDecoder</STRONG> used to read Tagged Image File Format (TIFF) images from an image
            <STRONG>Stream</STRONG>.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.#ctor">
      <summary> Initializes a new instance of a %TiffDecoder%. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.TiffDecoder.CorrectOrientation">
      <summary> Gets or sets a value that when true (the default) will automatically correct the image orientation by
            rotating and/or flipping based on the TIFF_ORIENTATION tag setting. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.GetBestScale(System.IO.Stream,System.Int32,System.Double)">
      <summary> Gets the most effiicient image scale stored within the codec. </summary>
      <param name="stream"> encoded image stream </param>
      <param name="frameIndex"> Zero based frame index </param>
      <param name="requestedScale"> Requested image scale. </param>
      <returns> Always returns 1.0. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.GetFrameCount(System.IO.Stream)">
      <summary> Returns the number of pages in an Encoded Tiff file. </summary>
      <param name="stream">
        <para>Encoded image stream</para>
      </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.GetImageInfo(System.IO.Stream)">
      <summary> Retreive information from a Tiff image stored in a Stream without decoding the image data. </summary>
      <param name="stream"> A stream containing the encoded image data. </param>
      <exception> Thrown if the image stream is not located at the beginning of a valid TIFF file. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.GetImageInfo(System.IO.Stream,System.Int32)">
      <summary> Retreive information from a Tiff image stored in a Stream without decoding the image data. </summary>
      <param name="stream"> A stream containing the encoded image data. </param>
      <param name="frameIndex"> The zero based frame index. </param>
      <exception> Thrown if the image stream is not located at the beginning of a valid TIFF file. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.GetTiffTag(System.Int32,System.IO.Stream,System.Int32)">
      <summary> Gets a TIFF Tag from a TIFF image stream. </summary>
      <param name="tagID"> The tag ID to retrieve data from. </param>
      <param name="source"> The TIFF file stream. </param>
      <param name="frameIndex"> The zero based frame index of the page to query. </param>
      <returns> Returns a <see cref="T:Atalasoft.Imaging.Metadata.TiffTag" /> object containing the tag data, or null if the tag does not exist in the
            image. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.GetTiffTag(System.Int32,System.String,System.Int32)">
      <summary> Gets a TIFF Tag from a TIFF file. </summary>
      <param name="tagID"> The tag ID to retrieve data from. </param>
      <param name="fileName"> The TIFF filename </param>
      <param name="frameIndex"> The zero based frame index of the page to query. </param>
      <returns> Returns a <see cref="T:Atalasoft.Imaging.Metadata.TiffTag" /> object containing the tag data, or null if the tag does not exist in the
            image. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.IsValidFormat(System.IO.Stream)">
      <summary>
        <para>Returns true if the specified Stream contains an TIFF image.</para>
      </summary>
      <param name="stream"> A stream containing the encoded image data. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Decodes an image from a supplied TIFF image <STRONG>Stream.</STRONG></summary>
      <param name="stream"> A <STRONG>Stream</STRONG> containing the encoded image data. </param>
      <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
      <returns> Returns an decoded <STRONG>AtalaImage</STRONG> from a <STRONG>Stream</STRONG> containing a TIFF encoded
            image. </returns>
      <exception> Thrown if the image stream is not located at the beginning of a valid TIFF file. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.Read(System.IO.Stream,System.Int32,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Decodes an image from a supplied TIFF image <STRONG>Stream </STRONG>specifying a frame index. </summary>
      <param name="stream"> A <STRONG>Stream</STRONG> containing the encoded image data. </param>
      <param name="frameIndex"> The zero based frame index to load from a multi-page TIFF file. </param>
      <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
      <returns> Returns an decoded <STRONG>AtalaImage</STRONG> from a <STRONG>Stream</STRONG> containing a TIFF encoded
            image. </returns>
      <exception> Thrown if the image stream is not located at the beginning of a valid TIFF file. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.ReadRegion(System.IO.Stream,System.Drawing.Rectangle,System.Int32,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Decodes a specified region of a TIFF image given a source Stream. </summary>
      <param name="stream"> A <STRONG>Stream</STRONG> containing the encoded image data. </param>
      <param name="region"> A rectangular region of the image to decode. </param>
      <param name="frameIndex"> The zero based frame index to load from a multi-page Tiff file. </param>
      <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
      <exception> Thrown if the image stream is not located at the beginning of a valid TIFF file. </exception>
      <exception> Thrown if the region parameter is outside the image bounds. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.ReadScaled(System.IO.Stream,System.Int32,System.Double,Atalasoft.Imaging.ProgressEventHandler)"></member>
    <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.ReadStrip(System.IO.Stream,System.Int32,System.Int32,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Decodes a specified strip from a TIFF image stream that is encoded with strips. </summary>
      <param name="stream"> A <STRONG>Stream</STRONG> containing the encoded image data. </param>
      <param name="stripIndex"> The zero based strip index to decode. </param>
      <param name="frameIndex"> The zero based frame index to load from a multi-page Tiff file. </param>
      <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
      <exception> Thrown when the strip index doesn't exist within the image. </exception>
      <exception> Thrown if the image stream is not located at the beginning of a valid TIFF file. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.ReadTile(System.IO.Stream,System.Drawing.Point,System.Int32,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Decodes a specified tile from a TIFF image stream that is encoded with strips. </summary>
      <param name="stream"> A <STRONG>Stream</STRONG> containing the encoded image data. </param>
      <param name="location"> The pixel location of the top left location of the tile. </param>
      <param name="frameIndex"> The zero based frame index to load from a multi-page Tiff file. </param>
      <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
      <exception> Thrown when the top-left corner of a tile doesn't exist at the location specified. </exception>
      <exception> Thrown if the image stream is not located at the beginning of a valid TIFF file. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.TiffDecoder.ScaledResampleMethod">
      <summary> Gets or sets the resampling method to use for ReadScaled. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.TiffDecoder.SupportedImageType"></member>
    <member name="T:Atalasoft.Imaging.Codec.TiffEncoder">
      <summary>
        <para>An <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder" /> that will write Tagged Image File Format (TIFF) images to a
            <see cref="T:System.IO.Stream" />.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.TiffEncoder.#ctor">
      <summary> Initializes a new instance of a <see cref="T:Atalasoft.Imaging.Codec.TiffEncoder" />. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.TiffEncoder.#ctor(Atalasoft.Imaging.Codec.TiffCompression)">
      <summary> Initializes a new instance of a <see cref="T:Atalasoft.Imaging.Codec.TiffEncoder" /> specifying the compression. </summary>
      <param name="compression"> A value indicating the compression algorithm used when encoding to a file. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.TiffEncoder.#ctor(Atalasoft.Imaging.Codec.TiffCompression,System.Boolean)">
      <summary> Initializes a new instance of a <see cref="T:Atalasoft.Imaging.Codec.TiffEncoder" /> specifying the compression and if the image should be
            appended to the end of an existing file. </summary>
      <param name="compression"> A value indicating the compression algorithm used when encoding to a file. </param>
      <param name="append"> A value indicating if the image should be appended to the end of an existing file. </param>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.Append">
      <summary> Get or sets a value indicating if the image should be appended to the end of an existing file. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.Compression">
      <summary> Gets or sets a value indicating the compression algorithm used when encoding to a file. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.IptcTags">
      <summary> Gets or sets IPTC Metadata that will be saved with the image. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.JpegQuality">
      <summary> Gets or sets the quality level used when saving the image. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.PhotoshopResources">
      <summary> Gets or sets Photoshop resources to be saved with the image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.TiffEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Encode an <see cref="T:Atalasoft.Imaging.AtalaImage" /> as a Tiff image to a stream. </summary>
      <param name="stream"> A stream that the encoded image data will be saved to. </param>
      <param name="image"> The <see cref="T:Atalasoft.Imaging.AtalaImage" /> to encode. </param>
      <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.TiffEncoder.Save(System.IO.Stream,Atalasoft.Imaging.ImageCollection,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Saves a collection of images to a multi-page TIFF. </summary>
      <param name="stream"> A stream that the encoded image data will be saved to.  This stream must have
            FileAccess.ReadWrite set or else only the first image will be saved. </param>
      <param name="images"> The ImageCollection containing the images to save. </param>
      <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.TiffEncoder.Save(System.IO.Stream,Atalasoft.Imaging.ImageSource,Atalasoft.Imaging.ProgressEventHandler)"></member>
    <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.SaveRichTiffIptc">
      <summary> Gets or sets a value indicating that IPTC data will be stored in the TIFFTAG_RICHTIFFIPTC Tag rather than
            the TIFFTAG_PHOTOSHOP tag. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.StripSize">
      <summary> Gets or sets the strip size used when saving the image. </summary>
      <exception> The strip size must be a value greater than or equal to -1. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.SupportedPixelFormats">
      <summary> Returns an array of pixel formats supported by this encoder. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.TiffTags">
      <summary> Gets or sets a collection of TIFF Tags that will be encoded with the image when writing. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.TileSize">
      <summary> Gets or sets the size of tiles that are saved when <see cref="P:Atalasoft.Imaging.Codec.TiffEncoder.WriteTiled" /> is true.
            </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.UseLzwPredictor">
      <summary> Gets or sets a value indicating LZW predictor. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.UseOldJpegCompression">
      <summary> When true, JPEG compression will generate old style JPEG in TIFF compression (compression value 6).
            </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.WriteImageColorProfile">
      <summary> Controls how the TiffEncoder writes color profiles. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.WriteTiled">
      <summary> Gets or sets a value that when true, will cause TIFF images to be encoded tiled. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.Xmp">
      <summary> Gets or sets XMP data to encode with the image. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.TlaDecoder">
      <summary>
        <para>An <see cref="T:Atalasoft.Imaging.Codec.ImageDecoder" /> used to read Tla images from a <see cref="T:System.IO.Stream" />.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.TlaDecoder.#ctor">
      <summary> Initializes a new instance of a <see cref="T:Atalasoft.Imaging.Codec.TlaDecoder" />. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.TlaDecoder.#ctor(System.String)">
      <summary> Initializes a new instance of a <see cref="T:Atalasoft.Imaging.Codec.TlaDecoder" /> specifying the password. </summary>
      <param name="password"> The password to use for reading encrypted Tla images. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.TlaDecoder.GetImageInfo(System.IO.Stream)">
      <summary> Retreive information from a Tla image stored in a Stream without decoding the image data. </summary>
      <param name="stream"> A stream containing the encoded image data. </param>
      <returns> An ImageInfo object containing information about the image. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.TlaDecoder.IsValidFormat(System.IO.Stream)">
      <summary>
        <para>Returns true if the specified Stream contains an Tla image.</para>
      </summary>
      <param name="stream"> A stream containing the encoded image data. </param>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.TlaDecoder.Password">
      <summary> Gets or sets the password to use for reading encrypted Tla images. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.TlaDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
      <param name="stream"> A stream containing the encoded image data. </param>
      <param name="progress"> The ProgressEventHandler for this process. </param>
      <returns> Returns an <see cref="T:Atalasoft.Imaging.AtalaImage" /> from a Stream containing a Tla encoded image. </returns>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.TlaDecoder.SupportedImageType">
      <summary> Returns a Tla ImageType enumeration value. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.TlaEncoder">
      <summary>
        <para>An <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder" /> that will write TLA images to a %System.IO.Stream%.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.TlaEncoder.#ctor">
      <summary> Initializes a new instance of a <see cref="T:Atalasoft.Imaging.Codec.TiffEncoder" />. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.TlaEncoder.#ctor(System.String)">
      <summary> Initializes a new instance of a TlaEncoder specifying the password to encrypt with. </summary>
      <param name="password"> The password to use for reading, writing, or obtaining information on encrypted TLA images.
            </param>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.TlaEncoder.Password">
      <summary> Gets or sets the password to use for reading, writing, or obtaining information on encrypted TLA images.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.TlaEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Encode an <see cref="T:Atalasoft.Imaging.AtalaImage" /> as a Tla image to a stream. </summary>
      <param name="stream"> A stream that the encoded image data will be saved to. </param>
      <param name="image"> The <see cref="T:Atalasoft.Imaging.AtalaImage" /> to encode. </param>
      <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.TlaEncoder.SupportedPixelFormats">
      <summary> Returns an array of pixel formats supported by this encoder. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.WbmpDecoder">
      <summary>
        <para>An <see cref="T:Atalasoft.Imaging.Codec.ImageDecoder" /> used to read Wireless Bitmap (Wbmp) images from a <see cref="T:System.IO.Stream" />.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.WbmpDecoder.#ctor">
      <summary> Initializes a new instance of a %WbmpDecoder%. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.WbmpDecoder.GetImageInfo(System.IO.Stream)">
      <summary> Retreive information from a Wbmp image stored in a Stream without decoding the image data. </summary>
      <param name="stream"> A stream containing the encoded image data. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.WbmpDecoder.IsValidFormat(System.IO.Stream)">
      <summary>
        <para>Returns true if the specified Stream contains an Wbmp image.</para>
      </summary>
      <param name="stream"> A stream containing the encoded image data. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.WbmpDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
      <param name="stream"> A stream containing the encoded image data. </param>
      <param name="progress"> The progress delegate.  Can be set to <strong>null</strong>
            (<strong>Nothing</strong> in Visual Basic). </param>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.WbmpDecoder.SupportedImageType">
      <summary> Returns a Wbmp ImageType enumeration value. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.WbmpEncoder">
      <summary>
        <para>An <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder" /> that will write Wireless Bitmap (WBMP) images to a <see cref="T:System.IO.Stream" />.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.WbmpEncoder.#ctor">
      <summary> Initializes a new instance of a %WbmpEncoder%. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.WbmpEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Encode an <see cref="T:Atalasoft.Imaging.AtalaImage" /> as a Wbmp image to a stream. </summary>
      <param name="stream"> A stream that the encoded image data will be saved to. </param>
      <param name="image"> The <see cref="T:Atalasoft.Imaging.AtalaImage" /> to encode. </param>
      <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.WbmpEncoder.SupportedPixelFormats">
      <summary> Returns an array of pixel formats supported by this encoder. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.WmfDecoder">
      <summary>
        <para>An <see cref="T:Atalasoft.Imaging.Codec.ImageDecoder" /> used to read Windows Metafile (WMF) images from a <see cref="T:System.IO.Stream" />.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.WmfDecoder.#ctor">
      <summary> Initializes a new instance of a %WmfDecoder%. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.WmfDecoder.#ctor(System.Drawing.Size)">
      <summary> Initializes a new instance of a <see cref="T:Atalasoft.Imaging.Codec.WmfDecoder" /> specifying the size of the image. </summary>
      <param name="defaultSize"> The default <see cref="T:System.Drawing.Size" /> when reading a windows metafile. </param>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.WmfDecoder.DefaultSize">
      <summary> Gets or sets the default <see cref="T:System.Drawing.Size" /> when reading a windows metafile. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.WmfDecoder.GetImageInfo(System.IO.Stream)">
      <summary> Retreive information from a Wmf image stored in a Stream without decoding the image data. </summary>
      <param name="stream"> A stream containing the encoded image data. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.WmfDecoder.IsValidFormat(System.IO.Stream)">
      <summary>
        <para>Returns true if the specified Stream contains an Wmf image.</para>
      </summary>
      <param name="stream"> A stream containing the encoded image data. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.WmfDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
      <param name="stream"> A stream containing the encoded image data. </param>
      <param name="progress"> The progress delegate.  Can be set to <strong>null</strong>
            (<strong>Nothing</strong> in Visual Basic). </param>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.WmfDecoder.SupportedImageType">
      <summary> Returns a Wmf ImageType enumeration value. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.WmfEncoder">
      <summary>
        <para>An <see cref="T:Atalasoft.Imaging.Codec.ImageEncoder" /> that will write Windows Metafile (WMF) images to a <see cref="T:System.IO.Stream" />.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.WmfEncoder.#ctor">
      <summary> Initializes a new instance of a <see cref="T:Atalasoft.Imaging.Codec.WmfEncoder" />. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.WmfEncoder.#ctor(System.Boolean)">
      <summary> Initializes a new instance of a <see cref="T:Atalasoft.Imaging.Codec.WmfEncoder" /> specifying the placeable value. </summary>
      <param name="placeable"> A value indicating if an Aldus placeable metafile will be written.  </param>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.WmfEncoder.ImageType">
      <summary> Returns the <STRONG>ImageType</STRONG> associated with thie Encoder Setting. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.WmfEncoder.Placeable">
      <summary> Gets or sets a value indicating if an Aldus placeable metafile will be written. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.WmfEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Encode an <see cref="T:Atalasoft.Imaging.AtalaImage" /> as a Wmf image to a stream. </summary>
      <param name="stream"> A stream that the encoded image data will be saved to. </param>
      <param name="image"> The <see cref="T:Atalasoft.Imaging.AtalaImage" /> to encode. </param>
      <param name="progress"> The progress delegate.  Can be set to <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in
            Visual Basic). </param>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.WmfEncoder.SupportedPixelFormats">
      <summary> Returns an array of pixel formats supported by this encoder. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.Tiff.TiffDirectory">
      <summary> Represents a single TIFF page. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDirectory.#ctor(Atalasoft.Imaging.AtalaImage)">
      <summary> Creates a new <STRONG>TiffDirectory </STRONG>from an AtalaImage </summary>
      <param name="image"> The image data that the <STRONG>TiffDirectory</STRONG> will represent. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDirectory.#ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.Codec.TiffCompression)">
      <summary> Creates a new <STRONG>TiffDirectory</STRONG> using the specified compression. </summary>
      <param name="image"> The image data that the <strong>TiffDirectory</strong> will
            represent. </param>
      <param name="compression"> The compression to use when the image data is encoded </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDirectory.#ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.Codec.TiffEncoder)">
      <summary> Creates a new <STRONG>TiffDirectory </STRONG>with the specified Tiff Encoder. </summary>
      <param name="image"> The image data that the <STRONG>TiffDirectory</STRONG> will represent. </param>
      <param name="tiff"> The encoding settings to use when the image data is encoded </param>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.Tiff.TiffDirectory.AllowVitalTagChanges">
      <summary> Sets or gets a flag determining if changes should be allowed in vital TIFF tags. </summary>
    </member>
    <member name="E:Atalasoft.Imaging.Codec.Tiff.TiffDirectory.CodecError">
      <summary> This event is raised an a non critical error exists when reading a TIFF File. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDirectory.Dispose">
      <summary> Disposes the <STRONG>TiffDirectory.</STRONG></summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDirectory.Dispose(System.Boolean)">
      <summary> Disposes the <STRONG>TiffDirectory.</STRONG></summary>
      <param name="disposing"> Indicates whether or not the object is being disposed via the Dispose method (true) or the
            finalize method (false) </param>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.Tiff.TiffDirectory.ExifTags">
      <summary> Gets or sets a collection of EXIF Tags that will be saved with the image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDirectory.Finalize"></member>
    <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDirectory.OnError(Atalasoft.Imaging.Codec.CodecErrorEventArgs)">
      <summary> Fires the Error event </summary>
      <param name="e"> A CodecErrorEventArgs object specifying the error </param>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.Tiff.TiffDirectory.Tags">
      <summary> Gets the collection of <see cref="T:Atalasoft.Imaging.Metadata.TiffTag" /> objects associated with the image. </summary>
      <exception> Thrown when the TiffFile's stream is closed when accessing a tag that is originally loaded as a data
            pointer.  This usually is the case for string and binary data. </exception>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.Tiff.TiffDirectoryCollection">
      <summary> For use as part of a <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffFile" />.  Holds the collection of images that make up the pages in a
            TIFF. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDirectoryCollection.#ctor">
      <summary> Creates a new <STRONG>TiffDirectoryCollection.</STRONG></summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDirectoryCollection.Add(Atalasoft.Imaging.Codec.Tiff.TiffDirectory)">
      <summary> Adds a <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffDirectory" /> to the collection. </summary>
      <param name="value"> The <STRONG>TiffDirectory </STRONG>to add. </param>
      <returns> The index the <STRONG>TiffDirectory</STRONG> was added at. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDirectoryCollection.Contains(Atalasoft.Imaging.Codec.Tiff.TiffDirectory)">
      <summary> Checks for the Existance of an entry in the collection. </summary>
      <param name="value"> The <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffDirectory" /> to look for. </param>
      <returns> True if the object exists in the collection, false otherwise. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDirectoryCollection.CopyTo(Atalasoft.Imaging.Codec.Tiff.TiffDirectory[],System.Int32)">
      <summary> Copies an entry of the collection. </summary>
      <param name="value"> The <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffDirectory" /> to copy to. </param>
      <param name="index"> The index of the entry in the collection to copy. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDirectoryCollection.IndexOf(Atalasoft.Imaging.Codec.Tiff.TiffDirectory)">
      <summary> Searches for the specified <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffDirectory" /> and returns the zero-based index of the first
            occurrence within the entire collection. </summary>
      <param name="value"> The <STRONG>TiffDirectory</STRONG> to search for. </param>
      <returns> The zero-based index of the first occurrence of <I>value</I> within the entire collection, if found;
            otherwise, -1. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDirectoryCollection.Insert(System.Int32,Atalasoft.Imaging.Codec.Tiff.TiffDirectory)">
      <summary> Adds a <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffDirectory" /> at a specified index to the collection. </summary>
      <param name="index"> The zero-based index to add the <STRONG>TiffDirectory </STRONG>at. </param>
      <param name="value"> The <STRONG>TiffDirectory</STRONG> to add. </param>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.Tiff.TiffDirectoryCollection.Item(System.Int32)">
      <summary> Gets the <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffDirectory" /> at the specified index. </summary>
      <param name="index"> The zero-based index to get the entry from. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDirectoryCollection.Remove(Atalasoft.Imaging.Codec.Tiff.TiffDirectory)">
      <summary> Removes a <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffDirectory" /> from the collection. </summary>
      <param name="value"> The <STRONG>TiffDirectory </STRONG>to remove. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDirectoryCollection.Swap(System.Int32,System.Int32)">
      <summary> Swaps two entries in the collection. </summary>
      <param name="m"> The zero-based index of the first <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffDirectory" /> to swap. </param>
      <param name="n"> The zero-based index of the second <STRONG>TiffDirectory</STRONG> to swap. </param>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.Tiff.TiffDocument">
      <summary>The TiffDocument class is used to represent an entire TIFF file in a way that makes it convenient to
            manipulate the pages of the document.  Pages can be reordered, inserted, added, and removed.  The final document can
            then be saved to a new file.  TiffDocument keeps as little in memory at one time as possible.</summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDocument.#ctor">
      <summary> Constructs a new empty TiffDocument. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDocument.#ctor(System.IO.Stream)">
      <summary> Constructs a new TiffDocument class, populated the <see cref="P:Atalasoft.Imaging.Codec.Tiff.TiffDocument.Pages" /> property with the contents of the
            given stream. </summary>
      <param name="stream"> A seekable stream whose contents is a TIFF. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDocument.#ctor(System.String)">
      <summary> Constructs a new TiffDocument class, populated the <see cref="P:Atalasoft.Imaging.Codec.Tiff.TiffDocument.Pages" /> property with the contents of the
            given file. </summary>
      <param name="filename"> A path to a TIFF file. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDocument.Combine(System.IO.Stream,System.IO.Stream[])">
      <summary> Combines a set of TIFF Streams into a single output TIFF Stream </summary>
      <param name="output"> The output stream that will contain the combined TIFF. </param>
      <param name="sources"> An array of input streams that will be combined into a single output. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDocument.Combine(System.IO.Stream,System.String[])">
      <summary> Combines a set of TIFF files into a single output TIFF Stream </summary>
      <param name="output"> The output stream that will contain the combined TIFF. </param>
      <param name="sourceFiles"> An array of input file names that will be combined into a single output. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDocument.Combine(System.String,System.String[])">
      <summary> Combines a set of TIFF files into a single output TIFF file </summary>
      <param name="outputFile"> The output file that will contain the combined TIFF. </param>
      <param name="sourceFiles"> An array of input file names that will be combined into a single output. </param>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.Tiff.TiffDocument.Pages">
      <summary> A collection of <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffPage" /> objects that represent the contents of the Tiff file. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDocument.Save(System.IO.Stream)">
      <summary> Saves the contents of this TiffDocument into a new stream. </summary>
      <param name="outputStream"> The stream where the file will be saved.  The outputStream object <STRONG>may
            not</STRONG> be the source of one or more of the TiffDocument's TiffPage objects.  This condition will cause
            TiffDocument to throw an ArgumentException.  The outputStream may not be null. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDocument.Save(System.String)">
      <summary> Saves every TiffPage within the TiffDocument object into a new TIFF file. </summary>
      <param name="fileName"> The non-null path to the file to be saved.  The Save method to a path does not check to see
            if the output path is the same as any of the input paths.  If it is, the results will be unpredictable and most
            likely will result in a damaged TIFF file. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDocument.ValidOutputStream(System.IO.Stream)">
      <summary> Test a stream to see if it can be used as an output stream for this TiffDocument. </summary>
      <param name="stm"> The stream to write to. </param>
      <returns> Returns <EM>true</EM> if the stream is different from the streams used by each of the <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffPage" /> objects contained within this TiffDocument. </returns>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.Tiff.TiffFile">
      <summary>
        <STRONG>TiffFile</STRONG> is a class that allows access to a TIFF image file directly, without loading the
            image into memory.  It represents a single TIFF document which can contain multiple pages. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffFile.#ctor">
      <summary> Creates a new <STRONG>TiffFile</STRONG> instance. </summary>
    </member>
    <member name="E:Atalasoft.Imaging.Codec.Tiff.TiffFile.CodecError">
      <summary> This event is used by the <STRONG>TiffFile</STRONG> object to report errors that occur when parsing a
            TiffDirectory. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffFile.GetPageCount(System.IO.Stream)">
      <summary> Returns the number of pages in a TIFF </summary>
      <param name="source"> Encoded image stream </param>
      <returns>number of pages</returns>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.Tiff.TiffFile.Images">
      <summary> Gets the image collection that is part of this <STRONG>TiffFile</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffFile.OnError(Atalasoft.Imaging.Codec.CodecErrorEventArgs)">
      <summary> Fires the Error event </summary>
      <param name="e"> A CodecErrorEventArgs object specifying the error </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffFile.Read(System.IO.Stream)">
      <summary> Reads directories and tags for all pages. </summary>
      <param name="stream"> Encoded image stream </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffFile.Read(System.IO.Stream,System.Int32)">
      <summary> Reads directories and tags for a specific page. </summary>
      <param name="stream"> Encoded image stream </param>
      <param name="frameIndex"> Frame index to read </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffFile.Save(System.IO.Stream)">
      <summary> Saves the <STRONG>TiffFile</STRONG> to a Stream. </summary>
      <param name="target"> The Stream to save the <STRONG>TiffFile</STRONG> to. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffFile.Save(System.String)">
      <summary> Saves the <STRONG>TiffFile</STRONG> to a file path. </summary>
      <param name="path"> The file path to save the <STRONG>TiffFile</STRONG> to. </param>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.Tiff.TiffPage">
      <summary> An object that represents a page within a <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffDocument" />. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffPage.#ctor(Atalasoft.Imaging.AtalaImage)">
      <summary> Constructs a new TiffPage object from the given image. </summary>
      <param name="image"> An AtalaImage object to use for a TiffPage </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffPage.#ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.Codec.TiffCompression)">
      <summary> Constructs a new TiffPage object from the given image, using the specified compression. </summary>
      <param name="image"> An AtalaImage object to use for a TiffPage </param>
      <param name="compression">
        <para>Compression to use for the image</para>
      </param>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.Tiff.TiffPage.Frame">
      <summary> Gets the original frame number of this page within its stream </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.Tiff.TiffPage.PixelFormat">
      <summary> Returns the PixelFormat of the page. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.Tiff.TiffPage.Resolution">
      <summary> Returns the resolution of the page. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.Tiff.TiffPage.Size">
      <summary> Returns the dimensions of the page in pixels. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.Tiff.TiffPage.Stream">
      <summary> Returns the stream from which the TiffPage originally came. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Codec.Tiff.TiffPageCollection">
      <summary> A collection object used to hold a set of <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffPage" /> objects. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffPageCollection.#ctor">
      <summary> Constructs a new TiffPageCollection </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffPageCollection.Add(Atalasoft.Imaging.Codec.Tiff.TiffPage)">
      <summary> Adds the TiffPage to the end of this collection. </summary>
      <param name="value"> A TiffPage to add. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffPageCollection.Add(Atalasoft.Imaging.Codec.Tiff.TiffPageCollection)">
      <summary> Adds the entire contents of the TiffPageCollection to the end of this collection. </summary>
      <param name="other"> A collection of TiffPage objects to add. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffPageCollection.Contains(Atalasoft.Imaging.Codec.Tiff.TiffPage)">
      <summary> Indicates if a <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffPage" /> is contained in this collection </summary>
      <param name="value"> The <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffPage" /> to look for. </param>
      <returns>
        <EM>True</EM> if the <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffPage" /> is contained in this collection, <EM>false</EM> otherwise.
            </returns>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffPageCollection.CopyTo(Atalasoft.Imaging.Codec.Tiff.TiffPage[],System.Int32)">
      <summary> Copies the contents of this collection into a given array. </summary>
      <param name="array"> An non-null array of TiffPage objects </param>
      <param name="index"> The index in the array where the collection elements will be put </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffPageCollection.IndexOf(Atalasoft.Imaging.Codec.Tiff.TiffPage)">
      <summary> Returns the index of a given <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffPage" /> object. </summary>
      <param name="value"> The <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffPage" /> to look for. </param>
      <returns> An integer &gt;= 0 if the <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffPage" /> is in this collection, -1 otherwise. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffPageCollection.Insert(System.Int32,Atalasoft.Imaging.Codec.Tiff.TiffPage)">
      <summary> Inserts a <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffPage" /> into this collection at the given location. </summary>
      <param name="index"> The location where the given <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffPage" /> will be inserted. </param>
      <param name="value"> The <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffPage" /> object to insert. </param>
    </member>
    <member name="P:Atalasoft.Imaging.Codec.Tiff.TiffPageCollection.Item(System.Int32)">
      <summary> Sets or gets the <EM>n</EM>th item in this collection. </summary>
      <param name="index"> The index of the item to get or set. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffPageCollection.Remove(Atalasoft.Imaging.Codec.Tiff.TiffPage)">
      <summary> Removes a given <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffPage" /> from the collection. </summary>
      <param name="value"> The <see cref="T:Atalasoft.Imaging.Codec.Tiff.TiffPage" /> to remove. </param>
    </member>
    <member name="T:Atalasoft.Imaging.ColorManagement.ColorProfile">
      <summary>
        <para>A color profile that is used for translating colors.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.#ctor(System.Byte[])">
      <summary>
        <para>Initializes a new instance of <see cref="T:Atalasoft.Imaging.ColorManagement.ColorProfile" /> specifying a byte array containing the profile
            memory.</para>
      </summary>
      <param name="data"> The bytes that contain the color profile. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.#ctor(System.IntPtr,System.Int32)">
      <summary>
        <para>Initializes a new instance of <see cref="T:Atalasoft.Imaging.ColorManagement.ColorProfile" /> specifying a pointer to the profile memory and the size
            of this memory.</para>
      </summary>
      <param name="mempointer"> A pointer to the memory containing a color profile. </param>
      <param name="size"> The size of the memory pointer in bytes. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.#ctor(System.IO.Stream)">
      <summary>
        <para>Initializes a new instance of <see cref="T:Atalasoft.Imaging.ColorManagement.ColorProfile" /> specifying a stream containing the profile
            memory.</para>
      </summary>
      <param name="stream"> A stream containing a color profile. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.#ctor(System.String)">
      <summary>
        <para>Initializes a new instance of <see cref="T:Atalasoft.Imaging.ColorManagement.ColorProfile" /> specifying the filename containing a color
            profile.</para>
      </summary>
      <param name="fileName"> The file name of the color profile (usually with the ICM or ICC extension). </param>
    </member>
    <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.Class">
      <summary> Gets the profile class. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.CmmType">
      <summary> Gets the identification number of the CMM that is used in the profile. Identification numbers are
            registered with the ICC. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.ColorSpace">
      <summary> Gets a value that indicates the color space in which the profile data is defined. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.ConnectionColorSpace">
      <summary> Gets a value that indicates the color space in which the profile connection space (PCS) is defined.
            </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.Copyright">
      <summary> Gets the copyright information stored within the color profile. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.Creator">
      <summary> Gets a signature of the software that created the profile.  Signatures are registered with the ICC.
            </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.Description">
      <summary> Gets the description value stored within the color profile. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.Dispose">
      <summary>Releases all resources used by the <see cref="T:Atalasoft.Imaging.ColorManagement.ColorProfile" /></summary>
    </member>
    <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:Atalasoft.Imaging.ColorManagement.ColorProfile" /> and optionally releases the managed resources</summary>
      <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources</param>
    </member>
    <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.Finalize"></member>
    <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.Flags">
      <summary> Gets bit flags containing hints that the CMM uses to interpret the profile data. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.FromEmbedded(System.IO.Stream)">
      <summary> Returns a <STRONG>ColorProfile </STRONG>embedded within an image given the image stream. </summary>
      <param name="imageStream"> The encoded image stream. </param>
      <returns> A <STRONG>ColorProfile </STRONG>embedded within an image. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.FromEmbedded(System.String)">
      <summary> Returns a <STRONG>ColorProfile </STRONG>embedded within an image given the image file name. </summary>
      <param name="fileName"> The filename of the image. </param>
      <returns> A <STRONG>ColorProfile </STRONG>embedded within an image. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.FromSrgb">
      <summary> Returns the standard sRGB Color Profile. </summary>
      <returns> The standard sRGB Color Profile. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.GetProfileBytes"></member>
    <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.GetProfileDirectory">
      <summary> Returns the path of the color profile directory. </summary>
      <returns> The path of the color profile directory. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.GetProfileFromGraphics(System.Drawing.Graphics)">
      <summary> Returns the color profile assigned to a specified <see cref="T:System.Drawing.Graphics" /> object. </summary>
      <param name="graphics"> A graphics object. </param>
      <returns> The color profile assigned to a specified <see cref="T:System.Drawing.Graphics" /> object. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.GetProfileFromScreen">
      <summary> Returns the default color profile assigned to the screen. </summary>
      <returns> The default color profile assigned to the screen. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.GetScreenProfileName">
      <summary> Returns the name of the color profile associated with the current display. </summary>
      <returns> The name of the color profile associated with the current display. </returns>
    </member>
    <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.Manufacturer">
      <summary>
        <para>Gets the identification number of the device profile manufacturer.  All manufacturer identification
            numbers are registered with the ICC. </para>
      </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.Model">
      <summary> Gets the device manufacturer's device model number.  All model identification numbers are registered with
            the ICC. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.Platform">
      <summary> Gets the primary platform for which the profile was created. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.RenderingIntent">
      <summary> Gets the profile rendering intent. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.Save(System.String)">
      <summary> Save this <see cref="T:Atalasoft.Imaging.ColorManagement.ColorProfile" /> to a file. </summary>
      <param name="fileName">
        <para>The filename of the colorprofile to save.</para>
      </param>
    </member>
    <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.Version">
      <summary> Gets the version number of this color profile. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ColorManagement.ColorSpace">
      <summary> A value that indicates the color space in which profile data is defined. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ColorManagement.ColorSpace.Xyz"></member>
    <member name="F:Atalasoft.Imaging.ColorManagement.ColorSpace.Lab"></member>
    <member name="F:Atalasoft.Imaging.ColorManagement.ColorSpace.Luv"></member>
    <member name="F:Atalasoft.Imaging.ColorManagement.ColorSpace.YCbCr"></member>
    <member name="F:Atalasoft.Imaging.ColorManagement.ColorSpace.Yxy"></member>
    <member name="F:Atalasoft.Imaging.ColorManagement.ColorSpace.Rgb"></member>
    <member name="F:Atalasoft.Imaging.ColorManagement.ColorSpace.Gray"></member>
    <member name="F:Atalasoft.Imaging.ColorManagement.ColorSpace.Hsv"></member>
    <member name="F:Atalasoft.Imaging.ColorManagement.ColorSpace.Hls"></member>
    <member name="F:Atalasoft.Imaging.ColorManagement.ColorSpace.Cmyk"></member>
    <member name="F:Atalasoft.Imaging.ColorManagement.ColorSpace.Cmy"></member>
    <member name="F:Atalasoft.Imaging.ColorManagement.ColorSpace.TwoChannel"></member>
    <member name="F:Atalasoft.Imaging.ColorManagement.ColorSpace.ThreeChannel"></member>
    <member name="F:Atalasoft.Imaging.ColorManagement.ColorSpace.FourChannel"></member>
    <member name="F:Atalasoft.Imaging.ColorManagement.ColorSpace.FiveChannel"></member>
    <member name="F:Atalasoft.Imaging.ColorManagement.ColorSpace.SixChannel"></member>
    <member name="F:Atalasoft.Imaging.ColorManagement.ColorSpace.SevenChannel"></member>
    <member name="F:Atalasoft.Imaging.ColorManagement.ColorSpace.EightChannel"></member>
    <member name="T:Atalasoft.Imaging.ColorManagement.ColorTransform">
      <summary>
        <para>Contains a color transform object and methods to convert from one colorspace to another using a
            <see cref="T:Atalasoft.Imaging.ColorManagement.ColorProfile" />.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ColorManagement.ColorTransform.#ctor(Atalasoft.Imaging.ColorManagement.ColorProfile,Atalasoft.Imaging.ColorManagement.ColorProfile)">
      <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.ColorManagement.ColorTransform" /> specifying a source and destination %ColorProfile%.
            </summary>
      <param name="source"> The source color profile. </param>
      <param name="dest"> The destination color profile. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ColorManagement.ColorTransform.#ctor(Atalasoft.Imaging.ColorManagement.ColorProfile,Atalasoft.Imaging.ColorManagement.ColorProfile,Atalasoft.Imaging.ColorManagement.ColorProfile,Atalasoft.Imaging.ColorManagement.RenderingIntent,Atalasoft.Imaging.ColorManagement.RenderingIntent)">
      <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.ColorManagement.ColorTransform" /> specifying a source,. destination, and target
            %ColorProfile% and the rendering intents of the translation. </summary>
      <param name="source"> The source color profile. </param>
      <param name="dest"> The destination color profile. </param>
      <param name="target"> The target output device color profile. </param>
      <param name="displayIntent"> The rendering intent to use for the display. </param>
      <param name="proofIntent"> The rendering intent to use for the target device. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ColorManagement.ColorTransform.#ctor(Atalasoft.Imaging.ColorManagement.ColorProfile,Atalasoft.Imaging.ColorManagement.ColorProfile,Atalasoft.Imaging.ColorManagement.RenderingIntent)">
      <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.ColorManagement.ColorTransform" /> specifying a source and destination %ColorProfile% and the
            rendering intent of the translation. </summary>
      <param name="source"> The source color profile. </param>
      <param name="dest"> The destination color profile. </param>
      <param name="renderingIntent"> The rendering intent of the translation. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ColorManagement.ColorTransform.BlackPointCompensation">
      <summary> Sets or gets a flag indicating whether or not black point compensation will be used </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ColorManagement.ColorTransform.ConvertColors(Atalasoft.Imaging.ColorManagement.ColorType,Atalasoft.Imaging.ColorManagement.ColorType,System.Drawing.Color[])">
      <summary> This method converts an array of colors using this <STRONG> ColorTransform</STRONG>   . </summary>
      <param name="inputColorType"> The <STRONG>ColorType </STRONG>of the input colors. </param>
      <param name="outputColorType"> The <STRONG>ColorType</STRONG> of the output colors. </param>
      <param name="inputColors">
        <para>A parameterr array of color values.</para>
      </param>
      <returns> An array of Colors. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ColorManagement.ColorTransform.ConvertColorSpace(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat)">
      <summary> Returns a new image with a translated colorspace. </summary>
      <param name="image"> The image to translate. </param>
      <param name="destPixelFormat"> The desired <see cref="T:Atalasoft.Imaging.PixelFormat" /> of the returned image. </param>
      <returns> A new image with a translated colorspace. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ColorManagement.ColorTransform.Dispose">
      <summary> Clean up unmanaged resources. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ColorManagement.ColorType"></member>
    <member name="F:Atalasoft.Imaging.ColorManagement.ColorType.Gray"></member>
    <member name="F:Atalasoft.Imaging.ColorManagement.ColorType.Rgb"></member>
    <member name="F:Atalasoft.Imaging.ColorManagement.ColorType.Xyz"></member>
    <member name="F:Atalasoft.Imaging.ColorManagement.ColorType.Yxy"></member>
    <member name="F:Atalasoft.Imaging.ColorManagement.ColorType.Lab"></member>
    <member name="F:Atalasoft.Imaging.ColorManagement.ColorType.ThreeChannel"></member>
    <member name="F:Atalasoft.Imaging.ColorManagement.ColorType.Cmyk"></member>
    <member name="F:Atalasoft.Imaging.ColorManagement.ColorType.FiveChannel"></member>
    <member name="F:Atalasoft.Imaging.ColorManagement.ColorType.SixChannel"></member>
    <member name="F:Atalasoft.Imaging.ColorManagement.ColorType.SevenChannel"></member>
    <member name="F:Atalasoft.Imaging.ColorManagement.ColorType.EightChannel"></member>
    <member name="F:Atalasoft.Imaging.ColorManagement.ColorType.Named"></member>
    <member name="T:Atalasoft.Imaging.ColorManagement.InvalidColorProfileException">
      <summary> This exception fires when the <see cref="T:Atalasoft.Imaging.ColorManagement.ColorProfile" /> used for a <see cref="T:Atalasoft.Imaging.ColorManagement.ColorTransform" /> are invalid. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ColorManagement.InvalidColorProfileException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ColorManagement.InvalidColorProfileException" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.ColorManagement.InvalidColorProfileException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ColorManagement.InvalidColorProfileException" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.ColorManagement.InvalidColorProfileException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ColorManagement.InvalidColorProfileException" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.ColorManagement.InvalidColorProfileException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ColorManagement.InvalidColorProfileException" /> class</summary>
    </member>
    <member name="T:Atalasoft.Imaging.ColorManagement.Platform">
      <summary> Indicates the platform that the profile is intended for. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ColorManagement.Platform.Apple"></member>
    <member name="F:Atalasoft.Imaging.ColorManagement.Platform.Microsoft"></member>
    <member name="F:Atalasoft.Imaging.ColorManagement.Platform.SiliconGraphics"></member>
    <member name="F:Atalasoft.Imaging.ColorManagement.Platform.Sun"></member>
    <member name="F:Atalasoft.Imaging.ColorManagement.Platform.Taligent"></member>
    <member name="T:Atalasoft.Imaging.ColorManagement.ProfileClass">
      <summary> Indicates the profile class. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ColorManagement.ProfileClass.Monitor">
      <summary> Display Device Profile </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ColorManagement.ProfileClass.Printer">
      <summary> Output Device Profile </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ColorManagement.ProfileClass.Scanner">
      <summary> Input Device Profile </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ColorManagement.ProfileClass.Link">
      <summary> Device Link Profile </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ColorManagement.ProfileClass.Abstract">
      <summary> Abstract Profile </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ColorManagement.ProfileClass.ColorSpace">
      <summary> Color Space Conversion Profile </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ColorManagement.ProfileClass.Named">
      <summary> Named Color Profile </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ColorManagement.ProfileFlags">
      <summary> Bit flags containing hints that the CMM uses to interpret the profile data. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ColorManagement.ProfileFlags.EmbeddedProfile">
      <summary> The profile is embedded in a bitmap file. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ColorManagement.ProfileFlags.DependentOnData">
      <summary> The profile can't be used independently of the embedded color data. Used for profiles that are embedded in
            bitmap files </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ColorManagement.RenderingIntent">
      <summary> Indicates different methods to create a color rendering as defined by the International Color Consortium
            (ICC). </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ColorManagement.RenderingIntent.Pictures">
      <summary> Known as perceptual intent in the ICC specification, causes the full gamut to be compressed or expanded to
            full the gamut of the destination device.  Most suitable for photographic images and is usually the default intent.
            </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ColorManagement.RenderingIntent.Proof">
      <summary> Known as the colorimetric intent in the ICC specification, causes colors that fall outside the range of
            the output device to be set to the nearest color while leaving the other colors unchanged.  Does not preserve the
            white point and is commonly used for proofing printed material. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ColorManagement.RenderingIntent.Graphics">
      <summary> Known as the Saturation intent in the ICC specification, it preserves the saturation of colors as the
            expense of hue and lightness.  Commonly used for business graphics. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ColorManagement.RenderingIntent.Match">
      <summary> Known as the absolute colorimetric intent in the ICC specification, causes colors that fall outside the
            range of the output device to be set to the nearest color while leaving the other colors unchanged.  Preserves the
            white point. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Drawing.Alignment">
      <summary> Specifies the line position. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Drawing.Alignment.Center">
      <summary> Center the line on the region. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Drawing.Alignment.Inset">
      <summary> Draw the line inside the region. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Drawing.Alignment.Outset">
      <summary> Draw the line outside the region. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Drawing.AtalaPen">
      <summary>
        <para>The AtalaPen is used to define a line or border used when drawing primitives onto a <see cref="T:Atalasoft.Imaging.Drawing.Canvas" />.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.AtalaPen.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Drawing.AtalaPen" /> class with
            the object defaults:,<BR />Width = 1</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.AtalaPen.#ctor(Atalasoft.Imaging.Drawing.Fill)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Drawing.AtalaPen" /> class with a specified <see cref="!:fill" />.</para>
      </summary>
      <param name="fill"> The Fill defining the fill characteristics of the line drawn with the pen. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.AtalaPen.#ctor(Atalasoft.Imaging.Drawing.Fill,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Drawing.AtalaPen" /> class with a specified <see cref="P:Atalasoft.Imaging.Drawing.AtalaPen.Fill" /> and
            width.</para>
      </summary>
      <param name="fill"> The Fill defining the fill characteristics of the line drawn with the pen. </param>
      <param name="width"> The width of the pen in pixels. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.AtalaPen.#ctor(Atalasoft.Imaging.Drawing.Fill,System.Int32,Atalasoft.Imaging.Drawing.LineStyle)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Drawing.AtalaPen" /> class with a specified <see cref="P:Atalasoft.Imaging.Drawing.AtalaPen.Fill" />, width, and
            <see cref="P:Atalasoft.Imaging.Drawing.AtalaPen.LineStyle" />.</para>
      </summary>
      <param name="fill"> The Fill defining the fill characteristics of the line drawn with the pen. </param>
      <param name="width"> The width of the pen in pixels. </param>
      <param name="lineStyle"> The style of the line. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.AtalaPen.#ctor(Atalasoft.Imaging.Drawing.Fill,System.Int32,Atalasoft.Imaging.Drawing.LineStyle,Atalasoft.Imaging.Drawing.EndCap,Atalasoft.Imaging.Drawing.CornerJoin)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Drawing.AtalaPen" /> class with a specified <see cref="P:Atalasoft.Imaging.Drawing.AtalaPen.Fill" />, width, <see cref="P:Atalasoft.Imaging.Drawing.AtalaPen.LineStyle" />, <see cref="P:Atalasoft.Imaging.Drawing.AtalaPen.EndCap" />, and <see cref="P:Atalasoft.Imaging.Drawing.AtalaPen.CornerJoin" />.</para>
      </summary>
      <param name="fill"> The Fill defining the fill characteristics of the line drawn with the pen. </param>
      <param name="width"> The width of the pen in pixels. </param>
      <param name="lineStyle"> The style of the line. </param>
      <param name="endCap"> The pen EndCap used when drawing. </param>
      <param name="cornerJoin"> The style of corners used for this pen. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.AtalaPen.#ctor(Atalasoft.Imaging.Drawing.Fill,System.Int32,Atalasoft.Imaging.Drawing.LineStyle,Atalasoft.Imaging.Drawing.EndCap,Atalasoft.Imaging.Drawing.CornerJoin,Atalasoft.Imaging.Drawing.Alignment)">
      <summary> Creates a new instance of AtalaPen specifying the <see cref="P:Atalasoft.Imaging.Drawing.AtalaPen.Fill" />, width, <see cref="P:Atalasoft.Imaging.Drawing.AtalaPen.LineStyle" />,
            <see cref="P:Atalasoft.Imaging.Drawing.AtalaPen.EndCap" />, <see cref="P:Atalasoft.Imaging.Drawing.AtalaPen.CornerJoin" /> and <see cref="P:Atalasoft.Imaging.Drawing.AtalaPen.Alignment" />. </summary>
      <param name="fill"> The Fill defining the fill characteristics of the line drawn with the pen. </param>
      <param name="width"> The width of the pen in pixels. </param>
      <param name="lineStyle"> The style of the line. </param>
      <param name="endCap"> The pen EndCap used when drawing. </param>
      <param name="cornerJoin"> The style of corners used for this pen. </param>
      <param name="alignment"> The pen alignment. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.AtalaPen.#ctor(System.Drawing.Color)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Drawing.AtalaPen" /> class with the specified color.  Using a constructor
            that specifies the color implies a fill type of solid</para>
      </summary>
      <param name="color"> The color of the pen. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.AtalaPen.#ctor(System.Drawing.Color,System.Int32)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Drawing.AtalaPen" /> class with a specified color and width.</para>
      </summary>
      <param name="color"> The color of the fill. </param>
      <param name="width"> The width of the pen in pixels. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.AtalaPen.#ctor(System.Drawing.Color,System.Int32,Atalasoft.Imaging.Drawing.LineStyle)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Drawing.AtalaPen" /> class with a specified color, width, and <see cref="P:Atalasoft.Imaging.Drawing.AtalaPen.LineStyle" />.</para>
      </summary>
      <param name="color"> The color of the fill. </param>
      <param name="width"> The width of the pen in pixels. </param>
      <param name="lineStyle"> The style of the line. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.AtalaPen.#ctor(System.Drawing.Color,System.Int32,Atalasoft.Imaging.Drawing.LineStyle,Atalasoft.Imaging.Drawing.EndCap,Atalasoft.Imaging.Drawing.CornerJoin)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Drawing.AtalaPen" /> class with a specified color, width, <see cref="P:Atalasoft.Imaging.Drawing.AtalaPen.LineStyle" />, 
            <see cref="P:Atalasoft.Imaging.Drawing.AtalaPen.EndCap" />, and <see cref="P:Atalasoft.Imaging.Drawing.AtalaPen.CornerJoin" />.</para>
      </summary>
      <param name="color"> The color of the pen. </param>
      <param name="width"> The width of the pen in pixels. </param>
      <param name="lineStyle"> The style of the line. </param>
      <param name="endCap"> The pen EndCap used when drawing. </param>
      <param name="cornerJoin"> The style of corners used for this pen. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.AtalaPen.#ctor(System.Drawing.Color,System.Int32,Atalasoft.Imaging.Drawing.LineStyle,Atalasoft.Imaging.Drawing.EndCap,Atalasoft.Imaging.Drawing.CornerJoin,Atalasoft.Imaging.Drawing.Alignment)">
      <summary> Creates a new instance of AtalaPen specifying color, width, <see cref="P:Atalasoft.Imaging.Drawing.AtalaPen.LineStyle" />, <see cref="P:Atalasoft.Imaging.Drawing.AtalaPen.EndCap" />, 
            <see cref="P:Atalasoft.Imaging.Drawing.AtalaPen.CornerJoin" /> and <see cref="P:Atalasoft.Imaging.Drawing.AtalaPen.Alignment" />. </summary>
      <param name="color"> The color of the pen. </param>
      <param name="width"> The width of the pen in pixels. </param>
      <param name="lineStyle"> The style of the line. </param>
      <param name="endCap"> The pen EndCap used when drawing. </param>
      <param name="cornerJoin"> The style of corners used for this pen. </param>
      <param name="alignment"> The pen alignment. </param>
    </member>
    <member name="P:Atalasoft.Imaging.Drawing.AtalaPen.Alignment">
      <summary> Gets or sets a value indicating the line positioning relative to the coordinates. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.AtalaPen.Clone">
      <summary> Create a copy of this <see cref="T:Atalasoft.Imaging.Drawing.AtalaPen" />. </summary>
      <returns> Pen object </returns>
    </member>
    <member name="P:Atalasoft.Imaging.Drawing.AtalaPen.Color">
      <summary> Gets or sets the color of the pen. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Drawing.AtalaPen.CornerJoin">
      <summary> Gets or sets the style of corners used for this pen. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Drawing.AtalaPen.CustomDashPattern">
      <summary> Gets or sets an array of int's indicating the dash pattern when the LineStyle is set to Custom. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Drawing.AtalaPen.EndCap">
      <summary> Gets or sets the pen EndCap used when drawing. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Drawing.AtalaPen.Fill">
      <summary> Gets or sets the Fill used when drawing with this pen. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Drawing.AtalaPen.LineStyle">
      <summary> Gets or sets the type of line drawn with this pen. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Drawing.AtalaPen.Width">
      <summary> Gets or sets the width of the pen in pixels. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Drawing.AtalaPenConverter"></member>
    <member name="M:Atalasoft.Imaging.Drawing.AtalaPenConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Drawing.AtalaPenConverter" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.AtalaPenConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)"></member>
    <member name="M:Atalasoft.Imaging.Drawing.AtalaPenConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)"></member>
    <member name="M:Atalasoft.Imaging.Drawing.AtalaPenConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)"></member>
    <member name="M:Atalasoft.Imaging.Drawing.AtalaPenConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)"></member>
    <member name="T:Atalasoft.Imaging.Drawing.Canvas">
      <summary> This class is used to draw primitives and text onto an AtalaImage, Bitmap, or Graphics object. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.Canvas.#ctor(Atalasoft.Imaging.AtalaImage)">
      <summary> Initializes a new instance of a <see cref="T:Atalasoft.Imaging.Drawing.Canvas" /> object specifying an <see cref="T:Atalasoft.Imaging.AtalaImage" /> to draw on.
            </summary>
      <param name="image"> The image to draw on. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.Canvas.#ctor(System.Drawing.Graphics)">
      <summary> Initializes a new instance of a <see cref="T:Atalasoft.Imaging.Drawing.Canvas" /> object specifying a <see cref="T:System.Drawing.Graphics" /> to draw on.
            </summary>
      <param name="graphics"> The device to draw on. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.Canvas.CalculateTextSize(System.String,System.Drawing.Font)">
      <summary> Calculates the pixel size required to draw text using a specific font. </summary>
      <param name="text"> The text to draw. </param>
      <param name="font"> The font used for the text. </param>
      <returns> The size in pixel. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.Canvas.CalculateTextSize(System.String,System.Drawing.Font,Atalasoft.Imaging.Drawing.TextFormat)">
      <summary> Calculates the pixel size required to draw text using a specific font and text format. </summary>
      <param name="text"> The text string to evaluate. </param>
      <param name="font"> The text font. </param>
      <param name="format"> The text formatting to apply. </param>
      <returns> Returns the size of single line text without actually drawing it. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.Canvas.CalculateTextSize(System.String,System.Drawing.Size,System.Drawing.Font,Atalasoft.Imaging.Drawing.TextFormat)">
      <summary> Calculates the size of bound text without actually drawing it. </summary>
      <param name="text"> The text string to evaluate. </param>
      <param name="boundSize"> The size of the bound </param>
      <param name="font"> The text font. </param>
      <param name="format"> The text formatting to apply. </param>
      <returns> Returns the size of bound text without actually drawing it. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawEllipse(System.Drawing.Rectangle,Atalasoft.Imaging.Drawing.AtalaPen)">
      <summary> Draws an ellipse onto this canvas specifying the border pen. </summary>
      <param name="rect"> The bounding rectangle of the ellipse. </param>
      <param name="pen"> The <see cref="T:Atalasoft.Imaging.Drawing.AtalaPen" /> controlling the border characteristics. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawEllipse(System.Drawing.Rectangle,Atalasoft.Imaging.Drawing.AtalaPen,Atalasoft.Imaging.Drawing.Fill)">
      <summary> Draws an ellipse onto this canvas specifying the border pen and Fill. </summary>
      <param name="rect"> The bounding rectangle of the ellipse. </param>
      <param name="pen"> The <see cref="T:Atalasoft.Imaging.Drawing.AtalaPen" /> controlling the border characteristics. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Imaging.Drawing.Fill" /> specifying the fill characteristics. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawEllipse(System.Drawing.Rectangle,Atalasoft.Imaging.Drawing.Fill)">
      <summary> Draws an ellipse onto this canvas specifying the Fill. </summary>
      <param name="rect"> The bounding rectangle of the ellipse. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Imaging.Drawing.Fill" /> specifying the fill characteristics. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawLine(System.Drawing.Point,System.Drawing.Point,Atalasoft.Imaging.Drawing.AtalaPen)">
      <summary> Draw a line onto this canvas. </summary>
      <param name="startPoint"> The start point of the line in image pixel coordinates. </param>
      <param name="endPoint"> The end point of the line in image pixel coordinates. </param>
      <param name="pen"> The <see cref="T:Atalasoft.Imaging.Drawing.AtalaPen" /> controling the line characteristics. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawLines(System.Drawing.Point[],Atalasoft.Imaging.Drawing.AtalaPen)">
      <summary> Draws multiple connected lines onto this canvas. </summary>
      <param name="points"> An array of points that straight lines are drawn through. </param>
      <param name="pen"> The <see cref="T:Atalasoft.Imaging.Drawing.AtalaPen" /> controlling the line characteristics. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawPolygon(System.Drawing.Point[],Atalasoft.Imaging.Drawing.AtalaPen)">
      <summary> Draw a series of connected lines that form a closed polygon specifying the border pen. </summary>
      <param name="points"> An array of points forming a polygon that straight lines are drawn through. </param>
      <param name="pen"> The <see cref="T:Atalasoft.Imaging.Drawing.AtalaPen" /> controlling the border characteristics. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawPolygon(System.Drawing.Point[],Atalasoft.Imaging.Drawing.AtalaPen,Atalasoft.Imaging.Drawing.Fill)">
      <summary> Draw a series of connected lines that form a closed polygon specifying the border pen and inside fill.
            </summary>
      <param name="points"> An array of points forming a polygon that straight lines are drawn through. </param>
      <param name="pen"> The %AtalaPen% controlling the border characteristics. </param>
      <param name="fill"> The %Fill% specifying the fill characteristics. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawPolygon(System.Drawing.Point[],Atalasoft.Imaging.Drawing.Fill)">
      <summary> Draw a series of connected lines that form a closed polygon specifying the inside fill. </summary>
      <param name="points"> An array of points forming a polygon that straight lines are drawn through. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Imaging.Drawing.Fill" /> specifying the fill characteristics. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawRectangle(System.Drawing.Rectangle,Atalasoft.Imaging.Drawing.AtalaPen)">
      <summary> Draws a rectangle onto this canvas specifying the border pen. </summary>
      <param name="rect"> The position and size of the rectangle. </param>
      <param name="pen"> The <see cref="T:Atalasoft.Imaging.Drawing.AtalaPen" /> controlling the border characteristics. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawRectangle(System.Drawing.Rectangle,Atalasoft.Imaging.Drawing.AtalaPen,Atalasoft.Imaging.Drawing.Fill)">
      <summary> Draws a rectangle onto this canvas specifying the border pen and fill. </summary>
      <param name="rect"> The position and size of the rectangle. </param>
      <param name="pen"> The <see cref="T:Atalasoft.Imaging.Drawing.AtalaPen" /> controlling the border characteristics. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Imaging.Drawing.Fill" /> specifying the fill characteristics. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawRectangle(System.Drawing.Rectangle,Atalasoft.Imaging.Drawing.AtalaPen,Atalasoft.Imaging.Drawing.Fill,System.Drawing.Size)">
      <summary> Draws a rounded rectangle onto this canvas specifying the border pen and fill. </summary>
      <param name="rect"> The position and size of the rectangle. </param>
      <param name="pen"> The <see cref="T:Atalasoft.Imaging.Drawing.AtalaPen" /> controlling the border characteristics. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Imaging.Drawing.Fill" /> specifying the fill characteristics. </param>
      <param name="cornerRadius"> The radius in pixels of the corners. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawRectangle(System.Drawing.Rectangle,Atalasoft.Imaging.Drawing.AtalaPen,System.Drawing.Size)">
      <summary> Draws a rounded rectangle onto this canvas specifying the border pen. </summary>
      <param name="rect"> The position and size of the rectangle. </param>
      <param name="pen"> The <see cref="T:Atalasoft.Imaging.Drawing.AtalaPen" /> controlling the border characteristics. </param>
      <param name="cornerRadius"> The radius in pixels of the corners. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawRectangle(System.Drawing.Rectangle,Atalasoft.Imaging.Drawing.Fill)">
      <summary> Draws a rectangle onto this canvas specifying the fill. </summary>
      <param name="rect"> The position and size of the rectangle. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Imaging.Drawing.Fill" /> specifying the fill characteristics. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawRectangle(System.Drawing.Rectangle,Atalasoft.Imaging.Drawing.Fill,System.Drawing.Size)">
      <summary> Draws a rounded rectangle onto this canvas specifying the fill. </summary>
      <param name="rect"> The position and size of the rectangle. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Imaging.Drawing.Fill" /> specifying the fill characteristics. </param>
      <param name="cornerRadius"> The radius in pixels of the corners. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawRegion(System.Drawing.Region,Atalasoft.Imaging.Drawing.Fill)">
      <summary> Draws a filled region. </summary>
      <param name="region"> The region to fill. </param>
      <param name="fill"> The <see cref="T:Atalasoft.Imaging.Drawing.Fill" /> specifying the fill characteristics. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawText(System.String,System.Drawing.Point,System.Drawing.Font,Atalasoft.Imaging.Drawing.Fill)">
      <summary> Draw a single line text string onto this canvas specifying the upper left corner position. </summary>
      <param name="text"> The text string to draw. </param>
      <param name="position"> The position of the upper left corner of the text rectangle to draw. </param>
      <param name="font"> The text font. </param>
      <param name="foreColor"> The text fill. </param>
      <returns> The actual size of the text drawn. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawText(System.String,System.Drawing.Point,System.Drawing.Font,Atalasoft.Imaging.Drawing.Fill,Atalasoft.Imaging.Drawing.SolidFill)">
      <summary> Draw a single line text string onto this canvas specifying the upper left corner position and a solid
            background color. </summary>
      <param name="text"> The text string to draw. </param>
      <param name="position"> The position of the upper left corner of the text rectangle to draw. </param>
      <param name="font"> The text font. </param>
      <param name="foreColor"> The text fill. </param>
      <param name="backColor"> The background color. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawText(System.String,System.Drawing.Point,System.Drawing.Font,Atalasoft.Imaging.Drawing.Fill,Atalasoft.Imaging.Drawing.SolidFill,Atalasoft.Imaging.Drawing.TextFormat)">
      <summary> Draw a single line text string onto this canvas specifying the upper left corner position and a solid
            background color. </summary>
      <param name="text"> The text string to draw. </param>
      <param name="position"> The position of the upper left corner of the text rectangle to draw. </param>
      <param name="font"> The text font. </param>
      <param name="foreColor"> The text fill. </param>
      <param name="backColor"> The background color. </param>
      <param name="format"> The text formatting to apply. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawText(System.String,System.Drawing.Point,System.Drawing.Font,Atalasoft.Imaging.Drawing.Fill,Atalasoft.Imaging.Drawing.TextFormat)">
      <summary> Draw a single line text string onto this canvas specifying the upper left corner position and text
            formatting. </summary>
      <param name="text"> The text string to draw. </param>
      <param name="position"> The position of the upper left corner of the text rectangle to draw. </param>
      <param name="font"> The text font. </param>
      <param name="foreColor"> The text fill. </param>
      <param name="format"> The text formatting to apply. </param>
      <returns> The actual size of the text drawn. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawText(System.String,System.Drawing.Rectangle,System.Drawing.Font,Atalasoft.Imaging.Drawing.Fill)">
      <summary> Draw multiline text onto this canvas specifying the rectangular bound area of the string. </summary>
      <param name="text"> The text string to draw. </param>
      <param name="boundRectangle"> The bounding rectangle of the text to draw.  Specify 0 height to prevent clipping the
            text. </param>
      <param name="font"> The text font. </param>
      <param name="foreColor"> The text fill. </param>
      <returns> The actual size of the text drawn. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawText(System.String,System.Drawing.Rectangle,System.Drawing.Font,Atalasoft.Imaging.Drawing.Fill,Atalasoft.Imaging.Drawing.SolidFill,Atalasoft.Imaging.Drawing.TextFormat)">
      <summary> Draw a single line text string onto this canvas specifying the upper left corner position and a solid
            background color. </summary>
      <param name="text"> The text string to draw. </param>
      <param name="boundRectangle"> The bounding rectangle of the text to draw.  Specify 0 height to prevent clipping the
            text. </param>
      <param name="font"> The text font. </param>
      <param name="foreColor"> The text fill. </param>
      <param name="backColor"> The background color. </param>
      <param name="format"> The text formatting to apply. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawText(System.String,System.Drawing.Rectangle,System.Drawing.Font,Atalasoft.Imaging.Drawing.Fill,Atalasoft.Imaging.Drawing.TextFormat)">
      <summary> Draw multiline text onto this canvas specifying the rectangular bound area of the string and text
            formatting. </summary>
      <param name="text"> The text string to draw. </param>
      <param name="boundRectangle"> The bounding rectangle of the text to draw.  Specify 0 height to prevent clipping the
            text </param>
      <param name="font"> The text font. </param>
      <param name="foreColor"> The text fill. </param>
      <param name="format"> The text formatting to apply. </param>
      <returns> The actual size of the text drawn. </returns>
    </member>
    <member name="P:Atalasoft.Imaging.Drawing.Canvas.FontQuality">
      <summary> Gets or sets the quality for font rendering. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Drawing.Canvas.InvertedOnGraphics">
      <summary> Gets or sets a value indicating if entities being drawn on a graphics object will be inverted. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Drawing.Canvas.SmoothingLevel">
      <summary> Gets or sets the amount of antialiasing applied to the entity being drawn onto this canvas. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Drawing.CornerJoin">
      <summary> Corner style used where lines join. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Drawing.CornerJoin.Miter">
      <summary> Joins are mitred. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Drawing.CornerJoin.Bevel">
      <summary> Joins are beveled. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Drawing.CornerJoin.Round">
      <summary> Joins are round. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Drawing.EndCap">
      <summary> Drawing style for the end of lines. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Drawing.EndCap.Flat">
      <summary> End caps are flat. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Drawing.EndCap.Round">
      <summary> End caps are round. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Drawing.EndCap.Square">
      <summary> End caps are square. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Drawing.Fill">
      <summary>
        <para>The base class which all Fill objects inherit.  A Fill contains the color of the entity being
            drawn.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.Fill.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Drawing.Fill" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.Fill.Clone">
      <summary> Returns a copy of this Fill. </summary>
      <returns> A copy of this Fill. </returns>
    </member>
    <member name="P:Atalasoft.Imaging.Drawing.Fill.Color">
      <summary> Gets or sets the color of the fill. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.Fill.GetBrushHandle">
      <summary> Returns a GDI handle to the brush (for internal use only). </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Drawing.Fill.PaletteIndex">
      <summary> Gets or sets the palette index used for the color. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Drawing.FontQuality">
      <summary> Font quality style when using the <see cref="M:Atalasoft.Imaging.Drawing.Canvas.DrawText(System.String,System.Drawing.Point,System.Drawing.Font,Atalasoft.Imaging.Drawing.Fill)" /> method. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Drawing.FontQuality.Default">
      <summary> Appearance of the font does not matter.  System settings will determine its quality. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Drawing.FontQuality.Draft">
      <summary> Appearance of the font is less important than when <STRONG>Proof</STRONG> is used. For raster fonts,
            scaling is enabled, which means that more font sizes are available, but the quality may be lower. Bold, italic,
            underline, and strikeout fonts are synthesized if necessary. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Drawing.FontQuality.Proof">
      <summary> Character quality of the font is more important than exact matching of the logical-font attributes. For
            raster fonts, scaling is disabled and the font closest in size is chosen. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Drawing.FontQuality.NonAntialiased">
      <summary> Font is never antialiased. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Drawing.FontQuality.Antialiased">
      <summary> Font is always antialiased if the font supports it and the size of the font is not too small or too large.
            </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Drawing.FontQuality.ClearType">
      <summary> If set, text is rendered (when possible) using ClearType antialiasing method.  Windows XP or above is
            requred. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Drawing.Hatch">
      <summary>
            The style of Hatch to use when FillStyle is Hatched.
            </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Drawing.Hatch.Cross">
      <summary> Horizontal and vertical cross-hatch </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Drawing.Hatch.DiagonalCross">
      <summary> 45-degree crosshatch </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Drawing.Hatch.DiagonalDown">
      <summary> A 45-degree downward, left-to-right hatch </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Drawing.Hatch.DiagonalUp">
      <summary> A 45-degree upward, left-to-right hatch </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Drawing.Hatch.Horizontal">
      <summary> Horizontal hatch </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Drawing.Hatch.Vertical">
      <summary> Vertical hatch </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Drawing.HatchedFill">
      <summary>
        <para>A Fill containing hatched lines.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.HatchedFill.#ctor(Atalasoft.Imaging.Drawing.Hatch)">
      <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.Drawing.HatchedFill" /> with a black hatch and specified hatch style. </summary>
      <param name="style"> The type of hatch. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.HatchedFill.#ctor(Atalasoft.Imaging.Drawing.Hatch,System.Drawing.Color)">
      <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.Drawing.HatchedFill" /> with a specified hatch style and color. </summary>
      <param name="style"> The type of hatch. </param>
      <param name="color"> The hatch color. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.HatchedFill.Clone">
      <summary> Returns a copy of this HatchedFill. </summary>
      <returns> A copy of this HatchedFill. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.HatchedFill.GetBrushHandle">
      <summary> Returns a GDI brush handle. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Drawing.HatchedFill.HatchStyle"></member>
    <member name="T:Atalasoft.Imaging.Drawing.LineStyle">
      <summary> The type of line to draw. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Drawing.LineStyle.Solid">
      <summary> The pen is solid. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Drawing.LineStyle.Dash">
      <summary> The pen is dashed. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Drawing.LineStyle.Dot">
      <summary> The pen is dotted. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Drawing.LineStyle.DashDot">
      <summary> The pen has alternating dashes and dots. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Drawing.LineStyle.DashDotDot">
      <summary> The pen has alternating dashes and double dots. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Drawing.LineStyle.Custom">
      <summary> Allows for a custom dash/dot combination. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Drawing.SolidFill">
      <summary> A Fill containing a solid color. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.SolidFill.#ctor">
      <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.Drawing.SolidFill" /> with the color black. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.SolidFill.#ctor(System.Drawing.Color)">
      <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.Drawing.SolidFill" /> with a specified color. </summary>
      <param name="color"> The Fill color. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.SolidFill.Clone">
      <summary> Returns a copy of this SolidFill. </summary>
      <returns> A copy of this SoldFill. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.SolidFill.GetBrushHandle">
      <summary> Returns a GDI brush handle. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Drawing.TextAlignment">
      <summary> The horizontal alignment of the text. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Drawing.TextAlignment.Left">
      <summary> Left aligned text. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Drawing.TextAlignment.Center">
      <summary> Centered text. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Drawing.TextAlignment.Right">
      <summary> Right aligned text. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Drawing.TextAlignment.Justify">
      <summary> Justified text. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Drawing.TextFormat">
      <summary>
        <para>Contains extended properties for use with drawing text onto a Canvas.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.TextFormat.#ctor">
      <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.Drawing.TextFormat" /> with default settings. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.TextFormat.#ctor(Atalasoft.Imaging.Drawing.TextAlignment)">
      <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.Drawing.TextFormat" /> specifying the horizontal alignment. </summary>
      <param name="alignment"> The horizontal alignment of the drawn text. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.TextFormat.#ctor(Atalasoft.Imaging.Drawing.TextAlignment,System.Double)">
      <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.Drawing.TextFormat" /> specifying the horizontal alignment and angle. </summary>
      <param name="alignment"> The horizontal alignment of the drawn text. </param>
      <param name="angle"> The angle in degrees of the drawn text. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.TextFormat.#ctor(Atalasoft.Imaging.Drawing.TextAlignment,System.Double,System.Int32)">
      <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.Drawing.TextFormat" /> specifying the horizontal alignment, angle, and inter-character
            spacing. </summary>
      <param name="alignment"> The horizontal alignment of the drawn text. </param>
      <param name="angle"> The angle in degrees of the drawn text. </param>
      <param name="interCharacterSpace"> Number of additional pixels to add between characters. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.TextFormat.#ctor(Atalasoft.Imaging.Drawing.TextAlignment,System.Double,System.Int32,Atalasoft.Imaging.Dpi)">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Drawing.TextFormat" /> class</summary>
    </member>
    <member name="P:Atalasoft.Imaging.Drawing.TextFormat.Alignment">
      <summary> Gets or sets the horizontal alignment of the text to draw. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Drawing.TextFormat.Angle">
      <summary> Gets or sets the angle in degrees of the text to draw. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Drawing.TextFormat.CharacterWidth">
      <summary> Gets or sets the width of the characters </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Drawing.TextFormat.Clone"></member>
    <member name="P:Atalasoft.Imaging.Drawing.TextFormat.InterCharacterSpace">
      <summary> Gets or sets the number of additional pixels to add between characters.  </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Drawing.TextFormat.ScaleToDpi">
      <summary> Causes text to be drawn relative to the specified DPI. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.AlphaMergeType">
      <summary>
            When images are combined, the alpha channels may be merged in one of many ways as listed in this enumeration.
            </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.AlphaMergeType.Replace">
      <summary>
            Replace the bottom alpha value with the top.
            </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.AlphaMergeType.UseMostOpaque">
      <summary>
            Use the higher of the bottom and top values.
            </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.AlphaMergeType.UseMostTransparent">
      <summary>
            Use the lower of the bottom and top values.
            </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.AlphaMergeType.Add">
      <summary>
            Add the bottom and top values.  The maximum value is 255.
            </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.AlphaMergeType.Subtract">
      <summary>
            Subtract the top value from the bottom.  The minimum value is 0.
            </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.AlphaMergeType.LogicalAnd">
      <summary>
            Perform a bitwise logical AND on the bottom and top values.
            </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.AlphaMergeType.LogicalOR">
      <summary>
            Perform a bitwise logical OR on the bottom and top values.
            </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.AlphaMergeType.LogicalXOR">
      <summary>
            Perform a bitwise logical XOR on the bottom and top values.
            </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.AlphaMergeType.UseOriginal">
      <summary>
            Ignore the top value.
            </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand">
      <summary>
            Summary description for ApplyPaletteCommand.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand.#ctor(Atalasoft.Imaging.Palette)">
      <summary> Initializes a new instance of <STRONG>ApplyPaletteCommand</STRONG> specifying the
            <STRONG>Palette</STRONG>. </summary>
      <param name="palette">
        <para>The <STRONG>Palette</STRONG> to map the image to.</para>
      </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand.#ctor(Atalasoft.Imaging.Palette,Atalasoft.Imaging.ImageProcessing.DitheringMode)">
      <summary> Initializes a new instance of <STRONG>ApplyPaletteCommand</STRONG> specifying the <STRONG>Palette</STRONG>
            and dithering mode. </summary>
      <param name="palette">
        <para>The <STRONG>Palette</STRONG> to map the image to.</para>
      </param>
      <param name="ditherMode"> The dithering mode to use when mapping the image to a palette. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand.#ctor(Atalasoft.Imaging.Palette,Atalasoft.Imaging.ImageProcessing.DitheringMode,System.Int32)">
      <summary> Initializes a new instance of <STRONG>ApplyPaletteCommand</STRONG> specifying the palette, dithering mode,
            and dither error. </summary>
      <param name="palette">
        <para>The palette to map the image to.</para>
      </param>
      <param name="ditherMode"> The dithering mode to use when mapping the image to a palette. </param>
      <param name="ditherErrorMax"> The amount of dithering.  (0 - 127) </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Initializes a new instance of %ApplyPaletteCommand%. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand.DitherErrorMax">
      <summary>
            Gets or sets the value of ditherMode
            </summary>
      <exception> Thrown if the value is less than 0 or greater than 127. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand.DitherMode">
      <summary>
            Gets or sets the value of ditherMode
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand.Palette">
      <summary>
            Gets or sets the value of palette
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.AutoConfigurableAttribute">
      <summary> When applied to a property in an ImageCommand, allows is to be an Auto Configurable. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.AutoConfigurableAttribute.#ctor(System.Int32)">
      <summary> Creates a new instance of AutoConfigurableAttribute specifying the bit value. </summary>
      <param name="bitValue"> The value to associate with unmanaged code. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.AutoConfigurableAttribute.BitValue">
      <summary> Gets the value to associate this property in unmanaged code. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.AutoConfigurableAttribute.GenerateCommandBitField(Atalasoft.Imaging.ImageProcessing.ImageCommand)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.AutoCropCommand">
      <summary> Automatically crops an image by removing borders around the edge of an image with a solid color.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.#ctor">
      <summary>
            Creates a new instance of AutoCropCommand.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.#ctor(System.Double)">
      <summary> Initializes a new instance of <STRONG>AutoCropCommand</STRONG> specifying a tolerance. </summary>
      <param name="tolerance">
        <para>The tolerance used to locate the edges.  (0 - 100)</para>
      </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.#ctor(System.Double,System.Drawing.Color)">
      <summary> Initializes a new instance of <STRONG>AutoCropCommand</STRONG> specifying a tolerance and override color.</summary>
      <param name="tolerance">
        <para>The tolerance used to locate the edges.  (0 - 100)</para>
      </param>
      <param name="overrideColor">
        <para>A specific color to represent the image 'whitespace'.</para>
      </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.#ctor(System.Double,System.Drawing.Color,System.Boolean)">
      <summary> Initializes a new instance of <STRONG>AutoCropCommand</STRONG> specifying a tolerance, override color, and
            if uses median filter. </summary>
      <param name="tolerance">
        <para>The tolerance used to locate the edges.  (0 - 100)</para>
      </param>
      <param name="overrideColor">
        <para>A specific color to represent the image 'whitespace'.</para>
      </param>
      <param name="useMedianFilter"> If true, removed noise from the image prior to getting crop dimensions. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.#ctor(System.Double,System.Int32)">
      <summary> Initializes a new instance of AutoCropCommand specifying a tolerance and override index. </summary>
      <param name="tolerance">
        <para>The tolerance used to locate the edges.  (0 - 100)</para>
      </param>
      <param name="overrideIndex">
        <para>A palette index value containing the color to represent image
            'whitespace'.</para>
      </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.#ctor(System.Double,System.Int32,System.Boolean)">
      <summary> Initializes a new instance of <STRONG>AutoCropCommand</STRONG> specifying a tolerance, override index, and
            if uses median filter. </summary>
      <param name="tolerance">
        <para>The tolerance used to locate the edges.  (0 - 100)</para>
      </param>
      <param name="overrideIndex">
        <para>A specific color to represent the image 'whitespace'.</para>
      </param>
      <param name="useMedianFilter"> If true, removed noise from the image prior to getting crop dimensions. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Initializes a new instance of <STRONG>AutoCropCommand</STRONG> with 0 tolerance. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.GetBorder(Atalasoft.Imaging.AtalaImage)">
      <summary> Returns a Rectangle of the border to remove. </summary>
      <param name="sourceImage"> The AtalaImage that will be evaluated. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.OverrideColor">
      <summary> Gets or sets a specific color to represent the image 'whitespace'. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.OverrideIndex">
      <summary> Gets or sets a palette index value containing the color to represent image 'whitespace'. </summary>
      <exception> Thrown when the value is less than -1 or greater than 255. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.Tolerance">
      <summary> Gets or sets the percentage tolerance used to locate the edges, from 0 to 100. </summary>
      <exception> Thrown when the value is less than 0 or greater than 100. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.UseMedianFilter">
      <summary> Gets or sets a value indicating if the noise is removed prior to getting the crop dimensions. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand">
      <summary> Changes the image to a new <see cref="T:Atalasoft.Imaging.PixelFormat" />. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand.#ctor(Atalasoft.Imaging.PixelFormat)">
      <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand" /> specifying the new pixel format. </summary>
      <param name="newPixelFormat"> The PixelFormat of the new image. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand.#ctor(Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.ColorManagement.ColorProfile)">
      <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand" /> specifying the new pixel format and color
            profile. </summary>
      <param name="newPixelFormat"> The PixelFormat of the new image. </param>
      <param name="destProfile"> This is the destination colorprofile to use when changing colorspaces. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand" />. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand.DestProfile">
      <summary> Gets or sets the color profile to use when converting the image to a new colorspace. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand.NewPixelFormat">
      <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.PixelFormat" /> of the new image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.ChannelFlags">
      <summary>
            Bit flags used by some methods to specify which channels to work with.
            </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.ChannelFlags.Channel1">
      <summary> The first channel in the image.  For a RGB or RGBA image this is the Blue color channel. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.ChannelFlags.Channel2">
      <summary> The second channel in the image.  For a RGB or RGBA image this is the Green color channel. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.ChannelFlags.Channel3">
      <summary> The third channel in the image.  For a RGB or RGBA image this is the Red color channel. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.ChannelFlags.Channel4">
      <summary> The fourth channel in the image.  For a RGBA image this is the Alpha channel. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.ChannelFlags.AllChannels">
      <summary> Specifies all channels in the image (Channel1 | Channel2 | Channel3 | Channel4). </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.ColormatchedMask">
      <summary> This class is used to get a mask image matching a specified color or contiguous pixels at a specified
            point. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ColormatchedMask.#ctor(Atalasoft.Imaging.AtalaImage)">
      <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.ColormatchedMask" />. </summary>
      <param name="image"> The AtalaImage to return apply the colormatching to. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ColormatchedMask.#ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Initializes a new instance of %ColormatchedMask% specifying the AtalaImage to evaluate and a progress
            callback. </summary>
      <param name="image"> The AtalaImage to return apply the colormatching to. </param>
      <param name="progress"> The progress callback. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ColormatchedMask.GetEdgeColorMatchedMask(System.Drawing.Point,System.Drawing.Color,System.Double)">
      <summary> Mask area is bounded by pixels matching the edgeColor parameter. </summary>
      <param name="center"> The point to begin the colormatch. </param>
      <param name="edgeColor"> The color of the edge to find. </param>
      <param name="tolerance"> The tolerance (0 - 100) </param>
      <exception> Thrown if tolerance is less than 0 or greater than 100. </exception>
      <exception> Thrown if the center point if outside the image boundary. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ColormatchedMask.GetSurfaceColorMatchedMask(System.Drawing.Point,System.Double)">
      <summary> All contiguous pixels matching the pixel at the center point are returned as on in resulting mask.
            </summary>
      <param name="center"> The point to begin the colormatch. </param>
      <param name="tolerance"> The tolerance (0 - 100) </param>
      <exception> Thrown if tolerance is less than 0 or greater than 100. </exception>
      <exception> Thrown if the center point if outside the image boundary. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.ColormatchedMask.Image">
      <summary> Gets or sets the AtalaImage to apply the colormatching to. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.ColormatchedMask.Progress">
      <summary> Gets or sets the progress callback. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.ColorMatchMode">
      <summary> Specifies the type of colormatching to use when using <see cref="!:FloodFillCommand" />. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.ColorMatchMode.Edge">
      <summary> Indicates that the colormatching will occur up to a border of the specified color. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.ColorMatchMode.Surface">
      <summary> Indicates that the colormatching will occur with all contingous pixels from the starting point. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.CropCommand">
      <summary> Creates a new image from a rectangular section in the source image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.CropCommand.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.CropCommand" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.CropCommand.#ctor(System.Drawing.Rectangle)">
      <summary> Creates a new instance of CropCommand specifying the crop rectangle. </summary>
      <param name="cropRect"> The rectangular portion of the source image to copy into a new image. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.CropCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.CropCommand" /> specifying the crop rectangle. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.CropCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.CropCommand.CropRect">
      <summary>
        <para>Gets or sets the rectangular portion of the source image to copy into a new image.</para>
      </summary>
      <exception> Thrown if the width or height of the crop rectangle is less than or equal to 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.CropCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.CropCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.CropCommand.PerformActualCommand4Bit(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.CropCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.CropCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.DitheringMode">
      <summary> Specifies the dithering algorithm to use when converting an image to colormapped. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.DitheringMode.None">
      <summary> Specifies a best fit method with no dithering. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.DitheringMode.TwoValue">
      <summary> Specifies a simple 2-value style of dithering. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.DitheringMode.FloydSteinberg">
      <summary>
        <para>Specifies Floyd-Steinberg dithering.  This method of dithering uses error diffusion and produces the
            best dithered image.</para>
      </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Histogram">
      <summary>
            Summary description for Histogram.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Histogram.#ctor(Atalasoft.Imaging.AtalaImage)">
      <summary> Initializes a new instance of the Histogram object. </summary>
      <param name="image"> The image to evaluate. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Histogram.#ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Initializes a new instance of the Histogram object. </summary>
      <param name="image"> The image to evaluate. </param>
      <param name="progress"> The progress callback. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Histogram.#ctor(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
      <summary> Creates a new instance of Histogram specifying the image to examine and a specific rectangular area of the
            image to work with. </summary>
      <param name="image"> The image to examine. </param>
      <param name="area"> A rectangular area of the image to work with. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Histogram.#ctor(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ProgressEventHandler)">
      <summary> Creates an instance of Histogram specifying the image to examine, a selection of the image to work with
            and the progress event handler. </summary>
      <param name="image"> The image to examine. </param>
      <param name="area"> A rectangular area of the image to work with. </param>
      <param name="progress"> The progress callback. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Histogram.Area">
      <summary> Gets or sets a rectangular area of the image the histogram methods will work with. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Histogram.GetBrightnessHistogram">
      <summary> Returns an array containing a histogram of brightness values in the image. </summary>
      <returns> An array containing a histogram of brightness values in the image. </returns>
      <exception> Thrown if the Image property is null. </exception>
      <exception> Thrown if the pixel format is colormapped, or CMYK. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Histogram.GetChannelHistogram(System.Int32)">
      <summary> Returns an array containing a histogram of color values from a particular channel in the image. </summary>
      <param name="channelIndex"> The zero based channel index to evaluate.  (0 - 3) </param>
      <returns> An array containing a histogram of color values from a particular channel in the image. </returns>
      <exception> Thrown if the pixel format of the source image is colormapped. </exception>
      <exception> Thrown if the Image property is null. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Histogram.GetDocumentHistogram">
      <summary> Returns a two element array containing the number of black and white pixels in a binary image. </summary>
      <exception> Thrown if the image pixelformat is other than Pixel1bppIndexed. </exception>
      <exception> Thrown if the image is null. </exception>
      <exception> Thrown is the current license is not DotImage Document Imaging. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Histogram.Image">
      <summary> Gets or sets the image to evaluate. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Histogram.Progress">
      <summary> Gets or sets the progress delegate.  </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.ImageAnalyzer`1"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ImageAnalyzer`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.ImageAnalyzer`1" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ImageAnalyzer`1.Analyze(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ImageAnalyzer`1.IsPixelFormatSupported(Atalasoft.Imaging.PixelFormat)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ImageAnalyzer`1.PerformActualAnalysis(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.ImageAnalyzer`1.Progress"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.ImageAnalyzer`1.SupportedPixelFormats"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.ImageCommand">
      <summary> Represents the base class for all image processing routines that modify image data. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.ImageCommand" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.ImageCommand" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.AllocatePixelFormatArray(System.Int32)">
      <summary> Allocate an array of PixelFormat enums. </summary>
      <param name="len"> The number of elements to allocate. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.Apply(Atalasoft.Imaging.AtalaImage)">
      <summary> Apply the command to the given image. </summary>
      <param name="image"> The image which will by processed by the command. </param>
      <returns> A new object of type <see cref="T:Atalasoft.Imaging.ImageProcessing.ImageResults" />. </returns>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.ImageCommand.ApplyToAnyPixelFormat">
      <summary> Reports whether or not this command will be applied to any supplied PixelFormat image </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
      <summary>
            Applies the command to the source <see cref="T:Atalasoft.Imaging.AtalaImage" />.
            </summary>
      <param name="sourceImage">The source <see cref="T:Atalasoft.Imaging.AtalaImage" /> which will be processed.  For command types that do not require a source image, set this to null.</param>
      <param name="sourceImage"> The source <see cref="T:Atalasoft.Imaging.AtalaImage" /> which will be processed. For command types that do
            not require a source image, set this to null. </param>
      <returns>A new <see cref="T:Atalasoft.Imaging.AtalaImage" /> containing the processed image.  For commandType's that do not return an image, set this to null.</returns>
      <exception> Thrown if the source image is null (Nothing in Visual Basic). </exception>
      <exception> Thrown if the source image contains no data. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.ImageCommand.CanApplyToAnyPixelFormat">
      <summary> Returns true if the command can be applied to any PixelFormat. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.ConstructChangedSourceImage(Atalasoft.Imaging.AtalaImage)">
      <summary> The method is called by the default implementation of Apply.  It determines if it is necessary to create a
            copy of the source image in a different pixel format and if so, determines the best new pixel format and allocates
            that image. </summary>
      <param name="image"> The original source image passed to Apply. </param>
      <returns> A new image in a pixel format supported by the command or <EM>null</EM> to indicate that the original
            image is acceptable. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
      <summary> Called by the default implementation of Apply, ConstructFinalImage constructs the image that will be used
            as the destination image for the command. </summary>
      <param name="image"> The source image being processed.  This may be different from the source image passed into
            Apply. </param>
      <returns> A new image for the result of the command, or null if it is not possible or necessary to make a
            destination image. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.ConstructImageResults">
      <summary> Constructs the results object for this command. </summary>
      <returns> A new object of type ImageResults representing the results for this command. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.GetChangedPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat)">
      <summary> This method is called to change the pixel format of the source image. </summary>
      <param name="sourceImage"> The original source image. </param>
      <param name="newFormat"> The new pixel format. </param>
      <returns> A new image in the new pixel format, with image data translated from the source image. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.GetContinuousFormatImage(Atalasoft.Imaging.AtalaImage)">
      <summary> A utility method for determining the best matching continuous tone pixel format and converting the given
            image to that format. </summary>
      <param name="image"> A non-continuous (ie, color-mapped) image </param>
      <returns> If the image is already a continuous image format, this method will return null.  Otherwise it will return
            a new image. </returns>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.ImageCommand.GlobalAutoThread">
      <summary> Determines if all ImageCommands that support multithreaded processing will be multithreaded. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.ImageCommandGetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Aggregates ImageCommand data into the supplied SerializationInfo object. </summary>
      <param name="info"> A serialization info object which will hold image command data </param>
      <param name="context"> The streaming context for the serialization. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.ImageCommand.InPlaceProcessing">
      <summary> Gets a value indicating if the source image data is processed in-place as opposed to returning a new
            image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.IsPixelFormatSupported(Atalasoft.Imaging.PixelFormat)">
      <summary> Returns a value indicating if the specified pixel format is supported. </summary>
      <param name="format"> The pixel format to query. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
      <summary> PerformActualCommand does the actual work of the image processing command. </summary>
      <param name="source"> The source image for processing.  This may be different from the original image. </param>
      <param name="dest"> The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null. </param>
      <param name="imageArea"> An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest. </param>
      <param name="results"> The results object that will be used for this command. </param>
      <returns> In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null. </returns>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.ImageCommand.Progress">
      <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ProgressEventHandler" /> delegate which can be used to view or cancel the
            progress of the current process. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.ProxyConstructChangedSourceImage(Atalasoft.Imaging.ImageProcessing.ImageCommand,Atalasoft.Imaging.AtalaImage)">
      <summary> Calls the ConstructChangedSourceImage method on the supplied ImageCommand. </summary>
      <param name="command"> An ImageCommand that will be called. </param>
      <param name="image"> An AtalaImage to be passed to ConstructChangedSourceImage. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.ProxyConstructFinalImage(Atalasoft.Imaging.ImageProcessing.ImageCommand,Atalasoft.Imaging.AtalaImage)">
      <param name="command"> An ImageCommand that will be called. </param>
      <param name="image"> An AtalaImage to be passed to ConstructFinalImage. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.ProxyConstructImageResults(Atalasoft.Imaging.ImageProcessing.ImageCommand)">
      <param name="command"> An ImageCommand that will be called. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.ProxyGetChangedPixelFormat(Atalasoft.Imaging.ImageProcessing.ImageCommand,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat)">
      <param name="command"> An ImageCommand that will be called. </param>
      <param name="sourceImage"> An AtalaImage to be passed to GetChangedPixelFormat. </param>
      <param name="newFormat"> The new target pixel format </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.ProxySelectBestAlternatePixelFormat(Atalasoft.Imaging.ImageProcessing.ImageCommand,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
      <param name="command"> An ImageCommand that will be called. </param>
      <param name="sourceImage"> An AtalaImage to be passed to SelectBestAlternatePixelFormat. </param>
      <param name="sourceFormat"> The source image pixel format </param>
      <param name="formats"> A set of supported pixel formats for the command </param>
      <returns> This method (and all the Proxy...() methods are meant for meta image commands, such as ThreadedCommand,
            which need to operate on existing ImageCommands by proxy. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.ProxySelectPreferredPixelFormat(Atalasoft.Imaging.ImageProcessing.ImageCommand,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
      <param name="command"> An ImageCommand that will be called. </param>
      <param name="sourceImage"> An AtalaImage to be passed to SelectPreferredPixelFormat. </param>
      <param name="sourceFormat"> The source image pixel format </param>
      <param name="formats"> A set of supported pixel formats for the command </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.ProxyVerifyProperties(Atalasoft.Imaging.ImageProcessing.ImageCommand,Atalasoft.Imaging.AtalaImage)">
      <param name="command"> An ImageCommand that will be called. </param>
      <param name="image"> The source image for the command </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.SelectBestAlternatePixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
      <summary> Choose the best pixel format to use for this command when the supplied source image's pixel format is
            unacceptable. </summary>
      <param name="sourceImage"> The source image to be processed. </param>
      <param name="sourceFormat"> The source image's pixel format. </param>
      <param name="formats"> The pixel formats supported by this command. </param>
      <returns> A new pixel format for the command.  This new pixel format must be one of the pixel formats in the
            supported pixel formats. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
      <summary> Chooses a pixel format that is preferred for this command. </summary>
      <param name="sourceImage"> The original source image. </param>
      <param name="sourceFormat"> The original image's pixel format. </param>
      <param name="formats"> An array of pixel formats supported by this command. </param>
      <returns> A new pixel format to use for this command. </returns>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.ImageCommand.SupportedPixelFormats">
      <summary> Gets an array of supported pixel formats. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.VerifyImage(Atalasoft.Imaging.AtalaImage)">
      <summary> Verify the integrity of an AtalaImage. </summary>
      <param name="image"> An AtalaImage. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
      <summary> Verify the integrity of properties in the command before processing an image. </summary>
      <param name="image"> The image to be processed. </param>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.ImageRegionCommand">
      <summary> Derives from <STRONG>ImageCommand</STRONG> and adds region of interest capability to ImageCommands.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ImageRegionCommand.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.ImageRegionCommand" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ImageRegionCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.ImageRegionCommand" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ImageRegionCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.ImageRegionCommand.RegionOfInterest">
      <summary>
        <para>Gets or sets a <see cref="P:Atalasoft.Imaging.ImageProcessing.ImageRegionCommand.RegionOfInterest" /> which will only process the indicated region of the image.</para>
      </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.ImageResults">
      <summary> This class is used to contain information generated during the processing of an ImageCommand. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ImageResults.#ctor">
      <summary> Construct a new ImageResults object with default values. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ImageResults.#ctor(Atalasoft.Imaging.AtalaImage,System.Boolean)">
      <summary> Construct a new ImageResults object with the supplied values. </summary>
      <param name="image"> The image that was the result of processing </param>
      <param name="isImageSourceImage"> An indicator as to whether or not image is the same AtalaImage as the original
            image. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ImageResults.#ctor(System.Boolean)">
      <summary> Construct a new ImageResults object with the supplied values. </summary>
      <param name="isImageSourceImage"> An indicator as to whether or not image is the same AtalaImage as the
            original image. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.ImageResults.Image">
      <summary> The image that was the result of processing </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.ImageResults.IsImageSourceImage">
      <summary> An indicator as to whether or not image is the same AtalaImage as the
            original image. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode">
      <summary> Specifies the interpolation to use with various image processing commands. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.InterpolationMode.None">
      <summary> No interpolation. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.InterpolationMode.BiLinear">
      <summary> Uses standard bi-linear interpolation. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.InterpolationMode.BiCubic">
      <summary> Slowest, but most accurate interpolation. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.IPropertiesAutoConfigurable">
      <summary> This interface when applied to an ImageCommand allowing the command to have properties that the algorithm
            will automatically determine based on image metrics. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.IPropertiesAutoConfigurable.AutoPropertyConfigurationEnabled">
      <summary> Gets or sets a property that when true will automatically determine property values as listed in <see cref="P:Atalasoft.Imaging.ImageProcessing.IPropertiesAutoConfigurable.PropertiesToAutoConfigure" /> based on image metrics </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.IPropertiesAutoConfigurable.PropertiesToAutoConfigure">
      <summary> Gets or sets a collection of property names that will be auto configured when applying the command.
            </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.IThreadableCommand">
      <summary> This interface is applied to an <see cref="T:Atalasoft.Imaging.ImageProcessing.ImageCommand" /> to support parallelization. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.IThreadableCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
      <summary> Sets the image area which will be processed and also defines the bands or chunks of the image of which
            each will be sent to a separate thread. </summary>
      <param name="bounds"> The area of the image which will be processed. </param>
      <param name="bands">
        <para>An array of Rectangles which represent the desired bands. </para>
      </param>
      <returns> An array of Rectangles which represent the bands that will actually be used. </returns>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.IThreadableCommand.AutoThread">
      <summary> If set to true the IThreadableCommand will automatically parallelize image processing. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.IThreadableCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
      <summary> Performs the command on a specified section of the image. </summary>
      <param name="source"> The source image. </param>
      <param name="sourceBounds"> The source rectangular boundary. </param>
      <param name="dest"> The destination image. </param>
      <param name="destBounds"> The destination image boundary. </param>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.JpegTransformFlags"></member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformFlags.Grayscale">
      <summary> Discard the chrominance channels in standard (YCbCr encoded) JPEGs. This leaves just the luminance which
            gives you a grayscale JPEG. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformFlags.NoExcessMcuBlocks">
      <summary> Do not remove excess MCU blocks. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformFlags.Progressive">
      <summary> Set or remove the progressive display option. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.JpegTransformType"></member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformType.None">
      <summary> No Transform. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformType.FlipHorizontal">
      <summary> Flip the image horizontally. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformType.FlipVertical">
      <summary> Flip the image vertically. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformType.Transverse">
      <summary> Transpose across upper-right to lower-left axis. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformType.Transpose">
      <summary> Transpose across upper-leftto lower-right axis. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformType.Rotate90">
      <summary> Rotate the image 90 degrees. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformType.Rotate180">
      <summary>
        <para>Rotate the image 180 degrees.</para>
      </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformType.Rotate270">
      <summary> Rotate the image 270 degrees. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.LosslessJpeg">
      <summary>
            Summary description for LosslessJpeg.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.CanDoLosslessTransform(System.IO.Stream,Atalasoft.Imaging.ImageProcessing.JpegTransformType)">
      <summary> Returns a value indicating the the MCU blocks are arranged such that a lossless transformation can be
            performed without cropping the image. </summary>
      <param name="source"> The source image Stream. </param>
      <param name="transform"> The transform to test. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.CanDoLosslessTransform(System.String,Atalasoft.Imaging.ImageProcessing.JpegTransformType)">
      <summary> Returns a value indicating the the MCU blocks are arranged such that a lossless transformation can be
            performed without cropping the image. </summary>
      <param name="source"> The source image file. </param>
      <param name="transform"> The transform to test. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.Crop(System.IO.Stream,System.IO.Stream,System.Drawing.Rectangle)">
      <summary> Performs a lossless crop on a JPEG image. </summary>
      <param name="source"> The source image Stream. </param>
      <param name="dest"> The destination image Stream. </param>
      <param name="cropRectangle"> The crop rectangle. </param>
      <exception> Thrown is the current license is not DotImage Photo Pro, or DotImage Document Imaging. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.Crop(System.IO.Stream,System.IO.Stream,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.JpegTransformFlags)">
      <summary> Performs a lossless crop on a JPEG image. </summary>
      <param name="source"> The source image Stream. </param>
      <param name="dest"> The destination image Stream. </param>
      <param name="cropRectangle"> The crop rectangle. </param>
      <param name="flags"> The transform flags. </param>
      <exception> Thrown is the current license is not DotImage Photo Pro, or DotImage Document Imaging. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.Crop(System.String,System.String,System.Drawing.Rectangle)">
      <summary> Performs a lossless crop on a JPEG image. </summary>
      <param name="source"> The source image file. </param>
      <param name="dest"> The destination image filename. </param>
      <param name="cropRectangle"> The crop rectangle. </param>
      <exception> Thrown is the current license is not DotImage Photo Pro, or DotImage Document Imaging. </exception>
      <exception> Thrown is the current license is not DotImage Photo Pro, or DotImage Document Imaging. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.Crop(System.String,System.String,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.JpegTransformFlags)">
      <summary> Performs a lossless crop on a JPEG image. </summary>
      <param name="source"> The source image file. </param>
      <param name="dest"> The destination image filename. </param>
      <param name="cropRectangle"> The crop rectangle. </param>
      <param name="flags"> The transform flags. </param>
      <exception> Thrown is the current license is not DotImage Photo Pro, or DotImage Document Imaging. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.GetMcuBlockSize(System.IO.Stream)">
      <summary> Get the compression block size for a JPG file. </summary>
      <param name="source"> The source image Stream. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.GetMcuBlockSize(System.String)">
      <summary> Get the compression block size for a JPG file. </summary>
      <param name="source"> The source image file. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.Transform(System.IO.Stream,System.IO.Stream,Atalasoft.Imaging.ImageProcessing.JpegTransformType)">
      <summary> Perform a lossless transform on a JPEG image. </summary>
      <param name="source"> The source image Stream. </param>
      <param name="dest"> The destination image Stream. </param>
      <param name="type"> The transform type to apply. </param>
      <exception> Thrown is the current license is not DotImage Photo Pro, or DotImage Document Imaging. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.Transform(System.IO.Stream,System.IO.Stream,Atalasoft.Imaging.ImageProcessing.JpegTransformType,Atalasoft.Imaging.ImageProcessing.JpegTransformFlags)">
      <summary> Perform a lossless transform on a JPEG image. </summary>
      <param name="source"> The source image Stream. </param>
      <param name="dest"> The destination image Stream. </param>
      <param name="type"> The transform type to apply. </param>
      <param name="flags"> The transform flags. </param>
      <exception> Thrown is the current license is not DotImage Photo Pro, or DotImage Document Imaging. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.Transform(System.String,System.String,Atalasoft.Imaging.ImageProcessing.JpegTransformType)">
      <summary> Perform a lossless transform on a JPEG image. </summary>
      <param name="source"> The source image file. </param>
      <param name="dest"> The destination image filename. </param>
      <param name="type"> The transform type to apply. </param>
      <exception> Thrown is the current license is not DotImage Photo Pro, or DotImage Document Imaging. </exception>
      <exception> Thrown is the current license is not DotImage Photo Pro, or DotImage Document Imaging. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.Transform(System.String,System.String,Atalasoft.Imaging.ImageProcessing.JpegTransformType,Atalasoft.Imaging.ImageProcessing.JpegTransformFlags)">
      <summary> Perform a lossless transform on a JPEG image. </summary>
      <param name="source"> The source image file. </param>
      <param name="dest"> The destination image filename. </param>
      <param name="type"> The transform type to apply. </param>
      <param name="flags"> The transform flags. </param>
      <exception> Thrown is the current license is not DotImage Photo Pro, or DotImage Document Imaging. </exception>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.MergeOption">
      <summary>
            Image overlay merge options.
            </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.FastBlend">
      <summary>
            Fast Blend. Uses factor parameter as opacity.
            </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.AccurateBlend">
      <summary>
            Slower, more accurate blend. Uses factor parameter as opacity.
            </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.LogicalAnd">
      <summary>
            Pixels are combined with logical AND.
            </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.LogicalOR">
      <summary>
            Pixels are combined with logical OR.
            </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.LogicalXOR">
      <summary>
            Pixels are combined with logical XOR.
            </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.Max">
      <summary>
            Output pixels is max of top and bottom.
            </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.Min">
      <summary>
            Output pixel is min of top and bottom.
            </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.Sum">
      <summary>
            Output pixel is sum of top and bottom.
            </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.Difference">
      <summary>
            Output pixel is difference of top and bottom.
            </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.GreaterThanFactor">
      <summary>
            If top pixel value &gt; factor, output top pixel value, otherwise output factor.
            </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.LessThanFactor">
      <summary>
            If top pixel value &lt; factor, output top pixel value, otherwise output factor.
            </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.AbsoluteValueOfDifference">
      <summary>
            Absolute value of the differnce of top and bottom pixel.
            </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.Multiply">
      <summary>
            Multiply bottom pixel value by top pixel value and divide by 255 (top * bottom) / 255.
            </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.MultiplyWidthFactor">
      <summary>
            Multiply bottom pixel value by top pixel value and by a factor and divide by 255 (top * bottom * factor) / 255.
            </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.Screen">
      <summary>
            255-(((255-top)*(255-bottom)) / 255).
            </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.PlusFactor">
      <summary>
            bottom = bottom + top - factor
            </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.MinusFactor">
      <summary>
            bottom = bottom - top - factor
            </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.NegativeAnd">
      <summary>
        <para>Performs a negative Logical AND. </para>
        <para>This can only be used with 1-bit images.</para>
      </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.NegativeOR">
      <summary>
        <para>Performs a negative Logical OR. </para>
        <para>This can only be used with 1-bit images.</para>
      </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.NegativeXOR">
      <summary>
        <para>Performs a negative Logical XOR.</para>
        <para>This can only be used with 1-bit images.</para>
      </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.Copy"></member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.ColorDodge">
      <summary> Color dodge </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.ColorBurn">
      <summary> Color burn </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.SoftDodge">
      <summary> Soft Dodge </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.SoftBurn">
      <summary> Soft Burn </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.Photoshop">
      <summary> Photoshop "overlay" </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.SoftLight">
      <summary> soft light (similar but not identical to Photoshop) </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.HardLight">
      <summary> Hard light </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.XFaderReflect">
      <summary> XFader reflect </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.XFaderGlow">
      <summary> XFader glow </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.XFaderFreeze">
      <summary> XFader freeze </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.XFaderHeat">
      <summary> XFader heat </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.NoiseGenerator">
      <summary>
            Summary description for NoiseGenerator.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.NoiseGenerator" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.#ctor(System.Drawing.Size)">
      <summary> Initializes a new instance of NoiseGenerator specifying the resulting image size. </summary>
      <param name="imageSize"> The size of the resulting image containing noise. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.#ctor(System.Drawing.Size,System.Double)">
      <summary> Initializes a new instance of NoiseGenerator specifying the resulting image size and scale. </summary>
      <param name="imageSize"> The size of the resulting image containing noise. </param>
      <param name="scale"> The size of the noise. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.#ctor(System.Drawing.Size,System.Double,Atalasoft.Imaging.ImageProcessing.NoiseGeneratorMode)">
      <summary> Initializes a new instance of NoiseGenerator specifying the resulting image size, scale and mode.
            </summary>
      <param name="imageSize"> The size of the resulting image containing noise. </param>
      <param name="scale"> The size of the noise. </param>
      <param name="mode">
        <para>The type of noise to create.</para>
      </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.#ctor(System.Drawing.Size,System.Double,Atalasoft.Imaging.ImageProcessing.NoiseGeneratorMode,System.Drawing.Color)">
      <summary> Initializes a new instance of NoiseGenerator specifying the resulting image size, scale, mode and base
            color. </summary>
      <param name="imageSize"> The size of the resulting image containing noise. </param>
      <param name="scale"> The size of the noise. </param>
      <param name="mode">
        <para>The type of noise to create.</para>
      </param>
      <param name="baseColor"> The color of the image prior to adding noise. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Initializes a new instance of NoiseGenerator. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.BaseColor">
      <summary>
            Gets or sets the base color of the noise.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.GenerateImage">
      <summary>
            Generates a new AtalaImage containing the noise.
            </summary>
      <returns>A new AtalaImage containing the noise.</returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.GenerateImage(System.Double)">
      <summary>
            Generates a new AtalaImage containing the noise.
            </summary>
      <param name="zOffset">The z-axis offset used for DimensionSlice noise.</param>
      <param name="zOffset"> The z-axis offset used for DimensionSlice noise. </param>
      <returns>A new AtalaImage containing the noise.</returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.GenerateImage(System.Int32,System.Double)">
      <summary>
            Generates a new AtalaImage containing the noise.
            </summary>
      <param name="octaves">The number of waves contributing to the noise.</param>
      <param name="persistence">Controls the smoothness. (0 to 10)</param>
      <param name="octaves"> The number of waves contributing to the noise.  Only used with grayscale Hugo noise. </param>
      <param name="persistence"> Controls the smoothness. Only used with grayscale Hugo noise.  (0 to 10) </param>
      <returns>A new AtalaImage containing the noise.</returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.ImageSize">
      <summary>
            Gets or sets the size of the resulting image.
            </summary>
      <exception> Thrown if the width or height is less than 1. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.Mode">
      <summary>
            Gets or sets the type of noise to generate.
            </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.Scale">
      <summary>
            Gets or sets the size of the noise.
            </summary>
      <exception> Thrown if the scale is less than 0 or greater than 100. </exception>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.NoiseGeneratorMode">
      <summary> Specifies the type of noise. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.NoiseGeneratorMode.Perlin">
      <summary> Generate an image filled with Perlin noise. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.NoiseGeneratorMode.Hugo">
      <summary> Generate an image filled with Hugo Elias's implementation of Perlin noise. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.NoiseGeneratorMode.Gaussian">
      <summary> Specifies the type of noise. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.NoiseGeneratorMode.NegativeExponential">
      <summary> Generate an image using negative exponential noise. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.NoiseGeneratorMode.Rayleigh">
      <summary> Generate an image filled with rayleigh noise. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.NoiseGeneratorMode.Uniform">
      <summary> Generate an image filled with uniform noise. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.NoiseGeneratorMode.DimensionalSlice">
      <summary> Create a single 2D plane of Perlin noise producing a single slice through a volume of noise at a given Z
            offset. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.OverlayCommand">
      <summary>
            Summary description for tmpOverlay.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayCommand.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.OverlayCommand" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayCommand.#ctor(Atalasoft.Imaging.AtalaImage,System.Drawing.Point)">
      <summary>
            Overlay one image onto another.
            </summary>
      <param name="topImage">The image to place onto the bottom image.</param>
      <param name="position">Position on the bottom image to place the overlay.</param>
      <param name="topImage"> The image that will be overlayed onto the source image. </param>
      <param name="position"> Gets or sets the position of the top image onto the source image. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayCommand.#ctor(Atalasoft.Imaging.AtalaImage,System.Drawing.Point,System.Double)">
      <summary>
            Overlay one image onto another.
            </summary>
      <param name="topImage">The image to place onto the bottom image.</param>
      <param name="position">Position on the bottom image to place the overlay.</param>
      <param name="opacity">The amount of transparency used for the top image.</param>
      <param name="topImage"> The image that will be overlayed onto the source image. </param>
      <param name="position"> Gets or sets the position of the top image onto the source image. </param>
      <param name="opacity"> The opacity of the top image.  (0 - 1) </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayCommand.#ctor(Atalasoft.Imaging.AtalaImage,System.Drawing.Point,System.Drawing.Color)">
      <summary>
            Overlay one image onto another.
            </summary>
      <param name="topImage">The image to place onto the bottom image.</param>
      <param name="position">Position on the bottom image to place the overlay.</param>
      <param name="transparentColor">The color in the top image to set as transparent when overlaying.</param>
      <param name="topImage"> The image that will be overlayed onto the source image. </param>
      <param name="position"> Gets or sets the position of the top image onto the source image. </param>
      <param name="transparentColor"> The color that will be used as a transparent mask for the top image. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayCommand.#ctor(Atalasoft.Imaging.AtalaImage,System.Drawing.Point,System.Int32)">
      <summary>
            Overlay an 8-bit image onto another.
            </summary>
      <param name="topImage">The image to place onto the bottom image.</param>
      <param name="position">Position on the bottom image to place the overlay.</param>
      <param name="transparentIndex">The palette index of the color to set as transparent when overlaying.</param>
      <param name="topImage"> The image that will be overlayed onto the source image. </param>
      <param name="position"> Gets or sets the position of the top image onto the source image. </param>
      <param name="transparentIndex"> The palette index that will be used as a transparent mask for the top image.
            </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Initializes a new instance of %OverlayCommand%. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayCommand.InPlaceProcessing">
      <summary> Gets a value indicating whether the command returns a new image or modified the source image passed into
            the command. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayCommand.Opacity">
      <summary> Gets or sets the opacity of the top image. </summary>
      <exception> Thrown if the opacity is less than 0.0 or greater than 1.0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayCommand.Position">
      <summary> Gets or sets the position of the top image with respect to the source image. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayCommand.TopImage">
      <summary> Gets or sets the image that will be overlayed onto the source image. </summary>
      <exception> Thrown if the image is null. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayCommand.TransparentColor">
      <summary> Gets or sets the color that will be used as a transparent mask for the top image. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayCommand.TransparentIndex">
      <summary> Gets or sets the palette index that will be used as a transparent mask for the top image. </summary>
      <exception> Thrown if the value is less than -1 or greater than 255. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand">
      <summary> Overlay a specified image onto the source image using an 8-bit grayscale mask image to control the
            transparency of the overlay. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand.#ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage)">
      <summary> Initializes a new instance of %OverlayMaskedCommand% specifying the top image and alpha mask. </summary>
      <param name="topImage"> The image that will be overlayed onto the source image. </param>
      <param name="alphaMask"> The 8-bit grayscale image representing the transparency of the overlay. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand.#ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Point)">
      <summary> Initializes a new instance of %OverlayMaskedCommand% specifying the top image and alpha mask and position
            of the top image. </summary>
      <param name="topImage"> The image that will be overlayed onto the source image. </param>
      <param name="alphaMask"> The 8-bit grayscale image representing the transparency of the overlay. </param>
      <param name="position"> The position of the top image onto the source image. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand" />. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand.AlphaMask">
      <summary> Gets or sets the 8-bit grayscale image representing the transparency mask of the overlay. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand.InPlaceProcessing">
      <summary> Gets a value indicating whether the command returns a new image or modified the source image passed into
            the command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand.Position">
      <summary> Gets or sets the position of the top image onto the source image. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand.TopImage">
      <summary> Gets or sets the image that will be overlayed onto the source image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand">
      <summary>
            Summary description for OverlayMergedCommand.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.#ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ImageProcessing.MergeOption)">
      <summary> Initializes a new instance of %OverlayMergedCommand% specifying the top image, and the merge option.
            </summary>
      <param name="topImage"> The image that will be overlayed onto the source image. </param>
      <param name="mergeOption"> Specifies how the top and bottom pixels wil be merged together. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.#ctor(Atalasoft.Imaging.AtalaImage,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.MergeOption)">
      <summary> Initializes a new instance of %OverlayMergedCommand% specifying the top image, position of the image, and
            the merge option. </summary>
      <param name="topImage"> The image that will be overlayed onto the source image. </param>
      <param name="position"> The position of the top image onto the source image. </param>
      <param name="mergeOption"> Specifies how the top and bottom pixels wil be merged together. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.#ctor(Atalasoft.Imaging.AtalaImage,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.MergeOption,System.Double)">
      <summary> Initializes a new instance of %OverlayMergedCommand% specifying the top image, position of the image, the
            merge option, and a factor used for some merge options. </summary>
      <param name="topImage"> The image that will be overlayed onto the source image. </param>
      <param name="position"> The position of the top image onto the source image. </param>
      <param name="mergeOption"> Specifies how the top and bottom pixels wil be merged together. </param>
      <param name="factor"> A factor applied to some of the merge options.  For example when using the Fast merge option,
            this value would be opacity (0 to 1). </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Initializes a new instance of %OverlayMergedCommand%. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.Factor">
      <summary>
            Gets or sets the value of factor
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.InPlaceProcessing">
      <summary> Gets a value indicating whether the command returns a new image or modified the source image passed into
            the command. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.MergeOption">
      <summary>
            Gets or sets the value of mergeOption
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.Position">
      <summary>
            Gets or sets the value of position
            </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.TopImage">
      <summary>
            Gets or sets the value of topImage
            </summary>
      <exception> Thrown if the image null (Nothing in Visual Basic). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.RegionOfInterest">
      <summary> This object can be passed into most <STRONG>ImageCommands</STRONG> to indicate a region of the image to
            process.  Any shaped region can be used by specifying a <see cref="T:System.Drawing.Region" /> object or a simple
            <see cref="T:System.Drawing.Rectangle" />. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.RegionOfInterest.#ctor(System.Drawing.Rectangle)">
      <summary> Initializes a new instance of %RegionOfInterest% specifying a simple rectangle to use as the region.
            </summary>
      <param name="rect">
        <para>The rectangular area of the image to process.</para>
      </param>
      <exception> Thrown if the current license is not DotImage Photo Pro or Document Imaging. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.RegionOfInterest.#ctor(System.Drawing.Region)">
      <summary> Initializes a new instance of %RegionOfInterest% specifying a .NET Region object to use as the region.
            </summary>
      <param name="region"> The Region used to specify the portion of an image to process. </param>
      <exception> Thrown if the current license is not DotImage Photo Pro or Document Imaging. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.RegionOfInterest.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Initializes a new instance of %RegionOfInterest%. </summary>
      <exception> Thrown if the current license is not DotImage Photo Pro or Document Imaging. </exception>
      <exception> Thrown if the current license is not DotImage Photo Pro or Document Imaging. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.RegionOfInterest.Equals(System.Object)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.RegionOfInterest.GetHashCode"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.RegionOfInterest.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.RegionOfInterest.IsSimpleRegion">
      <summary>
        <para>Returns <STRONG>true </STRONG>if the Region is a simple rectangle.</para>
      </summary>
      <returns>
        <STRONG>true </STRONG>if the Region is a simple rectangle. </returns>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.RegionOfInterest.Region">
      <summary> Gets or sets the <STRONG>System.Drawing.Region</STRONG> used to specify the portion of an image to
            process. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.RegionOfInterest.SmoothingLevel">
      <summary> Gets or sets the smoothing level of the region. </summary>
      <exception> Thrown is the value is less than 0. </exception>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand">
      <summary>
            Summary description for ResampleColormappedToRgbCommand.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.#ctor(System.Drawing.Rectangle,System.Drawing.Size,Atalasoft.Imaging.ImageProcessing.ResampleMethod)">
      <summary> Initializes a new instance of %ResampleColormappedToRgbCommand% specifying the source rectangle,
            destination size, and resampling method. </summary>
      <param name="sourceRect"> The rectangular region of the source image that will be resized. </param>
      <param name="destSize"> The final size of the image. </param>
      <param name="method"> The resampling algorithm to apply. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.#ctor(System.Drawing.Size)">
      <summary> Initializes a new instance of %ResampleColormappedToRgbCommand% specifying final size and using the the
            default resampling method. </summary>
      <param name="destSize"> The final size of the image. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.#ctor(System.Drawing.Size,Atalasoft.Imaging.ImageProcessing.ResampleMethod)">
      <summary> Initializes a new instance of %ResampleColormappedToRgbCommand% specifying final size and resampling
            method. </summary>
      <param name="destSize"> The final size of the image. </param>
      <param name="method"> The resampling algorithm to apply. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.#ctor(System.Int32)">
      <summary> Initializes a new instance of %ResampleColormappedToRgbCommand% specifying the maximum width or height
            using the defailt resampling method. </summary>
      <param name="maxSize"> The maximum width or height of the final image while maintaining the aspect ratio. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.#ctor(System.Int32,Atalasoft.Imaging.ImageProcessing.ResampleMethod)">
      <summary> Initializes a new instance of %ResampleColormappedToRgbCommand% specifying final size and resampling
            method. </summary>
      <param name="maxSize"> The maximum width or height of the final image while maintaining the aspect ratio. </param>
      <param name="method"> The resampling algorithm to apply. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Initializes a new instance of %ResampleColormappedToRgbCommand% specifying the source rectangle,
            destination size, and resampling method. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.AutoThread"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.Clone"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.DestSize">
      <summary>
            Gets or sets the value of destSize
            </summary>
      <exception> Thrown when the width or height is less than or equal to 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.MaxSize">
      <summary> Gets or sets the maximum width or height value for resizing while maintaining the aspect ratio. </summary>
      <exception> Thrown if the value is less than 0. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.Method">
      <summary>
            Gets or sets the value of method
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.SourceRect">
      <summary>
            Gets or sets the value of sourceRect
            </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.ResampleCommand">
      <summary>
            Summary description for ResampleCommand.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleCommand.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.ResampleCommand" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleCommand.#ctor(System.Drawing.Rectangle,System.Drawing.Size,Atalasoft.Imaging.ImageProcessing.ResampleMethod)">
      <summary>
            Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.ResampleCommand" /> specifying sourceRect, destSize, and method.
            </summary>
      <param name="sourceRect">The rectangular region of the source image that will be resized.</param>
      <param name="destSize">The final size of the image.</param>
      <param name="method">The resampling algorithm to apply.</param>
      <param name="sourceRect"> The rectangular region of the source image that will be resized. </param>
      <param name="destSize"> The final size of the image. </param>
      <param name="method"> The resampling algorithm to apply. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleCommand.#ctor(System.Drawing.Size)">
      <summary>
            Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.ResampleCommand" /> specifying final size and using the default resampling method.
            </summary>
      <param name="destSize">The final size of the image.</param>
      <param name="destSize"> The final size of the image. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleCommand.#ctor(System.Drawing.Size,Atalasoft.Imaging.ImageProcessing.ResampleMethod)">
      <summary>
            Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.ResampleCommand" /> specifying final size and resampling method.
            </summary>
      <param name="destSize">The final size of the image.</param>
      <param name="method">The resampling algorithm to apply.</param>
      <param name="destSize"> The final size of the image. </param>
      <param name="method"> The resampling algorithm to apply. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleCommand.#ctor(System.Int32)">
      <summary>
            Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.ResampleCommand" /> specifying the maximum width or height and resampling method.
            </summary>
      <param name="destSize">The final size of the image.</param>
      <param name="maxSize"> The maximum width or height of the final image while maintaining the aspect ratio. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleCommand.#ctor(System.Int32,Atalasoft.Imaging.ImageProcessing.ResampleMethod)">
      <summary>
            Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.ResampleCommand" /> specifying final size and resampling method.
            </summary>
      <param name="destSize">The final size of the image.</param>
      <param name="method">The resampling algorithm to apply.</param>
      <param name="maxSize"> The maximum width or height of the final image while maintaining the aspect ratio. </param>
      <param name="method"> The resampling algorithm to apply. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Initializes a new instance of %ResampleCommand%. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleCommand.DestSize">
      <summary>
            Gets or sets the value of destSize
            </summary>
      <exception> Thrown if either value.width or value.height is amp;lt; 1. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleCommand.MaxSize">
      <summary> Gets or sets the width of height value for resizing while maintaining the aspect ratio. </summary>
      <exception> Thrown if value is amp;lt; 1. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleCommand.Method">
      <summary>
            Gets or sets the value of method
            </summary>
      <exception> Thrown if value is amp;lt; 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleCommand.SourceRect">
      <summary>
            Gets or sets the value of sourceRect
            </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.ResampleMaskedCommand">
      <summary>
            Summary description for ResampleMaskedCommand.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleMaskedCommand.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.ResampleMaskedCommand" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleMaskedCommand.#ctor(System.Drawing.Rectangle,System.Drawing.Size,System.Int32)">
      <summary> Construct a new ResampleMaskedCommand with the provided source rectangle, destination size, and mask
            index. </summary>
      <param name="sourceRect"> The rectangle describing the pixels to resample. </param>
      <param name="destSize"> In color index to treat as a mask. </param>
      <param name="maskIndex"> In color index to treat as a mask. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleMaskedCommand.#ctor(System.Drawing.Size,System.Int32)">
      <summary> Construct a new ResampleMaskedCommand with the provided destination size and mask index. </summary>
      <param name="destSize"> In color index to treat as a mask. </param>
      <param name="maskIndex"> In color index to treat as a mask. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleMaskedCommand.#ctor(System.Int32,System.Int32)">
      <summary> Construct a new ResampleMaskedCommand with the provided size and mask index. </summary>
      <param name="maxSize"> The maximum size for either dimension of the final image. </param>
      <param name="maskIndex"> In color index to treat as a mask. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleMaskedCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Construct a new ResampleMaskedCommand with default properties. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleMaskedCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleMaskedCommand.DestSize">
      <summary> Sets or gets the destination size of the image. </summary>
      <exception> Thrown if the width or height is less than 1. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleMaskedCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleMaskedCommand.MaskIndex">
      <summary> Gets or sets the index of the color of the mask. </summary>
      <exception> Thrown if the value is less than zero or greater than 255. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleMaskedCommand.MaxSize">
      <summary> Sets or gets the maximum dimension of the final image. </summary>
      <exception> Thrown if the value is less than 1. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleMaskedCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleMaskedCommand.SourceRect">
      <summary> Sets or gets the area to be resampled. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleMaskedCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleMaskedCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.ResampleMethod">
      <summary> Specifies the type of resampling method to apply when using the %ResampleCommand%,
            %ResampleColormappedToRgbCommand% or the %Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand%.
            </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.Default">
      <summary> Uses a predefined resampling method depending on the image PixelFormat and final size.  Uses Nearest
            Neighbor resampling for 1-bit and 8-bit colormapped images, BiLinear when increasing the size of continuous tone
            images. and AreaAverage when reducing continuous tone images. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.NearestNeighbor">
      <summary> Use the nearest pixel value.  This is the fastest algorithm. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.BiLinear">
      <summary> Uses bi-linear resampling.  Yields good results when enlarging images, and fairly fast. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.BiCubic">
      <summary> Uses bi-cubic interpolation.  Better quality then bi-linear but slower. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.AreaAverage">
      <summary> Average the pixel values when reducing image size.  Will cause an exception to be thrown if increasing
            image size. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.BoxFilter">
      <summary> BoxFilter resize algorithm. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.TriangleFilter">
      <summary> TriangleFilter resize algorithm. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.HammingFilter">
      <summary> HammingFilter resize algorithm. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.GaussianFilter">
      <summary> GaussianFilter resize algorithm. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.BellFilter">
      <summary> BellFilter resize algorithm. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.BsplineFilter">
      <summary> BsplineFilter resize algorithm. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.Cubic1Filter">
      <summary> CubicFilter resize algorithm. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.Cubic2Filter">
      <summary> Cubic2Filter resize algorithm. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.LanczosFilter">
      <summary>
        <para>Generally yields the best results for photographic images at the expense of speed.  Very similar to
            Photoshop's Bi-cubic reductions.</para>
      </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.MitchellFilter">
      <summary> MitchellFilter resize algorithm. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.SincFilter">
      <summary> SincFilter resize algorithm. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.HermiteFilter">
      <summary> HermiteFilter resize algorithm. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.HanningFilter">
      <summary> HanningFilter resize algorithm. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.CatromFilter">
      <summary> CatromFilter resize algorithm. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.ThreadedCommand">
      <summary> ThreadedCommand is a proxy command that will induce ImageCommands that support multithreading to run in on
            multiple threads. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.ThreadedCommand" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.#ctor(Atalasoft.Imaging.ImageProcessing.ImageCommand)">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.ThreadedCommand" /> class</summary>
      <param name="command"> The image command to perform in a multithreaded manner. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.#ctor(Atalasoft.Imaging.ImageProcessing.ImageCommand,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.ThreadedCommand" /> class</summary>
      <param name="command"> The image command to perform in a multithreaded manner. </param>
      <param name="threadCount"> The total number of threads to use for this command. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.ApplyToAnyPixelFormat">
      <summary> Sets or gets the value of AppyToAnyPixelFormat in the underlying command. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.CanApplyToAnyPixelFormat">
      <summary> Returns the value of CanApplyToAnyPixelFormat in the underlying command. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.Command">
      <summary> Sets or gets the underlying command that will be multithreaded. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.ConstructChangedSourceImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.ConstructImageResults"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.GetChangedPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.InPlaceProcessing">
      <summary> Returns the InPlaceProcessing value of the underlying command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.IsPixelFormatSupported(Atalasoft.Imaging.PixelFormat)"></member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.MinimumStripSizeInBytes"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.OptimalThreadCount">
      <summary> Returns the best number of threads to use for the current system. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.SelectBestAlternatePixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.StripSize">
      <summary> Gets or sets the size of strips that will be processed by individual threads. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.SupportedPixelFormats">
      <summary> Returns the value of SupportedPixelFormats of the underlying command. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.ThreadCount">
      <summary> The total number of threads that will be used for this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Thumbnail">
      <summary>
            Summary description for Thumbnail.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Thumbnail.#ctor">
      <summary> Constructs a new Thumbnail object with default properties. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Thumbnail.#ctor(System.Drawing.Size)">
      <summary> Constructs a new Thumbnail object with the provided size. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Thumbnail.AllowEnlarge"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Thumbnail.Create(Atalasoft.Imaging.AtalaImage)">
      <summary> Creates a new thumbnail image from the supplied image. </summary>
      <param name="image"> The name of the file from where the image will be taken. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Thumbnail.Create(System.IO.Stream,System.Int32)">
      <summary> Creates a new thumbnail image from the supplied stream and frame index. </summary>
      <param name="stream"> A stream from which an image can be loaded. </param>
      <param name="frameIndex"> The index of the frame to be loaded. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Thumbnail.Create(System.String,System.Int32)">
      <summary> Creates a new thumbnail image from the supplied file and frame index. </summary>
      <param name="fileName"> The name of the file from where the image will be taken. </param>
      <param name="frameIndex"> The index of the frame to be loaded. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Thumbnail.Size">
      <summary> Gets or sets the maximum X and Y dimensions of the thumbnail to be created. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Thumbnail.ThrowOnZeroDimensions">
      <summary> Gets or sets a value that will thrown an exception if the resized image ends up with zero dimensions.
            </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand">
      <summary> This method may be used to adjust a channel by adding or subtracting a literal value or percentage. A
            negative value will reduce the amount of that channel and a positive value will increase it. A value of 0 will have
            no effect. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.#ctor">
      <summary> Initializes a new instance of the <STRONG>AdjustChannelCommand</STRONG> class. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.#ctor(System.Boolean,System.Double)">
      <summary> Initializes a new instance of the <STRONG>AdjustChannelCommand</STRONG> class. </summary>
      <param name="adjustByPercentage"> Determines if the channel values are considered a percentage rather than a literal
            value. </param>
      <param name="channel1"> Amount to adjust the first channel.  Valid values are -100 to 100 when using percentage and
            -255 to 255 when using literal. This can be changed later via the Channel1 Property. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.#ctor(System.Boolean,System.Double,System.Double)">
      <summary> Initializes a new instance of the <STRONG>AdjustChannelCommand</STRONG> class. </summary>
      <param name="adjustByPercentage"> Determines if the channel values are considered a percentage rather than a literal
            value. </param>
      <param name="channel1"> Amount to adjust the first channel.  Valid values are -100 to 100 when using percentage and
            -255 to 255 when using literal.  This can be changed later via the Channel1 Property. </param>
      <param name="channel2"> Amount to adjust the second channel.  Valid values are -100 to 100 when using percentage and
            -255 to 255 when using literal.  This can be changed later via the Channel2 Property. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.#ctor(System.Boolean,System.Double,System.Double,System.Double)">
      <summary> Initializes a new instance of the <STRONG>AdjustChannelCommand</STRONG> class. </summary>
      <param name="adjustByPercentage"> Determines if the channel values are considered a percentage rather than a literal
            value. </param>
      <param name="channel1"> Amount to adjust the first channel.  Valid values are -100 to 100 when using percentage and
            -255 to 255 when using literal.  This can be changed later via the Channel1 Property. </param>
      <param name="channel2"> Amount to adjust the second channel.  Valid values are -100 to 100 when using percentage and
            -255 to 255 when using literal.  This can be changed later via the Channel2 Property. </param>
      <param name="channel3"> Amount to adjust the third channel.  Valid values are -100 to 100 when using percentage and
            -255 to 255 when using literal.  This can be changed later via the Channel3 Property. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.#ctor(System.Boolean,System.Double,System.Double,System.Double,System.Double)">
      <summary> Initializes a new instance of the <STRONG>AdjustChannelCommand</STRONG> class. </summary>
      <param name="adjustByPercentage"> Determines if the channel values are considered a percentage rather than a literal
            value. </param>
      <param name="channel1"> Amount to adjust the first channel.  Valid values are -100 to 100 when using percentage and
            -255 to 255 when using literal.  This can be changed later via the Channel1 Property. </param>
      <param name="channel2"> Amount to adjust the second channel.  Valid values are -100 to 100 when using percentage and
            -255 to 255 when using literal.  This can be changed later via the Channel2 Property. </param>
      <param name="channel3"> Amount to adjust the third channel.  Valid values are -100 to 100 when using percentage and
            -255 to 255 when using literal.  This can be changed later via the Channel3 Property. </param>
      <param name="channel4"> Amount to adjust the fourth channel.  Valid values are -100 to 100 when using percentage and
            -255 to 255 when using literal.  This can be changed later via the Channel4 Property. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>AdjustChannelCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
      <summary> Sets the image area which will be processed and also defines the bands or chunks of the image of which
            each will be sent to a separate thread for processing. </summary>
      <param name="bounds"> The area of the image which processing will be restricted to. </param>
      <param name="bands"> An array of Rectangles which represent the desired bands. </param>
      <returns> An array of Rectangles which represent the bands that will actually be used.,<BR /></returns>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.AdjustByPercentage">
      <summary> Gets or sets the value which determines if the channel values are considered a percentage rather than a
            literal value. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.AutoThread">
      <summary> If set to true the IThreadableCommand will automatically parallelize image processing. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.Channel1">
      <summary> Gets or sets the amount to adjust the first channel. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.Channel2">
      <summary> Gets or sets the amount to adjust the second channel. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.Channel3">
      <summary> Gets or sets the amount to adjust the third channel. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.Channel4">
      <summary> Gets or sets the amount to adjust the fourth channel. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.Clone">
      <summary>Creates a new object that is a copy of the current instance.</summary>
      <returns> A new object that is a copy of this instance. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Populates a <B>SerializationInfo</B> with the data needed to serialize the target object. </para>
      </summary>
      <param name="info"> The SerializationInfo to populate with data. </param>
      <param name="context"> The destination (see StreamingContext) for this serialization. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.InPlaceProcessing">
      <summary> Gets a value indicating if the source image data is processed in-place as opposed to returning a new
            image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
      <summary> Performs the command on a specified section of the image. </summary>
      <param name="source"> The source image. </param>
      <param name="sourceBounds"> The source rectangular boundary. </param>
      <param name="dest"> The destination image. </param>
      <param name="destBounds"> The destination image boundary. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand">
      <summary>
        <para>This method may be used to adjust the hue, saturation and luminance by adding or subtracting a
            literal value or percentage. A negative value will reduce the amount of that channel and a positive value will
            increase it. A value of 0 will have no effect. </para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.#ctor">
      <summary> Creates a new instance of <STRONG>AdjustHslCommand.</STRONG></summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.#ctor(System.Boolean,System.Double,System.Double,System.Double)">
      <summary> Creates a new instance of <STRONG>AdjustHslCommand</STRONG> specifying the Hue, Saturation and Luminance
            values. </summary>
      <param name="adjustByPercentage"> Set to true if you want the hue, saturation and luminance values to be considered
            percentages. </param>
      <param name="hue"> Amount to adjust the Hue.  Valid values are -100 to 100 when using percentage and -240 to 240
            when using literal. </param>
      <param name="saturation"> Amount to adjust the Saturation. Valid values are -100 to 100 when using percentage and
            -240 to 240 when using literal. </param>
      <param name="luminance"> Amount to adjust the Luminance. Valid values are -100 to 100 when using percentage and -240
            to 240 when using literal. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>AdjustHslCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo containing information for this command </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
      <summary>
        <para>Sets the image area which will be processed and also defines the bands or chunks of the image of
            which each will be sent to a separate thread for processing.</para>
      </summary>
      <param name="bounds"> The area of the image which processing will be restricted to. </param>
      <param name="bands"> An array of Rectangles which represent the desired bands. </param>
      <returns> An array of Rectangles which represent the bands that will actually be used. </returns>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.AdjustByPercentage">
      <summary> Gets or sets a value to indicate if the hue, saturation and luminance values will be considered
            percentages instead of literal values. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.AutoThread">
      <summary> If set to true the IThreadableCommand will automatically parallelize image processing. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.Clone">
      <summary>
        <para>Creates a new object that is a copy of the current instance. </para>
      </summary>
      <returns>
        <para> A new object that is a copy of this instance. </para>
      </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Populates a <B>SerializationInfo</B> with the data needed to serialize the target object. </para>
      </summary>
      <param name="info"> The SerializationInfo to populate with data. </param>
      <param name="context">
        <para>The destination (see StreamingContext)
            for this serialization. </para>
      </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.Hue">
      <summary> Gets or sets the value of hue. </summary>
      <exception> Thrown if value is not between -240 and 240, inclusive. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.InPlaceProcessing">
      <summary> Gets a value indicating if the source image data is processed in-place as opposed to returning a new
            image. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.Luminance">
      <summary> Gets or sets the value of luminance. </summary>
      <exception> Thrown if value is not between -240 and 240, inclusive. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
      <summary> Performs the command on a specified section of the image. </summary>
      <param name="source"> The source image. </param>
      <param name="sourceBounds"> The source rectangular boundary. </param>
      <param name="dest"> The destination image. </param>
      <param name="destBounds"> The destination image boundary. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.Saturation">
      <summary> Gets or sets the value of saturation. </summary>
      <exception> Thrown if value is not between -240 and 240, inclusive. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand">
      <summary> Apply a Look-Up-Table to an image.  A Look-Up-Table is an array of 256 byte values which are used to
            substitute for the image pixel data.  This allows you to modify each pixel component value. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.#ctor">
      <summary> Creates a new instance of <STRONG>ApplyLutCommand.</STRONG></summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.#ctor(System.Byte[])">
      <summary> Creates a new instance of <STRONG>ApplyLutCommand</STRONG> specifying channel1.  </summary>
      <param name="channel1"> An array of 256 bytes, representing the first color channel. This can be
            <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic). </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.#ctor(System.Byte[],System.Byte[])">
      <summary> Creates a new instance of <STRONG>ApplyLutCommand</STRONG> specifying channel1 and channel2. </summary>
      <param name="channel1"> An array of 256 bytes, representing the first color channel. This can be
            <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic). </param>
      <param name="channel2"> An array of 256 bytes, representing the second color channel. This can be
            <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic). </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.#ctor(System.Byte[],System.Byte[],System.Byte[])">
      <summary> Creates a new instance of <STRONG>ApplyLutCommand</STRONG> specifying channel1, channel2 and channel3.
            </summary>
      <param name="channel1"> An array of 256 bytes, representing the first color channel. This can be
            <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic). </param>
      <param name="channel2"> An array of 256 bytes, representing the second color channel. This can be
            <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic). </param>
      <param name="channel3"> An array of 256 bytes, representing the third color channel. This can be
            <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic). </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.#ctor(System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
      <summary> Creates a new instance of <STRONG>ApplyLutCommand</STRONG> specifying channel1, channel2, channel3, and
            channel4. </summary>
      <param name="channel1"> An array of 256 bytes, representing the first color channel. This can be
            <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic). </param>
      <param name="channel2"> An array of 256 bytes, representing the second color channel. This can be
            <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic). </param>
      <param name="channel3"> An array of 256 bytes, representing the third color channel. This can be
            <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic). </param>
      <param name="channel4"> An array of 256 bytes, representing the fourth color channel. This can be
            <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic). </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.#ctor(System.Int32[])">
      <summary> Creates a new instance of <STRONG>ApplyLutCommand</STRONG> specifying channel1 for two byte per pixel
            images. </summary>
      <param name="channel1">
        <para>An array of 65536 Int32s, representing the first color channel. This can be
            <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic). </para>
      </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.#ctor(System.Int32[],System.Int32[],System.Int32[])">
      <summary> Creates a new instance of <STRONG>ApplyLutCommand</STRONG> specifying channel1, channel2 and channel3 for
            two byte per pixel images. </summary>
      <param name="channel1">
        <para>An array of 65536 Int32s, representing the first color channel. This can be
            <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic). </para>
      </param>
      <param name="channel2">
        <para>An array of 65536 Int32s, representing the second color channel. This can be
            <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic). </para>
      </param>
      <param name="channel3">
        <para>An array of 65536 Int32s, representing the third color channel. This can be
            <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic). </para>
      </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.#ctor(System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
      <summary> Creates a new instance of <STRONG>ApplyLutCommand</STRONG> specifying channel1, channel2, channel3, and
            channel4 for two byte per pixel images. </summary>
      <param name="channel1">
        <para>An array of 65536 Int32s, representing the first color channel. This can be
            <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic). </para>
      </param>
      <param name="channel2">
        <para>An array of 65536 Int32s, representing the second color channel. This can be
            <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic). </para>
      </param>
      <param name="channel3">
        <para>An array of 65536 Int32s, representing the third color channel. This can be
            <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic). </para>
      </param>
      <param name="channel4">
        <para>An array of 65536 Int32s, representing the fourth color channel. This can be
            <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic). </para>
      </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>ApplyLutCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo containing information for this command </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
      <summary>
        <para>Sets the image area which will be processed and also defines the bands or chunks of the image of
            which each will be sent to a separate thread for processing.</para>
      </summary>
      <param name="bounds"> The area of the image which processing will be restricted to. </param>
      <param name="bands"> An array of Rectangles which represent the desired bands. </param>
      <returns> An array of Rectangles which represent the bands that will actually be used. </returns>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.AutoThread">
      <summary> If set to true the IThreadableCommand will automatically parallelize image processing. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.Clone">
      <summary>
        <para>Creates a new object that is a copy of the current instance. </para>
      </summary>
      <returns> A new object that is a copy of this instance. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.GetChannelLut(Atalasoft.Imaging.ImageProcessing.ChannelFlags)">
      <summary> Returns the look-up-table for a single channel. </summary>
      <param name="channel"> The channel you want to retrieve the look-up-table from. </param>
      <returns> The look-up-table for the specified channel. </returns>
      <exception> Thrown if an attempt is made to select more than 1 channel. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Populates a <B>SerializationInfo</B> with the data needed to serialize the target object. </para>
      </summary>
      <param name="info">
        <para> The SerializationInfo to populate with data. </para>
      </param>
      <param name="context">
        <para>The destination (see StreamingContext)
            for this serialization. </para>
      </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.ImplementMe"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.InternalActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
      <summary> InternalActualCommand does the actual work of the image processing command. </summary>
      <param name="source"> The source image for processing.  This may be different from the original image. </param>
      <param name="dest"> The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null. </param>
      <param name="imageArea"> An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest. </param>
      <param name="results"> The results object that will be used for this command. </param>
      <returns> Null (Nothing in VB) </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
      <summary> Performs the command on a specified section of the image. </summary>
      <param name="source"> The source image. </param>
      <param name="sourceBounds"> The source rectangular boundary. </param>
      <param name="dest"> The destination image. </param>
      <param name="destBounds"> The destination image boundary. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.SetChannelLut(Atalasoft.Imaging.ImageProcessing.ChannelFlags,System.Byte[])">
      <summary> Sets a lookup table for a single channel. </summary>
      <param name="channel"> The channel you want to set. </param>
      <param name="lut"> The look-up-table byte array. </param>
      <exception> Thrown if the LUT does not have 256 elements. </exception>
      <exception> Thrown if an attempt is made to select more than 1 channel. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.SetChannelLut(Atalasoft.Imaging.ImageProcessing.ChannelFlags,System.Int32[])">
      <summary> Sets a lookup table for a single channel. </summary>
      <param name="channel"> The channel you want to set. </param>
      <param name="lut"> The look-up-table array. </param>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase">
      <summary> This is a base-class for creating look up table commands.  This class is abstract and cannot be
            instantiated on its own. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase.#ctor(System.Byte[])">
      <summary>
            Creates a new instance of <see cref="!:ApplyLookUpTable" /> specifying channel1.
            </summary>
      <param name="channel1">An array of 256 bytes, representing the 1st color channel. This can be null.</param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase.#ctor(System.Byte[],System.Byte[])">
      <summary>
            Creates a new instance of <see cref="!:ApplyLookUpTable" /> specifying channel1 and channel2.
            </summary>
      <param name="channel1">An array of 256 bytes, representing the 1st color channel. This can be null.</param>
      <param name="channel2">An array of 256 bytes, representing the 2nd color channel. This can be null.</param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase.#ctor(System.Byte[],System.Byte[],System.Byte[])">
      <summary>
            Creates a new instance of <see cref="!:ApplyLookUpTable" /> specifying channel1, channel2 and channel3.
            </summary>
      <param name="channel1">An array of 256 bytes, representing the 1st color channel. This can be null.</param>
      <param name="channel2">An array of 256 bytes, representing the 2nd color channel. This can be null.</param>
      <param name="channel3">An array of 256 bytes, representing the 3rd color channel. This can be null.</param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase.#ctor(System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
      <summary>
            Creates a new instance of <see cref="!:ApplyLookUpTable" /> specifying channel1, channel2, channel3, and channel4.
            </summary>
      <param name="channel1">An array of 256 bytes, representing the 1st color channel. This can be null.</param>
      <param name="channel2">An array of 256 bytes, representing the 2nd color channel. This can be null.</param>
      <param name="channel3">An array of 256 bytes, representing the 3rd color channel. This can be null.</param>
      <param name="channel4">An array of 256 bytes, representing the 4th color channel. This can be null.</param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase.#ctor(System.Int32[])">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase.#ctor(System.Int32[],System.Int32[],System.Int32[])">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase.#ctor(System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Populates a <B>SerializationInfo</B> with the data needed to serialize the target object. </para>
      </summary>
      <param name="info"> The SerializationInfo to populate with data. </param>
      <param name="context"> The destination (see StreamingContext) for this serialization. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase.ImplementMe"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase.InPlaceProcessing">
      <summary> Indicates whether or not the command will operate on the source image alone. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase.LLClearChannelLut"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase.LLGetChannelLut(Atalasoft.Imaging.ImageProcessing.ChannelFlags)">
      <summary>
            Returns the loop-up-table for a single channel.
            </summary>
      <param name="channel">The channel you want to retrieve the loop-up-table from.</param>
      <returns>A 256 element byte array containing the loop-up-table.</returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase.LLSetChannelLut(Atalasoft.Imaging.ImageProcessing.ChannelFlags,System.Byte[])">
      <summary>
            Sets the loop-up-table for a single channel.
            </summary>
      <param name="channel">The channel to set the loop-up-table for.</param>
      <param name="lut">The loop-up-table byte array.</param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase.LLSetChannelLut(Atalasoft.Imaging.ImageProcessing.ChannelFlags,System.Int32[])"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.FlattenAlphaCommand">
      <summary>
        <para>This command will remove the alpha information from an image by blending the transparent areas with
            a solid color.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.FlattenAlphaCommand.#ctor">
      <summary> Creates a new instance of <STRONG>FlattenAlphaCommand.</STRONG></summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.FlattenAlphaCommand.#ctor(System.Drawing.Color)">
      <summary> Creates a new instance of <STRONG>FlattenAlphaCommand</STRONG> specifying the color used to replace the
            alpha. </summary>
      <param name="color"> The background color to blend with. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.FlattenAlphaCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>FlattenAlphaCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo containing information for this command </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.FlattenAlphaCommand.Color">
      <summary> Gets or sets the color to use for the transparent areas of the image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.FlattenAlphaCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.FlattenAlphaCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <para>Populates a <B>SerializationInfo</B> with the data needed to serialize the target object. </para>
      </summary>
      <param name="info">
        <para>The SerializationInfo to populate with data. </para>
      </param>
      <param name="context">The destination for this serialization.</param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.FlattenAlphaCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.FlattenAlphaCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.FlattenAlphaCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand">
      <summary>
        <para>Use this command to invert the image.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand.#ctor">
      <summary> Creates a new instance of <STRONG>InvertCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>InvertCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo containing information for this command </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand.AutoThread"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand.ChannelsToProcess">
      <summary> Gets or sets a bit flag specifying which channels to process. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand.Clone">
      <summary> Returns a copy of the command. </summary>
      <returns> A copy of the <STRONG>InvertCommand</STRONG>. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo where the data will be stored. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand.ImplementMe"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand.InPlaceProcessing"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand.InternalActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand">
      <summary> This command allows you to replace the channels of an existing image by substituting the channel values
            with those of an 8-bit grayscale image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.#ctor">
      <summary> Creates a new instance of <STRONG>ReplaceChannelCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.#ctor(Atalasoft.Imaging.AtalaImage[])">
      <summary> Creates a new instance of <STRONG>ReplaceChannelCommand</STRONG> specifying the channel images. </summary>
      <param name="channelImage"> A parameter array of grayscale <STRONG>AtalaImage's </STRONG>representing each channel
            in the image. </param>
      <exception> Thrown if the channelImages argument is null (Nothing in VB). </exception>
      <exception> Thrown if channelImage is an empty array. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>ReplaceChannelCommand</STRONG> from serialization information.
            </summary>
      <param name="info"> A SerializationInfo containing information for this command </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.AutoThread"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.Channel1Image">
      <summary> Gets or sets a grayscale image to represent the first channel. Set this to null if you want to skip this
            channel. </summary>
      <exception> Thrown if the channel is not 8-bit or 16-bit grayscale or null (Nothing in Visual Basic). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.Channel2Image">
      <summary> Gets or sets an 8-bit image to represent the second channel. Set this to null if you want to skip this
            channel. </summary>
      <exception> Thrown if the channel is not 8-bit or 16-bit grayscale or null (Nothing in Visual Basic). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.Channel3Image">
      <summary> Gets or sets an 8-bit image to represent the third channel. Set this to null if you want to skip this
            channel. </summary>
      <exception> Thrown if the channel is not 8-bit or 16-bit grayscale or null (Nothing in Visual Basic). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.Channel4Image">
      <summary> Gets or sets an 8-bit image to represent the fourth channel. Set this to null if you want to skip this
            channel. </summary>
      <exception> Thrown if the channel is not 8-bit or 16-bit grayscale or null (Nothing in Visual Basic). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.Clone">
      <summary> Returns a copy of the command. </summary>
      <returns> A copy of the <STRONG>ReplaceChannelCommand</STRONG>. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo where the data will be stored. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.InPlaceProcessing"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand">
      <summary>
        <para>This command will create an alpha channel for an image based on a color value.  If the image already
            contains alpha information, the color will be blended into it.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.#ctor">
      <summary> Creates a new instance of <STRONG>SetAlphaColorCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.#ctor(System.Drawing.Color)">
      <summary> Creates a new instance of <STRONG>SetAlphaColorCommand</STRONG> specifying
            color. </summary>
      <param name="color"> Color used to create the alpha channel. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.#ctor(System.Drawing.Color,System.Double)">
      <summary> Creates a new instance of <STRONG>SetAlphaColorCommand</STRONG> specifying
            color and tolerance. </summary>
      <param name="color"> Color used to create the alpha channel. </param>
      <param name="tolerance"> Tolerance percentage for finding matching colors. (0 - 100) </param>
      <exception> Thrown if the tolerance is less than 0 or greater than 100. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.#ctor(System.Drawing.Color,System.Double,Atalasoft.Imaging.ImageProcessing.AlphaMergeType)">
      <summary> Creates a new instance of <STRONG>SetAlphaColorCommand</STRONG> specifying
            color, tolerance, and merge type. </summary>
      <param name="color"> Color used to create the alpha channel. </param>
      <param name="tolerance"> Tolerance percentage for finding matching colors. (0 - 100) </param>
      <param name="mergeType"> The type of merge performed. </param>
      <exception> Thrown if the tolerance is less than 0 or greater than 100. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.#ctor(System.Drawing.Color,System.Double,Atalasoft.Imaging.ImageProcessing.AlphaMergeType,System.Int32,System.Int32)">
      <summary> Creates a new instance of <STRONG>SetAlphaColorCommand</STRONG> specifying
            color, tolerance, merge type, matching alpha, and non-matching alpha. </summary>
      <param name="color"> Color used to create the alpha channel. </param>
      <param name="tolerance"> Tolerance percentage for finding matching colors. (0 - 100) </param>
      <param name="mergeType"> The type of merge performed. </param>
      <param name="matchAlpha"> The alpha value to use when a match of the color is found.  (0 - 255) </param>
      <param name="nonMatchAlpha"> The alpha value to use when a match of the color is not found.  (0 - 255) </param>
      <exception> Thrown if the tolerance is less than 0 or greater than 100, of if the matchAlpha or nonMatchAlpha values
            are less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>SetAlphaColorCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo containing information for this command </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.AutoThread"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.Clone">
      <summary> Returns a copy of the command. </summary>
      <returns> A copy of the <STRONG>SetAlphaColorCommand</STRONG>. </returns>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.Color">
      <summary> Gets or sets the color used to create the alpha channel. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo where the data will be stored. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.MatchAlpha">
      <summary> Gets or sets the alpha value to use when a match of the color is found. </summary>
      <exception> Thrown if value is  amp;lt; 0. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.MergeType">
      <summary> Gets or sets the type of merge performed. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.NonMatchAlpha">
      <summary> Gets or sets the alpha value to use when a match of the color is not found. </summary>
      <exception> Thrown if value is amp;lt; 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.Tolerance">
      <summary> Gets or sets the tolerance percentage for finding matching colors. </summary>
      <exception> Thrown if value is not between 0 and 100, inclusive. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand">
      <summary>
        <para>Creates an alpha channel for an image using an 8-bit grayscale mask image to control
            transparency.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.#ctor">
      <summary> Creates a new instance of <STRONG>SetAlphaFromMaskCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.#ctor(Atalasoft.Imaging.AtalaImage,System.Boolean,Atalasoft.Imaging.ImageProcessing.AlphaMergeType)">
      <summary> Creates a new instance of <STRONG>SetAlphaFromMask</STRONG> specifying maskImage, resizeMask and mergeType. </summary>
      <param name="maskImage"> An 8-bit image used to generate the alpha channel. </param>
      <param name="resizeMask"> Set to true if the mask should be resized to fit the image. </param>
      <param name="mergeType"> The type of merge performed. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.#ctor(Atalasoft.Imaging.AtalaImage,System.Boolean,Atalasoft.Imaging.ImageProcessing.AlphaMergeType,System.Drawing.Point)">
      <summary> Creates a new instance of <STRONG>SetAlphaFromMask</STRONG> specifying
            maskImage, resizeMask, mergeType and position. </summary>
      <param name="maskImage"> An 8-bit image used to generate the alpha channel. </param>
      <param name="resizeMask"> Set to true if the mask should be resized to fit the image. </param>
      <param name="mergeType"> The type of merge performed. </param>
      <param name="position"> The x,y position to place the mask image. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>SetAlphaFromMaskCommand</STRONG> from serialization information.
            </summary>
      <param name="info"> A SerializationInfo containing information for this command </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo where the data will be stored. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.MaskImage">
      <summary> Gets or sets an 8-bit image used to generate the alpha channel. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.MergeType">
      <summary> Gets or sets the type of merge performed. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.Position">
      <summary> Gets or sets the left, top position of the mask image. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.ResizeMask">
      <summary> Gets or sets a valid to indicate if the mask should be resized to fit the image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand">
      <summary>
        <para>This command will create an alpha channel based on a numeric value.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.#ctor">
      <summary> Creates a new instance of <STRONG>SetAlphaValueCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.#ctor(System.Byte,Atalasoft.Imaging.ImageProcessing.AlphaMergeType)">
      <summary> Creates a new instance of <STRONG>SetAlphaValueCommand</STRONG> specifying the alpha value and merge type.
            </summary>
      <param name="alphaValue"> A value of 0 to 255 indicating the opacity to use on the alpha channel. </param>
      <param name="mergeType"> The type of merge performed. </param>
      <exception> Thrown if the alphaValue is less than 0 or greater than 255. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>SetAlphaValueCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo containing information for this command </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.AlphaValue">
      <summary> Gets or sets a value of 0 to 255 indicating the opacity to use on the alpha channel. </summary>
      <exception> Thrown ifvalue is not between 0 and 255, inclusive. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.Apply(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.AutoThread"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.Clone">
      <summary> Returns a copy of the command. </summary>
      <returns> A copy of the <STRONG>SetAlphaValueCommand</STRONG>. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo where the data will be stored. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.InternalActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
      <summary> InternalActualCommand does the actual work of the image processing command. </summary>
      <param name="source"> The source image for processing.  This may be different from the original image. </param>
      <param name="dest"> The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null. </param>
      <param name="imageArea"> An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.MergeType">
      <summary> Gets or sets the type of merge performed. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand">
      <summary>
            This command will shift individual image channels.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.#ctor">
      <summary> Creates a new instance of <STRONG>ShiftChannelsCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.#ctor(System.Int32,System.Int32,Atalasoft.Imaging.ImageProcessing.ChannelFlags)">
      <summary> Creates a new instance of <STRONG>ShiftChannelsCommand</STRONG> specifying offsetX, offsetY and
            channelsToProcess. </summary>
      <param name="offsetX"> Number of pixels to horizontally offset the channels. </param>
      <param name="offsetY"> Number of pixels to vertically offset the channels. </param>
      <param name="channelsToProcess"> The channels you want to shift. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.#ctor(System.Int32,System.Int32,Atalasoft.Imaging.ImageProcessing.ChannelFlags,System.Int32)">
      <summary> Creates a new instance of <STRONG>ShiftChannelsCommand</STRONG> specifying offsetX, offsetY,
            channelsToProcess and backgroundValue. </summary>
      <param name="offsetX"> Number of pixels to horizontally offset the channels. </param>
      <param name="offsetY"> Number of pixels to vertically offset the channels. </param>
      <param name="channelsToProcess"> The channels you want to shift. </param>
      <param name="backgroundValue"> A value used for uncovered areas of the image.  (0 - 255) </param>
      <exception> Thrown if the backgroundValue is less than 0 or greater than 255. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>ShiftChannelsCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo containing information for this command </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.BackgroundValue">
      <summary> Gets or set a channel value to use for uncovered channel areas of the image.  </summary>
      <exception> Thrown if value is not between 0 and 255. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.ChannelsToProcess">
      <summary> Gets or sets the ChannelFlags specifying which channels to process. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo where the data will be stored. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.OffsetX">
      <summary> Gets or sets the number of pixels to horizontally offset the channels. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.OffsetY">
      <summary> Gets or sets the number of pixels to vertically offset the channels. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand">
      <summary> Swaps one channel with another channel within the same image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.#ctor">
      <summary> Creates a new instance of <STRONG>SwapChannelsCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.#ctor(System.Int32[])">
      <summary> Creates a new instance of SwapChannelsCommand specifying the channels to swap. </summary>
      <param name="channel"> A parameter array of the channel orders.  Values must be between 1 and 4. </param>
      <exception> Thrown if the array contains less than 2 entries or if the channel value is less than 1 or greater than
            4. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>SwapChannelsCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo containing information for this command </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.Channel1">
      <summary> Gets or sets the first channel in the image. Valid values are 1-4. </summary>
      <exception> Thrown if value is not between 1 and 4, inclusive. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.Channel2">
      <summary> Gets or sets the second channel in the image. Valid values are 1-4. </summary>
      <exception> Thrown if the value is not between 1 and 4, inclusive. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.Channel3">
      <summary> Gets or sets the third channel in the image. Valid values are 1-4. </summary>
      <exception> Thrown if the value is not between 1 and 4, inclusive. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.Channel4">
      <summary> Gets or sets the fourth channel in the image. Valid values are 1-4. </summary>
      <exception> Thrown if the value is not between 1 and 4, inclusive. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo where the data will be stored. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.#ctor">
      <summary> Creates a new instance of <STRONG>AdaptiveThresholdCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.#ctor(System.Int32)">
      <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand" /> specifying the window size.
            </summary>
      <param name="windowSize">
        <para>The size of the examination window surround the current pixel</para>
      </param>
      <exception> Thrown if the windowSize is less than 2. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.#ctor(System.Int32,System.Int32)">
      <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand" /> specifying the window size and
            difference threshold. </summary>
      <param name="windowSize">
        <para>The size of the examination window surround the current pixel</para>
      </param>
      <param name="differenceThreshold"> The value used for improving the thresholding results. </param>
      <exception> Thrown if the windowSize is less than 2. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>AdaptiveThresholdCommand</STRONG> from serialization information.
            </summary>
      <param name="info"> A SerializationInfo object containing information for the command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.AutoThread"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.Clone">
      <summary> Returns a copy of the command. </summary>
      <returns> A copy of the <STRONG>AdaptiveThresholdCommand</STRONG>. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.ConstructChangedSourceImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.DifferenceThreshold">
      <summary> Gets or sets a value used for improving the thresholding results. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <param name="info"> A SerializationInfo object that will be filled with command information. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.WindowSize">
      <summary> Gets or sets the size of local window acting on each pixel to find local statistics. </summary>
      <exception> Thrown if value is amp;lt; 2. </exception>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand">
      <summary> The <STRONG>AutoDeskewCommand </STRONG>automatically deskews a binary image using %%company%%'s patent
            pending auto-deskew algorithm. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.#ctor">
      <summary> Creates a new instance of <STRONG>AutoDeskewCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.#ctor(System.Drawing.Rectangle)">
      <summary> Initializes a new instance of the <STRONG>AutoDeskewCommand</STRONG> with default settings and a
            rectangular area to process. </summary>
      <param name="area"> A rectangular area that will be used for determining the deskew angle. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.#ctor(System.Int32,System.Int32)">
      <summary> Initializes a new instance of the <STRONG>AutoDeskewCommand</STRONG> specifying the precision and limit
            angle. </summary>
      <param name="precision"> The precision of the deskew angle calculation.  This value is the inverse of the degree
            precision. </param>
      <param name="limitAngle"> The maximum deskew angle in degrees. (-360 to 360 excluding 0) </param>
      <exception> Thrown if the percision is less than 1 or if limitAngle is less than -360, greater than 360 or equal to
            0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.#ctor(System.Int32,System.Int32,Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCropMode,System.Drawing.Color,System.Drawing.Rectangle)">
      <summary> Initializes a new instance of the <STRONG>AutoDeskewCommand</STRONG> specifying the precision, limit
            angle, crop mode, background color, and rectangular area to process. </summary>
      <param name="precision"> The precision of the deskew angle calculation.  This value is the inverse of the degree
            precision. </param>
      <param name="limitAngle"> The maximum deskew angle in degrees. (-360 to 360 excluding 0) </param>
      <param name="cropMode"> The method of cropping the resulting deskewed image. </param>
      <param name="backgroundColor"> The background color to use when deskewing the image. </param>
      <param name="area"> The rectangular area that will be used for determining the deskew angle. </param>
      <exception> Thrown if the percision is less than 1 or if limitAngle is less than -360, greater than 360 or equal to
            0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.#ctor(System.Int32,System.Int32,System.Drawing.Rectangle)">
      <summary> Initializes a new instance of the <STRONG>AutoDeskewCommand</STRONG> specifying the precision, limit
            angle, and rectangular area to process. </summary>
      <param name="precision"> The precision of the deskew angle calculation.  This value is the inverse of the degree
            precision. </param>
      <param name="limitAngle"> The maximum deskew angle in degrees.  (-360 to 360 excluding 0) </param>
      <param name="area"> The rectangular area that will be used for determing the deskew angle. </param>
      <exception> Thrown if the percision is less than 1 or if limitAngle is less than -360, greater than 360 or equal to
            0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>AutoDeskewCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo object containing information for the command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.Area">
      <summary> Gets or sets rectangular area that will be used for determining the skew angle. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.BackgroundColor">
      <summary> Gets or sets the background color to use when de-skewing the image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
      <summary> Represents the base class for all image processing routines that modify image data. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.ConstructImageResults">
      <summary> Represents the base class for all image processing routines that modify image data. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.Coverage">
      <summary> Represents the percentage of the image that will be randomly sampled when determining the skew angle.
            </summary>
      <exception> Thrown if the value is less than 0 or greater than 100. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.CropMode">
      <summary> Gets or sets a value indicating the method of cropping the resulting de-skewed image. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.ExtractBoundary">
      <summary> Gets or sets a value which will pre-process the image by removing solid filled areas of the image.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.GetDeskewAngle(Atalasoft.Imaging.AtalaImage)">
      <summary>
        <STRONG>GetDeskewAngle </STRONG>returns the skew angle of the image without changing the image at all.
            </summary>
      <param name="sourceImage"> The image to calculate the skew angle from. </param>
      <returns> The skew angle (in degrees) of the image. </returns>
      <exception> Thrown if the source image is not 1 bit per pixel. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <param name="info"> A SerializationInfo object that will be filled with command information. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.IsPixelFormatSupported(Atalasoft.Imaging.PixelFormat)">
      <summary> Represents the base class for all image processing routines that modify image data. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.LimitAngle">
      <summary> Gets or sets the maximum skew angle in degrees. </summary>
      <exception> Thrown when value is not between -360 and 360 or is equal to 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
      <summary> Represents the base class for all image processing routines that modify image data. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.Precision">
      <summary> Gets or sets the precision of the de-skew angle calculation. </summary>
      <exception> Thrown if the value is less than 1. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.SkewAngle">
      <summary> Gets a value indicating the last detected skew angle. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
      <summary> Represents the base class for all image processing routines that modify image data. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCropMode">
      <summary> The crop mode to use in the <see cref="T:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand" />. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCropMode.None">
      <summary>
        <para>Do not crop the deskewed image.  The resulting image will be larger then the source image.</para>
      </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCropMode.FullCrop">
      <summary> Crop all of the excess rotated area.  The resulting image will be smaller then the source image.
            </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCropMode.OriginalSize">
      <summary> Crop the deskewed image to the original size. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewResults">
      <summary> This class represents the results of applying the <see cref="T:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand" /> on an image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewResults.#ctor">
      <summary> Constructs a new <STRONG>AutoDeskewImageResults</STRONG> object. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewResults.#ctor(System.Double)">
      <summary> Constructs a new <STRONG>AutoDeskewImageResults</STRONG> object. </summary>
      <param name="skewAngle"> The detected skew angle. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewResults.SkewAngle">
      <summary> Gets the detected angle of rotation in the image. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand">
      <summary> An <STRONG>ImageCommand</STRONG> that removes solid borders from document images. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.#ctor">
      <summary> Creates a new instance of <STRONG>BorderRemovalCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalEdges)">
      <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand" /> specifying the edges to remove.
            </summary>
      <param name="edges"> Indicates which of the 4 sides are to be removed. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalEdges,System.Double)">
      <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand" /> specifying the edges to remove, and
            tolerance. </summary>
      <param name="edges"> Indicates which of the 4 sides are to be removed. </param>
      <param name="tolerance"> Indicates the tolerance of the border detection. (0 to 100) </param>
      <exception> Thrown if the tolerance is less than 0 or greater than 100. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalEdges,System.Double,System.Boolean)">
      <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand" /> specifying the edges to remove,
            tolerance, and despeckling. </summary>
      <param name="edges"> Indicates which of the 4 sides are to be removed. </param>
      <param name="tolerance"> Indicates the tolerance of the border detection. (0 to 100) </param>
      <param name="despeckle"> Indicates if the calculated border will be despeckled first. </param>
      <exception> Thrown if the tolerance is less than 0 or greater than 100. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>BorderRemovalCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo object containing information for the command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.ConstructImageResults"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.Despeckle">
      <summary> Gets or sets a value indicating if the calculated border will be despeckled first. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.Edges">
      <summary> Gets or sets a value indicating which of the 4 sides are to be removed. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.GetBorder(Atalasoft.Imaging.AtalaImage)">
      <summary> Calculates the border of the image that is used in the <see cref="T:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand" /> to remove the
            borders. </summary>
      <param name="sourceImage"> The image to calculate the borders from. </param>
      <returns> A rectangle containing the position, and size of the image with the borders removed. </returns>
      <exception> Thrown if the sourceImage is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <param name="info"> A SerializationInfo object that will be filled with command information. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.Tolerance">
      <summary> Gets or sets a value indicating the tolerance of the border detection. </summary>
      <exception> Thrown if value is less than 0 or greater than 100. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalEdges">
      <summary> Specifies the edges to remove when using <see cref="T:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand" />. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalEdges.Left">
      <summary> The left edge of the image. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalEdges.Right">
      <summary> The right edge of the image. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalEdges.Top">
      <summary> The top edge of the image. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalEdges.Bottom">
      <summary> The bottom edge of the image. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalEdges.Vertical">
      <summary> The left and right edges of the image. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalEdges.Horizontal">
      <summary> The top and bottom edges of the image. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalEdges.AllSides">
      <summary> The left, right, top, and bottom edges of the image. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalResults">
      <summary> This class represents the results of applying the <see cref="T:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand" /> on an image.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalResults.#ctor">
      <summary> Constructs a new BorderRemovalResults object </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalResults.Border">
      <summary> Gets the detected border. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand">
      <summary>
        <para>This command is used for converting color or gray images to black and white using halftoning
            techniques to simulate gray in the final image.  This command operates best on photographic images.</para>
        <para>Dithering is done using either Ordered Dithering or Floyd-Steinberg Error Diffusion dithering.</para>
        <para>With Ordered Dithering, the dithering matrix is fully replaceable and can be made to simulate custom halftone
            screens.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand.#ctor">
      <summary> Constructs a new <STRONG>DitherCommand</STRONG> to convert multi-bit images to 1 bit per pixel images
            using ordered dithering as the method. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Document.DitheringMethod)">
      <summary> Constructs a new <STRONG>DitherCommand</STRONG> to convert multi-bit images to 1 bit per pixel images
            using the supplied method. </summary>
      <param name="method"> The method to be used for dithering. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>DitherCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo object containing information for the command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <param name="info"> A SerializationInfo object that will be filled with command information. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand.Matrix">
      <summary> Gets or sets the matrix to use for ordered dithering.  The matrix must have either 4, 16, 64, or 256
            elements in it representing 2x2, 4x4, 8x8 or 16x16 matrices, respectively. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand.Method">
      <summary> Set or get the method to be used for dithering. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand.Serpentine">
      <summary> Set or get whether or not Floyd Steinberg dithering will operate in alternating left to right/right to
            left patterns or simply left to right. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand.Standard16x16">
      <summary> Returns a standard 16x16 ordered dithering matrix. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand.Standard2x2">
      <summary> Returns a standard 2x2 ordered dithering matrix. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand.Standard4x4">
      <summary> Returns a standard 4x4 ordered dithering matrix. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand.Standard8x8">
      <summary> Returns a standard 8x8 ordered dithering matrix. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand.SupportedPixelFormats">
      <summary> Returns the set of PixelFormats that are supported by this image command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Document.DitheringMethod">
      <summary> Specifies the technique used for dithering in a <see cref="T:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand" />. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Document.DitheringMethod.FloydSteinberg">
      <summary> Use Floyd-Steinberg error diffusion </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Document.DitheringMethod.Ordered">
      <summary> Use matrix-based ordered dithering </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand">
      <summary> The <STRONG>DocumentDespeckleCommand </STRONG>is useful for removing small isolated features in a bitonal
            image without eroding solid features.  The most common use is as a despeckle filter for document images. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand.#ctor">
      <summary> Creates a new instance of <STRONG>DocumentDespeckleCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>DocumentDespeckleCommand</STRONG> from serialization information.
            </summary>
      <param name="info"> A SerializationInfo object containing information for the command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand.AutoThread"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand.Clone">
      <summary> Returns a copy of the command. </summary>
      <returns> A copy of the <STRONG>DocumentDespeckleCommand</STRONG>. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <param name="info"> A SerializationInfo object that will be filled with command information. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand.InternalActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
      <summary> Does the actual work of the image processing command. </summary>
      <param name="source"> The source image for processing.  This may be different from the original image. </param>
      <param name="dest"> The destination image. </param>
      <param name="imageArea"> An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest. </param>
      <returns> Null (Nothing in VB). </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand.VerifyDest(Atalasoft.Imaging.AtalaImage)">
      <summary> Called to verify the dest provided to <see cref="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)" />.
            </summary>
      <param name="dest"> The destination image. </param>
      <exception> Thrown if the image is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand.VerifySource(Atalasoft.Imaging.AtalaImage)">
      <summary> Call to verify the source image provided to <see cref="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)" />.
            </summary>
      <param name="source"> The source image for processing.  This may be different from the original image. </param>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Document.DocumentHitOrMissCommand">
      <summary> Perform a hit-or-miss transformation on a binary image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentHitOrMissCommand.#ctor">
      <summary> Creates a new instance of <c>DocumentHitOrMissCommand</c>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentHitOrMissCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix,Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix)">
      <summary> Creates a new instance of <c>DocumentHitOrMissCommand</c> specifying the foreground and
            background masks. </summary>
      <param name="foregroundMask"> A matrix of integer values to act as the foreground mask. </param>
      <param name="backgroundMask"> A matrix of integer values to act as the background mask. </param>
      <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if the masks have no rows or if the number of columns/rows do not match. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentHitOrMissCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Creates a new instance of <c>DocumentHitOrMissCommand</c> from serialization information.</summary>
      <param name="info"> A SerializationInfo object containing information for the command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception cref="T:System.ArgumentNullException"> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentHitOrMissCommand.BackgroundMask">
      <summary> Gets or sets a matrix of integer values to act as the background mask. </summary>
      <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if value matrix is not N x N. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentHitOrMissCommand.ForegroundMask">
      <summary> Gets or sets a matrix of integer values to act as the foreground mask. </summary>
      <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if value matrix is not N x N. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentHitOrMissCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.</summary>
      <param name="info"> A SerializationInfo object that will be filled with command information. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception cref="T:System.ArgumentNullException"> Thrown if the info argument is null (Nothing in VB). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentHitOrMissCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
      <summary> PerformActualCommand does the actual work of the image processing command. </summary>
      <param name="source"> The source image for processing.  This may be different from the original image. </param>
      <param name="dest"> The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null. </param>
      <param name="imageArea"> An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest. </param>
      <param name="results"> The results object that will be used for this command. </param>
      <returns> In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null. </returns>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentHitOrMissCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentHitOrMissCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
      <summary> Verify the integrity of properties in the command before processing an image. </summary>
      <param name="image"> The image to be processed. </param>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Document.DocumentMedianCommand">
      <summary> Applies a median filter to a binary image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentMedianCommand.#ctor">
      <summary>
            Creates a new instance of <c>DocumentMedianCommand</c>.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentMedianCommand.#ctor(System.Int32)">
      <summary> Creates a new instance of <c>DocumentMedianCommand</c> specifying filterSize. </summary>
      <param name="filterSize"> The size of the filter to use for this command. (3, 5, 7, etc) </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentMedianCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <c>DocumentMedianCommand</c> from serialization information.</summary>
      <param name="info"> A SerializationInfo object containing information for the command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception cref="T:System.ArgumentNullException"> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentMedianCommand.ConstructChangedSourceImage(Atalasoft.Imaging.AtalaImage)">
      <summary> The method is called by the default implementation of Apply.  It determines if it is necessary to create a
            copy of the source image in a different pixel format and if so, determines the best new pixel format and allocates
            that image. </summary>
      <param name="image"> The original source image passed to Apply. </param>
      <returns> A new image in a pixel format supported by the command or <EM>null</EM> to indicate that the original
            image is acceptable. </returns>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentMedianCommand.FilterSize">
      <summary> Gets or sets the size of the filter to use for this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentMedianCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.</summary>
      <param name="info"> A SerializationInfo object that will be filled with command information. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception cref="T:System.ArgumentNullException"> Thrown if the info argument is null (Nothing in VB). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentMedianCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
      <summary> PerformActualCommand does the actual work of the image processing command. </summary>
      <param name="source"> The source image for processing.  This may be different from the original image. </param>
      <param name="dest"> The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null. </param>
      <param name="imageArea"> An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest. </param>
      <param name="results"> The results object that will be used for this command. </param>
      <returns> In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null. </returns>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentMedianCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentMedianCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
      <summary> Verify the integrity of properties in the command before processing an image. </summary>
      <param name="image"> The image to be processed. </param>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Document.DocumentPixelFormatChanger">
      <summary> This <see cref="T:Atalasoft.Imaging.PixelFormatChanger" /> is suited for document images and can be set to <see cref="P:Atalasoft.Imaging.AtalaImage.PixelFormatChanger" />. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentPixelFormatChanger.#ctor(Atalasoft.Imaging.PixelFormatChanger)">
      <summary> Creates a new instance of <STRONG>DocumentPixelFormatChanger</STRONG>. </summary>
      <param name="basePixelChanger"> The base <see cref="T:Atalasoft.Imaging.PixelFormatChanger" /> that will be used when the target pixel
            format is not PixelFormat.Pixel1bppIndexed. </param>
      <exception> Thrown if the basePixelChanger is null (Nothing in VB). </exception>
      <exception> Thrown if the basePixelChanger is a DocumentPixelFormatChanger. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentPixelFormatChanger.AdaptiveThresholdCommand">
      <summary> Gets the <see cref="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentPixelFormatChanger.AdaptiveThresholdCommand" /> used by the <STRONG>DocumentPixelFormatChanger</STRONG>.
            </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentPixelFormatChanger.BasePixelChanger">
      <summary> Gets the base <see cref="T:Atalasoft.Imaging.PixelFormatChanger" /> passed into the <STRONG>DocumentPixelChanger</STRONG>
            constructor. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentPixelFormatChanger.GetThresholdCommand">
      <summary> Returns the threshold command used based on the value of <see cref="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentPixelFormatChanger.ThresholdMethod" />. </summary>
      <returns> The threshold command to use. </returns>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentPixelFormatChanger.GlobalThresholdCommand">
      <summary> Gets the <see cref="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentPixelFormatChanger.GlobalThresholdCommand" /> used by the <STRONG>DocumentPixelFormatChanger</STRONG>.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentPixelFormatChanger.LowLevelChangePixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.ColorManagement.ColorProfile)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentPixelFormatChanger.SimpleThresholdCommand">
      <summary> Gets the <see cref="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentPixelFormatChanger.SimpleThresholdCommand" /> that used by the
            <STRONG>DocumentPixelFormatChanger</STRONG>. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentPixelFormatChanger.ThresholdMethod">
      <summary> Gets or sets the threshold method to use when converting to 1-bit images. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand">
      <summary>
            Apply morphological thinning to a 1-bit image.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand.#ctor">
      <summary>
            Creates a new instance of <c>DocumentThinningCommand</c>.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix[],Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix[])">
      <summary> Creates a new instance of <c>DocumentThinningCommand</c> specifying foregroundMask and
            backgroundMask. </summary>
      <param name="foregroundMask"> A matrix array of integer values to act as the foreground mask. </param>
      <param name="backgroundMask"> A matrix array of integer values to act as the background mask. </param>
      <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if either mask is an empty array 
            of if the number of columns does not equal the number of rows. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <c>DocumentThinningCommand</c> from serialization information. </summary>
      <param name="info"> A SerializationInfo object containing information for the command.   </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception cref="T:System.ArgumentNullException"> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand.GetBackgroundMask">
      <summary> Returns the background mask. </summary>
      <returns> A <see cref="T:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix" /> object containing the mask values. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand.GetForegroundMask">
      <summary> Returns the foreground mask. </summary>
      <returns> A <see cref="T:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix" /> object containing the mask values. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.</summary>
      <param name="info"> A SerializationInfo object that will be filled with command information. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception cref="T:System.ArgumentNullException"> Thrown if the info argument is null (Nothing in VB). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand.MaxIterations">
      <summary> Gets or sets the maximum number of iterations to use when processing the image. </summary>
      <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if the value is less than 1. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
      <summary> PerformActualCommand does the actual work of the image processing command. </summary>
      <param name="source"> The source image for processing.  This may be different from the original image. </param>
      <param name="dest"> The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null. </param>
      <param name="imageArea"> An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest. </param>
      <param name="results"> The results object that will be used for this command. </param>
      <returns> In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand.SetBackgroundMask(Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix[])">
      <param name="mask"> A <see cref="T:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix" /> object containing the mask values. </param>
      <returns> Sets the background mask to use. </returns>
      <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if value is an empty array or value matrix is not of form N x N. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand.SetForegroundMask(Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix[])">
      <param name="mask"> A <see cref="T:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix" /> object containing the mask values. </param>
      <returns> Sets the foreground mask to use. </returns>
      <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if value is an empty array or value matrix is not of from N x N. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
      <summary> Verify the integrity of properties in the command before processing an image. </summary>
      <param name="image"> The image to be processed. </param>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand">
      <summary> Converts a multi-bit image (color or grayscale) to a single bit black and white image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.#ctor">
      <summary> Constructs a new <STRONG>DynamicThresholdCommand</STRONG> object </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.#ctor(System.Int32)">
      <summary> Constructs a new <STRONG>DynamicThresholdCommand</STRONG> object </summary>
      <param name="windowSize">
        <para>The size of the examination window surround the current pixel.</para>
      </param>
      <exception> Thrown if the windowSize is less than 1. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.#ctor(System.Int32,System.Int32,System.Double)">
      <summary> Creates a new instance of <STRONG>DynamicThresholdCommand</STRONG> specifying the window size, difference
            threshold and black grouping. </summary>
      <param name="windowSize">
        <para>The size of the examination window surround the current pixel</para>
      </param>
      <param name="differenceThreshold"> Value used to improving the thresholding results. </param>
      <param name="blackGrouping"> A percentile indication of how tightly grouped black pixels need to be.  Default value
            is 0.25. </param>
      <exception> Thrown if the windowSize is less than 1 or if blackGrouping is less than 0 or greater than 1.
            </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>DynamicThresholdCommand</STRONG> from serialization information.</summary>
      <param name="info"> A SerializationInfo object containing information for the command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.AutoThread"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.BlackGrouping">
      <summary> A percentile indication of how tightly grouped black pixels need to be. </summary>
      <exception> Thrown if the value is less than 0 or greater than 1. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.Clone">
      <summary> Returns a copy of the command. </summary>
      <returns> A copy of the <STRONG>DynamicThresholdCommand</STRONG>. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.ConstructChangedSourceImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.DifferenceThreshold">
      <summary> Gets or sets a value used to improving the thresholding results. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <param name="info"> A SerializationInfo object that will be filled with command information. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.WindowSize">
      <summary> Gets or sets the size of local window acting on each pixel to find local statistics. </summary>
      <exception> Thrown if the value is less than 1. </exception>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Document.GlobalThresholdCommand">
      <summary> An <STRONG>ImageCommand</STRONG> used to convert a grayscale or color image into black and white using a
            global thresholding technique. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.GlobalThresholdCommand.#ctor">
      <summary> Creates a new instance of <STRONG>GlobalThresholdCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.GlobalThresholdCommand.#ctor(System.Int32)">
      <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Document.GlobalThresholdCommand" /> specifying the initial threshold value.
            </summary>
      <param name="initThreshold"> The initial threshold value. </param>
      <exception> Thrown if the initThreshold is less than 0 or greater than 255. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.GlobalThresholdCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>GlobalThresholdCommand</STRONG> from serialization information.
            </summary>
      <param name="info"> A SerializationInfo object containing information for the command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.GlobalThresholdCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.GlobalThresholdCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <param name="info"> A SerializationInfo object that will be filled with command information. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.GlobalThresholdCommand.InitThreshold">
      <summary> Gets or sets the initial threshold value. </summary>
      <exception> Thrown if value is  not between 0 and 255 inclusive. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.GlobalThresholdCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.GlobalThresholdCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.GlobalThresholdCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.GlobalThresholdCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentCommand">
      <summary> This class will perform a mathematical morphological operation to a binary image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentCommand.#ctor">
      <summary> Creates a new instance of <c>MorphoDocumentCommand</c>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentMode)">
      <summary> Create a new instance of <c>MorphoDocumentCommand</c> specifying mode. </summary>
      <param name="mode"> The type of morphological filter to perform. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentMode,Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix)">
      <summary> Create a new instance of <c>MorphoDocumentCommand</c> specifying mode and mask. </summary>
      <param name="mode"> The type of morphological filter to perform. </param>
      <param name="mask"> A matrix of integers controlling the behavior and depth of the filter. </param>
      <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if the number of rows and columns in mask is not equal, or is even. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <c>MorphoDocumentCommand</c> from serialization information.</summary>
      <param name="info"> A SerializationInfo object containing information for the command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception cref="T:System.ArgumentNullException"> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.</summary>
      <param name="info"> A SerializationInfo object that will be filled with command information. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception cref="T:System.ArgumentNullException"> Thrown if the info argument is null (Nothing in VB). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentCommand.Mask">
      <summary> Gets or sets a matrix of integers controlling the behavior and depth of the filter. </summary>
      <exception cref="T:System.ArgumentOutOfRangeException"> Thrown if number of rows and cols is not equal, or is even. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentCommand.Mode">
      <summary> Gets or set the type of morphological filter to perform. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
      <summary> PerformActualCommand does the actual work of the image processing command. </summary>
      <param name="source"> The source image for processing.  This may be different from the original image. </param>
      <param name="dest"> The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null. </param>
      <param name="imageArea"> An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest. </param>
      <param name="results"> The results object that will be used for this command. </param>
      <returns> In most cases, PerformActualCommand should return null.  When PerformActualCommand returns a non-null
            image, it is indicating that it has allocated a new image to use for the final image.  This must be true if
            ConstructFinalImage returned null. </returns>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
      <summary> Verify the integrity of properties in the command before processing an image. </summary>
      <param name="image"> The image to be processed. </param>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentMode">
      <summary> The type of morphological filter to use in the <see cref="T:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentCommand" />. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentMode.Dilation">
      <summary>
        <para>Used to smooth small dark regions tending to enhance black features in the image.</para>
      </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentMode.Erosion">
      <summary>
        <para>Used to smooth small light regions tending to reduce black features in the image.</para>
      </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentMode.Open">
      <summary> The dilation of the erosion of the image used to reduce small black regions within the image. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentMode.Close">
      <summary> The erosion of the dilation of the image used to reduce small white regions within the image. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentMode.BoundaryExtraction">
      <summary> Perform a boundary detection/extraction on a binary image.  This will generate an outline of the
            foreground features of the input image </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand">
      <summary>
            Overlay an image using an alpha mask.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand.#ctor">
      <summary> Creates a new instance of <STRONG>OverlayMaskedDocumentCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand.#ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage)">
      <summary> Creates a new instance of <STRONG>OverlayMaskedDocumentCommand</STRONG> specifying topImage and mask.
            </summary>
      <param name="topImage"> The top binary image to overlay. </param>
      <param name="mask"> A binary image indicating the transparent and opaque regions of the overlay. </param>
      <exception> Thrown if the topImage or mask is not a 1-bit image. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand.#ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Point)">
      <summary> Creates a new instance of <STRONG>OverlayMaskedDocumentCommand</STRONG> specifying topImage, mask and
            position. </summary>
      <param name="topImage"> The top binary image to overlay. </param>
      <param name="mask"> A binary image indicating the transparent and opaque regions of the overlay. </param>
      <param name="position"> The position of the top image on the bottom image. </param>
      <exception> Thrown if the topImage or mask is not a 1-bit image. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>OverlayMaskedDocumentCommand</STRONG> from serialization information.
            </summary>
      <param name="info"> A SerializationInfo object containing information for the command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <param name="info"> A SerializationInfo object that will be filled with command information. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand.InPlaceProcessing">
      <summary> Gets a value indicating if the image is processed in place instead of generating a new image. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand.Mask">
      <summary> Gets or sets the 1-bit image indicating the transparent and opaque regions of the overlay. </summary>
      <exception> Thrown if the image is not 1 bit black and white. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand.Position">
      <summary> Gets or sets the position of the top image on the bottom image. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand.TopImage">
      <summary> Gets or sets the top 1-bit image to overlay. </summary>
      <exception> Thrown if image is not 1 bit black and white. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand">
      <summary> Resamples a binary image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.#ctor">
      <summary> Creates a new instance of <STRONG>ResampleDocumentCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.#ctor(System.Drawing.Rectangle,System.Drawing.Size,Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentMethod)">
      <summary> Creates a new instance of <STRONG>ResampleDocumentCommand</STRONG> specifying sourceRect, destSize and
            documentMethod. </summary>
      <param name="sourceRect"> The rectangular region of the source image which will be resized. </param>
      <param name="destSize"> The final size of the image. </param>
      <param name="documentMethod"> The 1-bit specialized resampling method to apply. </param>
      <exception> Thrown if destSize width or height is less than 1. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.#ctor(System.Drawing.Rectangle,System.Drawing.Size,Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentMethod,System.Int32)">
      <summary> Creates a new instance of <STRONG>ResampleDocumentCommand</STRONG> specifying sourceRect, destSize,
            documentMethod and cutOff. </summary>
      <param name="sourceRect"> The rectangular region of the source image which will be resized. </param>
      <param name="destSize"> The final size of the image. </param>
      <param name="documentMethod"> The 1-bit specialized resampling method to apply. </param>
      <param name="cutOff"> The grayscale value which is the cutoff value for a black pixel when using AreaAverage.
            </param>
      <exception> Thrown if destSize width or height is less than 1, or if cutOff is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.#ctor(System.Drawing.Rectangle,System.Drawing.Size,Atalasoft.Imaging.ImageProcessing.ResampleMethod)">
      <summary> Creates a new instance of <STRONG>ResampleDocumentCommand</STRONG> specifying sourceRect, destSize and
            scaleToGrayMethod. </summary>
      <param name="sourceRect"> The rectangular region of the source image which will be resized. </param>
      <param name="destSize"> The final size of the image. </param>
      <param name="scaleToGrayMethod"> The <see cref="T:Atalasoft.Imaging.ImageProcessing.ResampleMethod" /> to apply when the ResampleDocumentMethod is ScaleToGray.
            </param>
      <exception> Thrown if destSize width or height is less than 1. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>ResampleDocumentCommand</STRONG> from serialization information.
            </summary>
      <param name="info"> A SerializationInfo object containing information for the command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.AutoThread"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.Clone">
      <summary> Returns a copy of the command. </summary>
      <returns> A copy of the <STRONG>ResampleDocumentCommand</STRONG>. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.CutOff">
      <summary> Gets or sets the grayscale value which is the cutoff value for a black pixel when using AreaAverage.
            </summary>
      <exception> Thrown if value is &lt; 0. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.DestSize">
      <summary> Gets or sets the final size of the image. </summary>
      <exception> Thrown if the height or width is amp;lt; 1. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.DocumentMethod">
      <summary> Gets or sets the 1-bit specialized resampling method to apply. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.ScaleToGrayMethod">
      <summary> Gets or sets the %ResampleMethod% to apply when the DocumentMethod is ScaleToGray. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.SourceRect">
      <summary> Gets or sets the rectangular region of the source image which will be resized. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentMethod">
      <summary> Specifies the resampling method to apply using the <see cref="T:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand" />. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentMethod.BiLinear">
      <summary>
        <para>Uses bi-linear resampling.  Yields good results when enlarging images, and fairly fast.</para>
        <para>Not"e:  This was previously incorrectly named NearestNeighbor.</para>
      </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentMethod.ScaleToGray">
      <summary> Converts the 1-bit binary image to grayscale as it resizes which retains the visual detail of the image.
            </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentMethod.AreaAverage">
      <summary> Performs an area average of the binary image with a specified "cut-off" factor that will favor black or
            white pixels.  Valid for reductions only. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentMethod.EnlargeFast">
      <summary> Performs a quick pixel mapping when enlarging speed is more important than quality. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Document.SimpleThresholdCommand">
      <summary> This command converts a continuous RGB or grayscale image to a 1-bit black and white image, given a
            threshold value. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.SimpleThresholdCommand.#ctor">
      <summary> Creates a new instance of <STRONG>SimpleThresholdCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.SimpleThresholdCommand.#ctor(System.Int32)">
      <summary> Creates a new instance of <STRONG>SimpleThresholdCommand</STRONG> indicating the threshold value.
            </summary>
      <param name="inputThreshold"> The threshold value. </param>
      <exception> Thrown if inputThreshold is not between 0 and 255 inclusive. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.SimpleThresholdCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.SimpleThresholdCommand.AutoThread"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.SimpleThresholdCommand.Clone">
      <summary> Returns a copy of the command. </summary>
      <returns> A copy of the <STRONG>SimpleThresholdCommand</STRONG>. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.SimpleThresholdCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.SimpleThresholdCommand.InputThreshold">
      <summary> Gets or sets the threshold value. </summary>
      <exception> Thrown if value is not between 0 and 255 inclusive. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.SimpleThresholdCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.SimpleThresholdCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.SimpleThresholdCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Document.SimpleThresholdCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Document.SimpleThresholdCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Document.ThresholdMethod">
      <summary> Thresholding Method. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Document.ThresholdMethod.Simple">
      <summary> Simple Thresholding </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Document.ThresholdMethod.Global">
      <summary> Global Thresholding </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Document.ThresholdMethod.Adaptive">
      <summary> Adaptive Thresholding </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand">
      <summary>
        <para>Adjusts the tint of an image by specifying a value.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand.#ctor">
      <summary> Creates a new instance of <STRONG>AdjustTintCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand.#ctor(System.Int32)">
      <summary> Creates a new instance of AdjustTintCommand specifying the tint value. </summary>
      <param name="tint"> A value from -180 to +180.  Positive values enhance green, negative values enhance red. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>AdjustTintCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo object containing information about this command. </param>
      <param name="context"> A StreamingContext for the information. </param>
      <exception> Thrown if the 'info' argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand.AutoThread"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand.Clone">
      <summary> Creates a copy of the command. </summary>
      <returns> A copy of the <STRONG>AdjustTintCommand</STRONG>. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills the SerializationInfo object with information for this command. </summary>
      <param name="info"> A SerializationInfo object data will be filled into. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand.InPlaceProcessing"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand.Tint">
      <summary> Gets or sets a value from -180 to +180.  Positive values enhance green, negative values enhance red.
            </summary>
      <exception> Thrown if value is not between -180 and 180. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.AutoColorCommand">
      <summary> Automatically corrects the color and contrast of an image.  A combination of <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand" /> and <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand" />. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoColorCommand.#ctor">
      <summary> Creates a new instance of <STRONG>AutoColorCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoColorCommand.#ctor(System.Double)">
      <summary> Creates a new instance of AutoColorCommand specifying the clip amount. </summary>
      <param name="clip"> The percentage of pixels to ignore when calculating the white and black points. </param>
      <exception> Thrown if the clip is less than 0 or greater than 100. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoColorCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of AutoColorCommand from serialization information. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the 'info' argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoColorCommand.Clip">
      <summary> Gets or sets the percentage of pixels to ignore when calculating the white and black points. </summary>
      <exception> Thrown if value is not greater than 0.0 and 100.0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoColorCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills the SerializationInfo object with information for this command. </summary>
      <param name="info"> A SerializationInfo object data will be filled into. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the 'info' argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoColorCommand.ImplementMe"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoColorCommand.InPlaceProcessing"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoColorCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoColorCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoColorCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand">
      <summary> Adjusts the overall contrast of an image automatically. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.#ctor">
      <summary> Creates a new instance of <STRONG>AutoContrastCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.#ctor(System.Int32,System.Int32)">
      <summary> Creates a new instance of AutoContrastCommand specifying the output range. </summary>
      <param name="outputRangeLow"> The low pixel value to stretch the histogram to. (0 to 255) </param>
      <param name="outputRangeHigh"> The high pixel value to stretch the histogram to. (0 to 255) </param>
      <exception> Thrown if the arguments are less than 0 or greater than 255. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.#ctor(System.Int32,System.Int32,System.Double)">
      <summary> Creates a new instance of AutoContrastCommand specifying the output range and gamma. </summary>
      <param name="outputRangeLow"> The low pixel value to stretch the histogram to. (0 to 255) </param>
      <param name="outputRangeHigh"> The high pixel value to stretch the histogram to. (0 to 255) </param>
      <param name="gamma"> The gamma adjustment to apply when running the filter. </param>
      <exception> Thrown if the outputRangeLow or outputRangeHigh value is less than 0 or greater than 255. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.#ctor(System.Int32,System.Int32,System.Double,System.Double)">
      <summary> Creates a new instance of AutoContrastCommand specifying the output range, gamma and clip values.
            </summary>
      <param name="outputRangeLow"> The low pixel value to stretch the histogram to. (0 to 255) </param>
      <param name="outputRangeHigh"> The high pixel value to stretch the histogram to. (0 to 255) </param>
      <param name="gamma"> The gamma adjustment to apply when running the filter. </param>
      <param name="clip"> The percentage of pixels to ignore when calculating the white and black points. (0 to 100)
            </param>
      <exception> Thrown if the outputRangeLow or outputRangeHigh is less than 0 or greater than 255, or if the clip value
            is less than 0 or greater than 100. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of AutoContrastCommand from serialization information. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the 'info' argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.Clip">
      <summary> Gets or sets the percentage of pixels to ignore when calculating the white and black points. </summary>
      <exception> Thrown if value is not between 0.0 and 100.0. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.Gamma">
      <summary> Gets or sets the gamma adjustment to apply when running the filter. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills the SerializationInfo object with information for this command. </summary>
      <param name="info"> A SerializationInfo object data will be filled into. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the 'info' argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.ImplementMe"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.InPlaceProcessing"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.OutputRangeHigh">
      <summary> Gets or sets the high pixel value to stretch the histogram to. </summary>
      <exception> Thrown if value is not between 0 and 255. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.OutputRangeLow">
      <summary> Gets or sets the low pixel value to stretch the histogram to. </summary>
      <exception> Thrown if value is not between 0 and 255. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand">
      <summary> Enhances the contrast of an image by automatically defining the light and dark pixels, then redistributing
            the histogram proportionately. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.#ctor">
      <summary> Creates a new instance of <STRONG>AutoLevelsCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.#ctor(System.Drawing.Color,System.Drawing.Color)">
      <summary> Creates a new instance of AutoLevelsCommand specifying the output range. </summary>
      <param name="outputRangeLow"> The low pixel value to stretch the histogram to. </param>
      <param name="outputRangeHigh"> The high pixel value to stretch the histogram to. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.#ctor(System.Drawing.Color,System.Drawing.Color,System.Double)">
      <summary> Creates a new instance of AutoLevelsCommand specifying the output range and gamma. </summary>
      <param name="outputRangeLow"> The low pixel value to stretch the histogram to. </param>
      <param name="outputRangeHigh"> The high pixel value to stretch the histogram to. </param>
      <param name="gamma"> The gamma adjustment to apply when running the filter. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.#ctor(System.Drawing.Color,System.Drawing.Color,System.Double,System.Double)">
      <summary> Creates a new instance of AutoLevelsCommand specifying the output range, gamma and clip. </summary>
      <param name="outputRangeLow"> The low pixel value to stretch the histogram to. </param>
      <param name="outputRangeHigh"> The high pixel value to stretch the histogram to. </param>
      <param name="gamma"> The gamma adjustment to apply when running the filter. </param>
      <param name="clip"> The percentage of pixels to ignore when calculating the white and black points. </param>
      <exception> Thrown if the 'clip' argument is less than 0 or greater than 100. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of AutoLevelsCommand from serialization information. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.AutoThread"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.Clip">
      <summary> Gets or sets the percentage of pixels to ignore when calculating the white and black points. </summary>
      <exception> Thrown if value is not between 0 and 100. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.Clone">
      <summary> Returns a copy of the command. </summary>
      <returns> A copy of the <STRONG>AutoLevelsCommand</STRONG>. </returns>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.Gamma">
      <summary> Gets or sets the gamma adjustment to apply when running the filter. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills the SerializationInfo object with information for this command. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.ImplementMe"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.InPlaceProcessing"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.OutputRangeHigh">
      <summary> Gets or sets the high pixel value to stretch the histogram to. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.OutputRangeLow">
      <summary> Gets or sets the low pixel value to stretch the histogram to. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.AutoWhiteBalanceCommand">
      <summary> Automatically adjusts the white point in an image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoWhiteBalanceCommand.#ctor">
      <summary> Creates a new instance of <STRONG>AutoWhiteBalanceCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoWhiteBalanceCommand.#ctor(System.Double)">
      <summary> Creates a new instance of <STRONG>AutoWhiteBalanceCommand</STRONG> specifying dampening. </summary>
      <param name="dampening">
        <para>The amount of dampening to use.</para>
      </param>
      <exception> Thrown if dampening is less than 1. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoWhiteBalanceCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>AutoWhiteBalanceCommand</STRONG> from serialization information.
            </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoWhiteBalanceCommand.Dampening">
      <summary> Gets or sets a value indicating the amount of dampening to use. </summary>
      <exception> Thrown when value &lt; 1. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoWhiteBalanceCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills the SerializationInfo object with information for this command. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoWhiteBalanceCommand.InPlaceProcessing"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoWhiteBalanceCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoWhiteBalanceCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoWhiteBalanceCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand">
      <summary>
        <para>Apply a bevel effect to the edges of an image.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.#ctor">
      <summary> Creates a new instance of <STRONG>BevelEdgeCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.#ctor(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary> Creates a new instance of BevelEdgeCommand specifying the bevel size and brightness levels. </summary>
      <param name="bevelSize"> Size of the bevel along the edge, in pixels. </param>
      <param name="leftBrightness"> Brightness level of the left facet. (0-255) </param>
      <param name="topBrightness"> Brightness level of the top facet. (0-255) </param>
      <param name="rightBrightness"> Brightness level of the right facet. (0-255) </param>
      <param name="bottomBrightness"> Brightness level of the bottom facet. (0-255) </param>
      <param name="smoothFactor"> Smooth the bevel edge. (0-500) </param>
      <exception> Thrown if any of the arguments are invalid. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>BevelEdgeCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.BevelSize">
      <summary> Gets or sets the size of the bevel along the edge, in pixels. </summary>
      <exception> Thrown if value is not gt; 0. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.BottomBrightness">
      <summary> Gets or sets the brightness level of the bottom facet. (0-255) </summary>
      <exception> Thrown if value is not between 0 and 255. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills the SerializationInfo object with information for this command. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.InPlaceProcessing"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.LeftBrightness">
      <summary> Gets or sets the brightness level of the left facet. (0-255) </summary>
      <exception> Thrown if value is not between 0 and 255. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.RightBrightness">
      <summary> Gets or sets the brightness level of the right facet. (0-255) </summary>
      <exception> Thrown if value is not between 0 and 255. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.SmoothFactor">
      <summary> Gets or sets the smooth the bevel edge. (0-500) </summary>
      <exception> Thrown if value is not between 0 and 500. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.TopBrightness">
      <summary> Gets or sets the brightness level of the top facet. (0-255) </summary>
      <exception> Thrown if value is not between 0 and 255. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand">
      <summary> Modifies the brightness and/or contrast of an image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.#ctor">
      <summary> Creates a new instance of <STRONG>BrightnessContrastCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.#ctor(System.Double,System.Double)">
      <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand" /> specifying the brightness and contrast.
            </summary>
      <param name="newBrightness"> The percent to increase or decrease brightness. (-100 to 100) </param>
      <param name="newContrast"> The percent to increate or decrease the contrast. (-100 to 100) </param>
      <exception> Thrown if either argument is less than -100 or greater than 100. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.#ctor(System.Double,System.Double,Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCurveType)">
      <summary> Initializes a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand" /> specifying the brightness, contrast, and curve
            shape. </summary>
      <param name="newBrightness">  The percent to increase or decrease brightness. (-100 to 100) </param>
      <param name="newContrast"> The percent to increase or decrease contrast. (-100 to 100) </param>
      <param name="curveShape"> The curve shape. </param>
      <exception> Thrown if the newBrightness or newContrast values are less than -100 or greater than 100. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>BrightnessContrastCommand</STRONG> from serialization information.
            </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.AutoThread"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.Clone">
      <summary> Creates a copy of the command. </summary>
      <returns> A copy of the <STRONG>BrightnessContrastCommand</STRONG>. </returns>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.CurveShape">
      <summary>
        <para>Gets or sets a value indicating the curve shape.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills the SerializationInfo object with information for this command. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.InPlaceProcessing"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.NewBrightness">
      <summary> Gets or sets the percent to increase or decrease brightness. </summary>
      <exception> Thrown if value is not between -100 and 100. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.NewContrast">
      <summary> Gets or sets the percent to increase or decrease contrast. </summary>
      <exception> Thrown if value is not between -100 and 100. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCurveType">
      <summary> Indicates the curve type used in the <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand" />. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCurveType.ThreePoint">
      <summary> The three point curve emphasizes mid-tones more than the five or seven point curves. This is closest to
            the brightness / contrast that Adobe Photoshop uses. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCurveType.FivePoint">
      <summary> The default curve type for traditional Brightness/Contrast adjustment. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCurveType.SevenPoint">
      <summary> The seven point curve forces pixels in the extreme dark and light ranges to black or white faster than the
            five point curve. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramEqualizeCommand">
      <summary> Perform histogram equalization on an image while preventing colors from shifting. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramEqualizeCommand.#ctor">
      <summary> Creates a new instance of <STRONG>BrightnessHistogramEqualizeCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramEqualizeCommand.#ctor(System.Int32,System.Int32)">
      <summary> Creates a new instance of BrightnessHistogramEqualizeCommand specifying the threshold levels. </summary>
      <param name="lowThreshold"> Pixels are uneffected below this value. (0 - 255) </param>
      <param name="highThreshold"> Pixels are uneffected above this value. (0 - 255) </param>
      <exception> Thrown if the arguments are less than 0 or greater than 255. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramEqualizeCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>BrightnessHistogramEqualizeCommand</STRONG> from serialization
            information. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramEqualizeCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills the SerializationInfo object with information for this command. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramEqualizeCommand.HighThreshold">
      <summary> Gets or sets a high threshold value above which pixels are uneffected. </summary>
      <exception> Thrown if value is not between 0 and 255. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramEqualizeCommand.InPlaceProcessing"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramEqualizeCommand.LowThreshold">
      <summary> Gets or sets a low threshold value below which pixels are uneffected. </summary>
      <exception> Thrown if value is not between 0 and 255 </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramEqualizeCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramEqualizeCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramEqualizeCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand">
      <summary> Performs a histogram stretch on an image while preventing colors from shifting. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.#ctor">
      <summary> Creates a new instance of <STRONG>BrightnessHistogramStretchCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.#ctor(System.Double,System.Double)">
      <summary> Creates a new instance of <STRONG>BrightnessHistogramStretchCommand</STRONG> specifying the limit values.
            </summary>
      <param name="lowLimit"> Percent of pixels to set to 0. (0 to 100) </param>
      <param name="highLimit"> Percent of pixels to set to 255. (0 to 100) </param>
      <exception> Thrown if the arguments are less than 0 or greater than 100. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.#ctor(System.Double,System.Double,System.Boolean)">
      <summary> Creates a new instance of <STRONG>BrightnessHistogramStretchCommand</STRONG> specifying the limit values
            and if the HSL colorspace should be used. </summary>
      <param name="lowLimit"> Percent of pixels to set to 0. (0 to 100) </param>
      <param name="highLimit"> Percent of pixels to set to 255. (0 to 100) </param>
      <param name="hslColorSpace"> Indicates if the Histogram Stretch is performed in the HSL colorspace. </param>
      <exception> Thrown if the lowLimit or highLimit arguments are less than 0 or greater than 100. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>BrightnessHistogramStretchCommand</STRONG> from serialization
            information. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.AutoThread"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.Clone">
      <summary> Returns a copy of the command. </summary>
      <returns> A copy of this <STRONG>BrightnessHistogramStretchCommand</STRONG>. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills the SerializationInfo object with information for this command. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.HighLimit">
      <summary> Gets or sets the percent of pixels to set to 255. </summary>
      <exception> Thrown if value is not between 0 and 100. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.HslColorSpace">
      <summary> Gets or sets a value indicating if the Histogram Stretch is performed in the HSL colorspace. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.InPlaceProcessing"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.LowLimit">
      <summary> Gets or sets the percent of pixels to set to 0. </summary>
      <exception> Thrown if value is not between 0 and 100. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.MidPoint">
      <summary> Gets or sets the pixel value to set to middle intensity.  This value must be from 1 to 254. </summary>
      <exception> Thrown if the value is less than 1 or greater than 254. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.UseMidPoint">
      <summary> Gets or sets a value indicating whether the <see cref="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.MidPoint" /> property will be used to divide output
            range. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.CrackleCommand">
      <summary>
        <para>Generates an image which looks like a cracked ceramic glaze.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CrackleCommand.#ctor">
      <summary> Creates a new instance of <STRONG>CrackleCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CrackleCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Effects.CrackleMode,System.Int32)">
      <summary> Creates a new instance of CrackleCommand specifying the crackle mode and definition. </summary>
      <param name="mode"> The crackle mode. </param>
      <param name="definition"> A value which controls sharpness of cracks. (0 to 100) </param>
      <exception> Thrown if the definition is less than 0 or greater than 100. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CrackleCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>CrackleCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.CrackleCommand.Definition">
      <summary> Gets or sets a value which controls sharpness of cracks. </summary>
      <exception> Thrown if value is not between 0 and 100. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CrackleCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills the SerializationInfo object with information for this command. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.CrackleCommand.Mode">
      <summary> Gets or sets the crackle mode. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CrackleCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CrackleCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.CrackleCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CrackleCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.CrackleMode">
      <summary> Specifies the crackle mode to use in the <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.CrackleCommand" />. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.CrackleMode.PaintChips">
      <summary> Creates an effect of dried paint chipping off. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.CrackleMode.TinPunch">
      <summary> Makes the image appear to be punched out onto a tin surface. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.CrackleMode.Erosion">
      <summary> Creates the effect of erosion on the image. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.CrackleMode.PaintChips2">
      <summary> A more intense version of the PaintChips effect. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.CrackleMode.Erosion2">
      <summary> A more intense version of the Erosion effect. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand">
      <summary>
        <para>Applies a color curve to an image, similar to the Photoshop Curves method.</para>
        <para>The curves are defined by an array of one or more objects.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand.#ctor">
      <summary> Creates a new instance of <STRONG>CurvesCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand.#ctor(System.Drawing.PointF[],Atalasoft.Imaging.ImageProcessing.ChannelFlags)">
      <summary> Creates a new instance of CurvesCommand specifying the points of the curve and channels to process.
            </summary>
      <param name="points"> An array of PointF objects specifying the curve. </param>
      <param name="channels"> A channel mask containing the channels to process. </param>
      <exception> Occurs if null is passed as the points parameter or if an empty array is passed in. </exception>
      <exception> Occurs if the array has more than 256 elements or a duplicate X value was found. </exception>
      <exception> Occurs if the points array contains invalid values. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>CurvesCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand.AutoThread"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand.Channels">
      <summary> Gets or sets the channel flags that specify which color channels to process. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand.Clone">
      <summary> Returns a copy of the command. </summary>
      <returns> A copy of this <STRONG>CurvesCommand</STRONG>. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills the SerializationInfo object with information for this command. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand.ImplementMe"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand.InPlaceProcessing">
      <summary> Gets a value indicating if the source image data is processed in-place as opposed to returning a new
            image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand.Points">
      <summary> Gets or sets the points that define the curve. </summary>
      <exception> Occurs if null is passed as the points parameter or if an empty array is passed in. </exception>
      <exception> Occurs if the array has more than 256 elements or a duplicate X value was found. </exception>
      <exception> Occurs if the points array contains invalid values. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand">
      <summary>
        <para>This command will de-interlace an image.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand.#ctor">
      <summary> Creates a new instance of <STRONG>DeInterlaceCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMethod)">
      <summary>
        <para>Initializes a new instance of <STRONG>DeInterlaceCommand</STRONG> specifying the
            method.</para>
      </summary>
      <param name="method"> The de-interlace method. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMethod,Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMergeMethod)">
      <summary>
        <para>Initializes a new instance of <STRONG>DeInterlaceCommand</STRONG> specifying the
            de-interlace method and merging mode.</para>
      </summary>
      <param name="method"> The de-interlace method. </param>
      <param name="mergeMethod"> The merge method used when merging the odd and even interpolated images. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMethod,Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceRetention)">
      <summary>
        <para>Initializes a new instance of <STRONG>DeInterlaceCommand</STRONG> specifying the
            de-interlace method and which lines to retain.</para>
      </summary>
      <param name="method"> The de-interlace method. </param>
      <param name="retention">
        <para>Specifies which lines to retain.</para>
      </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>DeInterlaceCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills the SerializationInfo object with information for this command. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand.InPlaceProcessing"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand.MergeMethod">
      <summary> Gets or sets the merge method to use when merging the odd and even interpolated images. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand.Method">
      <summary> Gets or sets the method used to de-interlace the image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand.Retention">
      <summary> Gets or sets the odd or even line to retain. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMergeMethod">
      <summary> Specifies the merge method used by <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand" /> when the Merge method is used.
            </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMergeMethod.BiLinear">
      <summary> BiLinear filter is applied. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMergeMethod.BiCubic">
      <summary> BiCubic filter is applied. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMergeMethod.Lanczos">
      <summary> Lanczos filter is applied. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMergeMethod.Hanning">
      <summary> Hanning filter is applied. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMethod">
      <summary> Specifies the method used by the <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand" />. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMethod.Duplicate">
      <summary> Duplicates the interlaced lines. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMethod.Interpolate">
      <summary> Uses interpolation when the image is de-interlaced. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMethod.Merge">
      <summary> Merges the interlaced lines together. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceRetention">
      <summary> Specifies the retention used in <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand" /> when <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMethod" /> or
            <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMethod" /> methods are used. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceRetention.EvenLines">
      <summary> Even lines are retained. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceRetention.OddLines">
      <summary> Odd lines are retained. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand">
      <summary> Apply a drop shadow behind the image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.#ctor">
      <summary> Creates a new instance of <STRONG>DropShadowCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.#ctor(System.Drawing.Point)">
      <summary> Initialize a new instance of <STRONG>DropShadowCommand</STRONG> specifying offset. </summary>
      <param name="offset"> The number of pixels to offset the the shadow. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.#ctor(System.Drawing.Point,System.Drawing.Color)">
      <summary> Creates a new instance of <STRONG>DropShadowCommand</STRONG> specifying offset and shadowColor. </summary>
      <param name="offset"> The number of pixels to offset the the shadow. </param>
      <param name="shadowColor"> The color to use for the shadow. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.#ctor(System.Drawing.Point,System.Drawing.Color,System.Double)">
      <summary> Initialize a new instance of <STRONG>DropShadowCommand</STRONG> specifying offset, shadowColor and
            blurLevel. </summary>
      <param name="offset"> The number of pixels to offset the the shadow. </param>
      <param name="shadowColor"> The color to use for the shadow. </param>
      <param name="blurLevel"> The amount of blur to add to the shadow. </param>
      <exception> Thrown if blurLevel is not greater than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.#ctor(System.Drawing.Point,System.Drawing.Color,System.Double,System.Boolean)">
      <summary> Initialize a new instance of <STRONG>DropShadowCommand</STRONG> specifying offset, shadowColor, blurLevel
            and increaseCanvas. </summary>
      <param name="offset"> The number of pixels to offset the the shadow. </param>
      <param name="shadowColor"> The color to use for the shadow. </param>
      <param name="blurLevel"> The amount of blur to add to the shadow. </param>
      <param name="increaseCanvas"> A value to indicate if you want the canvas to be increased to include the shadow.
            </param>
      <exception> Thrown if 'blurLevel' is not greater than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.#ctor(System.Int32)">
      <summary> Initializes a new instance of <STRONG>DropShadowCommand</STRONG> specifying offset. </summary>
      <param name="offset"> The number of pixels to offset the the shadow. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>DropShadowCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.BlurLevel">
      <summary> Gets or sets the amount of blur to add to the shadow. </summary>
      <exception> Thrown if value is not greater than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills the SerializationInfo object with information for this command. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.IncreaseCanvas">
      <summary> Gets or sets a value to indicate if you want the canvas to be increased to include the shadow. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.Offset">
      <summary> Gets or set the number of pixels to offset the the shadow. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.ShadowColor">
      <summary> Gets or sets the color to use for the shadow. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.DuotoneCommand">
      <summary> The DuotoneCommand processes an image from its current color space into a two color space. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DuotoneCommand.#ctor">
      <summary> Creates a new instance of <STRONG>DuotoneCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DuotoneCommand.#ctor(System.Drawing.Color)">
      <summary> Construct a new DuotoneCommand using the supplied color as the tint. </summary>
      <param name="tint"> The tint that will be used for the duotone color space. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DuotoneCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>DuotoneCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DuotoneCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DuotoneCommand.AutoThread"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DuotoneCommand.Clone">
      <summary> Returns a copy of the command. </summary>
      <returns> A copy of the <STRONG>DuotoneCommand</STRONG>. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DuotoneCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills the SerializationInfo object with information for this command. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DuotoneCommand.InPlaceProcessing">
      <summary> Indicates whether or not this command will act on the given or image or allocate a new one. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DuotoneCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DuotoneCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DuotoneCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DuotoneCommand.Tint">
      <summary> The color that will be used for the "light" tones of the duotoned image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DuotoneCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand">
      <summary> Creates an effect which looks like fingerprint smuges on the image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand.#ctor">
      <summary> Creates a new instance of <STRONG>FingerprintCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand.#ctor(System.Double)">
      <summary> Creates a new instance of <STRONG>FingerprintCommand</STRONG> specifying depth. </summary>
      <param name="depth"> A positive number indicating the depth of the effect. </param>
      <exception> Thrown if the depth is less than or equal to 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand.#ctor(System.Double,System.Int32,System.Boolean)">
      <summary> Creates a new instance of <STRONG>FingerprintCommand</STRONG> specifying depth, filterSize and dilation.
            </summary>
      <param name="depth"> A positive number indicating the depth of the effect. </param>
      <param name="filterSize"> Gets or sets the filter size of the effect.  Should be an odd number greater than or equal
            to 3. </param>
      <param name="dilation"> Indicates if dilation should be used. </param>
      <exception> Thrown if the depth is less than or equal to 0, or if filterSize is less than 3. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>FingerprintCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand.Depth">
      <summary> Gets or sets a positive number indicating the depth of the effect. </summary>
      <exception> Thrown if value is not greater than 0. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand.Dilation">
      <summary> Gets or sets a value indicating if dilation mode should be used. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand.FilterSize">
      <summary> Gets or sets the filter size of the effect. </summary>
      <exception> Thrown if value is less than 3. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills the SerializationInfo object with information for this command. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand">
      <summary> Performs a flood fill on an image.  You can use it to fill an area of an image surrounded by FillColor by
            setting Mode to Edge, or you can fill the pixel color at Position with FillColor. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.#ctor">
      <summary> Creates a new instance of <STRONG>FloodFillCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.#ctor(System.Drawing.Point,System.Drawing.Color,System.Double,Atalasoft.Imaging.ImageProcessing.ColorMatchMode)">
      <summary> Creates a new instance of FloodFillCommand specifying the position, fill color, tolerance and color match
            mode. </summary>
      <param name="position"> The X, Y pixel position where the fill should start. </param>
      <param name="fillColor"> The color used for the fill. </param>
      <param name="tolerance"> The percentage of color variation. (0 to 100) </param>
      <param name="mode"> The ColorMatchMode used for the fill. </param>
      <exception> Thrown if the tolerance is less than 0 or greater than 100. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>FloodFillCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.FillColor">
      <summary> Gets or sets the <STRONG>Color</STRONG> used for the fill. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills the SerializationInfo object with information for this command. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.InPlaceProcessing"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.Mode">
      <summary> Gets or sets the <STRONG>ColorMatchMode</STRONG> used for the fill. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.Position">
      <summary> Gets or sets the X, Y pixel position where the fill should start. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.Tolerance">
      <summary> Gets or sets the percentage of color variation. </summary>
      <exception> Thrown if value is not between 0 and 100. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.GammaColor">
      <summary> This structure is used with WatercolorTintCommand to specify the gamma levels used during the command
            process. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GammaColor.#ctor(System.Double)">
      <summary> Creates a new instance of GammaColor specifying a single value for all channels. </summary>
      <param name="gamma"> The gamma value. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GammaColor.#ctor(System.Double,System.Double,System.Double)">
      <summary> Creates a new instance of GammaColor specifying the gamma value for blue, green and red channels.
            </summary>
      <param name="blue"> The blue gamma value. </param>
      <param name="green"> The green gamma value. </param>
      <param name="red"> The red gamma value. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GammaColor.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary> Creates a new instance of GammaColor specifying the gamma value for blue, green, red and alpha channels.
            </summary>
      <param name="blue"> The blue gamma value. </param>
      <param name="green"> The green gamma value. </param>
      <param name="red"> The red gamma value. </param>
      <param name="alpha"> The alpha gamma value. </param>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.GammaColor.A">
      <summary> The alpha channel. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.GammaColor.B">
      <summary> The blue channel. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.GammaColor.Default">
      <summary> Gets the default GammaColor object. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.GammaColor.G">
      <summary> The green channel. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.GammaColor.R">
      <summary> The red channel. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand">
      <summary> Increases or decreases the gamma value of an image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand.#ctor">
      <summary> Creates a new instance of <STRONG>GammaCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand.#ctor(System.Double)">
      <summary> Creates a new instance of GammaCommand specifying the gamma level. </summary>
      <param name="gammaLevel"> The gamma correction level.  A value &lt; 1 decreases brightness and a value &gt;1
            increases brightness. </param>
      <exception> Thrown if gammaLevel is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>GammaCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand.AutoThread"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand.Clone">
      <summary> Returns a copy of the command. </summary>
      <returns> A copy of the <STRONG>GammaCommand</STRONG>. </returns>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand.GammaLevel">
      <summary> Gets or sets the gamma correction level. </summary>
      <exception> Thrown if value is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills the SerializationInfo object with information for this command. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand.InPlaceProcessing"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand">
      <summary> Generate a soft focus, gauzed image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand.#ctor">
      <summary> Creates a new instance of <STRONG>GauzyCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand.#ctor(System.Double,System.Double,System.Double,Atalasoft.Imaging.ImageProcessing.Effects.GauzyMode)">
      <summary> Creates a new instance of GauzyCommand specifying the blur and sharpen amounts. </summary>
      <param name="blurAmount">
        <para>The amount of blur to apply. (0 to 100)</para>
      </param>
      <param name="sharpAmount"> The amount of original pixels in the image.  (0 to 100) </param>
      <param name="clarity"> The amount to clarify the result.  (0 to 100) </param>
      <param name="mode">
        <para>The <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.GauzyMode" /> to use.</para>
      </param>
      <exception> Thrown if blurAmount, sharpAmount or clarity values are less than 0 or greater than 100. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>GauzyCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand.BlurAmount">
      <summary> Gets or sets the amount of blur to apply. </summary>
      <exception> Thrown if value is not between 0 and 100. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand.Clarity">
      <summary> Gets or sets the amount to clarify the result. </summary>
      <exception> Thrown if value is not between 0 and 100. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills the SerializationInfo object with information for this command. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand.Mode">
      <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.GauzyMode" /> to use. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand.SharpAmount">
      <summary> Gets or sets the amount of original pixels in the image. </summary>
      <exception> Thrown if value is not between 0 and 100. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.GauzyMode">
      <summary> Indicates the type of effect to apply in the <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand" />. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.GauzyMode.Desaturated">
      <summary> Applies a desaturated effect to the image. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.GauzyMode.HighContrastForeground">
      <summary> Creates a high contrast effect on the image. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.GauzyMode.FullColor">
      <summary> Applies a full color gauzy effect. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.GauzyMode.Max">
      <summary> Applies a maximum filter effect to the image. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.GauzyMode.Min">
      <summary> Applies a minimum filter effect to the image. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.HalftoneCommand">
      <summary> Generates a black and white image dithered to "halftone" dots.  </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HalftoneCommand.#ctor">
      <summary> Creates a new instance of <STRONG>HalftoneCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HalftoneCommand.#ctor(System.Int32,System.Boolean)">
      <summary> Creates a new instance of HalftoneCommand specifying the dot size and smoothing values. </summary>
      <param name="maxDotSize"> The maximum size of the dots. </param>
      <param name="smoothDots"> A value indicating if the dots will be smooth or sharp. </param>
      <exception> Thrown if maxDotSize is less than 1. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HalftoneCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>HalftoneCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HalftoneCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills the SerializationInfo object with information for this command. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HalftoneCommand.InPlaceProcessing"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HalftoneCommand.MaxDotSize">
      <summary> Gets or sets the maximum size of the dots. </summary>
      <exception> Thrown if value is not greater than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HalftoneCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HalftoneCommand.SmoothDots">
      <summary> Gets or sets a value indicating if the dots will be smooth or sharp. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HalftoneCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HalftoneCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand">
      <summary> Performs histogram equalization on an image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand.#ctor">
      <summary> Creates a new instance of <STRONG>HistogramEqualizeCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand.#ctor(System.Int32,System.Int32)">
      <summary> Creates a new instance of HistogramEqualizeCommand specifying the threshold levels. </summary>
      <param name="lowThreshold"> Pixels are uneffected below this value. (0 - 255) </param>
      <param name="highThreshold"> Pixels are uneffected above this value. (0 - 255) </param>
      <exception> Thrown if either argument is less than 0 or greater than 255. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>HistogramEqualizeCommand</STRONG> from serialization information.
            </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand.ChannelsToProcess">
      <summary> Gets or sets a bit flag indicating the channels to process. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills the SerializationInfo object with information for this command. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand.HighThreshold">
      <summary> Gets or sets a high threshold value above which pixels are uneffected. </summary>
      <exception> Thrown if value is not between 0 and 255. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand.InPlaceProcessing"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand.LowThreshold">
      <summary> Gets or sets a low threshold value below which pixels are uneffected. </summary>
      <exception> Thrown if value is not between 0 and 255. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand">
      <summary> Performs a histogram stretch on an image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.#ctor">
      <summary> Creates a new instance of <STRONG>HistogramStretchCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.#ctor(System.Double,System.Double)">
      <summary> Creates a new instance of HistogramStretchCommand specifying the low and high limits. </summary>
      <param name="lowLimit"> Percent of pixels to set to 0.  (0 to 100) </param>
      <param name="highLimit"> Percent of pixels to set to 255.  (0 to 100) </param>
      <exception> Thrown if either argument is less than 0 or greater than 100. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>HistogramStretchCommand</STRONG> from serialization information.
            </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.ChannelsToProcess">
      <summary> Gets or sets a bit flag indicating the channels to process. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills the SerializationInfo object with information for this command. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.HighLimit">
      <summary> Gets or sets the percent of pixels to set to 255. </summary>
      <exception> Thrown if value is not between 0 and 100. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.InPlaceProcessing"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.LowLimit">
      <summary> Gets or sets the percent of pixels to set to 0. </summary>
      <exception> Thrown if value is not between 0 and 100. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.MidPoint">
      <summary> Gets or sets the pixel value to set to middle intensity.  This value must be from 1 to 254. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.UseMidPoint">
      <summary> Gets or sets a value indicating whether the <see cref="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.MidPoint" /> property will be used to divide output
            range. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand">
      <summary> Corrects the tonal range and color balance by adjusting the shadow, midtone, and highlights of an image.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.#ctor">
      <summary> Creates a new instance of <STRONG>LevelsCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.#ctor(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
      <summary> Creates a new instance of LevelsCommand specifying the shadow and highlight colors, and the output range.
            </summary>
      <param name="shadowColor"> The black point in the image used as an input clipping point. </param>
      <param name="highlightColor"> The white point in the image used as an input clipping point. </param>
      <param name="outputRangeLow"> The dark color value to stretch the histogram to. </param>
      <param name="outputRangeHigh"> The light color value to stretch the histogram to. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.#ctor(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,Atalasoft.Imaging.ImageProcessing.Effects.GammaColor)">
      <summary> Creates a new instance of LevelsCommand specifying shadow color, highlight color, output range and gamma.
            </summary>
      <param name="shadowColor"> The black point in the image used as an input clipping point. </param>
      <param name="highlightColor"> The white point in the image used as an input clipping point. </param>
      <param name="outputRangeLow"> The dark color value to stretch the histogram to. </param>
      <param name="outputRangeHigh"> The light color value to stretch the histogram to. </param>
      <param name="gamma"> The gamma adjustment to apply when running the filter. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.#ctor(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
      <summary> Creates a new instance of LevelsCommand specifying shadow, midtone and highlight colors, and the output
            range. </summary>
      <param name="shadowColor"> The black point in the image used as an input clipping point. </param>
      <param name="midtoneColor"> The gray point in the image used as a gamma adjustment. </param>
      <param name="highlightColor"> The white point in the image used as an input clipping point. </param>
      <param name="outputRangeLow"> The dark color value to stretch the histogram to. </param>
      <param name="outputRangeHigh"> The light color value to stretch the histogram to. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>LevelsCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.AutoThread"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.Clone">
      <summary> Returns a copy of the command. </summary>
      <returns> A copy of the <STRONG>LevelsCommand</STRONG>. </returns>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.Gamma">
      <summary> Gets or sets the gamma adjustment to apply when running the filter. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills the SerializationInfo object with information for this command. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.HighlightColor">
      <summary> Gets or sets the white point in the image used as an input clipping point. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.ImplementMe"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.InPlaceProcessing"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.InternalActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
      <summary> This method performs the level manipulation on the image. </summary>
      <param name="source"> The source image for processing.  This may be different from the original image. </param>
      <param name="dest"> The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null. </param>
      <param name="imageArea"> An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest. </param>
      <param name="results"> The results object that will be used for this command. </param>
      <returns> Null (Nothing in VB). </returns>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.MidtoneColor">
      <summary> Gets or sets the gray point in the image used as a gamma adjustment. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.OutputRangeHigh">
      <summary> Gets or sets the light color value to stretch the histogram to. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.OutputRangeLow">
      <summary> Gets or sets the dark color value to stretch the histogram to. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.ShadowColor">
      <summary> Gets or sets the black point in the image used as an input clipping point. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.MosaicCommand">
      <summary>
        <para>Generate a mosaic (large pixel) image.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MosaicCommand.#ctor">
      <summary> Creates a new instance of <STRONG>MosaicCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MosaicCommand.#ctor(System.Int32)">
      <summary> Creates a new instance of MosaicCommand specifying the square size. </summary>
      <param name="squareSize">
        <para>The size of the mosaic tiles.</para>
      </param>
      <exception> Thrown if squareSize is less than 2. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MosaicCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>MosaicCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MosaicCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills the SerializationInfo object with information for this command. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.MosaicCommand.InPlaceProcessing"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MosaicCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.MosaicCommand.SquareSize">
      <summary> Gets or sets the size of the mosaic tiles. </summary>
      <exception> Thrown if value is less than 2. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.MosaicCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MosaicCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand">
      <summary> Create an effect to simulate motion blur on an image </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.#ctor">
      <summary> Creates a new instance of <STRONG>MotionBlurCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.#ctor(System.Double,System.Int32)">
      <summary> Constructs a new MotionBlurCommand with the provided distance and number of steps. </summary>
      <param name="distance"> The distance of the blur. </param>
      <param name="steps"> The number of steps used in the blur. </param>
      <exception> Thrown if the steps argument is less than 1. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.#ctor(System.Double,System.Int32,Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurMode)">
      <summary> Constructs a new MotionBlurCommand with the provided distance, number of steps and mode. </summary>
      <param name="distance"> The distance of the blur. </param>
      <param name="steps"> The number of steps used in the blur. </param>
      <param name="mode"> The manner of the blur. </param>
      <exception> Thrown if the steps argument is less than 1. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.#ctor(System.Double,System.Int32,Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurMode,System.Double)">
      <summary> Constructs a new MotionBlurCommand with the provided distance, number of steps, mode and angle. </summary>
      <param name="distance"> The distance of the blur. </param>
      <param name="steps"> The number of steps used in the blur. </param>
      <param name="mode"> The manner of the blur. </param>
      <param name="angle"> The angle of the blur in degrees. </param>
      <exception> Thrown if the steps argument is less than 1. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>MotionBlurCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.Angle">
      <summary> Gets or sets the angle of the blur in degrees. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.AutoThread"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.Clone">
      <summary> Returns a copy of the command. </summary>
      <returns> A copy of the <STRONG>MotionBlurCommand</STRONG>. </returns>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.Distance">
      <summary> Gets or sets the distance of the blur in pixels. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills the SerializationInfo object with information for this command. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.Mode">
      <summary> Gets or sets the manner of the blur. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.Steps">
      <summary> Gets or sets the number of steps in the blur. </summary>
      <exception> Thrown if the value is less than 1. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurMode">
      <summary> Defines the manner of blur for the MotionBlurCommand </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurMode.Linear">
      <summary>
            The image is blurred in a line (traditional motion blur).
            </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurMode.Radial">
      <summary>
            The image is blurred in a circle around the center point.
            </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurMode.Zoom">
      <summary>
            The image is blurred as if zooming in.
            </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand">
      <summary> This effect makes an image appear as if it's an oil painting. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand.#ctor">
      <summary> Creates a new instance of <STRONG>OilPaintCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand.#ctor(System.Int32,System.Int32)">
      <summary> Creates a new instance of <STRONG>OilPaintCommand</STRONG> specifying brush width and max density.
            </summary>
      <param name="brushWidth"> The width of the virtual brush.  Must be greater than zero. </param>
      <param name="maxDensity"> The internal quantization level.  (0 to 255) </param>
      <exception> Thrown if the brushWidth is less than or equal to 0, or if maxDensity is less than 0 or greater than
            255. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand.#ctor(System.Int32,System.Int32,System.Boolean,System.Boolean)">
      <summary> Creates a new instance of <STRONG>OilPaintCommand</STRONG> specifying the brush width, max density, color
            edges and contrast enhancement. </summary>
      <param name="brushWidth"> The width of the virtual brush. Must be greater than zero. </param>
      <param name="maxDensity"> The internal quantization level. (0 to 255) </param>
      <param name="blendColorEdges"> A value indicating whether the edges use color blending. </param>
      <param name="enhanceContrast"> A value indicating whether the image contrast is enhanced. </param>
      <exception> Thrown if the brushWidth is less than or equal to 0, or if maxDensity is less than 0 or greater than
            255. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>OilPaintCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand.BlendColorEdges">
      <summary> Gets or sets a value indicating whether the edges use color blending. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand.BrushWidth">
      <summary> Gets or set the width of the virtual brush. </summary>
      <exception> Thrown if value is not greater than 0. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand.EnhanceContrast">
      <summary> Gets or sets a value indicating whether the image contrast is enhanced. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills the SerializationInfo object with information for this command. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand.MaxDensity">
      <summary> Gets or sets the internal quantization level. </summary>
      <exception> Thrown if value is not between 0 and 255. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.PosterizeCommand">
      <summary> Generate an image made up of primary and secondary colors of the source image.  </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.PosterizeCommand.#ctor">
      <summary> Creates a new instance of <STRONG>PosterizeCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.PosterizeCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>PosterizeCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.PosterizeCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills the SerializationInfo object with information for this command. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.PosterizeCommand.InPlaceProcessing"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.PosterizeCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.PosterizeCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.PosterizeCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand">
      <summary> Attempts to eliminate "red-eye" from a region of an RGB image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.#ctor">
      <summary> Creates a new instance of <STRONG>RedEyeRemovalCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.#ctor(System.Int32)">
      <summary> Creates a new instance of <STRONG>RedEyeRemovalCommand</STRONG> specifying the saturation threshold.
            </summary>
      <param name="SaturationThreshold"> The percent that red is allowed to dominates the other colors before it is
            reduced. (0 to 100) </param>
      <exception> Thrown if the saturationThreshold is less than 0 or greater than 100. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.#ctor(System.Int32,System.Int32)">
      <summary> Creates a new instance of RedEyeRemovalCommand specifying the saturation threshold and color range.
            </summary>
      <param name="SaturationThreshold"> The percent that red is allowed to dominates the other colors before it is
            reduced. (0 to 100) </param>
      <param name="colorRange"> The red band width. (0 to 100) </param>
      <exception> Thrown if the saturationThreshold or colorRange is less than 0 or greater than 100. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>RedEyeRemovalCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.AutoThread"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.Clone">
      <summary> Returns a copy of the command. </summary>
      <returns> A copy of the <STRONG>RedEyeRemovalCommand</STRONG>. </returns>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.ColorRange">
      <summary> Gets or sets the red band width. </summary>
      <exception> Thrown if value is not between 0 and 100. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills the SerializationInfo object with information for this command. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.InPlaceProcessing"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.SaturationThreshold">
      <summary> Gets or sets the percent that red is allowed to dominates the other colors before it is reduced.
            </summary>
      <exception> Thrown if value is not between 0 and 100. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand">
      <summary> Use this command to convert an image into an 8-bit indexed image with a specified number of colors.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand.#ctor">
      <summary> Creates a new instance of <STRONG>ReduceColorsCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand.#ctor(System.Int32)">
      <summary> Creates a new instance of <STRONG>ReduceColorsCommand</STRONG>
            specifying colors. </summary>
      <param name="colors"> The number of colors you want the resulting image to contain. (2 to 256) </param>
      <exception> Thrown if the colors value is less than 2 or greater than 256. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand.#ctor(System.Int32,Atalasoft.Imaging.ImageProcessing.DitheringMode,System.Int32)">
      <summary> Creates a new instance of <STRONG>ReduceColorsCommand</STRONG>
            specifying colors, ditherMode, and ditherMaxError. </summary>
      <param name="colors"> The number of colors you want the resulting image to contain.  (2 to 256) </param>
      <param name="ditherMode"> The type of <see cref="T:Atalasoft.Imaging.ImageProcessing.DitheringMode" /> to perform. </param>
      <param name="ditherMaxError"> The maximum error value that can be carried between pixels.  (0 to 127) </param>
      <exception> Thrown if colors is less than 2 or greater than 256, or if ditherMaxError is less than 0 or greater than
            127. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>ReduceColorsCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand.Colors">
      <summary> Gets or sets the number of colors you want the resulting image to contain. </summary>
      <exception> Thrown if value is not between 2 and 256. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand.DitherMaxError">
      <summary> Gets or sets the maximum error value that can be carried between pixels. </summary>
      <exception> Thrown if value is not between 0 and 127. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand.DitherMode">
      <summary> Gets or sets the type of <see cref="T:Atalasoft.Imaging.ImageProcessing.DitheringMode" /> to perform. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills the SerializationInfo object with information for this command. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand">
      <summary> Replaces a color in an image with another using the specified color tolerance. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.#ctor">
      <summary> Creates a new instance of <STRONG>ReplaceColorCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.#ctor(System.Drawing.Color,System.Drawing.Color,System.Double)">
      <summary> Creates a new instance of <STRONG>ReplaceColorCommand</STRONG> specifying color to replace, the new color
            and tolerance. </summary>
      <param name="oldColor"> The color you want to replace. </param>
      <param name="newColor"> The color used to replace the old color. </param>
      <param name="tolerance"> The maximum color distance to match. A value of 0 will provide strict matching. (0 to 100)
            </param>
      <exception> Thrown if the tolerance is less than 0 or greater than 100. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>ReplaceColorCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.AutoThread"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.Clone">
      <summary> Returns a copy of the command. </summary>
      <returns> A copy of the <STRONG>ReplaceColorCommand</STRONG>. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills the SerializationInfo object with information for this command. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.InPlaceProcessing"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.NewColor">
      <summary> Gets or sets the color used to replace the old color. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.OldColor">
      <summary> Gets or sets the color you want to replace. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.Tolerance">
      <summary> Gets or sets the maximum color distance to match. A value of 0 will provide strict matching. </summary>
      <exception> Thrown if value is not between 0 and 100. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand">
      <summary> Create an artistic embossing of an image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand.#ctor">
      <summary> Creates a new instance of <STRONG>RoundedBevelCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand.#ctor(System.Int32)">
      <summary> Construct a new RoundedBevelCommand with the depth provided. </summary>
      <param name="depth"> The depth of the embossing effect. </param>
      <exception> Thrown if the depth is not greater than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand.#ctor(System.Int32,System.Int32)">
      <summary> Construct a new <STRONG>RoundedBevelCommand</STRONG> with the depth and angle provided. </summary>
      <param name="depth"> The depth of the embossing effect. </param>
      <param name="angle"> The angle of the embossing in degrees. </param>
      <exception> Thrown if the depth is less than 0, or if angle is less than 0 or greater than 359. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand.#ctor(System.Int32,System.Int32,System.Single)">
      <summary> Construct a new <STRONG>RoundedBevelCommand</STRONG> with the depth, angle and softness provided.
            </summary>
      <param name="depth"> The depth of the embossing effect. Must be greater than 0. </param>
      <param name="angle"> The angle of the embossing in degrees.  (0 to 359) </param>
      <param name="softness"> Sets the softness of the mask constructed to build the embossed shaped. (0.0 to 1.0)
            </param>
      <exception> Thrown if an argument is out of its specified range. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand.#ctor(System.Int32,System.Int32,System.Single,System.Drawing.Color,System.Drawing.Color)">
      <summary> Construct a new <STRONG>RoundedBevelCommand</STRONG> with the depth, angle and softness provided. 
            Highlights and shadows will be created with the provided colors. </summary>
      <param name="depth"> The depth of the embossing effect. Must be greater than 0. </param>
      <param name="angle"> The angle of the embossing in degrees. (0 to 359) </param>
      <param name="softness"> Sets the softness of the mask constructed to build the embossed shaped. (0.0 to 1.0)
            </param>
      <param name="highlight"> The color that will used for applying highlights. </param>
      <param name="shadow"> Sets or gets the color used for shadowing. </param>
      <exception> Thrown if an argument is out of its specified range. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>RoundedBevelCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand.Angle">
      <summary> The angle of the embossing in degrees. </summary>
      <exception> Thrown if the value is less than zero or greater than 359. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand.Depth">
      <summary> The depth of the embossing effect. </summary>
      <exception> Thrown if the value is not greater than zero. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills the SerializationInfo object with information for this command. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand.Highlight">
      <summary> The color that will used for applying highlights. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand.Shadow">
      <summary> Sets or gets the color used for shadowing. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand.Softness">
      <summary> Sets the softness of the mask constructed to build the embossed shaped. </summary>
      <exception> Thrown if the value is less than zero or greater than 1. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.SaturationCommand">
      <summary> Modify the saturation levels of an image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.SaturationCommand.#ctor">
      <summary> Creates a new instance of <STRONG>SaturationCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.SaturationCommand.#ctor(System.Double)">
      <summary> Creates a new instance of <STRONG>SaturationCommand</STRONG> specifying the saturation level. </summary>
      <param name="saturationLevel"> The saturation level to apply. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.SaturationCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>SaturationCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.SaturationCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills the SerializationInfo object with information for this command. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.SaturationCommand.InPlaceProcessing"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.SaturationCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.SaturationCommand.SaturationLevel">
      <summary> Gets or sets the saturation level to apply. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.SaturationCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.SaturationCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleCommand">
      <summary>
            Generate an image that looks like it was drawn with paint and a heavy outline pen.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleCommand.#ctor">
      <summary> Creates a new instance of <STRONG>ScribbleCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Effects.ScribbleMode,System.Boolean,System.Int32)">
      <summary> Creates a new instance of <STRONG>ScribbleCommand</STRONG> specifying the mode, darkness and whether the
            filter should be applied before the effect. </summary>
      <param name="mode"> The mode that will be used for the scribbling. </param>
      <param name="filterFirst"> Filter the image before the scribbling effect is applied. </param>
      <param name="darkness"> The darkness of the lines. (0 to 100) </param>
      <exception> Thrown if the darkness argument is less than 0 or greater than 100. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>ScribbleCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleCommand.ConstructChangedSourceImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleCommand.Darkness">
      <summary> Gets or sets the darkness of the lines used for scribbling. </summary>
      <exception> Thrown if the value is less than 0 or greater than 100. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleCommand.FilterFirst">
      <summary> Gets or sets whether or not a filter should be applied to the image before the strokes. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills the SerializationInfo object with information for this command. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleCommand.Mode">
      <summary> Gets or sets the ScribbleMode for the command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleMode">
      <summary> Indicates the type of blurring to use on the <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleCommand" />. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleMode.Blurred">
      <summary> Applies a blurring effect to the image. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleMode.Filtered">
      <summary> Applies a filtered effect to the image. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleMode.Posterized">
      <summary> Applies a posterized effect to the image. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleMode.Despeckled">
      <summary> Applies a despeckle effect to the image. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.SolarizeCommand">
      <summary>
        <para>Use this command to adjust the curves to generate a classic "solarize" effect.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.SolarizeCommand.#ctor">
      <summary> Creates a new instance of <STRONG>SolarizeCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.SolarizeCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>SolarizeCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.SolarizeCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills the SerializationInfo object with information for this command. </summary>
      <param name="info">
        <para>A SerializationInfo containing information for this command. </para>
      </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.SolarizeCommand.InPlaceProcessing"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.SolarizeCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.SolarizeCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.SolarizeCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand">
      <summary>
        <para>This command generates a bumped image effect.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand.#ctor">
      <summary> Creates a new instance of <STRONG>StippleCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand.#ctor(System.Int32,Atalasoft.Imaging.ImageProcessing.Effects.StippleFilterType,Atalasoft.Imaging.ImageProcessing.Effects.StippleMode)">
      <summary> Creates a new instance of <STRONG>StippleCommand</STRONG> specifying the size, filter and stipple mode.
            </summary>
      <param name="size"> The size of the spots. (0 to 100) </param>
      <param name="filter">
        <para>The <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.StippleFilterType" /> used to control blurring.</para>
      </param>
      <param name="mode">
        <para>The <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.StippleMode" /> to use for this command.</para>
      </param>
      <exception> Thrown if the size is less than 0 or greater than 100. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>StippleCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand.ConstructChangedSourceImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand.Filter">
      <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.StippleFilterType" /> used to control blurring. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills the SerializationInfo object with information for this command. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand.Mode">
      <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.StippleMode" /> to use for this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand.Size">
      <summary> Gets or sets the size of the spots. </summary>
      <exception> Thrown if value is not between 0 and 100. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.StippleFilterType">
      <summary> Indicates the type of blurring to use in the <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand" />. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.StippleFilterType.ArithmeticMean">
      <summary> Applies an arithmetic mean filter to the image. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.StippleFilterType.Minimum">
      <summary> Applies a minimum filter to the image. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.StippleFilterType.Maximum">
      <summary> Applies a maximum filter to the image. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.StippleFilterType.GeometricMean">
      <summary> Applies a geometric mean filter to the image. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.StippleFilterType.YPMean">
      <summary> Applies a YP mean filter to the image. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.StippleMode">
      <summary> Indicates how to process the image in the <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand" />. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.StippleMode.NoiseFirst">
      <summary> Applies the noise before the filter. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.StippleMode.FilterFirst">
      <summary> Applies the filter before adding the noise. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.TintGrayscaleCommand">
      <summary>
        <para>Converts a grayscale image into a RGB or RGBA image and applies a color tint in the same
            process.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.TintGrayscaleCommand.#ctor">
      <summary> Creates a new instance of <STRONG>TintGrayscaleCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.TintGrayscaleCommand.#ctor(System.Drawing.Color)">
      <summary> Creates a new instance of <STRONG>TintGrayscaleCommand</STRONG> specifying the tint color. </summary>
      <param name="ColorToTint"> The color to tint the output. </param>
      <exception> Thrown if colorToTint equals Color.IsEmpty. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.TintGrayscaleCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>TintGrayscaleCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.TintGrayscaleCommand.ColorToTint">
      <summary> Gets or sets the color to tint the output. </summary>
      <exception> Thrown if value equals Color.IsEmpty. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.TintGrayscaleCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.TintGrayscaleCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills the SerializationInfo object with information for this command. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.TintGrayscaleCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.TintGrayscaleCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.TintGrayscaleCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand">
      <summary> This command modifies an image to appear as if it was drawn using watercolors. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand.#ctor">
      <summary> Creates a new instance of <STRONG>WatercolorTintCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand.#ctor(System.Double,Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintMode)">
      <summary> Creates a new instance of <STRONG>WatercolorTintCommand</STRONG> specifying the blur and tint mode.
            </summary>
      <param name="blur"> The amount of blurring to add during processing. (0 to 100) </param>
      <param name="mode"> Indicates if the image should be lightened or darkened. </param>
      <exception> Thrown if blur is less than 0 or greater than 100. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand.#ctor(System.Double,Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintMode,System.Boolean)">
      <summary> Creates a new instance of <STRONG>WatercolorTintCommand</STRONG> specifying blur, tint mode and contrast
            enhancement. </summary>
      <param name="blur"> The amount of blurring to add during processing. (0 to 100) </param>
      <param name="mode"> Indicates if the image should be lightened or darkened. </param>
      <param name="enhanceContrast"> A value indicating whether the image contrast is enhanced during processing. </param>
      <exception> Thrown if blur is less than 0 or greater than 100. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>WatercolorTintCommand</STRONG> from serialization information.
            </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand.Blur">
      <summary> Gets or sets the amount of blurring to add during processing. </summary>
      <exception> Thrown if value is not between 0 and 100. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand.EnhanceContrast">
      <summary> Gets or sets a value indicating whether the image contrast is enhanced during processing. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills the SerializationInfo object with information for this command. </summary>
      <param name="info"> A SerializationInfo containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
      <exception> Thrown if the info argument is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand.Tint">
      <summary> Gets or sets a value indicating if the image should be lightened or darkened. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintMode">
      <summary> Specifies the tint mode for <see cref="T:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand" />. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintMode.Darken">
      <summary> Darkens the image. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintMode.Lighten">
      <summary> Lightens the image. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.BandPassFftCommand">
      <summary> Combines low pass and high pass to filters at a low and high cutoff radius. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.BandPassFftCommand.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.Fft.BandPassFftCommand" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.BandPassFftCommand.#ctor(System.Double,System.Double)">
      <summary> Initializes a new BandPassFftCommand specifying the cut off values. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.BandPassFftCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Initializes a new instance of BandPassFftCommand. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.BandPassFftCommand.ApplyToGrid(Atalasoft.Imaging.ImageProcessing.Fft.FftGrid)">
      <summary> Applies <STRONG>BandPassFftComand</STRONG> to a grid. </summary>
      <param name="grid"> The <STRONG>FftGrid </STRONG>to process. </param>
      <returns>
        <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic) </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.BandPassFftCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.BandPassFftCommand.HighCutoff">
      <summary> Gets or sets the high cutoff radius in the frequency domain. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.BandPassFftCommand.LowCutoff">
      <summary> Gets or sets the low cutoff radius in the frequency domain. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighBoostFftCommand">
      <summary> Similar to the high pass butterworth filter with an additive offset and multiplier. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighBoostFftCommand.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighBoostFftCommand" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighBoostFftCommand.#ctor(System.Double,System.Double,System.Double)">
      <summary> Initializes a new instance of <STRONG>ButterworthHighBoostFftCommand</STRONG> specifying the cutoff
            radius, factor, and offset. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighBoostFftCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Initializes a new instance of <STRONG>ButterworthHighBoostFftCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighBoostFftCommand.ApplyToGrid(Atalasoft.Imaging.ImageProcessing.Fft.FftGrid)">
      <summary> Applies the filter on an <STRONG>FftGrid</STRONG>. </summary>
      <param name="grid"> The <STRONG>FftGrid </STRONG>to process. </param>
      <returns>
        <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic) </returns>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighBoostFftCommand.Cutoff">
      <summary> Gets or sets the cutoff radius in the frequency domain. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighBoostFftCommand.Factor">
      <summary> Gets or sets the multiplier applied to the high pass filter. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighBoostFftCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighBoostFftCommand.Offset">
      <summary> Gets or sets the offset applied to the high pass filter. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighPassFftCommand">
      <summary> Similar to the ideal high pass filter, but with smoother transitions and less "ringing". </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighPassFftCommand.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighPassFftCommand" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighPassFftCommand.#ctor(System.Double,System.Double)">
      <summary> Initializes a new instance of <STRONG>ButterworthHighPassFftCommand</STRONG> specifying the cutoff radius
            and order. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighPassFftCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Initializes a new instance of <STRONG>ButterworthHighPassFftCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighPassFftCommand.ApplyToGrid(Atalasoft.Imaging.ImageProcessing.Fft.FftGrid)">
      <summary> Applies the filter on an <STRONG>FftGrid</STRONG>. </summary>
      <param name="grid"> The <STRONG>FftGrid </STRONG>to process. </param>
      <returns>
        <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic) </returns>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighPassFftCommand.Cutoff">
      <summary> Gets or sets the cutoff radius in the frequency domain. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighPassFftCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighPassFftCommand.Order">
      <summary> Gets or sets the function order. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthLowPassFftCommand">
      <summary> Similar to the ideal low pass filter, but with smoother transitions and less "ringing". </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthLowPassFftCommand.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthLowPassFftCommand" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthLowPassFftCommand.#ctor(System.Double,System.Double)">
      <summary> Initializes a new instance of <STRONG>ButterworthLowPassFftCommand</STRONG> specifying the cutoff radius
            and order. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthLowPassFftCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Initializes a new instance of <STRONG>ButterworthLowPassFftCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthLowPassFftCommand.ApplyToGrid(Atalasoft.Imaging.ImageProcessing.Fft.FftGrid)">
      <summary> Applies the filter on an <STRONG>FftGrid</STRONG>. </summary>
      <param name="grid"> The <STRONG>FftGrid </STRONG>to process. </param>
      <returns>
        <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic) </returns>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthLowPassFftCommand.Cutoff">
      <summary> Gets or sets the cutoff radius in the frequency domain. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthLowPassFftCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthLowPassFftCommand.Order">
      <summary> Gets or sets the function order. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.FftCommand">
      <summary> The base class used for all FFT (Fast Fourier Transform) filters for frequency domain image processing.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.FftCommand.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.Fft.FftCommand" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.FftCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.Fft.FftCommand" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.FftCommand.ApplyToGrid(Atalasoft.Imaging.ImageProcessing.Fft.FftGrid)">
      <summary> Applies the filter on an <STRONG>FftGrid</STRONG>. </summary>
      <param name="grid"> The <STRONG>FftGrid </STRONG>to process. </param>
      <returns>
        <STRONG>null </STRONG>(<STRONG>Nothing </STRONG>in Visual Basic) </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.FftCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.FftCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.FftCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.FftCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid">
      <summary> The <STRONG>FftGrid</STRONG> is used as an intermediate step in FFT processing.  It transforms a
            grayscale image into the FFT domain, and is required prior to all FFT filters.  </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid.#ctor(Atalasoft.Imaging.AtalaImage)">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid" /> class</summary>
      <param name="image"> The grayscale <STRONG>AtalaImage </STRONG>to initialize the <STRONG>FftGrid </STRONG>with.
            </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid.Dispose">
      <summary> Cleans up unmanaged resources. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid.Finalize"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid.GetNextPowerOfTwo(System.Int32)">
      <summary> A helper function that retrieves the next power of two (128, 256, 512, 1024, etc).  x^2 </summary>
      <param name="value">
        <para>The value to use when testing the next power of two.</para>
      </param>
      <returns> The next power of two. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid.GetProcessedImage">
      <summary> Returns the processed image from the frequency domain. </summary>
      <returns> The processed image. </returns>
      <exception> Thrown if the image paramater is not set. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid.Height">
      <summary> Gets the height of this <STRONG>FftGrid</STRONG>. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid.Image">
      <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.AtalaImage" /> associated with this <see cref="T:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid" />. </summary>
      <exception> Thrown if the image is not grayscale. </exception>
      <exception> Thrown if the image dimensions are not a power of 2. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid.Width">
      <summary> Gets the width of this <STRONG>FftGrid</STRONG>. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighBoostFftCommand">
      <summary> Similar to the high pass gaussian filter with an additive offset and multiplier. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighBoostFftCommand.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighBoostFftCommand" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighBoostFftCommand.#ctor(System.Double,System.Double,System.Double)">
      <summary> Initializes a new instance of <STRONG>GaussianHighBoostFftCommand</STRONG> specifying cutoff radius,
            factor, and offset. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighBoostFftCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Initializes a new instance of <STRONG>GaussianHighBoostFftCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighBoostFftCommand.ApplyToGrid(Atalasoft.Imaging.ImageProcessing.Fft.FftGrid)">
      <summary> Applies the filter on an <STRONG>FftGrid</STRONG>. </summary>
      <param name="grid"> The <STRONG>FftGrid </STRONG>to process. </param>
      <returns>
        <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic) </returns>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighBoostFftCommand.Cutoff">
      <summary> Gets or sets the cutoff radius in the frequency domain. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighBoostFftCommand.Factor">
      <summary> Gets or sets the multiplier applied to the high pass filter. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighBoostFftCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighBoostFftCommand.Offset">
      <summary> Gets or sets the offset applied to the high pass filter. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighPassFftCommand">
      <summary> Similar to the ideal high pass filter, but with smoother transitions and less "ringing". </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighPassFftCommand.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighPassFftCommand" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighPassFftCommand.#ctor(System.Double)">
      <summary> itializes a new instance of <STRONG>GaussianHighPassFftCommand</STRONG> specifying the cutoff frequency.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighPassFftCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> itializes a new instance of <STRONG>GaussianHighPassFftCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighPassFftCommand.ApplyToGrid(Atalasoft.Imaging.ImageProcessing.Fft.FftGrid)">
      <summary> Applies the filter on an <STRONG>FftGrid</STRONG>. </summary>
      <param name="grid"> The <STRONG>FftGrid </STRONG>to process. </param>
      <returns>
        <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic) </returns>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighPassFftCommand.Cutoff">
      <summary> Gets or sets the cutoff radius in the frequency domain. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighPassFftCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.GaussianLowPassFftCommand">
      <summary> Similar to the ideal low pass filter, but with smoother transitions and less "ringing". </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.GaussianLowPassFftCommand.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.Fft.GaussianLowPassFftCommand" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.GaussianLowPassFftCommand.#ctor(System.Double)">
      <summary> Initializes a new instance of <STRONG>GaussianLowPassFftCommand</STRONG> specifying the cutoff radius.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.GaussianLowPassFftCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Initializes a new instance of <STRONG>GaussianLowPassFftCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.GaussianLowPassFftCommand.ApplyToGrid(Atalasoft.Imaging.ImageProcessing.Fft.FftGrid)">
      <summary> Applies the filter on an <STRONG>FftGrid</STRONG>. </summary>
      <param name="grid"> The <STRONG>FftGrid </STRONG>to process. </param>
      <returns>
        <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic) </returns>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.GaussianLowPassFftCommand.Cutoff">
      <summary> Gets or sets the cutoff radius in the frequency domain. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.GaussianLowPassFftCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.IdealHighPassFftCommand">
      <summary> The ideal high pass filter zeros out all frequencies inside a specified cutoff radius. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.IdealHighPassFftCommand.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.Fft.IdealHighPassFftCommand" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.IdealHighPassFftCommand.#ctor(System.Double)">
      <summary> Initializes a new instance of <STRONG>IdealHighPassFftCommand</STRONG> specifying the cutoff radius.
            </summary>
      <param name="cutoff"> The cutoff radius </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.IdealHighPassFftCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Initializes a new instance of <STRONG>IdealHighPassFftCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.IdealHighPassFftCommand.ApplyToGrid(Atalasoft.Imaging.ImageProcessing.Fft.FftGrid)">
      <summary> Applies the filter on an <STRONG>FftGrid</STRONG>. </summary>
      <param name="grid"> The <STRONG>FftGrid </STRONG>to process. </param>
      <returns>
        <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic) </returns>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.IdealHighPassFftCommand.Cutoff">
      <summary> Gets or sets the cutoff radius in the frequency domain. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.IdealHighPassFftCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.IdealLowPassFftCommand">
      <summary> The ideal low pass filter zeros out all frequencies outside a specified cutoff radius. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.IdealLowPassFftCommand.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.Fft.IdealLowPassFftCommand" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.IdealLowPassFftCommand.#ctor(System.Double)">
      <summary> Initializes a new instance of <STRONG>IdealLowPassFftCommand</STRONG> specifying the cutoff radius.
            </summary>
      <param name="cutoff"> The cutoff radius </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.IdealLowPassFftCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Initializes a new instance of <STRONG>IdealLowPassFftCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.IdealLowPassFftCommand.ApplyToGrid(Atalasoft.Imaging.ImageProcessing.Fft.FftGrid)">
      <summary> Applies the filter on an <STRONG>FftGrid</STRONG>. </summary>
      <param name="grid"> The <STRONG>FftGrid </STRONG>to process. </param>
      <returns>
        <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic) </returns>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.IdealLowPassFftCommand.Cutoff">
      <summary> Gets or sets the cutoff radius in the frequency domain. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.IdealLowPassFftCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.InversePowerFftCommand"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.InversePowerFftCommand.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.Fft.InversePowerFftCommand" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.InversePowerFftCommand.#ctor(System.Double)">
      <summary> Initializes a new instance of <STRONG>InversePowerFftCommand </STRONG>specifying the power. </summary>
      <param name="power"> The power applied to the function controlling the cutoff
            radius. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.InversePowerFftCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Initializes a new instance of <STRONG>InversePowerFftCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.InversePowerFftCommand.ApplyToGrid(Atalasoft.Imaging.ImageProcessing.Fft.FftGrid)">
      <summary> Applies the filter on an <STRONG>FftGrid</STRONG>. </summary>
      <param name="grid"> The <STRONG>FftGrid </STRONG>to process. </param>
      <returns>
        <STRONG>null</STRONG> (<STRONG>Nothing</STRONG> in Visual Basic) </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.InversePowerFftCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.InversePowerFftCommand.Power">
      <summary> Gets or sets the power applied to the function controlling the cutoff radius. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand">
      <summary>
        <para>Uses a powerful technique for sharpening images in the presence of low noise levels via an adaptive
            filtering algorithm. </para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand.#ctor">
      <summary> Creates a new instance of <STRONG>AdaptiveUnsharpMaskCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand.#ctor(System.Int32,System.Double,Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpQuality)">
      <summary> Creates a new instance of <STRONG>AdaptiveUnsharpMaskCommand</STRONG> specifying the threshold, sharpen
            amount and filter quality. </summary>
      <param name="threshold">
        <para>A value controlling the depth of the effect with the lower the value, the greater the
            effect. (0 to 255)</para>
      </param>
      <param name="amount"> The amount of the sharpened signal to add to the output image. </param>
      <param name="filterQuality"> Quality of the filter. </param>
      <exception> Thrown if threshold is less than 0 or greater than 255. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>AdaptiveUnsharpMaskCommand</STRONG> from serialization information.
            </summary>
      <param name="info"> A SerializationInfo object containing information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand.Amount">
      <summary> Gets or sets the amount of the sharpened signal to add to the output image.,<BR /></summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand.FilterQuality">
      <summary> Gets or sets the quality of the filter. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand.Threshold">
      <summary>
        <para>Gets or sets a value controlling the depth of the effect.</para>
      </summary>
      <exception> Thrown if value is not between 0 and 255. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpQuality">
      <summary> Indicates the quality level in the %AdaptiveUnsharpMaskCommand%. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpQuality.Low">
      <summary> Less accurate results, but very fast. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpQuality.Middle">
      <summary> Good results, slower to process. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpQuality.High">
      <summary> Highest quality with the best results.  Very slow. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand">
      <summary> Add different types of noise to an image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.#ctor">
      <summary> Creates a new instance of <STRONG>AddNoiseCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseFilterType,System.Double,System.Boolean)">
      <summary>
        <para>Initializes a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand" /> specifying the filter type, variance, and
            monochromatic setting.</para>
      </summary>
      <param name="noiseType"> The type of noise to apply. </param>
      <param name="variance"> Controls the intensity. </param>
      <param name="monochromatic"> If True, the same noise is applied equally to all pixel channels. </param>
      <exception> Thrown if the variance argument is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseFilterType,System.Double,System.Boolean,System.Double)">
      <summary>
        <para>Initializes a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand" /> specifying the filter type, variance, monochromatic
            setting, and mean.</para>
      </summary>
      <param name="noiseType"> The type of noise to apply. </param>
      <param name="variance"> Controls the intensity. </param>
      <param name="monochromatic"> When true applies the same noise equally to each channel. </param>
      <param name="mean"> Adds additional noise to the output for Gaussian and Uniform noise types. </param>
      <exception> Thrown if the variance or mean arguments are less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>AddNoiseCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo object containing information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.ChannelsToProcess">
      <summary> Gets or sets a bit flag indicating the channels to process. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.InPlaceProcessing"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.Mean">
      <summary> Gets or sets a value which adds additional noise to the output for Gaussian and Uniform noise types.
            </summary>
      <exception> Thrown if value is less than 0. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.Monochromatic">
      <summary> Gets or sets a value that when true applies the same noise equally to each channel. </summary>
      <exception> Thrown if value is null (Nothing in Visual Basic). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.NoiseType">
      <summary> Gets or sets the type of noise to apply. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.Variance">
      <summary> Gets or sets a value controlling the intensity. </summary>
      <exception> Thrown if value is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseFilterType">
      <summary> The type of noise to add to an image. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseFilterType.Gaussian">
      <summary> A type of noise whose histogram is bell-shaped: most of the noise will occur in the middle of the pixel
            value range, and less noise will occur at the extremes. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseFilterType.Negative">
      <summary> Negative Exponential Noise. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseFilterType.Rayleigh">
      <summary> Rayleigh noise. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseFilterType.Uniform">
      <summary> Uniform Noise. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand">
      <summary>
        <para>Applies a Blur filter onto an image.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand.#ctor">
      <summary> Creates a new instance of <STRONG>BlurCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand.#ctor(System.Double)">
      <summary> Initializes a new instance of <STRONG>BlurCommand</STRONG> specifying the intensity. </summary>
      <param name="intensity">
        <para>The intensity of the filter. (0 to 100)</para>
      </param>
      <exception> Thrown if the intensity is less than 0 or greater than 100. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand.#ctor(System.Double,System.Int32)">
      <summary> Initializes a new instance of <STRONG>BlurCommand</STRONG> specifying the intensity and matrix size.
            </summary>
      <param name="intensity">
        <para>The intensity of the filter. (0 to 100)</para>
      </param>
      <param name="matrixSize"> The size of the matrix.  Should be an odd value greater than or equal to 3. </param>
      <exception> Thrown if the intensity is less than 0 or greater than 100, or if matrixSize is less than 3.
            </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>BlurCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo object containing information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand.ChannelsToProcess">
      <summary> Gets or sets a bit flag indicating the channels to process. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand.Intensity">
      <summary> Gets or sets a value controlling the intensity of the filter. </summary>
      <exception> Thrown if value is not between 0 and 100. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand.MatrixSize">
      <summary> Gets or sets the size of the matrix. </summary>
      <exception> Thrown if value is less than 3. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.BlurGaussianCommand">
      <summary> Performs a Gaussian blur filter on the image.  This has a more dispersed effect then the traditional blur
            filter, but slower.  </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurGaussianCommand.#ctor">
      <summary> Creates a new instance of <STRONG>BlurGaussianCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurGaussianCommand.#ctor(System.Double)">
      <summary> Creates a new instance of <STRONG>BlurGaussianCommand</STRONG> specifying the amount of blur. </summary>
      <param name="sigma"> The standard deviation of the gaussian kernal, controlling the amount of blur. </param>
      <exception> Thrown if sigma is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurGaussianCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>BlurGaussianCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo object containing information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.BlurGaussianCommand.ChannelsToProcess">
      <summary> Gets or sets a bit flag indicating the channels to process. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurGaussianCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurGaussianCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurGaussianCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurGaussianCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.BlurGaussianCommand.Sigma">
      <summary> Gets or sets the standard deviation of the gaussian kernal, controlling the amount of blur. </summary>
      <exception> Thrown if value is less than 0. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.BlurGaussianCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurGaussianCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand">
      <summary> Find edges in an image using the Canny algorithm. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.#ctor">
      <summary> Creates a new instance of <STRONG>CannyEdgeDetectorCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.#ctor(System.Double,System.Double,System.Double)">
      <summary> Creates a new instance of <STRONG>CannyEdgeDetectorCommand</STRONG> specifying the deviation and
            hysteresis. </summary>
      <param name="sigma"> Standard deviation of the gaussian kernal. </param>
      <param name="lowHysteresis"> The low hysteresis value.  (0 to 100) </param>
      <param name="highHysteresis"> The high hysteresis value.  (0 to 100) </param>
      <exception> Thrown if the lowHysteresis or highHysteresis is less than 0 or greater than 100, or if sigma is less
            than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>CannyEdgeDetectorCommand</STRONG> from serialization information.</summary>
      <param name="info"> A SerializationInfo object containing information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.Apply(Atalasoft.Imaging.AtalaImage)">
      <summary> Applies a Canny Edge Detection filter using the current settings to the specified image. </summary>
      <param name="sourceImage"> The source %AtalaImage% which will be processed. </param>
      <returns> A new <see cref="T:Atalasoft.Imaging.AtalaImage" /> containing the processed image or <B>null</B> (<B>Nothing</B> in Visual Basic) if
            cancelled. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.HighHysteresis">
      <summary> Gets or sets a value used to specify the high hysteresis value. </summary>
      <exception> Thrown if value is not between 0 and 100. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.LowHysteresis">
      <summary> Gets or sets a value used to specify the low hysteresis value. </summary>
      <exception> Thrown if value is not between 0 and 100. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.Sigma">
      <summary> Gets or sets the standard deviation of the gaussian kernal. </summary>
      <exception> Thrown if value is less than 0. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand">
      <summary> This command can be used to replace the hue, saturation and luminance values in an image with those of a
            specified color. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.#ctor">
      <summary> Creates a new instance of <STRONG>ColorizeCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.#ctor(System.Drawing.Color)">
      <summary> Creates a new instance of <STRONG>ColorizeCommand</STRONG> specifying the base color. </summary>
      <param name="baseColor"> The color used for processing. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.#ctor(System.Drawing.Color,System.Boolean,System.Boolean,System.Boolean)">
      <summary> Creates a new instance of <STRONG>ColorizeCommand</STRONG> specifying the base color and values indicating
            whether to process the hue, saturation and luminance. </summary>
      <param name="baseColor"> The color used for processing. </param>
      <param name="applyHue"> Set to true to replace the pixel hue with the hue from <EM>baseColor</EM>. </param>
      <param name="applySaturation"> Set to true to replace the pixel saturation with the saturation from
            <EM>baseColor</EM>. </param>
      <param name="applyLuminance"> Set to true to replace the pixel luminance with the luminance from <EM>baseColor</EM>.
            </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>ColorizeCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo object containing information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.ApplyHue">
      <summary> Gets or sets a value indicating whether the hue pixel values is replaced by the <see cref="P:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.BaseColor" />
            hue. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.ApplyLuminance">
      <summary> Gets or sets a value indicating whether the luminance pixel values is replaced by the <see cref="P:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.BaseColor" /> luminance. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.ApplySaturation">
      <summary> Gets or sets a value indicating whether the saturation pixel values is replaced by the <see cref="P:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.BaseColor" /> saturation. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.BaseColor">
      <summary> Gets or sets the base color used for processing. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand">
      <summary> Applies a custom Convolution Filter to an image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.#ctor">
      <summary> Creates a new instance of <STRONG>ConvolutionFilterCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix,System.Double)">
      <summary> Creates a new instance of <STRONG>ConvolutionFilterCommand</STRONG> specifying the matrix and intensity.
            </summary>
      <param name="matrix"> The matrix to apply to the image. </param>
      <param name="intensity"> The intensity of the filter. </param>
      <exception> Thrown if the intensity is less than 0. </exception>
      <exception> Thrown if the matrix has an even number of rows or columns </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>ConvolutionFilterCommand</STRONG> from serialization information.</summary>
      <param name="info"> A SerializationInfo object containing information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.ChannelsToProcess">
      <summary> Gets or sets a bit flag indicating the channels to process. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.Intensity">
      <summary> Gets or sets a value controlling the intensity of the filter. </summary>
      <exception> Thrown if value is less than 0. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.Matrix">
      <summary>
        <para>Gets or sets the matrix to apply to the image.</para>
      </summary>
      <exception> Thrown if the matrix has an even number of rows or columns </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.Traditional">
      <summary> Gets or sets a value indicating if the traditional version is used. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand">
      <summary> Applies a custom Convolution Matrix to an image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.#ctor">
      <summary> Creates a new instance of <STRONG>ConvolutionMatrixCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix,System.Boolean,System.Double)">
      <summary> Creates a new instance of <STRONG>ConvolutionMatrixCommand</STRONG> specifying the matrix, feedback and
            intensity. </summary>
      <param name="matrix"> The matrix to apply to the image. </param>
      <param name="feedback"> Indicates if a feedback calculation is performed. </param>
      <param name="intensity"> The intensity of the filter. </param>
      <exception> Thrown if matrix is not a 3x3 matrix or if intensity is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>ConvolutionMatrixCommand</STRONG> from serialization information.
            </summary>
      <param name="info"> A SerializationInfo object containing information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.ChannelsToProcess">
      <summary> Gets or sets a bit flag indicating the channels to process. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.Feedback">
      <summary> Gets or sets a value indicating if a feedback calculation is performed. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.Intensity">
      <summary> Gets or sets a value controlling the intensity of the filter. </summary>
      <exception> Thrown if value is less than 0. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.Matrix">
      <summary>
        <para>Gets or sets the matrix to apply to the image.</para>
      </summary>
      <exception> Thrown if value is not a 3x3 matrix. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.DespeckleCommand">
      <summary> This filter cleans the image by removing stray pixel spikes (speckles). </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DespeckleCommand.#ctor">
      <summary> Creates a new instance of <STRONG>DespeckleCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DespeckleCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>DespeckleCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo object containing information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DespeckleCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.DespeckleCommand.AutoThread"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.DespeckleCommand.ChannelsToProcess">
      <summary> Gets or sets a bit flag indicating the channels to process. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DespeckleCommand.Clone">
      <summary> Returns a copy of the command. </summary>
      <returns> A copy of the <STRONG>DespeckleCommand</STRONG>. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DespeckleCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.DespeckleCommand.InPlaceProcessing"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DespeckleCommand.InternalActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
      <summary>
        <STRONG>InternalActualCommand</STRONG> does the actual work of the image processing command. </summary>
      <param name="source"> The source image for processing.  This may be different from the original image. </param>
      <param name="dest"> The destination image.  Dest will be null when InPlaceProcessing is true or when
            ConstructFinalImage returns null. </param>
      <param name="imageArea"> An area of the source image to process.  When the destination image is non-null, it will
            always be the same size as imageArea.  ImageArea only differs in size from the source image when the command is a
            subclass of ImageRegionCommand and when there is a region of interest. </param>
      <param name="results"> The results object that will be used for this command. </param>
      <returns> Null (Nothing in VB) </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DespeckleCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DespeckleCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.DespeckleCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DespeckleCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix">
      <summary> This object composes of a matrix of doubles that is used in various filters including
            <see cref="T:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand" /> and <see cref="T:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand" />. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix.#ctor(System.Int32,System.Int32)">
      <summary> Creates a new instance of <STRONG>DoubleMatrix</STRONG>. </summary>
      <param name="rows"> The number of rows in the matrix. </param>
      <param name="columns"> The number of columns in the matrix. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>DoubleMatrix</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo object containing information about this object. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix.Columns">
      <summary> Gets or sets the number of columns in the matrix. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix.GetArray">
      <summary> Return a one-dimentional array that composes of the matrix elements. </summary>
      <returns> A one-dimentional array that composes of the matrix elements. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix.GetItem(System.Int32,System.Int32)">
      <summary> Gets a value in the specified location of the matrix. </summary>
      <param name="row"> The row containing the element to get. (zero based) </param>
      <param name="column"> The column containing the element to get. (zero based) </param>
      <returns> A value in the specified location of the matrix. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this object. </summary>
      <param name="info"> A SerializationInfo object that will be filled with information about this object. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix.GetRow(System.Int32)">
      <summary> Returns a one-dimensional array containing an entire row of the matrix. </summary>
      <param name="rowIndex"> The zero based row to retreive. </param>
      <returns> A one-dimensional array containing an entire row of the matrix. </returns>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix.Rows">
      <summary> Gets or sets the number of rows in the matrix. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix.SetItem(System.Int32,System.Int32,System.Double)">
      <summary> Set the value of an element in the array. </summary>
      <param name="row"> The row containing the element to set. (zero based) </param>
      <param name="column"> The column containing the element to set. (zero based) </param>
      <param name="itemValue"> The value to set. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix.SetRow(System.Int32,System.Double[])">
      <summary> Set the entire row of the matrix to a parameter list of values. </summary>
      <param name="rowIndex"> The zero based row index to set. </param>
      <param name="rowList"> A parameter array of doubles that are set to the matrix row. </param>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand">
      <summary> This command is used to remove dust and scratch marks from an image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand.#ctor">
      <summary> Creates a new instance of <STRONG>DustAndStratchRemovalCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand.#ctor(System.Int32,System.Int32,System.Double)">
      <summary> Creates a new instance of <STRONG>DustAndScratchRemovalCommand</STRONG> specifying the filter size,
            threshold and blending. </summary>
      <param name="filterSize"> The size of the features that will be removed. </param>
      <param name="threshold"> The minimum detail intensity required to trigger removal. (0 to 255) </param>
      <param name="blending"> The blending of original image with the removed image detail. (0 to 100) </param>
      <exception> Thrown if filterSize is less than 0, threshold is less than 0 or greater than 255, or if blending is
            less than 0 or greater than 100. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of DustAndScratchRemovalCommand specifying the filter size, threshold and blending
            values.<br />Creates a new instance of DustAndScratchRemovalCommand. </summary>
      <param name="info"> A SerializationInfo object containing information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand.Blending">
      <summary> Gets or sets the blending of original image with the removed image detail. </summary>
      <exception> Thrown if value is not between 0 and 100. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand.ChannelsToProcess">
      <summary> Gets or sets the channels of the image to process. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand.FilterSize">
      <summary> Gets or sets the size of the features that will be removed. </summary>
      <exception> Thrown if value is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand.Threshold">
      <summary> Gets or sets the minimum detail intensity required to trigger removal. </summary>
      <exception> Thrown if value is not between 0 and 255. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand">
      <summary> This filter enhances edges in an image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.#ctor">
      <summary> Creates a new instance of <STRONG>EdgeDetectionCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionType)">
      <summary> Initializes a new instance of <STRONG>EdgeDetectionCommand</STRONG> specifying the type. </summary>
      <param name="type"> Type of edge detection filter to apply. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionType,System.Double)">
      <summary> Initializes a new instance of <STRONG>EdgeDetectionCommand</STRONG> specifying the type and intensity.
            </summary>
      <param name="type"> Type of edge detection filter to apply. </param>
      <param name="intensity"> Intensity of the edge detection. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionType,System.Double,Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionDirection)">
      <summary> Initializes a new instance of <STRONG>EdgeDetectionCommand</STRONG> specifying the type, intensity, and
            direction. </summary>
      <param name="type"> Type of edge detection filter to apply. </param>
      <param name="intensity"> Intensity of the edge detection. </param>
      <param name="direction"> The edge detection for Gradient and Prewitt filters. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Initializes a new instance of <STRONG>EdgeDetectionCommand</STRONG>. Creates a new instance of
            EdgeDetectionCommand. </summary>
      <param name="info"> A SerializationInfo object containing information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.ChannelsToProcess">
      <summary> Gets or sets the image channels to process. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.Direction">
      <summary> Gets or sets the edge direction for Gradient and Prewitt filters. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.Intensity">
      <summary> Gets or sets the intensity of the edge detection. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.Type">
      <summary>
        <para>Gets or sets the type of edge detection filter to apply.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionDirection">
      <summary> Specifies the direction of the edge detection </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionDirection.Top">
      <summary> Emphasizes top edges </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionDirection.Right">
      <summary> Emphasizes right edges </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionDirection.Bottom">
      <summary> Emphasizes bottom edges </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionDirection.Left">
      <summary> Emphasizes left edges </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionType">
      <summary> Specified the type of the edge detection. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionType.Laplacian">
      <summary> Laplacian Edge Detection </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionType.Prewitt">
      <summary> Prewitt Edge Detection </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionType.Gradient">
      <summary> Gradient Edge Detection </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand">
      <summary> Applies an embossing filter to the source image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.#ctor">
      <summary> Creates a new instance of <STRONG>EmbossCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary> Initializes a new instance of the <STRONG>EmbossCommand</STRONG> specifying the angle, elevation, and
            depth. </summary>
      <param name="angle">
        <para>Angle of the light source in degrees.</para>
      </param>
      <param name="elevation">
        <para>Height of the light source in degrees.</para>
      </param>
      <param name="depth">
        <para>Controls the depth of the emboss.</para>
      </param>
      <exception> Thrown if the depth is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.#ctor(System.Int32,System.Int32,System.Int32,Atalasoft.Imaging.AtalaImage)">
      <summary> Initializes a new instance of the <STRONG>EmbossCommand</STRONG> specifying the angle, elevation, depth,
            and texture. </summary>
      <param name="angle">
        <para>Angle of the light source in degrees.</para>
      </param>
      <param name="elevation">
        <para>Height of the light source in degrees.</para>
      </param>
      <param name="depth">
        <para>Controls the depth of the emboss.</para>
      </param>
      <param name="textureMap"> An AtalaImage that is used as a texture map. </param>
      <exception> Thrown if the depth is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary> Initializes a new instance of the <STRONG>EmbossCommand</STRONG> specifying the angle, elevation, depth,
            and texture. </summary>
      <param name="angle">
        <para>Angle of the light source in degrees.</para>
      </param>
      <param name="elevation">
        <para>Height of the light source in degrees.</para>
      </param>
      <param name="depth">
        <para>Controls the depth of the emboss.</para>
      </param>
      <param name="selfTexture"> Indicates if the source image should be used as the texture. </param>
      <exception> Thrown if the depth is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>EmbossCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo object containing information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.Angle">
      <summary>
        <para>Gets or sets the angle of the light source in degrees.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.Apply(Atalasoft.Imaging.AtalaImage)">
      <summary> Apply the command to the given image. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.Depth">
      <summary> Gets or sets a value controlling the depth of the emboss. </summary>
      <exception> Thrown if value is less than 0. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.Elevation">
      <summary>
        <para>Gets or sets the Height of the light source in degrees.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.SelfTexture">
      <summary> Gets or sets a value indicating if the source image should be used as the texture. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.TextureEnhancement">
      <summary> Gets or sets a value indicating whether the emboss is enhanced when applying a texture. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.TextureMap">
      <summary> Gets or sets an AtalaImage that is used as a texture map. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.EmbossMethod">
      <summary>
        <para>The type of Emboss method to use in the <see cref="T:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand" /></para>
      </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.EmbossMethod.Standard"></member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.EmbossMethod.AlternateBlending"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand">
      <summary> Removes Low Frequency signals from an image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand.#ctor">
      <summary> Creates a new instance of <STRONG>HighPassCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand.#ctor(System.Double)">
      <summary> Initializes a new instance of the <STRONG>HighPassCommand</STRONG> specifying the sigma value. </summary>
      <param name="sigma"> A value indicating the amount of effect to apply. </param>
      <exception> Thrown if sigma is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand.#ctor(System.Double,System.Double)">
      <summary> Initializes a new instance of the <STRONG>HighPassCommand</STRONG> specifying the sigma and mix value.
            </summary>
      <param name="sigma"> A value indicating the amount of effect to apply. </param>
      <param name="mix"> The percentage of the filter to mix into the original image. (0 to 100) </param>
      <exception> Thrown if sigma is less than 0, or is mix is less than 0 or greater than 100. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>HighPassCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo object containing information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand.Apply(Atalasoft.Imaging.AtalaImage)">
      <summary> Apply the command to the given image. </summary>
      <param name="image"> The image which will by processed by the command. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand.InPlaceProcessing"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand.Mix">
      <summary> Gets or sets the percentage of the filter to mix into the original image. </summary>
      <exception> Thrown if value is not between 0 and 100. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand.Sigma">
      <summary> Gets or sets a value indicating the amount of effect to apply. </summary>
      <exception> Thrown if value is less than 0. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix">
      <summary> This object composes of a matrix of integers that is used in various morphological and related filters.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix.#ctor(System.Int32,System.Int32)">
      <summary> Creates a new instance of <STRONG>IntegerMatrix</STRONG>. </summary>
      <param name="rows"> The number of rows for the matrix. </param>
      <param name="columns"> The number of columns for the matrix. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>IntegerMatrix</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo object containing information about this object. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix.Columns">
      <summary> Gets the number of columns in the matrix. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix.GetArray">
      <summary> Return a one-dimentional array that composes of the matrix elements. </summary>
      <returns> A one-dimentional array that composes of the matrix elements. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix.GetItem(System.Int32,System.Int32)">
      <summary> Gets a value in the specified location of the matrix. </summary>
      <param name="row"> The row containing the element to get. (zero based) </param>
      <param name="column"> The column containing the element to get. (zero based) </param>
      <returns> A value in the specified location of the matrix. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this object. </summary>
      <param name="info"> A SerializationInfo object that will be filled with information about this object. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix.GetRow(System.Int32)">
      <summary> Returns a one-dimensional array containing an entire row of the matrix. </summary>
      <param name="rowIndex"> The zero based row to retreive. </param>
      <returns> A one-dimensional array containing an entire row of the matrix. </returns>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix.Rows">
      <summary> Gets the number of rows in the matrix. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix.SetItem(System.Int32,System.Int32,System.Int32)">
      <summary> Set the value of an element in the array. </summary>
      <param name="row"> The row containing the element to set. (zero based) </param>
      <param name="column"> The column containing the element to set. (zero based) </param>
      <param name="itemValue"> The value to set. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix.SetRow(System.Int32,System.Int32[])">
      <summary> Set the entire row of the matrix to a parameter list of values. </summary>
      <param name="rowIndex"> The zero based row index to set. </param>
      <param name="rowList"> A parameter array of integers that are set to the matrix row. </param>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.IntensifyCommand">
      <summary> Increases the color intensity as if a flash of light from a camera hit it. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntensifyCommand.#ctor">
      <summary> Creates a new instance of <STRONG>IntensifyCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntensifyCommand.#ctor(System.Double)">
      <summary> Creates a new instance of <STRONG>IntensifyCommand</STRONG> specifying the intensity. </summary>
      <param name="intensity"> The new intensity value. </param>
      <exception> Thrown if intensity is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntensifyCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>IntensifyCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo object containing information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.IntensifyCommand.ChannelsToProcess">
      <summary> Gets or sets a bit flag indicating the channels to process. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntensifyCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.IntensifyCommand.Intensity">
      <summary>
        <para>Gets or sets a value increasing the color intensity.</para>
      </summary>
      <exception> Thrown if value is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntensifyCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntensifyCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.IntensifyCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntensifyCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.MaximumCommand">
      <summary>
        <para>Sets each color value to the maximum value under the filter.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MaximumCommand.#ctor">
      <summary> Creates a new instance of <STRONG>MaximumCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MaximumCommand.#ctor(System.Int32)">
      <summary> Creates a new instance of <STRONG>MaximumCommand</STRONG> specifying the filter size. </summary>
      <param name="filterSize"> Size of the filter. Should be an odd value greater than or equal to 3. </param>
      <exception> Thrown if filterSize is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MaximumCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>MaximumCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo object containing information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MaximumCommand.ChannelsToProcess">
      <summary> Gets or sets a bit flag indicating the channels to process. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MaximumCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MaximumCommand.FilterSize">
      <summary> Gets or sets the size of the filter. </summary>
      <exception> Thrown if value is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MaximumCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MaximumCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MaximumCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MaximumCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MaximumCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand">
      <summary>
        <para>Applies an Arithmetic, Harmonic, Geometric, or Yp mean filter to an image.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.#ctor">
      <summary> Creates a new instance of <STRONG>MeanCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Filters.MeanFilterType)">
      <summary> Initializes a new instance of the <STRONG>MeanCommand</STRONG> specifying the type. </summary>
      <param name="meanType"> The type of mean filter to apply. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Filters.MeanFilterType,System.Int32)">
      <summary> Initializes a new instance of the <STRONG>MeanCommand</STRONG> specifying the type, filter size.
            </summary>
      <param name="meanType"> The type of mean filter to apply. </param>
      <param name="filterSize"> The size of the filter.  Should be an odd value greater than or equal to 3. </param>
      <exception> Thrown if filterSize is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Filters.MeanFilterType,System.Int32,System.Int32)">
      <summary> Initializes a new instance of the <STRONG>MeanCommand</STRONG> specifying the type, size, and power.
            </summary>
      <param name="meanType"> The type of mean filter to apply. </param>
      <param name="filterSize"> The size of the filter.  Should be an odd value greater than or equal to 3. </param>
      <param name="power"> A non-zero integer that controls power for the Yp mean filter. </param>
      <exception> Thrown if filterSize is less than 0, or if power is equal to 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>MeanCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo object containing information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.ChannelsToProcess">
      <summary> Gets or sets a bit flag indicating the channels to process. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.FilterSize">
      <summary> Gets or sets the size of the filter. </summary>
      <exception> Thrown if value is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.MeanType">
      <summary> Gets or sets the type of mean filter to apply. </summary>
      <exception> Thrown if value is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.Power">
      <summary> Gets or sets the a non-zero integer that controls power for the Yp mean filter. </summary>
      <exception> Thrown if value is equal to 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.MeanFilterType">
      <summary>
            Various types of MeanFilter.
            </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MeanFilterType.Arithmetic">
      <summary> Finds average values under the filter. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MeanFilterType.Geometric">
      <summary> Removes Gaussian type noise from an image better than the arithmetic mean filter. Unlike the YP mean
            filter, this is susceptible to low-valued outliers: a zero pixel under the filter will cause the filter to output
            zero. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MeanFilterType.Harmonic">
      <summary> Removes Gaussian type noise from an image better than the arithmetic mean filter. It is good at removing
            positive outliers, but it is susceptible to low-valued outliers: a zero pixel under the filter will cause the filter
            to output zero. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MeanFilterType.YP">
      <summary> A non-linear mean filter which is better at removing Gaussian type noise and preserving edge features than
            the basic arithmetic mean filter. It is also very good at removing outliers (positive or negative, depending on the
            order of the filter) from images. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.MedianCommand">
      <summary>
        <para>Reduces noise in an image, similarly to the mean filter, however doing a better job preserving
            useful detail in the image.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MedianCommand.#ctor">
      <summary> Creates a new instance of <STRONG>MedianCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MedianCommand.#ctor(System.Int32)">
      <summary> Creates a new instance of <STRONG>MedianCommand</STRONG> specifying the filter size. </summary>
      <param name="filterSize"> The size of the matrix used for processing this command. </param>
      <exception> Thrown if the filterSize is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MedianCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>MedianCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo object containing information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MedianCommand.ChannelsToProcess">
      <summary> Gets or sets a bit flag indicating the channels to process. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MedianCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MedianCommand.FilterSize">
      <summary> Gets or sets the size of the matrix. </summary>
      <exception> Thrown if value is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MedianCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MedianCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MedianCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MedianCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MedianCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand">
      <summary>
        <para>Find the average of minimum and maximum values under the filter.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand.#ctor">
      <summary> Creates a new instance of <STRONG>MidpointCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand.#ctor(System.Int32)">
      <summary> Initializes a new instance of the <STRONG>MidpointCommand</STRONG> specifying the filter size. </summary>
      <param name="filterSize"> The size of the filter.  Should be an odd value greater than or equal to 3. </param>
      <exception> Thrown if the filterSize is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>MidpointCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo object containing information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand.ChannelsToProcess">
      <summary> Gets or sets the <a href="Atalasoft.dotImage~Atalasoft.Imaging.ImageProcessing.ChannelFlags.html">ChannelFlags</a> specifying which
            channels to process. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand.FilterSize">
      <summary> Gets or sets the size of the filter. </summary>
      <exception> Thrown if value is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand">
      <summary>
        <para>Find the minimum values under the filter.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand.#ctor">
      <summary> Creates a new instance of <STRONG>MinimumCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand.#ctor(System.Int32)">
      <summary> Initializes a new instance of the <STRONG>MinimumCommand</STRONG> specifying the filter size. </summary>
      <param name="filterSize"> The size of the filter.  Should be an odd value greater than or equal to 3. </param>
      <exception> Thrown if the filterSize is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>MinimumCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo object containing information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand.ChannelsToProcess">
      <summary> Gets or sets a bit flag indicating the channels to process. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand.FilterSize">
      <summary> Gets or sets the size of the filter. </summary>
      <exception> Thrown if value is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand">
      <summary> Applies a morphological Erosion, Dilation, Open, Close, or TopHat to a grayscale image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand.#ctor">
      <summary> Creates a new instance of <STRONG>MorphoGrayCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayMode)">
      <summary> Initializes a new instance of the <STRONG>MorphoGrayCommand</STRONG> specifying the filter mode.
            </summary>
      <param name="mode"> The type of morphological to apply. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayMode,Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix)">
      <summary> Initializes a new instance of the <STRONG>MorphoGrayCommand</STRONG> specifying the filter mode and a
            structuring element. </summary>
      <param name="mode"> The type of morphological to apply. </param>
      <param name="mask"> The structuring element to use. </param>
      <exception> Thrown if the matrix does not have an equal number of rows and cols. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>MorphoGrayCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo object containing information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand.Mask">
      <summary> Gets or sets a structuring element to use with the morphological filter. </summary>
      <exception> Thrown if the matrix does not have an equal number of rows and cols. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand.Mode">
      <summary> Gets or sets the type of morphological filter to apply. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayMode">
      <summary> The type of morphological filter to use in the <see cref="T:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand" />. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayMode.Dilation">
      <summary>
        <para>Used to smooth small dark regions tending to enhance black features in the image.</para>
      </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayMode.Erosion">
      <summary>
        <para>Used to smooth small light regions tending to reduce black features in the image.</para>
      </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayMode.Open">
      <summary> The dilation of the erosion of the image used to reduce small black regions within the image. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayMode.Close">
      <summary> The erosion of the dilation of the image used to reduce small white regions within the image. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayMode.Tophat">
      <summary> Used to enhance low-contrast, high frequency details within an image. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayMode.Gradient">
      <summary> Highlights sharp gray-level transitions (edges) in an image. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand">
      <summary>
        <para>Applies a traditional sharpening filter to the image.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand.#ctor">
      <summary> Creates a new instance of <STRONG>SharpenCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand.#ctor(System.Double)">
      <summary> Creates a new instance of <STRONG>SharpenCommand</STRONG> specifying intensity. </summary>
      <param name="intensity"> Filter intensity. (0-100) </param>
      <exception> Thrown if the intensity is less than 0 or greater than 100. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand.#ctor(System.Double,System.Int32)">
      <summary> Creates a new instance of <STRONG>SharpenCommand</STRONG> specifying intensity, and matrixSize. </summary>
      <param name="intensity"> Filter intensity. (0-100) </param>
      <param name="matrixSize"> The larger the matrixSize, the stronger the effect </param>
      <exception> Thrown if the intensity is less than 0 or greater than 100, or if matrixSize is less than 3.
            </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>SharpenCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo object containing information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand.ChannelsToProcess">
      <summary> Gets or sets the <a href="Atalasoft.dotImage~Atalasoft.Imaging.ImageProcessing.ChannelFlags.html">ChannelFlags</a> specifying which
            channels to process. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand.Intensity">
      <summary> Gets or sets the value of intensity </summary>
      <exception> Thrown if value is not between 0 and 100. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand.MatrixSize">
      <summary> Gets or sets the size of the filter. </summary>
      <exception> Thrown if value is less than 3. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand">
      <summary> Set pixel components above a high threshold value to 255 and below a low threshold value to 0. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.#ctor">
      <summary> Creates a new instance of <STRONG>ThresholdCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.#ctor(System.Int32,System.Int32)">
      <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand" /> specifying minValue, and maxValue. </summary>
      <param name="minValue"> Pixels below this level are set to 0. Valid values (0 - 255). </param>
      <param name="maxValue"> Pixels above this level are set to 255.  (0 - 255) </param>
      <exception> Thrown if minValue or maxValue is less than 0 or greater than 255. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.#ctor(System.Int32,System.Int32,Atalasoft.Imaging.ImageProcessing.ChannelFlags)">
      <summary> Creates a new instance of ThresholdCommand specifying minValue, maxValue and channelsToProcess. </summary>
      <param name="minValue"> Pixels below this level are set to 0. Valid values (0 - 255). </param>
      <param name="maxValue"> Pixels above this level are set to 255.  (0 - 255) </param>
      <param name="channelsToProcess"> The <see cref="T:Atalasoft.Imaging.ImageProcessing.ChannelFlags" /> specifying which channels to process. </param>
      <exception> Thrown if minValue or maxValue is less than 0 or greater than 255. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>ThresholdCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo object containing information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.AutoThread"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.ChannelsToProcess">
      <summary> Gets or sets the <b>ChannelFlags</b> specifying which channels to process. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.Clone">
      <summary> Returns a copy of this command. </summary>
      <returns> A copy of the <STRONG>ThresholdCommand</STRONG>. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.InPlaceProcessing"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.MaxValue">
      <summary> Gets or sets a value indicating that pixels above this value are set to 255. </summary>
      <exception> Thrown if value is not between 0 and 255. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.MinValue">
      <summary> Gets or sets a value indicating that pixels below this value are set to 0. </summary>
      <exception> Thrown if value is not between 0 and 255. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand">
      <summary> The unsharp mask is a sharpening filter which derives its name from the fact that it enhances edges and
            other high frequency components in an image via a procedure which subtracts an unsharp, or gaussian blurred, version
            of an image from the original image.  The unsharp mask filter is commonly used in the photographic and printing
            industries for crispening edges. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.#ctor">
      <summary> Creates a new instance of <STRONG>UnsharpMaskCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.#ctor(System.Int32,System.Double,System.Double)">
      <summary> Creates a new instance of <STRONG>UnsharpMaskCommand</STRONG> specifying the threshold, amount of effect
            and deviation. </summary>
      <param name="threshold"> Controls the depth of the effect; the lower the value, the greater the effect. Any value
            between 0 and 255 is valid. </param>
      <param name="amount"> Controls the intensity of the effect. Values should be between 0.0 (no effect) and 1.0 (full
            effect). Higher values will give unpredictable results. </param>
      <param name="sigma"> The standard deviation (sigma) of the gaussian kernal, controlling the amount of blur. Good
            values to start with are between 0.6 and 2.4. The higher the value the greater the blur depth and longer the
            processing time. </param>
      <exception> Thrown if threshold is less than 0 or greater than 255, or if amount is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>UnsharpMaskCommand</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo object containing information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.Amount">
      <summary> Gets or sets the value of amount </summary>
      <exception> Thrown if value is less than 0. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.ChannelsToProcess">
      <summary> Gets or sets the <a href="Atalasoft.dotImage~Atalasoft.Imaging.ImageProcessing.ChannelFlags.html">ChannelFlags</a> specifying which
            channels to process. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.Sigma">
      <summary> Gets or sets the value of sigma </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.Threshold">
      <summary> Gets or sets the value of threshold </summary>
      <exception> Thrown if value is not between 0 and 255. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform">
      <summary>
        <para>This transform applies a bump map texture to an image.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform.#ctor">
      <summary> Creates a new instance of <STRONG>BumpMapTransform</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform.#ctor(System.Double,Atalasoft.Imaging.AtalaImage)">
      <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform" /> specifying smoothness, and bumpMapImage.
            </summary>
      <param name="smoothness"> Controls smoothness of the effect (try between .5 and 1.5 to start). </param>
      <param name="bumpMapImage"> An 8-bit grayscale image to use as the bump map. </param>
      <exception> Thrown if the smoothness argument is less than 0, or if the bumpMapImage is not an 8-bit image.
            </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform.#ctor(System.Double,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
      <summary> Creates a new instance of the <STRONG>BumpMapTransform</STRONG> effect. </summary>
      <param name="smoothness"> Controls smoothness of the effect (try between .5 and 1.5 to start). </param>
      <param name="bumpMapImage"> An 8-bit grayscale image to use as the bump map. </param>
      <param name="transformMode"> Specifies the interpolation used with this transform. </param>
      <exception> Thrown if the smoothness is less than 0, or if bumpMapImage is not an 8-bit image. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>BumpMapTransform</STRONG> from serialization information. </summary>
      <param name="info"> A SerializationInfo object containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform.AddToChain(System.Int32,System.Int32)">
      <summary> Adds this transform to the transforms chain. </summary>
      <param name="width"> The width of the image to which this transform will be applied. </param>
      <param name="height"> The height of the image to which this transform will be applied. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform.BumpMapImage">
      <summary> Gets or sets the bump map image used in this transform. </summary>
      <exception> Thrown if image is not a valid 8-bit image. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform.Smoothness">
      <summary> Gets or sets the smoothness value which controls the smoothness of the effect (try between .5 and 1.5 to
            start). </summary>
      <exception> Thrown if value is less than 0. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform.TransformMode">
      <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode" /> used for this transform. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode">
      <summary> Enumeration used by <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform" /> and <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform" />. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode.Horizontal">
      <summary> Only the horizontal sides will be compressed. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode.Vertical">
      <summary> Only the vertical sides will be compressed. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode.Both">
      <summary> Both horizontal and vertical sides will be compressed. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform">
      <summary> Rounds the image into an ellipse or sphere. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.#ctor">
      <summary> Creates a new instance of <STRONG>EllipticalTransform</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.#ctor(System.Drawing.Size,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode)">
      <summary> Creates a new instance of <STRONG>EllipticalTransform</STRONG> specifying radius, offset and mode.</summary>
      <param name="radius"> The width and height of the ellipse. </param>
      <param name="offset"> The offset position from the center of the image. </param>
      <param name="mode"> The type of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode" /> used in this transform. </param>
      <exception> Thrown if the radius size is smaller than 1x1. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.#ctor(System.Drawing.Size,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
      <summary> Creates a new instance of <STRONG>EllipticalTransform</STRONG> specifying radius, offset, mode and
            transformMode. </summary>
      <param name="radius"> The width and height of the ellipse. </param>
      <param name="offset"> The offset position from the center of the image. </param>
      <param name="mode"> The type of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode" /> used in this transform. </param>
      <param name="transformMode"> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode" /> used for this transform. </param>
      <exception> Thrown if the radius size is smaller than 1x1. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.#ctor(System.Drawing.Size,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode,Atalasoft.Imaging.ImageProcessing.InterpolationMode,System.Drawing.Color)">
      <summary> Creates a new instance of <STRONG>EllipticalTransform</STRONG> specifying radius, offset, mode,
            transformMode and backColor. </summary>
      <param name="radius"> The width and height of the ellipse. </param>
      <param name="offset"> The offset position from the center of the image. </param>
      <param name="mode"> The type of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode" /> used in this transform. </param>
      <param name="transformMode"> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode" /> used for this transform.  </param>
      <param name="backColor"> The background color to use for newly uncovered areas of the image. </param>
      <exception> Thrown if the radius size is smaller than 1x1. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>EllipticalTransform</STRONG> from serialization information </summary>
      <param name="info"> A SerializationInfo object containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.AddToChain(System.Int32,System.Int32)">
      <summary> Adds this transform to the transforms chain. </summary>
      <param name="width"> The width of the image to be used with this transform. </param>
      <param name="height"> The height of the image to be used with this transform. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.BackColor">
      <summary> Gets or sets the background color to use for newly uncovered areas of the image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.Mode">
      <summary> Gets or sets the type of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode" /> used in this transform. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.Offset">
      <summary> Gets or set the offset position from the center of the image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.Radius">
      <summary> Gets or set the width and height of the ellipse. </summary>
      <exception> Thrown if the size is smaller than 1x1. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.TransformMode">
      <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode" /> for this transform. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.FlipCommand">
      <summary> Flips an image horizontally or vertically. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.FlipCommand.#ctor">
      <summary> Creates a new instance of <STRONG>FlipCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.FlipCommand.#ctor(Atalasoft.Imaging.FlipDirection)">
      <summary> Creates a new instance of FlipCommand specifying the type of flip to perform. </summary>
      <param name="direction"> Specifies which direction, horizontal or vertical, to flip the image. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.FlipCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>FlipCommand</STRONG> from serialization information </summary>
      <param name="info"> A SerializationInfo object containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.FlipCommand.Direction">
      <summary> Gets or sets the type of flip to perform. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.FlipCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.FlipCommand.InPlaceProcessing"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.FlipCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.FlipCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.FlipCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform">
      <summary>
        <para>Used to create a zoomed camera lens effect.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform.#ctor">
      <summary> Creates a new instance of <STRONG>LensTransform</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform.#ctor(System.Double,System.Drawing.Point)">
      <summary>
        <para>Creates a new instance of <STRONG>LensTransform</STRONG> specifying radius and offset.</para>
      </summary>
      <param name="radius"> Maximum distance from the center for this effect. </param>
      <param name="offset"> The offset position from the center of the image. </param>
      <exception> Thrown if radius is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform.#ctor(System.Double,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
      <summary> Creates a new instance of <STRONG>LensTransform</STRONG> specifying radius, offset and transformMode.
            </summary>
      <param name="radius"> Maximum distance from the center for this effect. </param>
      <param name="offset"> The offset position from the center of the image. </param>
      <param name="transformMode"> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode" /> used for this transform. </param>
      <exception> Thrown if radius is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>LensTransform</STRONG> from serialization information </summary>
      <param name="info"> A SerializationInfo object containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform.AddToChain(System.Int32,System.Int32)">
      <summary> Adds this transform to the transforms chain. </summary>
      <param name="width"> The width of the image to be process. </param>
      <param name="height"> The height of the image to be processed. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform.Offset">
      <summary> Gets or set the offset position from the center of the image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform.Radius">
      <summary> Gets or sets the maximum distance from the center for this effect. </summary>
      <exception> Thrown if value is less than 0. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform.TransformMode">
      <summary> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode" /> used with this transform. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform">
      <summary>
        <para>This transform produces a center-shift transform which runs from one side of the image to the other,
            in a straight line.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform.#ctor">
      <summary> Creates a new instance of <STRONG>LineSliceTransform</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform.#ctor(System.Int32,System.Int32,System.Boolean)">
      <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform" /> object. </summary>
      <param name="endPoint1"> Left or top edge of the transform. </param>
      <param name="endPoint2"> Right or bottom edge of the transform. </param>
      <param name="horizontalTransform"> Specifies if the transform will be horizontal or vertical. </param>
      <exception> Thrown if endPoint1 or endPoint2 is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform.#ctor(System.Int32,System.Int32,System.Boolean,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
      <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform" /> object. </summary>
      <param name="endPoint1"> Left or top edge of the transform. </param>
      <param name="endPoint2"> Right or bottom edge of the transform. </param>
      <param name="horizontalTransform"> Specifies if the transform will be horizontal or vertical. </param>
      <param name="transformMode"> Specifies the interpolation used with this transform. </param>
      <exception> Thrown if endPoint1 or endPoint2 is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>LineSliceTransform</STRONG> from serialization information </summary>
      <param name="info"> A SerializationInfo object containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform.AddToChain(System.Int32,System.Int32)">
      <summary> Adds this transform to the transforms chain. </summary>
      <param name="width"> The width of the image to process. </param>
      <param name="height"> The height of the image to process. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform.EndPoint1">
      <summary> Gets or sets the left or top edge of the transform. </summary>
      <exception> Thrown if value is less than 0. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform.EndPoint2">
      <summary> Gets or sets the right or bottom edge of the transform. </summary>
      <exception> Thrown if value is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform.HorizontalTransform">
      <summary> Gets or sets the value specifying if the transform will be horizontal or vertical. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform.TransformMode">
      <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode" /> used for this transform. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform">
      <summary> This transform creates a marbled, wavy, glassy, rippled effect. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.#ctor">
      <summary> Creates a new instance of <STRONG>MarbleTransform</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.#ctor(System.Double,System.Drawing.Size)">
      <summary> Creates a new instance of <STRONG>MarbleTransform</STRONG> specifying smoothness and scale. </summary>
      <param name="smoothness"> Controls smoothness of the effect.  Try between 0.5 and 1.5 to start. </param>
      <param name="scale">
        <para>The size of the perlin noise.</para>
      </param>
      <exception> Thrown if smoothness or scale values are less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.#ctor(System.Double,System.Drawing.Size,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
      <summary> Creates a new instance of <STRONG>MarbleTransform</STRONG> specifying smoothness, scale and transformMode.
            </summary>
      <param name="smoothness"> Controls smoothness of the effect.  Try between 0.5 and 1.5 to start. </param>
      <param name="scale">
        <para>The size of the perlin noise.</para>
      </param>
      <param name="transformMode"> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode" /> used for this transform. </param>
      <exception> Thrown if smoothness or scale values are less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.#ctor(System.Double,System.Drawing.Size,Atalasoft.Imaging.ImageProcessing.InterpolationMode,System.Drawing.Color)">
      <summary> Creates a new instance of <STRONG>MarbleTransform</STRONG> specifying smoothness, scale, transformMode and
            backColor. </summary>
      <param name="smoothness"> Controls smoothness of the effect.  Try between 0.5 and 1.5 to start. </param>
      <param name="scale">
        <para>The size of the perlin noise.</para>
      </param>
      <param name="transformMode"> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode" /> used for this transform. </param>
      <param name="backColor"> The background color to use for newly uncovered areas of the image. </param>
      <exception> Thrown if smoothness or scale values are less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>MarbleTransform</STRONG> from serialization information </summary>
      <param name="info"> A SerializationInfo object containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.AddToChain(System.Int32,System.Int32)">
      <summary> Adds this transform to the transforms chain. </summary>
      <param name="width"> The width of the image to process. </param>
      <param name="height"> The height of the image to process. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.BackColor">
      <summary> Gets or sets the background color to use for newly uncovered areas of the image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.Scale">
      <summary>
        <para>Gets or sets the size of the perlin noise.</para>
      </summary>
      <exception> Thrown if either the height or width is less than 0. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.Smoothness">
      <summary> Gets or sets the smoothness of the transform. </summary>
      <exception> Thrown if value is less than 0. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.TransformMode">
      <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode" /> used for this transform. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform">
      <summary> Moves the image on the canvas by a specified number of pixels. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform.#ctor">
      <summary> Creates a new instance of <STRONG>OffsetTransform</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform.#ctor(System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransformMode)">
      <summary> Creates a new instance of <STRONG>OffsetTransform</STRONG> specifying offset and offsetMode. </summary>
      <param name="offset"> The new left, top position for the image. </param>
      <param name="offsetMode"> Style of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransformMode" /> to perform. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform.#ctor(System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransformMode,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
      <summary> Creates a new instance of <STRONG>OffsetTransform</STRONG> specifying offset, offsetMode and
            transformMode. </summary>
      <param name="offset"> The new left, top position for the image. </param>
      <param name="offsetMode"> Style of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransformMode" /> to perform. </param>
      <param name="transformMode">
        <para>The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode" /> used for this transform. </para>
      </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform.#ctor(System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransformMode,Atalasoft.Imaging.ImageProcessing.InterpolationMode,System.Drawing.Color)">
      <summary> Creates a new instance of <STRONG>OffsetTransform</STRONG> specifying offset, offsetMode, transformMode
            and backColor. </summary>
      <param name="offset"> The new left, top position for the image. </param>
      <param name="offsetMode"> Style of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransformMode" /> to perform. </param>
      <param name="transformMode">
        <para>The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode" /> used for this transform. </para>
      </param>
      <param name="backColor"> The background color to use on newly uncovered areas of the image. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>OffsetTransform</STRONG> from serialization information </summary>
      <param name="info"> A SerializationInfo object containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform.AddToChain(System.Int32,System.Int32)">
      <summary> Adds this transform to the transforms chain. </summary>
      <param name="width"> The width of the image to process. </param>
      <param name="height"> The height of the image to process. </param>
      <returns>
        <STRONG>Null</STRONG>
      </returns>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform.BackColor">
      <summary> Gets or sets the background color to use on newly uncovered areas of the image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform.Offset">
      <summary> Gets or set the new left, top position for the image. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform.OffsetMode">
      <summary> Gets or sets the style of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransformMode" /> to perform. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform.TransformMode">
      <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode" /> of this transform. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransformMode">
      <summary> Enumeration used by <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform" />. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransformMode.DontWrapEdges">
      <summary> Don't wrap the image at the edges. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransformMode.WrapBothEdges">
      <summary> Wrap both X and Y edges. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransformMode.WrapOnlyX">
      <summary> Wrap only the X edges. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransformMode.WrapOnlyY">
      <summary> Wrap only the Y edges. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform">
      <summary>
        <para>This effect is similar to the marble transform, but the image tends to break up less.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform.#ctor">
      <summary> Creates a new instance of <STRONG>PerlinTransform</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform.#ctor(System.Double,System.Drawing.Size)">
      <summary> Creates a new instance of <STRONG>PerlinTransform</STRONG> specifying the smoothness and scale. </summary>
      <param name="smoothness"> The smoothness of this effect. </param>
      <param name="scale"> The size of the perlin noise. </param>
      <exception> Thrown if smoothness or scale values are less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform.#ctor(System.Double,System.Drawing.Size,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
      <summary> Creates a new instance of <STRONG>PerlinTransform</STRONG> specifying smoothness, scale and transform
            mode. </summary>
      <param name="smoothness"> The smoothness of this effect. </param>
      <param name="scale"> The size of the perlin noise. </param>
      <param name="transformMode"> The InterpolationMode of this transform. </param>
      <exception> Thrown if smoothness or scale values are less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>PerlinTransform</STRONG> from serialization information </summary>
      <param name="info"> A SerializationInfo object containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform.AddToChain(System.Int32,System.Int32)">
      <summary> Adds this transform to the transforms chain. </summary>
      <param name="width"> The width of the image to process. </param>
      <param name="height"> The height of the image to process. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform.Scale">
      <summary>
        <para>Gets or sets the size of the perlin noise.</para>
      </summary>
      <exception> Thrown if either the height or width is less than 0. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform.Smoothness">
      <summary> Gets or sets the smoothness of this effect.  </summary>
      <exception> Thrown if value is less than 0. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform.TransformMode">
      <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode" /> of this transform. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform">
      <summary>
        <para>This transform attracts pixels towards the center of the image.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.#ctor">
      <summary> Creates a new instance of <STRONG>PinchTransform</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.#ctor(System.Double,System.Double,System.Drawing.Point)">
      <summary> Creates a new instance of <STRONG>PinchTransform</STRONG> specifying maxRadius, amount and offset.
            </summary>
      <param name="maxRadius"> Maximum distance from the center for this effect. </param>
      <param name="amount"> The number of pixels to pinch. </param>
      <param name="offset"> The offset position from the center of the image. </param>
      <exception> Thrown if maxRadius is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.#ctor(System.Double,System.Double,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
      <summary> Creates a new instance of <STRONG>PinchTransform</STRONG> specifying maxRadius, amount, offset and
            transformMode. </summary>
      <param name="maxRadius"> Maximum distance from the center for this effect. </param>
      <param name="amount"> The number of pixels to pinch. </param>
      <param name="offset"> The offset position from the center of the image. </param>
      <param name="transformMode"> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode" /> of this transform. </param>
      <exception> Thrown if maxRadius is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.#ctor(System.Double,System.Double,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.InterpolationMode,System.Drawing.Color)">
      <summary> Creates a new instance of <STRONG>PinchTransform</STRONG> specifying maxRadius, amount, offset,
            transformMode and backColor. </summary>
      <param name="maxRadius"> Maximum distance from the center for this effect. </param>
      <param name="amount"> The number of pixels to pinch. </param>
      <param name="offset"> The offset position from the center of the image. </param>
      <param name="transformMode"> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode" /> of this transform. </param>
      <param name="backColor"> The background color used for newly uncovered areas of the image. </param>
      <exception> Thrown if maxRadius is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>PinchTransform</STRONG> from serialization information </summary>
      <param name="info"> A SerializationInfo object containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.AddToChain(System.Int32,System.Int32)">
      <summary> Adds this transform to the transforms chain. </summary>
      <param name="width"> The width of the image to process. </param>
      <param name="height"> The height of the image to process. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.Amount">
      <summary> Gets or sets the number of pixels to pinch. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.BackColor">
      <summary> Gets or sets the background color used for newly uncovered areas of the image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.MaxRadius">
      <summary> Gets or sets the maximum distance from the center for this effect. </summary>
      <exception> Thrown if value is less than 0. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.Offset">
      <summary> Gets or set the offset position from the center of the image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.TransformMode">
      <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode" /> of this transform. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform">
      <summary>
        <para>This transform resizes image rows (or columns) to fit inside the specified polygon. This polygon
            must be convex. If it is concave, the largest convex polygon that can be formed from the points will be used.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.#ctor">
      <summary> Creates a new instance of <STRONG>PolygonTransform</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.#ctor(System.Drawing.Point[],Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode)">
      <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform" /> specifying points, and mode. </summary>
      <param name="points"> Array of points for the polygon. </param>
      <param name="mode"> The compress method to use on this transform. </param>
      <exception> Thrown if points is null. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.#ctor(System.Drawing.Point[],Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
      <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform" /> specifying points, mode and transformMode.
            </summary>
      <param name="points"> Array of points for the polygon. </param>
      <param name="mode"> The compress method to use on this transform. </param>
      <param name="transformMode"> Specifies the interpolation used with this transform. </param>
      <exception> Thrown if points is null. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.#ctor(System.Drawing.Point[],Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode,Atalasoft.Imaging.ImageProcessing.InterpolationMode,System.Drawing.Color)">
      <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform" /> specifying points, mode, transformMode and
            backColor. </summary>
      <param name="points"> Array of points for the polygon. </param>
      <param name="mode"> The compress method to use on this transform. </param>
      <param name="transformMode"> Specifies the interpolation used with this transform. </param>
      <param name="backColor"> The background color to use for newly uncovered areas of the image. </param>
      <exception> Thrown if points is null. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>PolygonTransform</STRONG> from serialization information </summary>
      <param name="info"> A SerializationInfo object containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.AddToChain(System.Int32,System.Int32)">
      <summary> Adds this transform to the transforms chain. </summary>
      <param name="width"> The width of the image to process. </param>
      <param name="height"> The height of the image to process. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.BackColor">
      <summary> Gets or sets the background color to use for newly uncovered areas of the image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.GetPoints">
      <summary> Gets the points used in the polygon. </summary>
      <returns> The points array used for the polygon </returns>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.Mode">
      <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode" /> to use on this transform. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.SetPoints(System.Drawing.Point[])">
      <summary> Sets the points used in the polygon. </summary>
      <param name="points"> An array of Point to use for the polygon. </param>
      <exception> Thrown if points is null. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.TransformMode">
      <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode" /> of this transform. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.PushCommand">
      <summary> Perform a point to point warp of an image, creating a smear effect. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PushCommand.#ctor">
      <summary> Creates a new instance of <STRONG>PushCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PushCommand.#ctor(System.Drawing.Point,System.Drawing.Point)">
      <summary> Creates a new instance of PushCommand specifying the from and to positions. </summary>
      <param name="fromPixel"> The position on the image to push from. </param>
      <param name="toPixel"> The position on the image to move the pixels to. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PushCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>PushCommand</STRONG> from serialization information </summary>
      <param name="info"> A SerializationInfo object containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PushCommand.FromPixel">
      <summary> Gets or sets the position on the image to push from. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PushCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PushCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PushCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PushCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PushCommand.ToPixel">
      <summary> Gets or sets the position on the image to move the pixels to. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PushCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand">
      <summary>
        <para>Similar to the <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform" />, this transform additionally lets you specify a source
            polygon to allow further control over the warping of the image.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.#ctor">
      <summary> Creates a new instance of <STRONG>QuadrilateralWarpCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.#ctor(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.InterpolationMode,System.Drawing.Color)">
      <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand" /> specifying destination points that will
            yield a perspective transform. </summary>
      <param name="destBottomLeft"> The bottom left point of the destination image in pixels. </param>
      <param name="destTopLeft"> The top left point of the destination image in pixels. </param>
      <param name="destTopRight"> The top right point of the destination image in pixels. </param>
      <param name="destBottomRight"> The bottom right point of the destination image in pixels. </param>
      <param name="interpolation"> The interpolation method to use. </param>
      <param name="backgroundColor"> The background color used for newly uncovered areas of the image. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.#ctor(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.InterpolationMode,System.Drawing.Color)">
      <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand" /> specifying sourceBottomLeft,
            sourceTopLeft, sourceTopRight, sourceBottomRight, destBottomLeft, destTopLeft, destTopRight, destBottomRight, and
            interpolation. </summary>
      <param name="sourceBottomLeft"> The bottom left point of the source image in pixels. </param>
      <param name="sourceTopLeft"> The top left point of the source image in pixels. </param>
      <param name="sourceTopRight"> The top right point of the source image in pixels. </param>
      <param name="sourceBottomRight"> The bottom right point of the source image in pixels. </param>
      <param name="destBottomLeft"> The bottom left point of the destination image in pixels. </param>
      <param name="destTopLeft"> The top left point of the destination image in pixels. </param>
      <param name="destTopRight"> The top right point of the destination image in pixels. </param>
      <param name="destBottomRight"> The bottom right point of the destination image in pixels. </param>
      <param name="interpolation"> The interpolation method to use. </param>
      <param name="backgroundColor"> The background color used for newly uncovered areas of the image. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>QuadrilateralWarpCommand</STRONG> from serialization information
            </summary>
      <param name="info"> A SerializationInfo object containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.BackgroundColor">
      <summary> Gets or sets the value of backgroundColor </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.DestBottomLeft">
      <summary> Gets or sets the bottom left point of the destination image in pixels. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.DestBottomRight">
      <summary> Gets or sets the bottom right point of the destination image in pixels. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.DestTopLeft">
      <summary> Gets or sets the top left point of the destination image in pixels. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.DestTopRight">
      <summary> Gets or sets the top right point of the destination image in pixels. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.Interpolation">
      <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode" /> of this transform. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.SourceBottomLeft">
      <summary> Gets or sets the bottom left point of the source image in pixels. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.SourceBottomRight">
      <summary> Gets or sets the bottom right point of the source image in pixels. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.SourceTopLeft">
      <summary> Gets or sets the top left point of the source image in pixels. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.SourceTopRight">
      <summary> Gets or sets the top right point of the source image in pixels. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform">
      <summary>
        <para>This transform randomly modifies the pixels of an image.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform.#ctor">
      <summary> Creates a new instance of <STRONG>RandomTransform</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform.#ctor(System.Double)">
      <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform" /> specifying amount. </summary>
      <param name="amount"> Amount to offset the pixels. </param>
      <exception> Thrown if amount is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform.#ctor(System.Double,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
      <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform" /> specifying amount and transformMode. </summary>
      <param name="amount"> Amount to offset the pixels. </param>
      <param name="transformMode"> Specifies the interpolation used with this transform. </param>
      <exception> Thrown if amount is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>RandomTransform</STRONG> from serialization information </summary>
      <param name="info"> A SerializationInfo object containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform.AddToChain(System.Int32,System.Int32)">
      <summary> Adds this transform to the transforms chain. </summary>
      <param name="width"> The width of the image to process. </param>
      <param name="height"> The height of the image to process. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform.Amount">
      <summary> Gets or sets the amount of offset to apply to the pixels. </summary>
      <exception> Thrown if value is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform.TransformMode">
      <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode" /> of this transform. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand">
      <summary> Overlays the current image onto a specified position on a new image of the specified background color.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.#ctor">
      <summary> Creates a new instance of <STRONG>ResizeCanvasCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.#ctor(System.Drawing.Size,System.Drawing.Point,System.Drawing.Color)">
      <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand" /> specifying canvasSize, position, canvasColor,
            and canvasPaletteIndex. </summary>
      <param name="canvasSize"> The size of the new canvas. </param>
      <param name="position"> The position of the image on the new canvas. </param>
      <param name="canvasColor"> The background color of the canvas </param>
      <exception> Thrown if either the canvasSize height or width is less than or equal to 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.#ctor(System.Drawing.Size,System.Drawing.Point,System.Int32)">
      <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand" /> specifying canvasSize, position, canvasColor,
            and canvasPaletteIndex. </summary>
      <param name="canvasSize"> The size of the new canvas. </param>
      <param name="position"> The position of the image on the new canvas. </param>
      <param name="canvasPaletteIndex"> The palette index of the canvas </param>
      <exception> Thrown if either the canvasSize height or width is less than or equal to 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>ResizeCanvasCommand</STRONG> from serialization information </summary>
      <param name="info"> A SerializationInfo object containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.CanvasColor">
      <summary> Gets or sets the background color of the canvas. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.CanvasPaletteIndex">
      <summary> Gets or sets the palette index of the canvas. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.CanvasSize">
      <summary> Gets or sets the size of the new canvas. </summary>
      <exception> Thrown if either the height or width is less than or equal to 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.Position">
      <summary> Gets or sets the position of the image on the new canvas. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform">
      <summary>
        <para>Creates a water ripple effect on the image.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.#ctor">
      <summary> Creates a new instance of <STRONG>RippleTransform</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.#ctor(System.Double,System.Double,System.Double,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransformMode)">
      <summary> Creates a new instance of <STRONG>RippleTransform</STRONG> specifying maxRadius, intensity, periods,
            offset and mode. </summary>
      <param name="maxRadius"> Maximum distance from the center for this effect. </param>
      <param name="intensity"> Amount of intensity. (1 = no effect) </param>
      <param name="periods"> Number of periods in the distance wave. </param>
      <param name="offset"> The offset position from the center of the image. </param>
      <param name="mode"> The <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransformMode" /> to use. </param>
      <exception> Thrown if the maxRadius, intensity or periods are less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.#ctor(System.Double,System.Double,System.Double,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransformMode,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
      <summary> Creates a new instance of <STRONG>RippleTransform</STRONG> specifying maxRadius, intensity, periods,
            offset, mode and transformMode. </summary>
      <param name="maxRadius"> Maximum distance from the center for this effect. </param>
      <param name="intensity"> Amount of intensity. (1 = no effect) </param>
      <param name="periods"> Number of periods in the distance wave. </param>
      <param name="offset"> The offset position from the center of the image. </param>
      <param name="mode"> The <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransformMode" /> to use. </param>
      <param name="transformMode"> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode" /> of this transform. </param>
      <exception> Thrown if the maxRadius, intensity or periods are less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>RippleTransform</STRONG> from serialization information </summary>
      <param name="info"> A SerializationInfo object containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.AddToChain(System.Int32,System.Int32)">
      <summary> Adds this transform to the transforms chain. </summary>
      <param name="width"> The width of the image to process. </param>
      <param name="height"> The height of the image to process. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.Intensity">
      <summary> Gets or sets the amount of intensity. </summary>
      <exception> Thrown if the value is less than 0. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.MaxRadius">
      <summary> Gets or sets the maximum distance from the center for this effect. </summary>
      <exception> Thrown if value is less than 0. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.Mode">
      <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransformMode" /> to use. </summary>
      <exception> Thrown if value is less than 0. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.Offset">
      <summary> Gets or set the offset position from the center of the image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.Periods">
      <summary> Gets or sets the number of periods in the distance wave. </summary>
      <exception> Thrown if value is less than 0. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.TransformMode">
      <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode" /> of this transform. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransformMode">
      <summary> Enumeration used by <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform" />. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransformMode.Full">
      <summary> Waves remain at full intensity. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransformMode.Linear">
      <summary> Waves diminish linearly with their distance from center. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransformMode.Square">
      <summary> Waves diminish with the square of their distance. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransformMode.Sine">
      <summary> Waves diminish with the sine of their distance (inverse!). </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransformMode.Cosine">
      <summary> Waves diminish with the cosine of their distance. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand">
      <summary>
        <para>This will rotate an image clockwise by the specified number of degrees.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.#ctor">
      <summary> Creates a new instance of <STRONG>RotateCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.#ctor(System.Double)">
      <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand" /> specifying the angle. </summary>
      <param name="angle"> The angle of rotation in degrees. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.#ctor(System.Double,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
      <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand" /> specifying angle, and interpolation. </summary>
      <param name="angle"> The angle of rotation in degrees. </param>
      <param name="interpolation"> The interpolation used for rotation. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.#ctor(System.Double,Atalasoft.Imaging.ImageProcessing.InterpolationMode,System.Drawing.Color)">
      <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand" /> specifying angle, interpolation, and
            backgroundColor. </summary>
      <param name="angle"> The angle of rotation in degrees. </param>
      <param name="interpolation"> The interpolation used for rotation. </param>
      <param name="backgroundColor"> The color of the background when angle is not a multiple of 90 degrees. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.#ctor(System.Double,System.Drawing.Color)">
      <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand" /> specifying angle and backgroundColor. </summary>
      <param name="angle"> The angle of rotation in degrees. </param>
      <param name="backgroundColor"> The color of the background when angle is not a multiple of 90 degrees. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>RotateCommand</STRONG> from serialization information </summary>
      <param name="info"> A SerializationInfo object containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.Angle">
      <summary> Gets or sets the angle of rotation in degrees. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.BackgroundColor">
      <summary> Gets or sets the color of the background when angle is not a multiple of 90 degrees. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.Interpolation">
      <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode" /> of this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand">
      <summary>
        <para>Using this command you can shift the top, bottom, left or right side of an image
            independently.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.#ctor">
      <summary> Creates a new instance of <STRONG>SkewCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Transforms.SkewDirection,System.Int32)">
      <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand" /> specifying direction and offset. </summary>
      <param name="direction"> Determines whether the skew is horizontal or vertical. </param>
      <param name="offset"> The number of pixels to skew. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Transforms.SkewDirection,System.Int32,System.Drawing.Color)">
      <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand" /> specifying direction, offset and backColor. </summary>
      <param name="direction"> Determines whether the skew is horizontal or vertical. </param>
      <param name="offset"> The number of pixels to skew. </param>
      <param name="backColor"> A color to used in newly exposed areas. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Transforms.SkewDirection,System.Int32,System.Drawing.Color,System.Boolean)">
      <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand" /> specifying direction, offset, backColor, and fastSkew.
            </summary>
      <param name="direction"> Determines whether the skew is horizontal or vertical. </param>
      <param name="offset"> The number of pixels to skew. </param>
      <param name="backColor"> A color to used in newly exposed areas. </param>
      <param name="fastSkew"> Provides a faster but less accurate skew. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>SkewCommand</STRONG> from serialization information </summary>
      <param name="info"> A SerializationInfo object containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.BackColor">
      <summary> Gets or sets a color to used in newly exposed areas. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.Direction">
      <summary> Gets or sets a value to determine whether the skew is horizontal or vertical.   </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.FastSkew">
      <summary> Gets or sets a value indicating if speed is more important then quality. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.Offset">
      <summary> Gets or sets the number of pixels to skew. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.SkewDirection">
      <summary> Enumeration used by <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand" />. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.SkewDirection.Horizontal">
      <summary> Makes the image skew on the top or bottom. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.SkewDirection.Vertical">
      <summary> Makes the image skew on the left or right. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform">
      <summary>
        <para>This transform will rotate the image about the center with a constant angular distance.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.#ctor">
      <summary> Creates a new instance of <STRONG>SpinTransform</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.#ctor(System.Double,System.Double,System.Drawing.Point,System.Drawing.Color)">
      <summary> Creates a new instance of <STRONG>SpinTransform</STRONG> specifying maxRadius, maxAngleOffset, offset and
            backColor. </summary>
      <param name="maxRadius"> Maximum distance from the center for this effect. </param>
      <param name="maxAngleOffset"> Angular distance to spin pixels. (degrees) </param>
      <param name="offset"> The offset position from the center of the image. </param>
      <param name="backColor"> The background color to use for newly uncovered areas of the image. </param>
      <exception> Thrown if the maxRadius or maxAngleOffset is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.#ctor(System.Double,System.Double,System.Drawing.Point,System.Drawing.Color,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
      <summary> Creates a new instance of <STRONG>SpinTransform</STRONG> specifying maxRadius, maxAngleOffset, offset,
            backColor and transformMode. </summary>
      <param name="maxRadius"> Maximum distance from the center for this effect. </param>
      <param name="maxAngleOffset"> Angular distance to spin pixels. (degrees) </param>
      <param name="offset"> The offset position from the center of the image. </param>
      <param name="backColor"> The background color to use for newly uncovered areas of the image. </param>
      <param name="transformMode"> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode" /> of this transform. </param>
      <exception> Thrown if the maxRadius or maxAngleOffset is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>SpinTransform</STRONG> from serialization information </summary>
      <param name="info"> A SerializationInfo object containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.AddToChain(System.Int32,System.Int32)">
      <summary> Adds this transform to the transforms chain. </summary>
      <param name="width"> The width of the image to process. </param>
      <param name="height"> The height of the image to process. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.BackColor">
      <summary> Gets or sets the background color to use for newly uncovered areas of the image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.MaxAngleOffset">
      <summary> Gets or sets the angular distance to spin pixels. (degrees) </summary>
      <exception> Thrown if value is less than 0. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.MaxRadius">
      <summary> Gets or sets the maximum distance from the center for this effect. </summary>
      <exception> Thrown if value is less than 0. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.Offset">
      <summary> Gets or set the offset position from the center of the image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.TransformMode">
      <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode" /> of this transform. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform">
      <summary>
        <para>A SpinWaveTransform rotates the image about the center with a variable angular distance.  The
            distance varies in a sine wave pattern.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.#ctor">
      <summary> Creates a new instance of <STRONG>SpinWaveTransform</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.#ctor(System.Double,System.Double,System.Double,System.Drawing.Point)">
      <summary> Creates a new instance of <STRONG>SpinWaveTransform</STRONG> specifying maxRadius, maxAngleOffset, periods
            and offset. </summary>
      <param name="maxRadius"> Maximum distance from the center for this effect. </param>
      <param name="maxAngleOffset"> Angular distance to spin pixels (degrees). </param>
      <param name="periods"> Number of periods in the distance wave. </param>
      <param name="offset"> The offset position from the center of the image. </param>
      <exception> Thrown if the maxRadius, maxAngleOffset or periods is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.#ctor(System.Double,System.Double,System.Double,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
      <summary> Creates a new instance of <STRONG>SpinWaveTransform</STRONG> specifying maxRadius, maxAngleOffset,
            periods, offset and transformMode. </summary>
      <param name="maxRadius"> Maximum distance from the center for this effect. </param>
      <param name="maxAngleOffset"> Angular distance to spin pixels (degrees). </param>
      <param name="periods"> Number of periods in the distance wave. </param>
      <param name="offset"> The offset position from the center of the image. </param>
      <param name="transformMode"> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode" /> of this transform. </param>
      <exception> Thrown if the maxRadius, maxAngleOffset or periods is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.#ctor(System.Double,System.Double,System.Double,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.InterpolationMode,System.Drawing.Color)">
      <summary> Creates a new instance of <STRONG>SpinWaveTransform</STRONG> specifying maxRadius, maxAngleOffset,
            periods, offset, transformMode and backColor. </summary>
      <param name="maxRadius"> Maximum distance from the center for this effect. </param>
      <param name="maxAngleOffset"> Angular distance to spin pixels (degrees). </param>
      <param name="periods"> Number of periods in the distance wave. </param>
      <param name="offset"> The offset position from the center of the image. </param>
      <param name="transformMode"> The <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode" /> of this transform. </param>
      <param name="backColor"> The background color of newly uncovered areas of the image. </param>
      <exception> Thrown if the maxRadius, maxAngleOffset or periods is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>SpinWaveTransform</STRONG> from serialization information </summary>
      <param name="info"> A SerializationInfo object containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.AddToChain(System.Int32,System.Int32)">
      <summary>
            Adds this transform to the transforms chain.
            </summary>
      <param name="width"> The width of the image to be processed. </param>
      <param name="height"> The height of the image to be processed. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.BackColor">
      <summary> Gets or sets the background color of newly uncovered areas of the image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.MaxAngleOffset">
      <summary> Gets or sets the angular distance to spin pixels (degrees). </summary>
      <exception> Thrown if value is less than 0. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.MaxRadius">
      <summary> Gets or sets the maximum distance from the center for this effect. </summary>
      <exception> Thrown if value is less than 0. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.Offset">
      <summary> Gets or set the offset position from the center of the image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.Periods">
      <summary> Gets or sets the number of periods in the distance wave. </summary>
      <exception> Thrown if value is less than 0. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.TransformMode">
      <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode" /> of this transform. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.Transform">
      <summary>
        <para>A base class that is used for transforms.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.Transform.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.Transform" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.Transform.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.Transform" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.Transform.AddToChain(System.Int32,System.Int32)">
      <summary> Adds this transform to the transforms chain. </summary>
      <param name="width"> The width of the image to process. </param>
      <param name="height"> The height of the image to process. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.Transform.SelectCompatibleBackgroundColor(Atalasoft.Imaging.AtalaImage,System.Drawing.Color)">
      <summary> Returns a color value compatible with the image. </summary>
      <param name="image"> The image to get a color for. </param>
      <param name="sourceColor"> The requested color. </param>
      <returns> A color compatible with the image provided. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.Transform.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.Transform.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.Transform.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand">
      <summary>
        <para>This command allows you to combine multiple transforms into a single command call.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.#ctor">
      <summary> Creates a new instance of <STRONG>TransformChainCommand</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Transforms.Transform[])">
      <summary> Creates a new instance of TransformChainCommand specifying the transforms. </summary>
      <param name="transforms"> The transforms to add to this command. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.#ctor(System.Drawing.Color)">
      <summary> Creates a new instance of TransformChainCommand specifying the background color of the resulting image.
            </summary>
      <param name="backColor"> The background color to used for newly uncovered areas of the image. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.#ctor(System.Drawing.Color,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
      <summary> Creates a new instance of TransformChainCommand specifying the background color and transform mode.
            </summary>
      <param name="backColor"> The background color to used for newly uncovered areas of the image. </param>
      <param name="transformMode"> The interpolation mode to use for this transform. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.#ctor(System.Drawing.Color,Atalasoft.Imaging.ImageProcessing.InterpolationMode,Atalasoft.Imaging.ImageProcessing.Transforms.Transform[])">
      <summary> Creates a new instance of TransformChainCommand specifying the background color, transform mode and a
            collection of transforms to apply. </summary>
      <param name="backColor"> The background color to used for newly uncovered areas of the image. </param>
      <param name="transformMode"> The interpolation mode to use for this transform. </param>
      <param name="transforms"> The transforms to add to this command. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>TransformChainCommand</STRONG> from serialization information </summary>
      <param name="info"> A SerializationInfo object containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.Add(Atalasoft.Imaging.ImageProcessing.Transforms.Transform)">
      <summary> Adds a transform to the collection. </summary>
      <param name="transform"> The transform to add. </param>
      <exception> Thrown if the transform is null (Nothing in VB). </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.BackColor">
      <summary> Gets or sets the background color to use on newly uncovered areas of the image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.Clear">
      <summary> Removes all of the transforms from the collection. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.CopyTo(Atalasoft.Imaging.ImageProcessing.Transforms.Transform[],System.Int32)">
      <summary> Copies transforms from the internal collection to an array. </summary>
      <param name="array"> An array to copy the transforms into. </param>
      <param name="arrayIndex">
        <para>The index to start copying transforms into.</para>
      </param>
      <exception> Thrown if array is null (Nothing in VB). </exception>
      <exception> Thrown if the arrayIndex is invalid. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.CopyTo(System.Array,System.Int32)">
      <summary> Copies transforms from the internal collection to an array. </summary>
      <param name="array"> An array to copy the transforms into. </param>
      <param name="arrayIndex"> The index to start copying transforms into. </param>
      <exception> Thrown if array is null (Nothing in VB). </exception>
      <exception> Thrown if arrayIndex is invalid. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.Count">
      <summary> Returns the number of transforms in the collection. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.GetEnumerator">
      <summary> This allows the use of <STRONG>foreach</STRONG> statements on the transforms collection. </summary>
      <returns> An IEnumerator for the transform collection. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.IsSynchronized">
      <summary> Gets a value indicating whether access to the transforms collection is synchronized. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.SupportedPixelFormats">
      <summary> Returns an array of PixelFormats supported by this command. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.SyncRoot">
      <summary> Gets an object that can be used to synchronize access to the transforms collection. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.TransformMode">
      <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode" /> of this transform. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)"></member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform">
      <summary>
        <para>This allows you to write your own transform methods and add them to the transform chain, just like
            the built-in transforms.  To do this, you must supply a <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformCallback" />.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform.#ctor">
      <summary> Creates a new instance of <STRONG>UserTransform</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform.#ctor(Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformCallback)">
      <summary> Creates a new instance of the <STRONG>UserTransform</STRONG> class specifying the use transform callback.
            </summary>
      <param name="callback"> Delegate which will be called for each pixel processed in the output image. </param>
      <exception> Thrown if the callback is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform.#ctor(Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformCallback,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
      <summary> Creates a new instance of the <STRONG>UserTransform</STRONG> class specifying the use transform callback
            and interpolation mode. </summary>
      <param name="callback"> Delegate which will be called for each pixel processed in the output image. </param>
      <param name="transformMode"> Specifies the interpolation used with this transform. </param>
      <exception> Thrown if the callback is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform.#ctor(Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformCallback,Atalasoft.Imaging.ImageProcessing.InterpolationMode,System.Drawing.Color)">
      <summary> Creates a new instance of the <STRONG>UserTransform</STRONG> class specifying the use transform callback,
            interpolation mode, and background color. </summary>
      <param name="callback"> Delegate which will be called for each pixel processed in the output image. </param>
      <param name="transformMode"> Specifies the interpolation used with this transform. </param>
      <param name="backColor"> The background color to use for newly uncovered areas of the image. </param>
      <exception> Thrown if the callback is null (Nothing in VB). </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform.AddToChain(System.Int32,System.Int32)">
      <summary> Adds this transform to the transforms chain. </summary>
      <param name="width"> The width of the image to process. </param>
      <param name="height"> The height of the image to process. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform.BackColor">
      <summary> Gets or sets the background color used when a transform uncovers part of the image. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform.Callback">
      <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformCallback" /> delegate which will be called for each pixel
            processed in the output image. </summary>
      <exception> Thrown if value is null. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform.TransformMode">
      <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode" /> of this transform. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformCallback">
      <summary> Callback method for the UserTransform object. </summary>
      <param name="callbackData">
        <para>Contains the information used in the transform.</para>
      </param>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformData">
      <summary> This class is used in the UserTransformCallback to indicate the pixel locations of the transform.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformData.#ctor">
      <summary> Creates a new instance of <STRONG>UserTransformData</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformData.#ctor(System.Drawing.PointF,System.Drawing.PointF)">
      <summary> Initializes a new instance of UserTransformData specifying the to and from points. </summary>
      <param name="currentPixel"> The current pixel to transform. </param>
      <param name="fromPixel"> The value which the pixel which should move to the current pixel. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformData.CurrentPixel">
      <summary> Gets the current pixel to transform. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformData.FromPixel">
      <summary> Gets or sets the value which the pixel which should move to the current pixel. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform">
      <summary>
        <para>This transform moves across the image with a sine wave pattern.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform.#ctor">
      <summary> Creates a new instance of <STRONG>WaveTransform</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform.#ctor(System.Double,System.Double,Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransformMode)">
      <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform" /> specifying maxOffsetPercent, periods and mode.
            </summary>
      <param name="maxOffsetPercent"> Maximum offset percent for the wave. </param>
      <param name="periods"> Number of periods in the wave. </param>
      <param name="mode"> The style of wave transform to create. </param>
      <exception> Thrown if the maxOffsetPercent or periods value is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform.#ctor(System.Double,System.Double,Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransformMode,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
      <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform" /> specifying maxOffsetPercent, periods, mode and
            transformMode. </summary>
      <param name="maxOffsetPercent"> Maximum offset percent for the wave. </param>
      <param name="periods"> Number of periods in the wave. </param>
      <param name="mode"> The style of wave transform to create. </param>
      <param name="transformMode"> Specifies the interpolation used with this transform. </param>
      <exception> Thrown if the maxOffsetPercent or periods value is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>WaveTransform</STRONG> from serialization information </summary>
      <param name="info"> A SerializationInfo object containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform.AddToChain(System.Int32,System.Int32)">
      <summary> Adds this transform to the transforms chain. </summary>
      <param name="width"> The width of the image to process. </param>
      <param name="height"> The height of the image to process. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform.MaxOffsetPercent">
      <summary> Gets or sets the maximum offset percent for the wave. </summary>
      <exception> Thrown if value is less than 0. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform.Mode">
      <summary> Gets or sets the style of wave transform to create. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform.Periods">
      <summary> Gets or sets the number of periods in the wave. </summary>
      <exception> Thrown if value is less than 0. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform.TransformMode">
      <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode" /> of this transform. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransformMode">
      <summary> Enumeration used by <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform" />. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransformMode.LeftToRightSine">
      <summary>
            The wave moves from left to right as a sine wave.
            </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransformMode.TopToBottomSine">
      <summary> The wave moves from top to bottom as a sine wave. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransformMode.LeftToRightCosine">
      <summary> The wave moves from left to right as a cosine wave. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransformMode.TopToBottomCosine">
      <summary> The wave moves from top to bottom as a cosine wave. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform">
      <summary>
        <para>This transform creates an effect which is a bit like looking at the image though a clear sphere.  If
            you set <see cref="P:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform.BigWow" /> to true, the result looks as if you're inside the sphere.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform.#ctor">
      <summary> Creates a new instance of <STRONG>WowTransform</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform.#ctor(System.Double,System.Boolean)">
      <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform" /> specifying maxRadius, and bigWow. </summary>
      <param name="maxRadius"> Maximum distance from the center for this effect. </param>
      <param name="bigWow"> Makes it appear as if you are inside a clear sphere. </param>
      <exception> Thrown if maxRadius is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform.#ctor(System.Double,System.Boolean,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
      <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform" /> specifying maxRadius, bigWow and transformMode.
            </summary>
      <param name="maxRadius"> Maximum distance from the center for this effect. </param>
      <param name="bigWow"> Makes it appear as if you are inside a clear sphere. </param>
      <param name="transformMode"> Specifies the interpolation used with this transform. </param>
      <exception> Thrown if maxRadius is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>WowTransform</STRONG> from serialization information </summary>
      <param name="info"> A SerializationInfo object containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform.AddToChain(System.Int32,System.Int32)">
      <summary> Adds this transform to the transforms chain. </summary>
      <param name="width"> The width of the image to process. </param>
      <param name="height"> The height of the image to process. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform.BigWow">
      <summary> Gets or sets a valid indicating if you the effect to appear inside the sphere. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform.MaxRadius">
      <summary> Gets or sets the maximum distance from the center for this effect. </summary>
      <exception> Thrown if value is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform.TransformMode">
      <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode" /> of this transform. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform">
      <summary>
        <para>This transform moves across the images in a triangle wave pattern.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform.#ctor">
      <summary> Creates a new instance of <STRONG>ZigZagTransform</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform.#ctor(System.Double,System.Int32,System.Boolean)">
      <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform" /> specifying maxOffsetPercent, periods, and
            topToBottom. </summary>
      <param name="maxOffsetPercent"> Maximum offset percent for the wave. </param>
      <param name="periods"> Number of periods in the wave. </param>
      <param name="topToBottom"> The wave moves from top to bottom instead of left to right. </param>
      <exception> Thrown if maxOffsetPercent or periods is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform.#ctor(System.Double,System.Int32,System.Boolean,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
      <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform" /> specifying maxOffsetPercent, periods, topToBottom
            and transformMode. </summary>
      <param name="maxOffsetPercent"> Maximum offset percent for the wave. </param>
      <param name="periods"> Number of periods in the wave. </param>
      <param name="topToBottom"> The wave moves from top to bottom instead of left to right. </param>
      <param name="transformMode"> Specifies the interpolation used with this transform. </param>
      <exception> Thrown if maxOffsetPercent or periods is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Creates a new instance of <STRONG>ZigZagTransform</STRONG> from serialization information </summary>
      <param name="info"> A SerializationInfo object containing information for this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform.AddToChain(System.Int32,System.Int32)">
      <summary> Adds this transform to the transforms chain. </summary>
      <param name="width"> The width of the image to process. </param>
      <param name="height"> The height of the image to process. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Fills a SerializationInfo object with information about this command. </summary>
      <param name="info"> A SerializationInfo object that will be filled with information about this command. </param>
      <param name="context"> A StreamingContext for this information. </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform.MaxOffsetPercent">
      <summary> Gets or sets the maximum offset percent for the wave. </summary>
      <exception> Thrown if value is less than 0. </exception>
    </member>
    <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)"></member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform.Periods">
      <summary> Gets or sets the number of periods in the wave. </summary>
      <exception> Thrown if value is less than 0. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform.TopToBottom">
      <summary> Gets or sets a value indicating if the wave moves from top to bottom instead of left to right. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform.TransformMode">
      <summary> Gets or sets the <see cref="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode" /> of this transform. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageSources.DbImageSource">
      <summary> A DbImageSource is a sub-class of ImageSource that allows you read-only access to images stored in a
            database. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.#ctor(Atalasoft.Imaging.ImageSources.IDbImageAccessor)">
      <summary> Creates a DbImageSource from a IDbImageAccessor implementor. </summary>
      <param name="dbAccessor"> An object that implements IDbImageAccessor and will access the underlying data. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.#ctor(Atalasoft.Imaging.ImageSources.IDbImageAccessor,System.Boolean)">
      <summary> Creates a DbImageSource from a IDbImageAccessor implementor. </summary>
      <param name="dbAccessor"> An object that implements IDbImageAccessor and will access the underlying data. </param>
      <param name="doAllFrames"> True means that the source should source all frames of the image.  If all
            of the images are known to be single framed, passing false will increase performance of this class. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Deserialize this object from the info and context. </summary>
      <param name="info"> The serialization info to use for this object. </param>
      <param name="context"> The serialization context. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.CalculateNumPagesPerImage">
      <summary> Calculates and caches the number of frames per image and the image count. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageSources.DbImageSource.DbAccessor">
      <summary> The accessor used to get to the database.  This class supports changing the accessor, but if you change
            anything about the connected accessor, you are responsible for calling Reset() on the image source. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageSources.DbImageSource.DoAllFrames">
      <summary> Whether to include all of the frames as individual images in the source. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.GetFrameCountInImage(System.Int32)">
      <summary> Returns the number of frames in the image that will be served by this image source.  If
            <see cref="P:Atalasoft.Imaging.ImageSources.DbImageSource.DoAllFrames" /> is false, this function always returns 1. </summary>
      <param name="index"> The index of the image </param>
      <returns> The number of frames in the image </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.GetImageNumAndFrame(System.Int32,System.Int32@,System.Int32@)">
      <summary> Caclulates the image number and frame number given an image source index. </summary>
      <param name="index"> The index of the image in the image source. </param>
      <param name="imageNum"> The image index in the source that contains this image. </param>
      <param name="frame"> The frame number within the image that contains the image data for the given image. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.GetImageStream(System.Int32)">
      <summary> Gets the stream and the frame within that stream that corresponds to the passed in index. The caller is
            responsible for closing the returned stream. </summary>
      <param name="index"> The index of the requested image </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Get the data to serialize for this object. </summary>
      <param name="info"> The information for this object to serialize </param>
      <param name="context"> The serialization context </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.LowLevelAcquire(System.Int32)">
      <summary> Acquires the image at the given image source index. </summary>
      <param name="index"> The index within the image source </param>
      <returns> The image at the index wrapped with a reloader, or null if there is no image at that index. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.LowLevelAcquireNextImage">
      <summary> Acquire the next image in the source. </summary>
      <returns> The next image in the source wrapped with a reloader. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.LowLevelDispose">
      <summary> Disposes any non-GC objects used by this class. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.LowLevelFlushOnReset">
      <summary> Returns true to indicate that a Reset() should flush all images </summary>
      <returns> true always </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.LowLevelHasMoreImages">
      <summary> Returns true if AcquireNext would return an image </summary>
      <returns> true if AcquireNext would return an image </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.LowLevelReplaceImage(Atalasoft.Imaging.ImageSourceNode,Atalasoft.Imaging.AtalaImage)">
      <summary> Not implemented for this image source.  Will throw NotImplementedException. </summary>
      <param name="node"> ignored </param>
      <param name="newImage"> ignored </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.LowLevelReset">
      <summary> Empties any cached data about the images </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.LowLevelSkipNextImage">
      <summary> Increments the internal index so that AcquireNext would skip an image </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.LowLevelTotalImages">
      <summary> The total number of images in the image source </summary>
      <returns> The total number of images in the image source </returns>
    </member>
    <member name="T:Atalasoft.Imaging.ImageSources.DbImageSource.Decryptor">
      <summary>
            A delegate to decrypt data back into a string (for use with connection string serialization)
            </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageSources.DbImageSource.Encryptor">
      <summary>
            A delegate to encrypt a string (for use with connection string serialization)
            </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageSources.DbImageSource.FrameCounter">
      <summary>
            A delegate to help count frames in a Stream
            </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageSources.IDbImageAccessor">
      <summary> An interface containing methods necessary for getting to the underlying data store </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.IDbImageAccessor.ExtractImageStream(System.Int32)">
      <summary> Returns a stream containing the image at the desired index.  You are guaranteed that imageStreamIndex
            is within the range: 0 &lt; imageStreamIndex &lt;= GetImageStreamCount() </summary>
      <param name="imageStreamIndex"> The row index of the desired image.  The index represents the image
            stream which could contain multiple frames. </param>
      <returns> A Stream containing the image, or throw.  Do not return null. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.IDbImageAccessor.GetFrameCountInImage(System.Int32,Atalasoft.Imaging.ImageSources.DbImageSource.FrameCounter)">
      <summary> Returns the number of frames in the image stream at index </summary>
      <param name="imageStreamIndex"> The index of the stream. </param>
      <param name="frameCounterFn"> A delegate that can count the number of frames in a stream, which
            you can use if you haven't stored the framecount elsewhere.  To speed performance, it might
            be better to store the frame count in the data store and not use this delegate. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.IDbImageAccessor.GetImageStreamCount">
      <summary> Get the number of streams to source in the image source.  Each image stream can have multiple frames
            </summary>
      <returns> The number of streams to source. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.IDbImageAccessor.Reset">
      <summary> Reset all caches of information if you are storing anything that is a cached from the database, release
            it. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageSources.IImageStreamSource">
      <summary> Implement this interface in any ImageSource implementations if you can provide a stream with the image
            instead of the image itself.  This is useful if the caller needs information about the image (e.g. height and width)
            or wants to make a thumbnail or a tile from it and doesn't need all of the image data to do it. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.IImageStreamSource.GetImageStream(System.Int32)">
      <summary> Returns an object that contains information about the stream that contains the requested image. When you
            call this, the ImageStream member of the returned object will be open and the caller is responsible for closing it.
            </summary>
      <param name="index"> The index of the image within the ImageSource. </param>
      <returns> An object that contains the stream and information for finding the requested image within it. </returns>
    </member>
    <member name="T:Atalasoft.Imaging.ImageSources.ImageSourceStreamInfo">
      <summary> Objects of this type are returned by IImageStreamSource.GetImageStream(int index). They contain a stream
            that has the requested image and the frame within that stream that maps to the image index that was requested.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.ImageSourceStreamInfo.#ctor(System.IO.Stream,System.Int32)">
      <summary> Creates the object from a stream and frame. The stream contains the requested image and the frame maps the
            requested index to the frame within this stream. </summary>
      <param name="imageStream"> The stream that contains the requested image </param>
      <param name="frame"> The frame within this stream that maps to the image index that was requested from the
            ImageSource </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageSources.ImageSourceStreamInfo.Frame">
      <summary> The frame within the ImageStream that maps to the image index originally requested </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageSources.ImageSourceStreamInfo.ImageStream">
      <summary> The stream that contains the requested image </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageSources.MergedImageSource">
      <summary> MergedImageSource is a variety of RandomAccessImageSource that can combine any number of other
            RandomAccessImageSource objects. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.MergedImageSource.#ctor(Atalasoft.Imaging.RandomAccessImageSource[])">
      <summary> Constructs a new MergedImageSource object from zero or more supplied RandomAccessImageSource objects
            </summary>
      <param name="imageSources"> A collection of RandomAccessImageSources to be combined. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.MergedImageSource.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Deserialize this object from the info and context. </summary>
      <param name="info"> The serialization info to use for this object. </param>
      <param name="context"> The serialization context. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.MergedImageSource.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Gets the object data to be serialized
            </summary>
      <param name="info"> The information for this object to serialize </param>
      <param name="context"> The serialization context </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.MergedImageSource.LowLevelAcquire(System.Int32)"></member>
    <member name="M:Atalasoft.Imaging.ImageSources.MergedImageSource.LowLevelAcquireNextImage"></member>
    <member name="M:Atalasoft.Imaging.ImageSources.MergedImageSource.LowLevelDispose"></member>
    <member name="M:Atalasoft.Imaging.ImageSources.MergedImageSource.LowLevelFlushOnReset"></member>
    <member name="M:Atalasoft.Imaging.ImageSources.MergedImageSource.LowLevelHasMoreImages"></member>
    <member name="M:Atalasoft.Imaging.ImageSources.MergedImageSource.LowLevelReset"></member>
    <member name="M:Atalasoft.Imaging.ImageSources.MergedImageSource.LowLevelSkipNextImage"></member>
    <member name="M:Atalasoft.Imaging.ImageSources.MergedImageSource.LowLevelTotalImages"></member>
    <member name="T:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor">
      <summary>
            A class that can get images by using IDbCommands.  You can either sub-class this class 
            and implement the abstract methods to provide the various commands, or 
            <see cref="T:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor" />, which builds up commands from SQL,
            or <see cref="T:Atalasoft.Imaging.ImageSources.Data.DbStoredProcImageAccessor" />, which builds up commands from Stored Procedures.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.#ctor(Atalasoft.Imaging.ImageSources.Data.GetConnectionCallback,System.Boolean,System.Collections.IDictionary)">
      <summary>
            Create an image accessor that uses IDbCommand objects to get images.  The commands are created
            by sub-classes in the abstract methods.
            </summary>
      <param name="getConnection">A delegate that can be used to get a connection to the database.  This
            delegate may be serialized, so it should be to a static method.  In the case of ASP.NET, the deserialization can 
            happen in another page or in another web-server instance.</param>
      <param name="encryptSerializedState">True if the serialized state of the object will be encrypted.
            Please see documentation of sub-classes to see which members are encrypted.</param>
      <param name="extraParameters">The parameters that are passed to all of your stored procedures.  For SqlCommands, the keys should be strings
            which are the names of the parameters and start with an @.  For OleDbCommands, you must use a IDictionary with sorted keys (e.g. SortedList)
            and use index numbers (starting at 0) as keys.  The parameters are added in the sort order of the keys.
            
            The values can be any object that can be automatically converted
            by the IDbDataParameter for your connection.  The <code>extraParameters</code> are not encrypted when this object is serialized. 
            A copy of the the dictionary will be made upon construction, so that changes to it will not affect this object.</param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Deserializes stored information from the serialization info.
            </summary>
      <param name="info">The serialized data.</param>
      <param name="context">The serialization context.</param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.AddExtraParameters(System.Data.IDbCommand)">
      <summary> Adds any extra parameters supplied by the user that are needed to run the command. </summary>
      <param name="cmd"> A command that will be used to call a stored procedure. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.CreateGetFrameCountCommand(System.Data.IDbConnection,System.Int32)">
      <summary> A command that returns the frame count for an image.  If this method returns null, the frame count will
            be determined by decoding the image stream.  If not null, this command should result in a single row dataset
            with the frame count in the first column.
            If the frame count is stored separately from the image stream, implementing
            this method can greatly increase performance (especially first access).  This command should not be associated with
            any connection. </summary>
      <param name="conn"> A connection to the database. </param>
      <param name="imageStreamIndex"> The index of the image stream in the source. </param>
      <returns> A command that returns the frame count for an image. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.CreateGetImageRowCommand(System.Data.IDbConnection,System.Int32)">
      <summary> A method that can return a command that gets a single row dataset with the image stream information at the
            given index.  The field can either be a varbinary, binary or image type (in which case the image stream is the
            value of the field) or it can be a string which will be interpreted as a filename that contains the image.
            The command should not be associated with a connection. </summary>
      <param name="conn"> A connection to the database. </param>
      <param name="imageStreamIndex"> The index of the image stream. </param>
      <returns> A command that will a single row with the image stream information. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.CreateGetImageStreamCountCommand(System.Data.IDbConnection)">
      <summary> A command that can get the number of image streams in the source (each of which can contain multiple
            frames). This
            command should just return the number of streams (not the total frame count).  The command should result in
            a single row dataset with the count in the first column.  The command should not be associated with a connection.
            </summary>
      <param name="conn"> A connection to the database. </param>
      <returns> A command that can get the number of image streams in the source. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.CreateStreamFromDatabaseObject(System.Object)">
      <summary> Creates a stream from the object obtained from the database.  If the object is a byte array, it
            is attached to a MemoryStream.  If the object is a string, it is interpreted as a filename and
            an open FileStream to the file is returned.  If the object is null or not able to be interpreted
            as a stream, this method will throw. </summary>
      <param name="o"> An object that represents an image stream. </param>
      <returns> An open stream that contains an image. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.DecryptIfRequested(System.Byte[])">
      <summary> Decrypt a string if EncryptSerializedState is true. </summary>
      <param name="data"> The encrypted string. </param>
      <returns> The decryted string. </returns>
    </member>
    <member name="P:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.Decryptor">
      <summary> A delegate that can decrypt a string. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.EncryptIfRequested(System.String)">
      <summary> Encrypt a string if EncryptSerializedState is true. </summary>
      <param name="s"> The string to encrypt </param>
      <returns> The encrypted string. </returns>
    </member>
    <member name="P:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.Encryptor">
      <summary> A delegate that can encrypt a string. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.EncryptSerializedState">
      <summary> Whether or not the serialized state is encrypted.  Please see documentation of sub-classes to see
            which members are encrypted. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.ExtractImageStream(System.Int32)">
      <summary> Extracts a stream from a row of the database.  </summary>
      <param name="imageStreamIndex"> The index of the stream in the source </param>
      <returns> A stream representing the contents of the image </returns>
    </member>
    <member name="P:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.ExtraParameters">
      <summary>
            A copy of the extra parameters dictionary.  This class does not support changing the parameters after
            the object has been constructed.
            </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.GetConnection">
      <summary> A delegate that can return a connection to the database. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.GetDatabaseObject(System.Data.IDbCommand,Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.FieldGetter,System.Object)">
      <summary> Gets the database object from the first row of the data set returned by the command
            from the field at <pre><code>index</code></pre> which can be either a field name or an integer index. </summary>
      <param name="cmd"> The command to use to get the data set. </param>
      <param name="fieldGetter"> A delegate that can get the field using the <pre><code>index</code></pre>. </param>
      <param name="index"> An object that can be used to determine which field to get (by passing it to fieldGetter).
            </param>
      <returns> The value of the field refered to by index. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.GetDatabaseObject(System.Data.IDbCommand,System.Int32)">
      <summary> Gets the database object from the first row of the data set returned by the command
            from the field at <pre><code>index</code></pre>. </summary>
      <param name="cmd"> The command to use to get the data set. </param>
      <param name="index"> The index of the field to return. </param>
      <returns> The value of the field at <pre><code>index</code></pre> in the first row of the dataset returned by the
            command. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.GetDatabaseObject(System.Data.IDbCommand,System.String)">
      <summary> Gets the database object from the first row of the data set returned by the command
            at the field named <pre><code>field</code></pre>. </summary>
      <param name="cmd"> The command to use to get the data set. </param>
      <param name="field"> The name of the field to return. </param>
      <returns> The value of the given field in the first row of the dataset returned by the command. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.GetDecryptedValue(System.String,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Gets the value from the serialized data and decrypts it if requested. </summary>
      <param name="key"> The key of the data value. </param>
      <param name="info"> The serialized data. </param>
      <param name="context"> The serialization context. </param>
      <returns> The decrypted data. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.GetFieldByInt(System.Data.IDataReader,System.Object)">
      <summary> Gets a field from the datareader by passing in the index of a field. </summary>
      <param name="dr"> A datareader set to a row. </param>
      <param name="intIndex"> The index of the column in the row to return. </param>
      <returns> The value of the field at index <pre><code>intIndex</code></pre>. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.GetFieldByString(System.Data.IDataReader,System.Object)">
      <summary> Gets a field from the datareader by passing in the name of the field. </summary>
      <param name="dr"> A datareader set to a row. </param>
      <returns> The value of the field named <pre><code>fieldName</code></pre></returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.GetFrameCountInImage(System.Int32,Atalasoft.Imaging.ImageSources.DbImageSource.FrameCounter)">
      <summary> The number of frames in the stream indicated by the imageStreamIndex </summary>
      <param name="imageStreamIndex"> The index of the stream in the source.  This is guaranteed to be
            in the range of: 0 &lt; imageStreamIndex &lt;= GetImageStreamCount() </param>
      <returns> The number of frames in the stream indicated by the imageStreamIndex </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.GetImageStreamCount">
      <summary> Gets the number of image streams in this database.  Each stream can contain more than one frame.
            </summary>
      <returns> The number of image stream in this database. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Get the data to serialize for this object </summary>
      <param name="info"> The information for this object to serialize </param>
      <param name="context"> The serialization context </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.ImageFieldName">
      <summary> The name of the image field in the dataset returned by <pre><code>CreateGetImageRowCommand</code></pre>. 
            If this
            method returns null, it is assumed to be in the first column. </summary>
      <returns>The name of the image field in the dataset, or null if it's ok to assume it's in the first column.</returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.Open(System.Data.IDbConnection)">
      <summary> Opens a non-open connection </summary>
      <param name="conn"> A connection </param>
      <returns> An open connection </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.Reset">
      <summary> Reset all caches of information.
            If you are storing anything that is a cached from the database, release it. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.StoreEncryptedValue(System.String,System.String,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Stores the value into the serialization info and encrypts it if requested. </summary>
      <param name="key"> The key of the data value. </param>
      <param name="theValue"> The value to store. </param>
      <param name="info"> The object that contains the serialized data. </param>
      <param name="context"> The serialization context. </param>
    </member>
    <member name="T:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.FieldGetter"></member>
    <member name="T:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor">
      <summary> This class can access images for DbImageSource from clauses of SQL statements that are provided.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.#ctor(Atalasoft.Imaging.ImageSources.Data.GetConnectionCallback,System.Boolean,System.String,System.String,System.String)">
      <summary>
            Creates an object that can be used with <see cref="!:DbImageSouce" /> to access images stored in a database.  The image
            streams are access by combining clauses of SQL Statements provided.
            </summary>
      <param name="getConnection">A delegate that can return connections to the database. 
            This accessor must be able to be serialized, so make the delegate to a static method. If this
            accessor is used in an imagesoruce that is used in ASP.NET controls, then it will be serialized.
            This class creates SQL statements that use CTE from SQL Server, so the connection needs
            to be to a database that supports them.</param>
      <param name="encryptSerializedState">True if the serialized state of the object will be encrypted.
            Please see documentation of sub-classes to see which members are encrypted.</param>
      <param name="imageField">The name of the image field in the data source (given by the <see cref="P:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.FromClause" />).  Can be an expression, but then 
            an "as" with a field name must appear at the end of it.</param>
      <param name="primaryKeyFields">A comma separated list of the primary keys of the data source (given by the <code>fromClause</code>).</param>
      <param name="fromClause">The source of the data rows.  This would normally be a table name, but it can be anything that
            can appear in the from clause of a SQL Select statement. It should not contain "from" at the beginning.</param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.#ctor(Atalasoft.Imaging.ImageSources.Data.GetConnectionCallback,System.Boolean,System.String,System.String,System.String,System.String)">
      <summary>
            Creates an object that can be used with <see cref="!:DbImageSouce" /> to access images stored in a database.  The image
            streams are access by combining clauses of SQL Statements provided.
            </summary>
      <param name="getConnection">A delegate that can return connections to the database. 
            This accessor must be able to be serialized, so make the delegate to a static method. If this
            accessor is used in an imagesoruce that is used in ASP.NET controls, then it will be serialized.
            This class creates SQL statements that use CTE from SQL Server, so the connection needs
            to be to a database that supports them.</param>
      <param name="encryptSerializedState">True if the serialized state of the object will be encrypted.
            Please see documentation of sub-classes to see which members are encrypted.</param>
      <param name="imageField">The name of the image field in the data source (given by the <see cref="!:fromClause" />).  Can be an expression, but then 
            an "as" with a field name must appear at the end of it.</param>
      <param name="primaryKeyFields">A comma separated list of the primary keys of the data source (given by the <code>fromClause</code>).</param>
      <param name="fromClause">The source of the data rows.  This would normally be a table name, but it can be anything that
            can appear in the from clause of a SQL Select statement. It should not contain "from" at the beginning.</param>
      <param name="whereClause">A clause that can be used in a where clause of a SQL Select statement.  It can be null, which
            means that you want all rows to be returned.  It should not contain "where" at the beginning.</param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.#ctor(Atalasoft.Imaging.ImageSources.Data.GetConnectionCallback,System.Boolean,System.String,System.String,System.String,System.String,System.String)">
      <summary>
            Creates an object that can be used with <see cref="!:DbImageSouce" /> to access images stored in a database.  The image
            streams are access by combining clauses of SQL Statements provided.
            </summary>
      <param name="getConnection">A delegate that can return connections to the database. 
            This accessor must be able to be serialized, so make the delegate to a static method. If this
            accessor is used in an imagesoruce that is used in ASP.NET controls, then it will be serialized.
            This class creates SQL statements that use CTE from SQL Server, so the connection needs
            to be to a database that supports them.</param>
      <param name="encryptSerializedState">True if the serialized state of the object will be encrypted.
            Please see documentation of sub-classes to see which members are encrypted.</param>
      <param name="imageField">The name of the image field in the data source (given by the <code>fromClause</code>).  Can be an expression, but then 
            an "as" with a field name must appear at the end of it.</param>
      <param name="primaryKeyFields">A comma separated list of the primary keys of the data source (given by the <code>fromClause</code>).</param>
      <param name="fromClause">The source of the data rows.  This would normally be a table name, but it can be anything that
            can appear in the from clause of a SQL Select statement. It should not contain "from" at the beginning.</param>
      <param name="whereClause">A clause that can be used in a where clause of a SQL Select statement.  It can be null, which
            means that you want all rows to be returned.  It should not contain "where" at the beginning.</param>
      <param name="orderByClause">A clause that can be used in an order by clause.  If it is null, the data set is ordered
            by the primary keys.  The dataset must have a defined order.  It should not contain "order by" at the beginning.</param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.#ctor(Atalasoft.Imaging.ImageSources.Data.GetConnectionCallback,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String)">
      <summary>
            Creates an object that can be used with <see cref="!:DbImageSouce" /> to access images stored in a database.  The image
            streams are access by combining clauses of SQL Statements provided.
            </summary>
      <param name="getConnection">A delegate that can return connections to the database. 
            This accessor must be able to be serialized, so make the delegate to a static method. If this
            accessor is used in an imagesoruce that is used in ASP.NET controls, then it will be serialized.
            This class creates SQL statements that use CTE from SQL Server, so the connection needs
            to be to a database that supports them.</param>
      <param name="encryptSerializedState">True if the serialized state of the object will be encrypted.
            Please see documentation of sub-classes to see which members are encrypted.</param>
      <param name="imageField">The name of the image field in the data source (given by the <see cref="!:fromClause" />).  Can be an expression, but then 
            an "as" with a field name must appear at the end of it.</param>
      <param name="primaryKeyFields">A comma separated list of the primary keys of the data source (given by the <see cref="!:fromClause" />).</param>
      <param name="fromClause">The source of the data rows.  This would normally be a table name, but it can be anything that
            can appear in the from clause of a SQL Select statement. It should not contain "from" at the beginning.</param>
      <param name="whereClause">A clause that can be used in a where clause of a SQL Select statement.  It can be null, which
            means that you want all rows to be returned.  It should not contain "where" at the beginning.</param>
      <param name="orderByClause">A clause that can be used in an order by clause.  If it is null, the data set is ordered
            by the primary keys.  The dataset must have a defined order.  It should not contain "order by" at the beginning.</param>
      <param name="frameCountField">The name of the frameCount field in the data source (given by the <see cref="!:fromClause" />.
            If it is null, the frame count will be determined by decoding the image stream.</param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.#ctor(Atalasoft.Imaging.ImageSources.Data.GetConnectionCallback,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.IDictionary)">
      <summary>
            Creates an object that can be used with <see cref="!:DbImageSouce" /> to access images stored in a database.  The image
            streams are access by combining clauses of SQL Statements provided.
            </summary>
      <param name="getConnection">A delegate that can return connections to the database. 
            This accessor must be able to be serialized, so make the delegate to a static method. If this
            accessor is used in an imagesoruce that is used in ASP.NET controls, then it will be serialized.
            This class creates SQL statements that use CTE from SQL Server, so the connection needs
            to be to a database that supports them.</param>
      <param name="encryptSerializedState">True if the serialized state of the object will be encrypted.
            Please see documentation of sub-classes to see which members are encrypted.</param>
      <param name="imageField">The name of the image field in the data source (given by the <see cref="!:fromClause" />).  Can be an expression, but then 
            an "as" with a field name must appear at the end of it.</param>
      <param name="primaryKeyFields">A comma separated list of the primary keys of the data source (given by the <see cref="!:fromClause" />).</param>
      <param name="fromClause">The source of the data rows.  This would normally be a table name, but it can be anything that
            can appear in the from clause of a SQL Select statement. It should not contain "from" at the beginning.</param>
      <param name="whereClause">A clause that can be used in a where clause of a SQL Select statement.  It can be null, which
            means that you want all rows to be returned.  It should not contain "where" at the beginning.</param>
      <param name="orderByClause">A clause that can be used in an order by clause.  If it is null, the data set is ordered
            by the primary keys.  The dataset must have a defined order.  It should not contain "order by" at the beginning.</param>
      <param name="frameCountField">The name of the frameCount field in the data source (given by the <see cref="!:fromClause" />.
            If it is null, the frame count will be determined by decoding the image stream.</param>
      <param name="extraParameters">The parameters that are passed to all of your stored procedures.  For SqlCommands, the keys should be strings
            which are the names of the parameters and start with an @.  For OleDbCommands, you must use a IDictionary with sorted keys (e.g. SortedList)
            and use index numbers (starting at 0) as keys.  The parameters are added in the sort order of the keys.
            
            The values can be any object that can be automatically converted
            by the IDbDataParameter for your connection.  The <code>extraParameters</code> are not encrypted when this object is serialized. 
            A copy of the the dictionary will be made upon construction, so that changes to it will not affect this object.</param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> From ISerializable.  All properties are encrypted if encryptSerializedState was set to true in the
            constructor.
            They are encrypted using the encryptor </summary>
      <param name="info"> The information to deserialize. </param>
      <param name="context"> The serialization context. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.CreateGetFieldCommand(System.Data.IDbConnection,System.Int32,System.String)">
      <summary> Creates a command that can get the given field from the row indexed by
            <see cref="!:imageStreamIndex" />
            from the datasource. </summary>
      <param name="conn"> A connection to the database </param>
      <param name="imageStreamIndex"> The index of the image stream in the datasource. </param>
      <param name="field"> The name of the column in the data source that the command should try to get. </param>
      <returns> A command that get the given field from row at index <see cref="!:Atalasoft.Imaging.ImageSources.ImageStream" /> from the
            datasource. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.CreateGetFrameCountCommand(System.Data.IDbConnection,System.Int32)">
      <summary> A command that returns the frame count for an image.  If this method returns null, the frame count will
            be determined by decoding the image stream.  If not null, this command should result in a single row dataset
            with the frame count in the first column.
            If the frame count is stored separately from the image stream, implementing
            this method can greatly increase performance (especially first access).  This command should not be associated with
            any connection. </summary>
      <param name="conn"> A connection to the database. </param>
      <param name="imageStreamIndex"> The index of the image stream in the source. </param>
      <returns> A command that returns the frame count for an image. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.CreateGetImageRowCommand(System.Data.IDbConnection,System.Int32)">
      <summary>
            A method that can return a command that gets a single row dataset with the image stream information at the
            given index.  The field can either be a varbinary, binary or image type (in which case the image stream is the
            value of the field) or it can be a string which will be interpreted as a filename that contains the image.
            The command should not be associated with a connection.
            </summary>
      <param name="conn">A connection to the database.</param>
      <param name="imageStreamIndex">The index of the image stream.</param>
      <returns>A command that will a single row with the image stream information.</returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.CreateGetImageStreamCountCommand(System.Data.IDbConnection)">
      <summary> A command that can get the number of image streams in the source (each of which can contain multiple
            frames). This
            command should just return the number of streams (not the total frame count).  The command should result in
            a single row dataset with the count in the first column.  The command should not be associated with a connection.
            </summary>
      <param name="conn"> A connection to the database. </param>
      <returns> A command that can get the number of image streams in the source. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.CreateGetImageStreamCountQuery">
      <summary> Creates a SQL statement that can count the number of image streams.  The count should be in the first
            column
            of the first row of the returned rows. </summary>
      <returns> A SQL statement that counts the number of image streams. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.CreateSelectFieldByRowQuery(System.String,System.String)">
      <summary> Creates a SQL Query using Common Table Expressions that can get a specific row by index from a
            data source. </summary>
      <param name="imageStreamIndexParamName"> The name of the parameter to use to contain the requested
            index (so that it can be provided later by a Parameter) </param>
      <param name="field"> The field that is being requested from the datasouce (must appear in the result of the
            query) </param>
      <returns> A SQL statement that will take a parameter named <see cref="!:imageStreamIndexParamName" /> and
            will
            contain a field named <see cref="!:field" />. </returns>
    </member>
    <member name="P:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.FrameCountField">
      <summary> The name of the frame count field in the data source </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.FromClause">
      <summary> The table that contains the images (or any valid from clause) </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.GetFieldNameFromExpression(System.String)">
      <summary> Takes SQL field clause and returns the name of the column. </summary>
      <param name="expr"> The SQL field clause </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Get the data to serialize for this object </summary>
      <param name="info"> The information for this object to serialize </param>
      <param name="context"> The serialization context </param>
    </member>
    <member name="P:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.ImageField">
      <summary> The name of the image field in the data source </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.ImageFieldName">
      <summary> Returns the name of the field that contains the image stream information.  If the field is an expression
            it must contain an as clause that names the field. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.NonBlankOrderByClause">
      <summary> Returns either the given order by clause or the primary keys if that is blank </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.NonBlankWhereClause">
      <summary> Returns either the given where clause or a clause that is always true, if that is blank </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.OrderByClause">
      <summary> A valid SQL order by clause or null if the dataset should be ordered by the primary keys </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.PrimaryKeyFields">
      <summary> The commas separated list of fields that make up the primary key of the data source </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.WhereClause">
      <summary> A valid SQL where clause or null if all rows are to be used. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageSources.Data.DbStoredProcImageAccessor">
      <summary> This class can be used with IDbImageSource to get images from a database through Stored Procedures. The
            Stored Procedures to call can be specified in the constructor and the only requirement is that they meet certain
            specifications as described in the constructor parameter documentation. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.Data.DbStoredProcImageAccessor.#ctor(Atalasoft.Imaging.ImageSources.Data.GetConnectionCallback,System.Boolean,System.String,System.String,System.Collections.IDictionary)">
      <summary>
            Construct an accessor that can access images in a database via stored procedures
            </summary>
      <param name="getConnection">A delegate that can return connections to the database. 
            This accessor must be able to be serialized, so make the delegate to a static method. If this
            accessor is used in an imagesoruce that is used in ASP.NET controls, then it will be serialized.</param>
      <param name="encryptSerializedState">Set to true if you want the serialized state of this accessor to be encrypted.  
            You must set the Encryptor and Decryptor properties to handle the decryption and encryption.  The <see cref="!:extraParameters" /> are not
            encrypted when serialized.</param>
      <param name="getImageByIndexProc">The name of a stored procedure that can get an image by index.  It should
            take an int parameter called "@index" and any other parameters you need, and return the image stream at that index.  
            index is not a primary key into your table, but instead is a number in range of 0 to count-1, where count is 
            gotten by calling the stored procedure named in the <see cref="!:getImageStreamCountProc" /> argument.  If you 
            take any extra parameters (aside from the index), you should specify their values by using the 
            <see cref="!:extraParameters" /> argument. The stored procedure should result in a single row dataset where the first
            column is the image.  It can either be an encoded image in a varbinary or image field or 
            a string.  If it is a string it is interpreted as a filename, which will be opened to get to the images.</param>
      <param name="getImageStreamCountProc">The name of a stored procedure that can get the number of image streams.  There 
            are no required parameters.  The stored procedure should result in single row dataset with the count in the first column.  
            If you need any extra parameters, you should specify their values by using the 
            <code>extraParameters</code> argument.</param>
      <param name="extraParameters">The parameters that are passed to all of your stored procedures.  For SqlCommands, the keys should be strings
            which are the names of the parameters and start with an @.  For OleDbCommands, you must use a IDictionary with sorted keys (e.g. SortedList)
            and use index numbers (starting at 0) as keys.  The parameters are added in the sort order of the keys.
            
            The values can be any object that can be automatically converted
            by the IDbDataParameter for your connection.  The <see cref="!:extraParameters" /> are not encrypted when this object is serialized. 
            A copy of the the dictionary will be made upon construction, so that changes to it will not affect this object.</param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.Data.DbStoredProcImageAccessor.#ctor(Atalasoft.Imaging.ImageSources.Data.GetConnectionCallback,System.Boolean,System.String,System.String,System.String,System.Collections.IDictionary)">
      <summary>
            Construct an accessor that can access images in a database via stored procedures
            </summary>
      <param name="getConnection">A delegate that can return connections to the database. 
            This accessor must be able to be serialized, so make the delegate to a static method. If this
            accessor is used in an imagesoruce that is used in ASP.NET controls, then it will be serialized.</param>
      <param name="encryptSerializedState">Set to true if you want the serialized state of this accessor to be encrypted.  
            You must set the Encryptor and Decryptor properties to handle the decryption and encryption.  The <code>extraParameters</code> are not
            encrypted when serialized.</param>
      <param name="getImageByIndexProc">The name of a stored procedure that can get an image by index.  It should
            take an int parameter called "@index" and any other parameters you need, and return the image stream at that index.  
            @index is not a primary key into your table, but instead is a number in range of 0 to count-1, where count is 
            gotten by calling the stored procedure named in the <code>getImageStreamCountProc</code> argument.  If you 
            take any extra parameters (aside from the index), you should specify their values by using the 
            <code>extraParameters</code> argument. The stored procedure should result in a single row dataset where the first
            column is the image.  It can either be an encoded image in a varbinary or image field or 
            a string.  If it is a string it is interpreted as a filename, which will be opened to get to the images.</param>
      <param name="getImageStreamCountProc">The name of a stored procedure that can get the number of image streams.  There 
            are no required parameters.  The stored procedure should result in single row dataset with the count in the first column.  
            If you need any extra parameters, you should specify their values by using the 
            <code>extraParameters</code> argument.</param>
      <param name="getFrameCountByIndexProc">The name of a stored procedure that can get the frame count of an image stream by index.  
            It should take an int parameter called "@index" and any other parameters you need, and return the frame count at that index.  
            @index is not a primary key into your table, but instead is a number in range of 0 to count-1, where count is 
            gotten by calling the stored procedure named in the <code>getImageStreamCountProc</code> argument.  If you 
            take any extra parameters (aside from the index), you should specify their values by using the 
            <code>extraParameters</code> argument. The stored procedure should result in a single row dataset where the first
            column is the frame count.  If you cannot provide this argument, you can pass null, and the frame count will be determined
            by decoding the image stream gotten with the <code>getImageByIndexProc</code>.  Providing this argument can substantially
            speed up viewing of multi-framed images because viewers can know which images are visible without accessing the stream.
            A copy of the the dictionary will be made upon construction, so that changes to it will not affect this object.
            </param>
      <param name="extraParameters">The parameters that are passed to all of your stored procedures.  For SqlCommands, the keys should be strings
            which are the names of the parameters and start with an @.  For OleDbCommands, you must use a IDictionary with sorted keys (e.g. SortedList)
            and use index numbers (starting at 0) as keys.  The parameters are added in the sort order of the keys.
            
            The values can be any object that can be automatically converted
            by the IDbDataParameter for your connection.  The <code>extraParameters</code> are not encrypted when this object is serialized. 
            A copy of the the dictionary will be made upon construction, so that changes to it will not affect this object.</param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.Data.DbStoredProcImageAccessor.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> From ISerializable.  All properties are encrypted if encryptSerializedState was set to true in the
            constructor.
            They are encrypted using the encryptor </summary>
      <param name="info"> The serialization info which contains the serialized data. </param>
      <param name="context"> The serialization context. </param>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.Data.DbStoredProcImageAccessor.CreateGetFrameCountCommand(System.Data.IDbConnection,System.Int32)">
      <summary> Creates a command that can get the frame count of an image stream. </summary>
      <param name="conn"> A connection to the database. </param>
      <returns> A command that will return a single row with the frame count of an image stream in the first column.
            If it returns null, the frame count will be determined by decoding the image. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.Data.DbStoredProcImageAccessor.CreateGetImageRowCommand(System.Data.IDbConnection,System.Int32)">
      <summary>
            Creates a command that can get a single row dataset with the image stream information as the first
            column.  It will pass in a parameter named index with the value of <code>imageStreamIndex</code>.
            </summary>
      <param name="conn">A connection to the database.</param>
      <param name="imageStreamIndex">The index of the image stream (in the range of 0 to the count of images).
            It will be passed into the stored procedure as a parameter named index.</param>
      <returns>A command that will return a single row with the image stream information in the first column.</returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.Data.DbStoredProcImageAccessor.CreateGetImageStreamCountCommand(System.Data.IDbConnection)">
      <summary> Creates a command that can get the count of image streams. </summary>
      <param name="conn"> A connection to the database. </param>
      <returns> A command that will return a single row with the count of image streams in the first column. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.Data.DbStoredProcImageAccessor.CreateGetObjectByIndexCommand(System.Data.IDbConnection,System.String,System.Int32)">
      <summary>
            Creates a command that can get an image related database object by calling the stored procedure, passing
            in the given imageStreamIndex.
            </summary>
      <param name="conn">A connection to the database</param>
      <param name="procName">The name of the stored procedure that can get a dataset by index.</param>
      <param name="imageStreamIndex">The index of the image stream (in the range of 0 to the count of images).
            It will be passed into the stored procedure as the first parameter and named <code>@index</code>.</param>
      <returns>A command that can call the stored procedure and pass the index to it.</returns>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.Data.DbStoredProcImageAccessor.CreateStoredProcCommand(System.Data.IDbConnection,System.String)">
      <summary>
            Creates a command that can call the given stored procedure.
            </summary>
      <param name="conn">A connection to the database</param>
      <param name="procName">The name of the stored procedure</param>
      <returns>A command that will will the given stored procedure.</returns>
    </member>
    <member name="P:Atalasoft.Imaging.ImageSources.Data.DbStoredProcImageAccessor.GetFrameCountByIndexProc">
      <summary>
            The name of the stored procedure that will be used to access the frame count of an image stream.  It must take 
            a parameter called index and return a single row dataset with the frame count as the first 
            column.  It may also take extra parameters.
            <see cref="!:DbStoredProcImageAccessor.DbStoredProcImageAccessor" /> for an example of a valid stored procedure.
            </summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageSources.Data.DbStoredProcImageAccessor.GetImageByIndexProc">
      <summary>
            The name of the stored procedure that will be used to access image streams.  It must take 
            a parameter called index and return a single row dataset with the image stream as the first 
            column.  It may also take extra parameters.</summary>
    </member>
    <member name="P:Atalasoft.Imaging.ImageSources.Data.DbStoredProcImageAccessor.GetImageStreamCountProc">
      <summary>
            The name of the stored procedure that will be used to access the count of image streams.  It must take 
            return a single row dataset with the image stream as the first 
            column.  It may also take extra parameters.
            <see cref="!:DbStoredProcImageAccessor.DbStoredProcImageAccessor" /> for an example of a valid stored procedure.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.ImageSources.Data.DbStoredProcImageAccessor.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Get the data to serialize for this object </summary>
      <param name="info"> The information for this object to serialize </param>
      <param name="context"> The serialization context </param>
    </member>
    <member name="T:Atalasoft.Imaging.ImageSources.Data.DecryptHandler">
      <summary> A delegate to decrypt data back into a string (for use with serialization) </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageSources.Data.EncryptHandler">
      <summary> A delegate to encrypt a string (for use with serialization) </summary>
    </member>
    <member name="T:Atalasoft.Imaging.ImageSources.Data.GetConnectionCallback">
      <summary> A delegate that can return connections to a Database </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Memory.BitmapPixelMemory">
      <summary> This is a concrete implementation of PixelMemory implemented using a Bitmap object as the owner of the
            memory. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.BitmapPixelMemory.#ctor(System.Drawing.Bitmap)">
      <summary> Constructs a new BitmapPixelMemory object from the Bbitmap supplied. </summary>
      <param name="bm"> A non-null Bitmap object. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.BitmapPixelMemory.DisposeManagedResources">
      <summary> Disposes any memory associated with this PixelMemory object, including the Bitmap. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.BitmapPixelMemory.DisposeUnmanagedResources">
      <summary> Disposes any unmanaged resources associated with this object. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.BitmapPixelMemory.GetScanLinePtr(System.Int32)">
      <summary> Gets a pointer to a scanline for this object. </summary>
      <param name="i"> An index to a scanline in the image. </param>
    </member>
    <member name="P:Atalasoft.Imaging.Memory.BitmapPixelMemory.IsContiguous">
      <summary> Returns true. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.BitmapPixelMemory.LLClone">
      <summary> Subclasses implement this method to make a deep copy of this PixelAccessor. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.BitmapPixelMemory.LLGetHeight">
      <summary> Returns the height of the image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.BitmapPixelMemory.LLGetPixelAccessor">
      <summary> Constructs a PixelAccessor appropriate for BitmapPixelMemory. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.BitmapPixelMemory.LLGetRowStride">
      <summary> Returns the size of a row in bytes, rounded up to the next multiple of 4. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Memory.GlobalAllocPixelMemory">
      <summary> Represents a PixelMemory object with memory allocated by GlobalAlloc. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.GlobalAllocPixelMemory.#ctor(System.Int32,System.Int32)">
      <summary> Constructs a new PixelMemory object with memory allocated by GlobalAlloc. </summary>
      <param name="height"> The height of the image. </param>
      <param name="rowStride"> The number of bytes in a scanline rounded up to the next multiple of 4. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.GlobalAllocPixelMemory.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary> Constructs a new PixelMemory object with memory allocated by GlobalAlloc. </summary>
      <param name="numBytes"> The total number of bytes occupied by this image.  Typically this will be height *
            rowstride, but it could be larger if there is space needed after the last scanline. </param>
      <param name="height"> The height of the image. </param>
      <param name="rowStride"> The number of bytes in a scanline rounded up to the next multiple of 4. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.GlobalAllocPixelMemory.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary> Constructs a new PixelMemory object with memory allocated by GlobalAlloc. </summary>
      <param name="numBytes"> The total number of bytes occupied by this image.  Typically this will be height *
            rowstride, but it could be larger if there is space needed after the last scanline. </param>
      <param name="height"> The height of the image. </param>
      <param name="rowStride"> The number of bytes in a scanline rounded up to the next multiple of 4. </param>
      <param name="zeroMemory"> Indicates whether allocated memory should be cleared or not. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.GlobalAllocPixelMemory.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary> Constructs a new PixelMemory object with memory allocated by GlobalAlloc. </summary>
      <param name="numBytes"> The total number of bytes occupied by this image.  Typically this will be height *
            rowstride, but it could be larger if there is space needed before or after the last scanline. </param>
      <param name="height"> The height of the image. </param>
      <param name="rowStride"> The number of bytes in a scanline rounded up to the next multiple of 4. </param>
      <param name="offsetToFirstScanline"> An offset to the first scanline in the image.  Typically, this is zero, but in
            some images, there is header information before the first scanline. </param>
      <param name="zeroMemory"> Indicates whether allocated memory should be cleared or not. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.GlobalAllocPixelMemory.#ctor(System.Int64,System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Memory.GlobalAllocPixelMemory" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.GlobalAllocPixelMemory.#ctor(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary> Constructs a new PixelMemory object with memory allocated by GlobalAlloc in the provided pointer.
            </summary>
      <param name="memoryStart"> A pointer to the start at memory.  MemoryStart must be allocated by GlobalAlloc. </param>
      <param name="numBytes"> The total number of bytes occupied by this image.  Typically this will be height *
            rowstride, but it could be larger if there is space needed before or after the last scanline. </param>
      <param name="height"> The height of the image. </param>
      <param name="rowStride"> The number of bytes in a scanline rounded up to the next multiple of 4. </param>
      <param name="offsetToFirstScanline"> An offset to the first scanline in the image.  Typically, this is zero, but in
            some images, there is header information before the first scanline </param>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.GlobalAllocPixelMemory.#ctor(System.IntPtr,System.Int64,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Memory.GlobalAllocPixelMemory" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.GlobalAllocPixelMemory.LLAllocateMemory(System.Int32,System.Boolean)">
      <summary> Allocates memory using GlobalAlloc. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.GlobalAllocPixelMemory.LLAllocateMemory(System.Int64,System.Boolean)"></member>
    <member name="M:Atalasoft.Imaging.Memory.GlobalAllocPixelMemory.LLClone">
      <summary> Creates a deep copy of this object. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.GlobalAllocPixelMemory.LLFreeMemory(System.IntPtr)">
      <summary> Frees the memory occupied by this object using GlobalFree. </summary>
      <param name="pointer"> The pointer to free. </param>
    </member>
    <member name="T:Atalasoft.Imaging.Memory.IArrayScanline"></member>
    <member name="M:Atalasoft.Imaging.Memory.IArrayScanline.LLReadFromScanline(System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Atalasoft.Imaging.Memory.IArrayScanline.LLWriteToScanline(System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)"></member>
    <member name="T:Atalasoft.Imaging.Memory.IContiguous"></member>
    <member name="T:Atalasoft.Imaging.Memory.IDirectScanlineAccess">
      <summary> This interface is used for defining flavors of PixelMemory that allow direct access to scanlines.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.IDirectScanlineAccess.GetScanLinePtr(System.Int32)">
      <summary> Returns an IntPtr to the ith scanline in an image. </summary>
      <param name="i"> The index of the scanline. </param>
      <returns> An IntPtr which points to the first byte in the scanline. </returns>
    </member>
    <member name="P:Atalasoft.Imaging.Memory.IDirectScanlineAccess.IsContiguous">
      <summary> Indicates whether or not the PixelMemory is contiguous in memory. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Memory.ManagedPixelMemory">
      <summary> Constructs a new PiixelMemory object using memory from the managed heap for the image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.ManagedPixelMemory.#ctor(System.Int32,System.Int32)">
      <summary> Constructs a new ManagedPixelMemory object. </summary>
      <param name="height">
        <para>The height of the image in scan lines</para>
      </param>
      <param name="rowStride"> The length of a scan line in bytes.  This should be a multiple of 4. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.ManagedPixelMemory.#ctor(System.Int64,System.Int32,System.Int32,System.Int32)">
      <summary> Constructs a new ManagedPixelMemory object. </summary>
      <param name="numBytes"> The total number of bytes needed for the memory.  This should be no less than height *
            rowStride + offsetToFirstScanline, but it can be more. </param>
      <param name="height">
        <para>The height of the image in scan lines</para>
      </param>
      <param name="rowStride"> The length of a scan line in bytes.  This should be a multiple of 4. </param>
      <param name="offsetToFirstScanline"> The offset in bytes to the first scan line from the start of memory. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.ManagedPixelMemory.DisposeManagedResources"></member>
    <member name="M:Atalasoft.Imaging.Memory.ManagedPixelMemory.DisposeUnmanagedResources"></member>
    <member name="M:Atalasoft.Imaging.Memory.ManagedPixelMemory.GetScanLinePtr(System.Int32)">
      <summary> Returns a pointer to the specified scan line. </summary>
      <param name="i"> The index to the scan line.  This value should be greater than or equal to 0 and less than the
            image height. </param>
    </member>
    <member name="P:Atalasoft.Imaging.Memory.ManagedPixelMemory.IsContiguous">
      <summary> Indicates whether or not the memory is contiguous. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.ManagedPixelMemory.LLClone"></member>
    <member name="M:Atalasoft.Imaging.Memory.ManagedPixelMemory.LLGetHeight"></member>
    <member name="M:Atalasoft.Imaging.Memory.ManagedPixelMemory.LLGetPixelAccessor"></member>
    <member name="M:Atalasoft.Imaging.Memory.ManagedPixelMemory.LLGetRowStride"></member>
    <member name="M:Atalasoft.Imaging.Memory.ManagedPixelMemory.LLLock"></member>
    <member name="M:Atalasoft.Imaging.Memory.ManagedPixelMemory.LLUnlock"></member>
    <member name="T:Atalasoft.Imaging.Memory.MemoryUseEventArgs">
      <summary> This class is used by all memory handling events. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.MemoryUseEventArgs.#ctor(System.Int64,System.Int64,System.Int64)">
      <summary> Constructs a new MemoryUseEventArgs object. </summary>
      <param name="memoryInUse"> The current amount of memory in use. </param>
      <param name="highWatermark"> The current high water mark for reporting high memory usage. </param>
      <param name="change"> The last change in memory - this is positive for increases and negative for decreases.
            </param>
    </member>
    <member name="P:Atalasoft.Imaging.Memory.MemoryUseEventArgs.Change">
      <summary> The last change in memory - this is positive for increases and negative for decreases. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Memory.MemoryUseEventArgs.HighWatermark">
      <summary> The current high water mark for reporting high memory usage. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Memory.MemoryUseEventArgs.MemoryInUse">
      <summary> The current amount of memory in use. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Memory.MemoryUseEventHandler">
      <summary> This delegate defines the type that is used for all PixelMemoryTracker events. </summary>
      <param name="sender"> The object raising the event. </param>
      <param name="e"> A MemoryUseEventArgs object indicating the change in memory. </param>
    </member>
    <member name="T:Atalasoft.Imaging.Memory.PixelAccessor">
      <summary> This is an abstract object that is used to get direct access to the pixels of an image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.#ctor(Atalasoft.Imaging.Memory.PixelMemory)">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Memory.PixelAccessor" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.AcquireNextScanline">
      <summary> Acquires the next scanline in sequence for this image. </summary>
      <returns> Returns an array of bytes or null if the next scanline would be outside the image's bounds. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.AcquirePreviousScanline">
      <summary> Acquires the previous scanline in the image. </summary>
      <returns> Returns an array of bytes or null if the previous scanline would be outside the image's bounds. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.AcquireScanline(System.Int32)">
      <summary> Aquires a scanline of data for accessing. </summary>
      <param name="index"> The index of the scanline. </param>
      <returns> An array of bytes representing the data in the scanline. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.Dispose">
      <summary> Disposes this PixelAccessor and all its managed and unmanaged resources. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.Dispose(System.Boolean)">
      <summary> Disposes this PixelAccessor and all its managed and unmanaged resources. </summary>
      <param name="disposing"> If disposing is true, PixelAccessor will dispose its managed resources and its unmanaged
            resources.  If disposing is false, PixelMemory will dispose only its unmanaged resources. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.DisposeManagedResources">
      <summary> Disposed any managed objects that implement IDisposable </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.DisposeUnmanagedResources">
      <summary> Disposes any unmanaged resources such as memory. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.Finalize"></member>
    <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.GetReadOnlyColumn(System.Int32,System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.GetReadOnlyColumnSection(System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.GetReadOnlyScanline(System.Int32)">
      <summary> Gets the contents of a scanline, allocating memory for the data. </summary>
      <param name="index"> The index of the scanline to get. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.GetReadOnlyScanline(System.Int32,System.Byte[])">
      <summary> Copies the contents of a scanline into the supplied array </summary>
      <param name="index"> The scanline to get. </param>
      <param name="data"> An array of bytes to hold the scanline.  This array must be at least as long the image's
            RowStride. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.GetReadOnlyScanlineSection(System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)"></member>
    <member name="P:Atalasoft.Imaging.Memory.PixelAccessor.Height">
      <summary> Returns the height of the image in scanlines. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.LLAcquireScanline(System.Int32)">
      <summary> Subclasses of PixelAccessor implement this method to acquire a pointer to a scanline. </summary>
      <param name="index"> The index of the scanline to access. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.LLReleaseScanline(System.Int32,System.IntPtr)">
      <summary> Subclasses of PixelAccessor implement this method to release a previously acquired scanline </summary>
      <param name="index"> The index of the scanline to release. </param>
      <param name="p"> A pointer to the scanline, returned by a previous call to AcquireScaline, AcquireNextScanline, or
            AcquirePreviousScanline. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.NotifyAccessorReleased">
      <summary> This method is called whenever an accessor has been released. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.NotifyAccessorReleasing">
      <summary> This method is called when a PixelAccessor is about to be released. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Memory.PixelAccessor.Owner">
      <summary> Returns the PixelMemory object that created this PixelAccessor. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Memory.PixelAccessor.OwnerValid">
      <summary> Indicates whether or not the PixelMemory which created this PixelAccessor is still valid. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.Release">
      <summary> Releases a PixelAccessor back to the PixelMemory object that owns it. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.ReleaseScanline">
      <summary> Releases the last scanline acquired. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.Reset">
      <summary> Resets the pixel accessor so that AcquireNextScanline will acquire the first scanline in the image.
            </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Memory.PixelAccessor.RowStride">
      <summary> The number of bytes contained in a scanline, rounded up to the next multiple of 4. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Memory.PixelAccessor.Valid">
      <summary> Returns true if this PixelAccessor is still valid. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.WriteColumn(System.Int32,System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.WriteColumnSection(System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)"></member>
    <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.WriteToScanline(System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)"></member>
    <member name="T:Atalasoft.Imaging.Memory.PixelMemory">
      <summary> PixelMemory is an abstract class that defines how an image's pixels are represented in memory, how they
            are allocated, deallocated, and accessed. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.PixelMemory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Memory.PixelMemory" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.PixelMemory.AcquirePixelAccessor">
      <summary> Returns an object that inherits from PixelAccessor that is used to get to an image's pixel data.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.PixelMemory.Clone">
      <summary> Creates a deep copy of this image and its memory. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.PixelMemory.Dispose">
      <summary> Disposes this PixelMemory and all its managed and unmanaged resources. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.PixelMemory.Dispose(System.Boolean)">
      <summary> Disposes this PixelMemory and all its managed and unmanaged resources. </summary>
      <param name="disposing"> If disposing is true, PixelMemory will dispose its managed resources and its unmanaged
            resources.  If disposing is false, PixelMemory will dispose only its unmanaged resources. </param>
    </member>
    <member name="P:Atalasoft.Imaging.Memory.PixelMemory.Disposed">
      <summary> Indicates whether or the PixelMemory has been disposed. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.PixelMemory.DisposeManagedResources">
      <summary> Disposes any unmanaged resources that implement IDisposable </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.PixelMemory.DisposeUnmanagedResources">
      <summary> Disposes and unmanaged resources, such as memory not claimed by the garbage collector. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.PixelMemory.Finalize"></member>
    <member name="P:Atalasoft.Imaging.Memory.PixelMemory.Height">
      <summary> Returns the height of the image represented. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Memory.PixelMemory.IsLocked">
      <summary> Indicates whether or not the PixelMemory is currently locked. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.PixelMemory.LLClone">
      <summary> Subclasses of PixelMemory implement this method to create a deep copy of the object. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.PixelMemory.LLGetHeight">
      <summary> Subclasses of PixelMemory implement this method to return the height of the image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.PixelMemory.LLGetPixelAccessor">
      <summary> Subclasses of PixelMemory implement this method to return a new PixelAccessor object suitable for their
            particular version of PixelMemory. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.PixelMemory.LLGetRowStride">
      <summary> Subclasses of PixelMemory implement this method to return the number of bytes necessary for a row of
            pixels.  This number should be rounded up to the next multiple of 4 bytes. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.PixelMemory.LLLock">
      <summary> Subclasses of PixelMemory implement this method to lock the memory. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.PixelMemory.LLUnlock">
      <summary> Subclasses of PixelMemory implement this method to unlock the memory. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.PixelMemory.Lock"></member>
    <member name="M:Atalasoft.Imaging.Memory.PixelMemory.PixelDataFromPixelMemory(Atalasoft.Imaging.AtalaImage)">
      <summary> Returns an IntPtr to the first scanline of an image if this version of PixelMemory supports that
            operation, IntPtr.Zero is returned otherwise. </summary>
      <param name="image"> An AtalaImage object. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.PixelMemory.PixelDataFromPixelMemory(Atalasoft.Imaging.Memory.PixelMemory)">
      <summary> Returns an IntPtr to the first scanline of an image if this version of PixelMemory supports that
            operation, IntPtr.Zero is returned otherwise. </summary>
      <param name="pm"> A pixel memory object. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.PixelMemory.PointerSum(System.IntPtr,System.Int32)">
      <summary>
            Returns an IntPtr that is offset by the provided amount.
            </summary>
      <param name="p">An IntPtr</param>
      <param name="offset">An offset in bytes to add to the pointer</param>
      <returns>An IntPtr that has been offset by the provided amount.</returns>
    </member>
    <member name="P:Atalasoft.Imaging.Memory.PixelMemory.RowStride">
      <summary> Returns the number of bytes in a row of this image.  The number is always rounded up to the next multiple
            of 4. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.PixelMemory.ThrowOnNonContiguous(Atalasoft.Imaging.AtalaImage)">
      <summary> This is a utility method to throw an exception if a PixelMemory object is not represented by a single
            contiguous block of memory. </summary>
      <param name="image"> An AtalaImage object. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.PixelMemory.ThrowOnNonContiguous(Atalasoft.Imaging.Memory.PixelMemory)">
      <summary> This is a utility method to throw an exception if a PixelMemory object is not represented by a single
            contiguous block of memory. </summary>
      <param name="pm"> A pixel memory object. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.PixelMemory.Unlock"></member>
    <member name="T:Atalasoft.Imaging.Memory.PixelMemoryAllocator">
      <summary> This delegate is used to define a method to allocate pixel memory. </summary>
      <param name="factoryParameters"> The parameters used to control how the PixelMemory object will be allocated.
            </param>
      <param name="o"> A user supplied object to control memory allocation. </param>
    </member>
    <member name="T:Atalasoft.Imaging.Memory.PixelMemoryFactory">
      <summary> PixelMemoryFactory is a singleton object that is used for allocating all image memory in dotImage.  The
            object is accessed through the static <see cref="P:Atalasoft.Imaging.Memory.PixelMemoryFactory.Factory" /> property. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.PixelMemoryFactory.Allocate(Atalasoft.Imaging.Memory.PixelMemoryFactoryParameters)">
      <summary> Allocates a new PixelMemory object using the supplied parameters. </summary>
      <param name="factoryParameters"> The parameters used to control how the PixelMemory object will be allocated.
            </param>
    </member>
    <member name="P:Atalasoft.Imaging.Memory.PixelMemoryFactory.Allocator">
      <summary> Sets or gets the PixelMemoryAllocator that will be used to allocate PixelMemory. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Memory.PixelMemoryFactory.AllocatorObject">
      <summary> Sets or gets and object passed to the Allocator delegate. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Memory.PixelMemoryFactory.DefaultAllocator">
      <summary> Gets the default allocator that is used by dotImage. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Memory.PixelMemoryFactory.Factory">
      <summary> Gets the singleton object used for memory allocation. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Memory.PixelMemoryFactoryParameters">
      <summary> This class is used to control how PixelMemory is allocated by the PixelMemoryFactory </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.PixelMemoryFactoryParameters.#ctor(System.Int32,System.Int32)">
      <summary> Constructs a new PixelMemoryFactoryParameters object. </summary>
      <param name="height"> The height of the image in scan lines </param>
      <param name="rowStride"> The length of a scan line in bytes.  This should be a multiple of 4. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.PixelMemoryFactoryParameters.#ctor(System.Int64,System.Int32,System.Int32)">
      <summary> Constructs a new PixelMemoryFactoryParameters object. </summary>
      <param name="numBytes"> The total number of bytes needed for the memory.  This should be no less than height *
            rowStride + offsetToFirstScanline, but it can be more. </param>
      <param name="height"> The height of the image in scan lines </param>
      <param name="rowStride"> The length of a scan line in bytes.  This should be a multiple of 4. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.PixelMemoryFactoryParameters.#ctor(System.Int64,System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary> Constructs a new PixelMemoryFactoryParameters object. </summary>
      <param name="numBytes"> The total number of bytes needed for the memory.  This should be no less than height *
            rowStride + offsetToFirstScanline, but it can be more. </param>
      <param name="height"> The height of the image in scan lines </param>
      <param name="rowStride"> The length of a scan line in bytes.  This should be a multiple of 4. </param>
      <param name="offsetToFirstScanline"> The offset in bytes to the first scan line from the start of memory. </param>
      <param name="zeroMemory"> Indicates whether or not memory should be set to zero. </param>
    </member>
    <member name="P:Atalasoft.Imaging.Memory.PixelMemoryFactoryParameters.Height">
      <summary>
        <para>Sets or gets the requested height of the image in scan lines</para>
      </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Memory.PixelMemoryFactoryParameters.NumBytes">
      <summary> Sets or gets the requested total number of bytes needed for the memory.  This should be no less than
            height * rowStride + offsetToFirstScanline, but it can be more. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Memory.PixelMemoryFactoryParameters.OffsetToFirstScanline">
      <summary> Sets or gets the offset in bytes to the first scan line from the start of memory. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Memory.PixelMemoryFactoryParameters.RowStride">
      <summary> Sets or gets the length of a scan line in bytes.  This should be a multiple of 4. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Memory.PixelMemoryFactoryParameters.ZeroMemory">
      <summary> Sets or gets whether or not memory will be set to zero upon allocation </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Memory.PixelMemoryLocker">
      <summary> PixelMemoryLocker is a utility class to help manage the locking and unlocking of memory.  By constructing
            a PixelMemoryLocker object in a using block, PixelMemory will be automatically locked on entrance and exit of the
            block. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.PixelMemoryLocker.#ctor(Atalasoft.Imaging.AtalaImage)">
      <summary> Constructs an object that will automatically lock and unlock the PixelMemory for the supplied AtalaImage.
            </summary>
      <param name="image"> An image to be locked.  If image is null, PixelMemoryLocker will do nothing. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.PixelMemoryLocker.#ctor(Atalasoft.Imaging.Memory.PixelMemory)">
      <summary> Constructs an object that will automatically lock and unlock the supplied PixelMemory. </summary>
      <param name="mem"> The PixelMemory object to be locked.  If mem is null, it will be ignored. </param>
    </member>
    <member name="T:Atalasoft.Imaging.Memory.PixelMemoryTracker">
      <summary> This is a singleton class that is used for tracking memory used by images. </summary>
    </member>
    <member name="E:Atalasoft.Imaging.Memory.PixelMemoryTracker.DroppedBelowHighWatermark">
      <summary> This event is fired is MemoryInUse drops below the HighWatermark property of PixelMemoryTracker </summary>
    </member>
    <member name="E:Atalasoft.Imaging.Memory.PixelMemoryTracker.ExceededHighWatermark">
      <summary> This event is fired is MemoryInUse exceeds the HighWatermark property of PixelMemoryTracker </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Memory.PixelMemoryTracker.HighWatermark">
      <summary> Sets or gets a trigger point for memory events. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Memory.PixelMemoryTracker.Memory">
      <summary> Returns a singleton object used for tracking memory. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.PixelMemoryTracker.MemoryAllocated(System.IntPtr,System.Int64)">
      <summary> This method is used to report an allocation of image memory. </summary>
      <param name="location"> A pointer to the first byte of image memory. </param>
      <param name="size"> The number of bytes used by this block of memory. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.PixelMemoryTracker.MemoryAllocated(System.Object,System.Int64)"></member>
    <member name="M:Atalasoft.Imaging.Memory.PixelMemoryTracker.MemoryFreed(System.IntPtr)">
      <summary> Reports a block of memory as free. </summary>
      <param name="location"> A pointer to the memory about to be freed. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.PixelMemoryTracker.MemoryFreed(System.Object)"></member>
    <member name="P:Atalasoft.Imaging.Memory.PixelMemoryTracker.MemoryInUse">
      <summary> Indicates the total amount of memory in use by AtalaImage objects. </summary>
    </member>
    <member name="E:Atalasoft.Imaging.Memory.PixelMemoryTracker.MemoryInUseChanged">
      <summary> An event for reporting changes in the current memory use. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.PixelMemoryTracker.MemoryReallocated(System.IntPtr,System.IntPtr,System.Int64)">
      <summary> This method is used to report when a block of allocated image memory has been reallocated. </summary>
      <param name="oldLocation"> The previous location in memory </param>
      <param name="newLocation"> The new location in memory </param>
      <param name="newSize"> The size of the new block. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.PixelMemoryTracker.OnDroppedBelowHighWatermark(Atalasoft.Imaging.Memory.MemoryUseEventArgs)">
      <summary> This method handles when memory usage has dropped below the high water mark. </summary>
      <param name="e"> A MemoryUseEventArgs object indicating the change in memory. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.PixelMemoryTracker.OnExceededHighWatermark(Atalasoft.Imaging.Memory.MemoryUseEventArgs)">
      <summary> This method handles when memory usage has exceeded the high water mark </summary>
      <param name="e"> A MemoryUseEventArgs object indicating the change in memory. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.PixelMemoryTracker.OnMemoryInUseChanged(Atalasoft.Imaging.Memory.MemoryUseEventArgs)">
      <summary> This method handles when memory usage has changed in some way </summary>
      <param name="e"> A MemoryUseEventArgs object indicating the change in memory. </param>
    </member>
    <member name="T:Atalasoft.Imaging.Memory.ResidentPixelMemory">
      <summary> This is a class used to represent PixelMemory that is resident and for which allocation and deallocation
            are controlled. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.ResidentPixelMemory.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Memory.ResidentPixelMemory" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.ResidentPixelMemory.#ctor(System.Int64,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Memory.ResidentPixelMemory" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.ResidentPixelMemory.AllocateMemory(System.Int64,System.Boolean)">
      <summary> Allocates memory for this PixelMemory object and reports it for tracking. </summary>
      <param name="numBytes"> The nubmer of bytes to allocate. </param>
      <param name="zeroMemory"> Indicates whether or not the memory should be cleared. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.ResidentPixelMemory.DisposeManagedResources">
      <summary> Disposes any unmanaged resources. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.ResidentPixelMemory.DisposeUnmanagedResources">
      <summary> Disposes the memory used by this object. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.ResidentPixelMemory.FreeMemory">
      <summary> Frees memory. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.ResidentPixelMemory.GetScanLinePtr(System.Int32)">
      <summary> Gets a pointer to the a given scanline. </summary>
      <param name="index"> An index to a scanline in an image. </param>
    </member>
    <member name="P:Atalasoft.Imaging.Memory.ResidentPixelMemory.IsContiguous">
      <summary> Returns true. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.ResidentPixelMemory.LLAllocateMemory(System.Int32,System.Boolean)">
      <summary> Subclasses of ResidentPixelMemory implement this method to allocate memory. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.ResidentPixelMemory.LLAllocateMemory(System.Int64,System.Boolean)">
      <summary> Subclasses of ResidentPixelMemory implement this method to allocate memory. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.ResidentPixelMemory.LLFreeMemory(System.IntPtr)">
      <summary> Subclasses of ResidentPixelMemory implement this method to free memory. </summary>
      <param name="p"> The pointer to free. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.ResidentPixelMemory.LLGetHeight">
      <summary> Returns the height of the image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.ResidentPixelMemory.LLGetPixelAccessor">
      <summary> Returns a suitable PixelAccesor object for this PixelMemory. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.ResidentPixelMemory.LLGetRowStride">
      <summary> Returns the size of a scanline in bytes, rounded up to the next multiple of 4. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Memory.ResidentPixelMemory.LLPixelMemoryStart">
      <summary> Returns a pointer to the start of memory. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Memory.ResidentPixelMemory.OffsetToFirstScanline">
      <summary> Returns an offset to the first scanline of the image. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Memory.ResidentPixelMemory.PixelData">
      <summary> Returns a pointer to the first scanline in the image. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Memory.ResidentPixelMemory.RerportMemoryAllocated(System.IntPtr,System.Int64)"></member>
    <member name="P:Atalasoft.Imaging.Memory.ResidentPixelMemory.SizeInBytes">
      <summary> Returns the number of bytes used by the memory for this image. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Metadata.ComTextCollection">
      <summary>
        <para>Contains a collection of COM text tags and methods to access COM Text data from an image.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.ComTextCollection.#ctor">
      <summary> Initialize a new instance of this COM Text tag. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.ComTextCollection.#ctor(System.IO.Stream)">
      <summary> Obsolete </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.ComTextCollection.#ctor(System.String)">
      <summary> Obsolete </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.ComTextCollection.Add(Atalasoft.Imaging.Metadata.ComTextTag)">
      <summary> Add a new COM Text marker to this collection. </summary>
      <param name="tag"> The <see cref="T:Atalasoft.Imaging.Metadata.ComTextTag" /> to add. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.ComTextCollection.Contains(Atalasoft.Imaging.Metadata.ComTextTag)"></member>
    <member name="M:Atalasoft.Imaging.Metadata.ComTextCollection.CopyTo(Atalasoft.Imaging.Metadata.ComTextTag[],System.Int32)">
      <summary> Copies items from this collection into an array. </summary>
      <param name="comText"> An array of <STRONG>ComTextTag</STRONG> objects that will hold the items. </param>
      <param name="index"> An index in the array where the data will be copied. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.ComTextCollection.IndexOf(Atalasoft.Imaging.Metadata.ComTextTag)"></member>
    <member name="M:Atalasoft.Imaging.Metadata.ComTextCollection.Insert(System.Int32,Atalasoft.Imaging.Metadata.ComTextTag)"></member>
    <member name="P:Atalasoft.Imaging.Metadata.ComTextCollection.Item(System.Int32)">
      <summary> Returns the <STRONG>ComTextTag</STRONG> by index in the collection and allows the COM Text tags to be
            enumerated. </summary>
      <param name="index"> The index of the item to retrieve. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.ComTextCollection.Remove(Atalasoft.Imaging.Metadata.ComTextTag)">
      <summary> Remove a specified COM Text tag from this collection. </summary>
      <param name="tag"> The <see cref="T:Atalasoft.Imaging.Metadata.ComTextTag" /> to remove. </param>
    </member>
    <member name="T:Atalasoft.Imaging.Metadata.ComTextParser">
      <summary> Parses COM Markers from a JPEG or PNG image into a collection of COM Text tags. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.ComTextParser.#ctor">
      <summary> Initializes a new instance of <STRONG>ComTextParser</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.ComTextParser.ParseFromImage(System.IO.Stream)">
      <summary> Parses COM Text data from an image file stream. </summary>
      <param name="imageStream"> The image file stream to parse data from. </param>
      <returns> A <STRONG>ComTextCollection</STRONG> containing all COM Text tags. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.ComTextParser.ParseFromImage(System.String)">
      <summary> Parses COM Text data from an image file. </summary>
      <param name="imageFile"> The image file to parse data from. </param>
      <returns> Returns a <STRONG>ComTextCollection</STRONG> containing all COM Text data. </returns>
    </member>
    <member name="T:Atalasoft.Imaging.Metadata.ComTextTag">
      <summary> Contains the data for a specified COM Text tag including the key and text. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.ComTextTag.#ctor">
      <summary> Initialize a new instance of this COM Text tag. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.ComTextTag.#ctor(System.String)">
      <summary> Initialize a new instance of this COM Text tag specifying the text. </summary>
      <param name="text"> The text contained in this COM Text Tag. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.ComTextTag.#ctor(System.String,System.String)">
      <summary> Initialize a new instance of this COM Text tag specifying the key and text. </summary>
      <param name="text"> The text contained in this COM Text Tag. </param>
      <param name="key"> A unique indentifier of the COM Tag for use in PNG images. </param>
    </member>
    <member name="P:Atalasoft.Imaging.Metadata.ComTextTag.Key">
      <summary> Gets or sets a unique indentifier of the COM Tag for use in PNG images. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Metadata.ComTextTag.Text">
      <summary> Gets or sets the text contained in this COM Text Tag. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.ComTextTag.ToString">
      <summary> Returns a text description of the tag. </summary>
      <returns> A text description of the tag. </returns>
    </member>
    <member name="T:Atalasoft.Imaging.Metadata.ExifCollection">
      <summary>
        <para>Contains a collection of EXIF tags.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.ExifCollection.#ctor">
      <summary> Creates a new instance of the <STRONG>ExifCollection</STRONG> class. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.ExifCollection.Add(Atalasoft.Imaging.Metadata.ExifTag)">
      <summary> Adds a new <STRONG>ExifTag</STRONG> to this collection. </summary>
      <param name="tag"> The EXIF tag to add. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.ExifCollection.Contains(Atalasoft.Imaging.Metadata.ExifTag)">
      <summary> Returns a value indicating if a particular EXIF Tag exists in the collection. </summary>
      <param name="source"> The EXIF tag to test. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.ExifCollection.CopyTo(Atalasoft.Imaging.Metadata.ExifTag[],System.Int32)">
      <summary> Copies items from this collection into an array. </summary>
      <param name="tags"> An array of <STRONG>ExifTags</STRONG> to hold the items. </param>
      <param name="index"> An index in the array where the data will be copied. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.ExifCollection.IndexOf(Atalasoft.Imaging.Metadata.ExifTag)">
      <summary> Returns the index value of an <STRONG>ExifTag</STRONG> found in the collection. </summary>
      <param name="tag"> The specific tag to search for. </param>
      <returns> Returns -1 if the tag was not found. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.ExifCollection.Insert(System.Int32,Atalasoft.Imaging.Metadata.ExifTag)">
      <summary> Insert an EXIF Tag into the collection at the specified index. </summary>
      <param name="index"> The index to insert into. </param>
      <param name="source"> The tag to insert. </param>
    </member>
    <member name="P:Atalasoft.Imaging.Metadata.ExifCollection.Item(System.Int32)">
      <summary> Returns the <STRONG>ExifTag</STRONG> by index in the collection and allows the EXIF tags to be enumerated.
            </summary>
      <param name="index"> The zero based index in the collection. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.ExifCollection.LookupTag(Atalasoft.Imaging.Metadata.ExifTagID,Atalasoft.Imaging.Metadata.ExifTagIfd)">
      <summary> Returns an <STRONG>ExifTag</STRONG> based on an Exif ID and IFD. </summary>
      <param name="id"> The ID of the EXIF tag to lookup. </param>
      <param name="ifd"> The IFD to search through. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.ExifCollection.LookupTag(System.Int32,Atalasoft.Imaging.Metadata.ExifTagIfd)">
      <summary> Returns an <STRONG>ExifTag</STRONG> based on an Exif ID and IFD. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.ExifCollection.LookupTag(System.String)">
      <summary>Deprecated</summary>
      <param name="description"> A textual description of the ExifTag (for example, "DateTime"). </param>
    </member>
    <member name="P:Atalasoft.Imaging.Metadata.ExifCollection.MakernoteHeader">
      <summary> Gets or sets the makernote header. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.ExifCollection.Remove(Atalasoft.Imaging.Metadata.ExifTag)">
      <summary> Remove a specified <STRONG>ExifTag</STRONG> from the collection. </summary>
      <param name="tag"> The tag to remove </param>
    </member>
    <member name="P:Atalasoft.Imaging.Metadata.ExifCollection.ThumbnailStream">
      <summary> Gets or sets the thumbnail stream contained within this EXIF data. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.ExifCollection.ToByteArray">
      <summary> Creates a byte array of the EXIF data that can be inserted into an image. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Metadata.ExifParser">
      <summary> Parses EXIF data from JPEG or TIFF images into a collection of EXIF tags. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.ExifParser.#ctor">
      <summary> Initializes a new instance of <STRONG>ExifParser</STRONG>. </summary>
    </member>
    <member name="E:Atalasoft.Imaging.Metadata.ExifParser.CodecError">
      <summary> This event is used by the <STRONG>ExifParser </STRONG>object to report errors that occur when parsing an
            image. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Metadata.ExifParser.FormatTags"></member>
    <member name="M:Atalasoft.Imaging.Metadata.ExifParser.OnError(Atalasoft.Imaging.Codec.CodecErrorEventArgs)"></member>
    <member name="M:Atalasoft.Imaging.Metadata.ExifParser.ParseFromByteArray(System.Byte[])">
      <summary> Parses a byte array of EXIF data. </summary>
      <param name="exifData"> An array containing the entire EXIF string to parse. </param>
      <returns> An <see cref="T:Atalasoft.Imaging.Metadata.ExifCollection" /> holding a list of all the EXIF values that were read.  This list will be
            empty if no values were read. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.ExifParser.ParseFromImage(System.IO.Stream)">
      <summary> Parses EXIF data from a JPEG or TIFF image file stream. </summary>
      <param name="imageStream"> The image file stream to parse data from. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.ExifParser.ParseFromImage(System.IO.Stream,System.Int32)">
      <summary> Parses EXIF data from an image file stream, specifying the frame index of a multipage TIFF. </summary>
      <param name="imageStream"> The image file stream to parse data from. </param>
      <param name="frameIndex"> The zero based frame index of a multipage TIFF image to load EXIF data from. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.ExifParser.ParseFromImage(System.String)">
      <summary> Parses EXIF data from a JPEG or TIFF image file. </summary>
      <param name="imageFile"> The image filename to parse data from. </param>
      <returns> An <STRONG>ExifCollection</STRONG> containing all EXIF information. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.ExifParser.ParseFromImage(System.String,System.Int32)">
      <summary> Parses EXIF data from an image file, specifying the frame index of a multipage TIFF. </summary>
      <param name="imageFile"> The image filename to parse data from. </param>
      <param name="frameIndex"> The zero based frame index of a multipage TIFF image to load EXIF data from. </param>
    </member>
    <member name="P:Atalasoft.Imaging.Metadata.ExifParser.ThumbnailCallback"></member>
    <member name="T:Atalasoft.Imaging.Metadata.ExifTag">
      <summary> Contains the data of this Exif tag including ID, IFD, value, and description. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.ExifTag.#ctor(Atalasoft.Imaging.Metadata.ExifTagID,Atalasoft.Imaging.Metadata.ExifTagIfd,System.Object)">
      <summary> Initializes a new instance of <STRONG>ExifTag</STRONG>. </summary>
      <param name="id"> The EXIF ID. </param>
      <param name="ifd"> The EXIF IFD. </param>
      <param name="data"> The EXIF Data </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.ExifTag.#ctor(Atalasoft.Imaging.Metadata.ExifTagID,Atalasoft.Imaging.Metadata.ExifTagIfd,System.Object,Atalasoft.Imaging.Metadata.TiffTagDataType)">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Metadata.ExifTag" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.ExifTag.#ctor(System.Int32,Atalasoft.Imaging.Metadata.ExifTagIfd,System.Object)">
      <summary> Initializes a new instance of <STRONG>ExifTag</STRONG>. </summary>
      <param name="id"> The ExifID </param>
      <param name="ifd"> The ExifIdf </param>
      <param name="data"> The object data </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.ExifTag.#ctor(System.Int32,Atalasoft.Imaging.Metadata.ExifTagIfd,System.Object,Atalasoft.Imaging.Metadata.TiffTagDataType)">
      <summary> Initializes a new instance of <STRONG>ExifTag</STRONG>. </summary>
      <param name="id"> The ExifID </param>
      <param name="ifd"> The ExifIfd </param>
      <param name="data"> The object data </param>
      <param name="type"> The tag data type </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.ExifTag.ConvertExifDate(System.String)">
      <summary>
             convert an Exif Date to a recognizeable system date
            </summary>
      <param name="ExifDate">A date string returned from an unformatted Exif tag.</param>
      <returns>The converted <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="P:Atalasoft.Imaging.Metadata.ExifTag.Data">
      <summary> Gets or sets the value of this EXIF tag. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Metadata.ExifTag.Description">
      <summary> This property is deprecated. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Metadata.ExifTag.Ifd">
      <summary> Gets the IFD of this <see cref="T:Atalasoft.Imaging.Metadata.ExifTag" />. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.ExifTag.ToString">
      <summary> Returns a text description of the tag in the form of 'TagDescription: FormattedTagValue' </summary>
      <returns> A text description of the tag. </returns>
    </member>
    <member name="T:Atalasoft.Imaging.Metadata.ExifTagID">
      <summary> Contains an enumeration of standard Exif tag ID's that are known. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ImageWidth"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ImageLength"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.BitsPerSample"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.PhotometricInterpretation"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ImageDescription"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Make"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Model"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.StripOffsets"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Orientation"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SamplesPerPixel"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.RowsPerStrip"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.StripByteCounts"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.XResolution"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.YResolution"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.PlanarConfiguration"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ResolutionUnit"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TransferFunction"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Software"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.DateTime"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Artist"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.WhitePoint"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.PrimaryChromaticities"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.JpegInterchangeFormat"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.JpegInterchangeFormatLength"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.YCbCrCoefficients"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.YCbCrSubSampling"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.YCbCrPositioning"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ReferenceBlackWhite"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Copyright"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ExifIfdPointer"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsInfoIfdPointer"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ExposureTime"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FNumber"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ExposureProgram"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SpectralSensitivity"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.IsoSpeedRatings"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Oecf"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ExifVersion"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.DateTimeOriginal"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.DateTimeDigitized"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ComponentsConfiguration"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CompressedBitsPerPixel"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ShutterSpeedValue"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ApertureValue"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.BrightnessValue"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ExposureBiasValue"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.MaxApertureValue"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SubjectDistance"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.MeteringMode"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.LightSource"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Flash"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FocalLength"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.MakerNote"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.UserComment"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SubsecTime"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SubsecTimeOriginal"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SubsecTimeDigitized"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FlashPixVersion"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ColorSpace"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.PixelXDimension"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.PixelYDimension"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.RelatedSoundFile"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.InteroperabilityIfdPointer"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FlashEnergy"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SpatialFrequencyResponse"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FocalPlaneXResolution"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FocalPlaneYResolution"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FocalPlaneResolutionUnit"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SubjectLocation"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ExposureIndex"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SensingMethod"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FileSource"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SceneType"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CfaPattern"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ImageNumber"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SecurityClassification"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ImageHistory"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TiffEpStandardID"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CustomRendered"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ExposureMode"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.WhiteBalance"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.DigitalZoomRatio"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FocalLengthIn35mmFormat"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SceneCaptureType"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GainControl"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Contrast"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Saturation"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Sharpness"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.DeviceSettingDescription"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SubjectDistanceRange"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ImageUniqueID"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GDALMetaData"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Gamma"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FilmProductCode"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.ImageSourceEK"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CaptureConditionsPAR"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CameraOwner"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SerialNumber"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.UserSelectGroupTitle"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.DealerIDNumber"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CaptureDeviceFID"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsVersionId"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsLatitudeRef"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsLatitude"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsLongitudeRef"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsLongitude"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsAltitudeRef"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsAltitude"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsTimeStamp"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsSatellites"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsStatus"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsMeasureMode"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsDop"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsSpeedRef"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsSpeed"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsTrackRef"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsTrack"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsImgDirectionRef"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsImgDirection"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsMapDatum"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsDestLatitudeRef"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsDestLatitude"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsDestLongitudeRef"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsDestLongitude"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsDestBearingRef"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsDestBearing"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsDestDistanceRef"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.GpsDestDistance"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.InteroperabilityIndex"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.InteroperabilityVersion"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.RelatedImageFileFormat"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.RelatedImageWidth"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.RelatedImageLength"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FujiVersion"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FujiQuality"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FujiSharpness"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FujiWhiteBalance"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FujiColor"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FujiTone"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FujiFlashMode"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FujiFlashStrength"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FujiMacro"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FujiFocusMode"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FujiSlowSynch"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FujiPictureMode"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FujiContTakeBracket"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FujiBlurWarning"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FujiFocusWarning"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FujiAEWarning"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.FujiUnknown"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusSpecialMode"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusJpegQuality"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusMacro"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusDigiZoom"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusSoftwareRelease"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusPictInfo"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusCameraId"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusDataDump"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusDataDump2"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusMakernoteVersion"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusCameraSettings"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusCameraSettings1"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusCameraCompressedImageSize"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusMinoltaThumbnailOffset"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusMinoltaThumbnailOffset1"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusMinoltaThumbnailLength"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusColorMode"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusImageQuality"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusImageQuality1"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusPrintImageMatchingInfo"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusFlashDevice"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusPreviewImageValid"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusPreviewImageStart"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusPreviewImageLength"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusEquipment"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusImageProcessing"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusFousInfo"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusFlashMode"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusBracket"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusFocusMode"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusFocusDistance"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusZoom"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusMacroFocus"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusSharpness"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusColorMatrix"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusBlackLevel"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusBlackLevel1"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusWhiteBalance"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusRedBias"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusBlueBias"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusSerialNumber"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusFlashBias"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusContrast"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusSharpnessFactor"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusColorControl"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusValidBits"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusCoringFilter"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusImageWidth"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusImageHeight"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.OlympusCompressionRatio"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.NikonQuality"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.NikonColorMode"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.NikonImageAdjustment"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.NikonCcdSensitivity"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.NikonWhiteBalance"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.NikonFocus"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.NikonDigitalZoom"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.NikonConverter"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3MakernoteVersion"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3ISOSpeedUsed"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3ColorMode"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3Quality"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3WhiteBalance"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3Sharpening"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3FocusMode"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3FlashSetting"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3AutoFlashMode"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3WhiteBalanceBiasValue"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3WhiteBalanceRedBlueCoeff"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3ISOSelection"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3FlashCompensation"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3ISOSpeedRequested"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3PhotoCornerCoordinates"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3FlashBracketCompensationApplied"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3AEBracketCompensationApplied"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3ImageAdjustment"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3ToneCompensation"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3AuxiliaryLens"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3LensType"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3LensMinMaxFocalLength"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3ManualFocusDistance"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3DigitalZoomFactor"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3FlashUsed"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3AutoFocusArea"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3BracketingShootingMode"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3ColourMode"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3SceneMode"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3LightingType"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3HueAdjustment"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3Saturation"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3NoiseReduction"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3TotalNumberOfShutterReleasesForCamera"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3ImageOptimisation"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3Saturation1"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.Nikon3DigitalVariProgram"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CasioRecordingMode"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CasioQuality"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CasioFocusingMode"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CasioFlashMode"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CasioFlashIntensity"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CasioObjectDistance"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CasioWhiteBalance"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CasioDigitalZoom"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CasioSharpness"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CasioContrast"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CasioSaturation"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CasioCcdSensitivity"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonHeader"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonTagLength1"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonMacroMode"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonSelfTimer"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonQuality"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonFlashMode"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonContinuousDriveMode"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown1_6"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonFocusMode"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown1_8"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown1_9"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonImageSize"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonEasyShootingMode"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonDigitalZoom"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonContrast"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonSaturation"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonSharpness"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonIso"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonMeteringMode"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonFocusType"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonAFPointSelected"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonExposureMode"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown1_21"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonLensType"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonLongFocalLength"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonShortFocalLength"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonFocalUnits"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonMaxAperture"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown1_27"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonFlashActivity"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonFlashDetails"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown1_30"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown1_31"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonFocusContinuos"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown1_33"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown1_34"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown1_35"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonZoomedResolution"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonZoomedResolutionBase"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown1_38"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown1_39"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown1_40"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown1_41"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonColorTone"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown1_43"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown1_44"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown1_45"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown1_46"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonFocalType"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonFocalLength"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonFocalPlaneXSize"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonFocalPlaneYSize"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknownTag3"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknownTag16"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonFileLength"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonTagLength4"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown4_1"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonShotISO"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown4_3"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonTargetAperture"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonTargetExposureTime"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonExposureCompensation"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonWhiteBalance"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown4_8"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonSequenceNumber"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown4_10"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown4_11"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown4_12"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown4_13"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonAFPointUsed"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonFlashBias"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonAutoExposureBracketing"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonAEBBracketValue"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown4_18"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonSubjectDistance"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonFocusDistanceLower"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonFNumber"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonExposureTime"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown4_23"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonBulbDuration"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonAutoRotate"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown4_26"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown4_27"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown4_28"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown4_29"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown4_30"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown4_31"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown5_00"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown5_01"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonPanoramaFrame"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown5_03"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknown5_04"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonPanoramaDirection"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonImageType"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonFirmwareVersion"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonImageNumber"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonOwnerName"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonFileInfoFileNumber"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonFileInfoShutterCount"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonCameraSerialNumber"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknownA_00"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknownA_01"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknownA_02"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknownA_03"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknownA_04"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknownA_05"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknownA_06"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknownA_07"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonUnknownA_08"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonColorTemperature"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonColorMatrix"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRedBalanceAuto"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonBlueBalanceAuto"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRedBalanceDayLight"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonBlueBalanceDayLight"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRedBalanceCloudy"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonBlueBalanceCloudy"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRedBalanceTungsten"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonBlueBalanceTungsten"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRedBalanceFluorescent"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonBlueBalanceFluorescent"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRedBalanceFlash"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonBlueBalanceFlash"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRedBalanceCustom"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonBlueBalanceCustom"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRedBalanceBW"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonBlueBalanceBW"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRedBalanceShade"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonBlueBalanceShade"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonLensInfo1DUnknown0"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonLensInfo1DUnknown1"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonLensInfo1DUnknown2"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonLensInfo1DUnknown3"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonLensInfo1DExposureTime"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonLensInfo1DUnknown5"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonLensInfo1DUnknown6"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonLensInfo1DUnknown7"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonLensInfo1DUnknown8"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonLensInfo1DUnknown9"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonLensInfo1DFocalLength"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonLensInfo1DUnknown11"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonLensInfo1DLensType"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonLensInfo1DShortFocal"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonLensInfo1DLongFocal"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonLensInfo1DFocalType"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonColorTemperature1"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonPictureInfoImageWidth"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonPictureInfoImageHeight"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonPictureInfoImageWidthAsShot"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonPictureInfoImageHeightAsShot"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonPictureInfoImageAFPointsUsed"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonPictureInfoUnknown"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonPreviewImageInfoUnKnown0"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonPreviewImageInfoUnKnown1"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonPreviewImageInfoLength"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonPreviewImageInfoWidth"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonPreviewImageInfoHeight"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonPreviewImageInfoStart"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonPreviewImageInfoFocalPlaneXResolution"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonPreviewImageInfoUnknown7"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonPreviewImageInfoFocalPlaneYResolution"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonTagLength15"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonLongExposureNoiseReduction"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonShutterAELockButtons"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonMirrorLockup"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonTVAVAndExposureLevel"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonAFAssistLight"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonShutterSpeedInAVMode"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonAebSequenceAutoCancellation"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonShutterCurtainSync"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonLensAFStopButtonFNSwitch"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonAutoReductionOfFillFlash"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonMenuButtonReturnPosition"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonSetButtonFuncWhenShooting"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonSensorCleaning"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonSuperImposedDisplay"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonShutterReleaseNoCFCard"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonCameraSettings"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonFocalLength"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonFlashInfo"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonShotInfo"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonPanorama"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonImageType"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonFirmwareVersion"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonImageNumber"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonOwnerName"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonColorInfoD30"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonUnknown11"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonSerialNumber"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonLensInfo1D"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonFileLength"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonCustomFunctions"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonUnknown16"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonUnknown17"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonPictureInfo"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonCustomFunctions1D"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonFileInfo"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonColorInfo"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonWhiteBalanceTable"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonColorTemperature"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonPreviewImageInfo"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.TgCanonUnknownTags"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawColorInfo"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawFileDescription"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawUserComment"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawMakeModel"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawFirmwareVersion"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawROMOperationMode"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawOwnerName"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawImageType"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawOriginalFileName"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawThumbnailFileName"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawTargetImageType"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawShutterReleaseMethod"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawShutterReleaseTiming"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawBaseISO"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawFocalLength"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawShotInfo"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawCameraSettings"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawWhiteSample"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawSensorInfo"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawCustomFunction"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawPictureInfo"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawWhiteBalanceTable"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawColorTemperature"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawColorSpace"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawImageFormat"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawCompressionRatio"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawRecordId"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawSelfTimerTime"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawTargetDistanceSetting"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawSerialNumber"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawTimeStamp"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawImageInfo"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawFlashInfo"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawMeasuredEV"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawFileNumber"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.CanonRawExposureInfo"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SanyoSpecialMode"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SanyoJpegQuality"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SanyoMacro"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SanyoDigitalZoom"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SanyoSoftwareRelease"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SanyoPictInfo"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SanyoCameraID"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SanyoSequentialShotMethod"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SanyoWideRange"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SanyoColourAdjustmentMode"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SanyoQuickShot"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SanyoSelfTimer"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SanyoVoiceMemo"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SanyoRecordShutterRelease"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SanyoFlickerReduce"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SanyoOpticalZoom"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SanyoDigitalZoom1"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SanyoLightSourceSpecial"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SanyoResaved"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SanyoSceneSelect"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SanyoManualFocalDistance"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SanyoFlashMode"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SanyoPrintIMFlag"></member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagID.SanyoDataDump"></member>
    <member name="T:Atalasoft.Imaging.Metadata.ExifTagIfd">
      <summary> Contains an enumeration of standard Exif Ifd's. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagIfd.Main">
      <summary> Primary image data information. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagIfd.Exif">
      <summary> Exif camera information. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagIfd.Interoperability">
      <summary> Exif interoperabliity information. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagIfd.Thumbnail">
      <summary> A thumbnail stored with the image. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagIfd.Gps">
      <summary> GPS Satellite information. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagIfd.MakerNoteUnknown">
      <summary> Camera specific information for an unknown camera make. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagIfd.MakerNoteFujiFilm">
      <summary> Camera specific information for a FujiFilm camera make. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagIfd.MakerNoteOlympus">
      <summary> Camera specific information for an Olympus camera make. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagIfd.MakerNoteNikonType1">
      <summary> Camera specific information for a Nikon camera make. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagIfd.MakerNoteNikonType3">
      <summary> Camera specific information for a Nikon camera make. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagIfd.MakerNoteCasio">
      <summary> Camera specific information for a Casio camera make. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.ExifTagIfd.MakerNoteCanon">
      <summary> Camera specific information for a Canon camera make. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Metadata.ImageMetadataException">
      <summary>
            This exception is thrown when an error with image metadata is detected
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.ImageMetadataException.#ctor">
      <summary> Creates a new instance of ImageMetadataException. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.ImageMetadataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Atalasoft.Imaging.Metadata.ImageMetadataException" /> class</summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.ImageMetadataException.#ctor(System.String)">
      <summary> Creates a new instance of ImageMetadataException specifying the exception message. </summary>
      <param name="message"> The exception message. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.ImageMetadataException.#ctor(System.String,System.Exception)">
      <summary> Creates a new instance of ImageMetadataException specifying the exception message and inner exception.
            </summary>
      <param name="message"> The exception message. </param>
      <param name="innerException"> The inner exception for this error. </param>
    </member>
    <member name="T:Atalasoft.Imaging.Metadata.IptcCollection">
      <summary>
        <para>Contains a collection of IPTC tags.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.#ctor">
      <summary> Initializes an empty collection of <see cref="T:Atalasoft.Imaging.Metadata.IptcTag">IptcTags</see></summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.#ctor(System.IO.Stream)">
      <summary> Creates a new instance of the IptcCollection class specifying the file stream to read the iptc metadata
            from. </summary>
      <param name="stream"> File to retreive iptc data from. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.#ctor(System.IO.Stream,System.Int32)">
      <summary> Creates a new instance of the IptcCollection class specifying the file stream and page index (in a
            multipage TIFF) to read the iptc metadata from. </summary>
      <param name="stream"> File to retreive iptc data from. </param>
      <param name="frameIndex"> The zero based page in a multipage TIFF. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.#ctor(System.String)">
      <summary> Creates a new instance of the IptcCollection class specifying the file to read the iptc metadata from.
            </summary>
      <param name="fileName"> File to retreive iptc data from. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.#ctor(System.String,System.Int32)">
      <summary> Creates a new instance of the IptcCollection class specifying the file and page index (in a multipage
            TIFF) to read the iptc metadata from. </summary>
      <param name="fileName"> File to retreive iptc data from. </param>
      <param name="frameIndex"> The zero based page in a multipage TIFF. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.Add(Atalasoft.Imaging.Metadata.IptcTag)">
      <summary>
            Add a new IptcTag to the image.
            </summary>
      <param name="tag">IptcTag to add.</param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.Contains(Atalasoft.Imaging.Metadata.IptcTag)"></member>
    <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.CopyTo(Atalasoft.Imaging.Metadata.IptcTag[],System.Int32)">
      <summary> Copies items from the collection into an array. </summary>
      <param name="tags"> An array of IptcTag object that will hold the collection items. </param>
      <param name="index"> An index in the array where the data will be copied. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.CreateIptcDataBlock">
      <summary>
            Generate an IPTC data block.
            </summary>
      <param name="dataLen">On return indicates the size of the data block.</param>
      <returns>The data block generated by this function can be used in IS3AddJPGOutputMarker to add an IPTC data block to a JPG image.</returns>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.GetTagDescription(System.Int32)">
      <summary> Returns a textual description based on an IptcID. </summary>
      <param name="id"> The ID of the tag. </param>
      <returns>A text description of an IPTC ID.</returns>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.IndexOf(Atalasoft.Imaging.Metadata.IptcTag)">
      <summary> Returns the index value of an IptcTag. </summary>
      <param name="tag"> The IptcTag to search for. </param>
      <returns> The index of the item or -1 if the item is not in the collection. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.Insert(System.Int32,Atalasoft.Imaging.Metadata.IptcTag)"></member>
    <member name="P:Atalasoft.Imaging.Metadata.IptcCollection.Item(System.Int32)">
      <summary> Returns the IptcTag by index in the collection and allows the Iptc tags to be enumerated. </summary>
      <param name="index"> The zero based index in the collection. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.LookupTag(System.Int32,System.Int32)">
      <summary> Returns an IptcTag based on an IPTC ID and index. </summary>
      <param name="id"> The ID of the tag to look up. </param>
      <param name="index"> The index of the tag to look up. </param>
      <returns> An IptcTag containing the ID and index specified or null (Nothing in Visual Basic) if a match is not
            found. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.LookupTag(System.Int32,System.Int32,System.Int32)"></member>
    <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.Remove(Atalasoft.Imaging.Metadata.IptcTag)">
      <summary> Remove a specified IptcTag from the collection. </summary>
      <param name="tag"> The IptcTag to remove. </param>
    </member>
    <member name="T:Atalasoft.Imaging.Metadata.IptcParser">
      <summary> Parses IPTC data from JPEG or TIFF images into a collection of IPTC tags. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.IptcParser.#ctor">
      <summary> Initializes a new instance of <STRONG>IptcParser</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.IptcParser.ParseFromByteArray(System.Byte[])">
      <summary> Parses IPTC data from a byte array. </summary>
      <param name="iptcData"> A byte array containing the IPTC data. </param>
      <returns> An IptcCollection containing the parsed data. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.IptcParser.ParseFromImage(System.IO.Stream)">
      <summary> Parses IPTC data from a JPEG or TIFF image file stream. </summary>
      <param name="imageStream"> The image file stream to parse data from. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.IptcParser.ParseFromImage(System.IO.Stream,System.Int32)">
      <summary> Parses IPTC data from a specific frame in a multipage TIFF image file stream. </summary>
      <param name="imageStream"> The image file stream to parse data from. </param>
      <param name="frameIndex"> The zero based frame index of a multipage TIFF image to load data from. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.IptcParser.ParseFromImage(System.String)">
      <summary> Parses IPTC data from a JPEG or TIFF image file. </summary>
      <param name="imageFile"> The image file to parse data from. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.IptcParser.ParseFromImage(System.String,System.Int32)">
      <summary> Parses IPTC data from a specific frame in a multipage TIFF image file. </summary>
      <param name="imageFile"> The image file to parse data from. </param>
      <param name="frameIndex"> The zero based frame index of a multipage TIFF image to load data from. </param>
    </member>
    <member name="T:Atalasoft.Imaging.Metadata.IptcTag">
      <summary> Contains the data of this IPTC tag including ID, index, section, and value. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.IptcTag.#ctor(System.Int32,System.Int32,System.Int32,System.String)">
      <summary> Creates a new instance of <see cref="T:Atalasoft.Imaging.Metadata.ExifTag" /> specifying the id, section, index, and data. </summary>
      <param name="section"> The section for this IPTC tag.  Normally 2. </param>
      <param name="id"> The ID of this IPTC tag. </param>
      <param name="index"> The index of this IPTC tag. </param>
      <param name="data"> The value of this IptcTag. </param>
    </member>
    <member name="P:Atalasoft.Imaging.Metadata.IptcTag.Data">
      <summary> Gets or sets the value of this IptcTag. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.IptcTag.Equals(System.Object)"></member>
    <member name="M:Atalasoft.Imaging.Metadata.IptcTag.GetHashCode"></member>
    <member name="P:Atalasoft.Imaging.Metadata.IptcTag.ID">
      <summary> Gets or sets the ID of this IPTC tag. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Metadata.IptcTag.Index">
      <summary> Sets or returns the index value for this IPTC tag. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.IptcTag.op_Equality(Atalasoft.Imaging.Metadata.IptcTag,Atalasoft.Imaging.Metadata.IptcTag)"></member>
    <member name="M:Atalasoft.Imaging.Metadata.IptcTag.op_Inequality(Atalasoft.Imaging.Metadata.IptcTag,Atalasoft.Imaging.Metadata.IptcTag)"></member>
    <member name="P:Atalasoft.Imaging.Metadata.IptcTag.Section">
      <summary> Gets or sets the section for this IPTC tag. Normally this value is 2. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.IptcTag.ToString">
      <summary> Returns a text description of the IptcTag. </summary>
      <returns> A text description of the IptcTag. </returns>
    </member>
    <member name="T:Atalasoft.Imaging.Metadata.JpegMarker">
      <summary> The JpegMarker is an object that stores information from JPEG images </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.JpegMarker.#ctor(Atalasoft.Imaging.Metadata.JpegMarkerTypes,System.Byte[])">
      <summary> Creates a new instance of JpegMarker. </summary>
      <param name="type"> The type of JpegMarker. </param>
      <param name="data">
        <para>The data stored in this marker.</para>
      </param>
    </member>
    <member name="P:Atalasoft.Imaging.Metadata.JpegMarker.Data">
      <summary>
        <para>Gets the binary data stored in this marker.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.JpegMarker.Dispose">
      <summary> Call this method to free the JpegMarker data from memory without waiting for the Garbage Collector.
            </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Metadata.JpegMarker.Length">
      <summary> Gets or sets the length of this marker in bytes. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Metadata.JpegMarker.Type">
      <summary> Gets or sets the type of JpegMarker. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Metadata.JpegMarkerCollection">
      <summary>
        <para>Contains a collection of JpegMarkers and methods to access JpegMarker data.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection.#ctor">
      <summary> Creates a new instance of <STRONG>JpegMarkerCollection</STRONG> with an empty collection </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection.#ctor(System.IO.Stream)">
      <summary> Creates a new instance of <STRONG>JpegMarkerCollection</STRONG> specifying a stream containing the Jpeg
            file. </summary>
      <param name="stream"> File to retreive Jpeg markers from. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection.#ctor(System.String)">
      <summary> Creates a new instance of <STRONG>JpegMarkerCollection</STRONG> specifying the filename of the image.
            </summary>
      <param name="fileName"> File to retreive Jpeg markers from. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection.Add(Atalasoft.Imaging.Metadata.JpegMarker)">
      <summary> Adds a new <STRONG>JpegMarker</STRONG> to the collection. </summary>
      <param name="marker"> The marker to add. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection.Contains(Atalasoft.Imaging.Metadata.IptcTag)"></member>
    <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection.Contains(Atalasoft.Imaging.Metadata.JpegMarker)"></member>
    <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection.CopyTo(Atalasoft.Imaging.Metadata.JpegMarker[],System.Int32)"></member>
    <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection.Dispose">
      <summary>Releases all resources used by the <see cref="T:Atalasoft.Imaging.Metadata.JpegMarkerCollection" /></summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection.IndexOf(Atalasoft.Imaging.Metadata.JpegMarker)">
      <summary> Searches for the specified %Atalasoft.dotImage~Atalasoft.Imaging.Metadata.JpegMarker% and returns the
            zero-based index of the first occurance within the collection </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection.Insert(System.Int32,Atalasoft.Imaging.Metadata.JpegMarker)">
      <summary> Insert a new %Atalasoft.dotImage~Atalasoft.Imaging.Metadata.JpegMarker% into the collection at the
            specified index. </summary>
      <param name="index"> The index in the collection. </param>
      <param name="marker"> The marker to insert. </param>
    </member>
    <member name="P:Atalasoft.Imaging.Metadata.JpegMarkerCollection.Item(System.Int32)">
      <summary> Allows the <see cref="!:JpegMarkers" /> to be enumerated. </summary>
      <param name="index"> The zero based index in the collection. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection.LookupMarker(Atalasoft.Imaging.Metadata.JpegMarkerTypes)">
      <summary>
        <para>This method is obsolete and will only return the first marker found, please use LookupMarkers
            instead.</para>
        <para>Returns a %Atalasoft.dotImage~Atalasoft.Imaging.Metadata.JpegMarker% in the collection based on the marker
            type.</para>
      </summary>
      <param name="type"> The type of marker to lookup. </param>
      <returns> The JpegMarker or null (Nothing in Visual Basic) if the item is not found. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection.LookupMarkers(Atalasoft.Imaging.Metadata.JpegMarkerTypes)">
      <summary> Returns a collection of %Atalasoft.dotImage~Atalasoft.Imaging.Metadata.JpegMarker% in the collection based
            on the marker type. </summary>
      <param name="type"> The types of markers to lookup. </param>
      <returns> A Collection of markers filtered for the types specified. </returns>
    </member>
    <member name="P:Atalasoft.Imaging.Metadata.JpegMarkerCollection.MarkersToSave">
      <summary> Obsolete </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection.Remove(Atalasoft.Imaging.Metadata.JpegMarker)">
      <summary> Removes a specified %Atalasoft.dotImage~Atalasoft.Imaging.Metadata.JpegMarker% from the collection.</summary>
      <param name="marker"> The marker to remove. </param>
    </member>
    <member name="T:Atalasoft.Imaging.Metadata.JpegMarkerCopyFlags">
      <summary> Flag enumeration used with <see cref="!:CopyJpegWithNewMarkers" />. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerCopyFlags.CopyCom">
      <summary> Indicates whether the COM metadata should be copied. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerCopyFlags.CopyApp">
      <summary> Indicates whether the APP markers should be copied.  This will not copy JPEG_APP0. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerCopyFlags.PlaceAfterSofn">
      <summary> Indicates whether the metadata should be placed after the SOF tag. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerCopyFlags.CopyApp0">
      <summary> Indicates whether the JPEG_APP0 marker is copied.  Normally this marker should not be copied since it
            contains image specific information, such as DPI. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Metadata.JpegMarkerTypes">
      <summary> Defines the types of Jpeg Markers that can be saved as a data chunk inside a Jpeg image. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp1">
      <summary> The APP1 JPEG Marker commonly associated with EXIF data </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp2">
      <summary> The APP2 JPEG Marker. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp3">
      <summary> The APP3 JPEG Marker. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp4">
      <summary> The APP4 JPEG Marker. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp5">
      <summary> The APP5 JPEG Marker. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp6">
      <summary> The APP6 JPEG Marker. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp7">
      <summary> The APP7 JPEG Marker. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp8">
      <summary> The APP8 JPEG Marker. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp9">
      <summary> The APP9 JPEG Marker. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp10">
      <summary> The APP10 JPEG Marker. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp11">
      <summary> The APP11 JPEG Marker. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp12">
      <summary> The APP12 JPEG Marker. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp13">
      <summary> The APP13 JPEG Marker commonly associated with IPTC data. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp14">
      <summary> The APP14 JPEG Marker. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.AllMarkers">
      <summary> All markers OR'd together. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Metadata.PhotoshopResource">
      <summary> Contains the data of a <STRONG>Photoshop Resource</STRONG> including ID, Data, and Description. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResource.#ctor(System.Int32,System.Object,System.String)">
      <summary> Initializes a new instance of <STRONG>PhotoshopResource</STRONG>. </summary>
      <param name="id"> The resource ID. </param>
      <param name="data"> The resource data (typically a string value or byte array). </param>
      <param name="description"> A description of the resource (optional). </param>
    </member>
    <member name="P:Atalasoft.Imaging.Metadata.PhotoshopResource.Data">
      <summary> Gets or sets the data of this resource. </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Metadata.PhotoshopResource.Description">
      <summary> Gets or sets a textual description of the resource. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResource.Equals(System.Object)"></member>
    <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResource.GetHashCode">
      <summary> Gets the hashcode for this object </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Metadata.PhotoshopResource.ID">
      <summary> Gets or sets the ID of this resource. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResource.op_Equality(Atalasoft.Imaging.Metadata.PhotoshopResource,Atalasoft.Imaging.Metadata.PhotoshopResource)"></member>
    <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResource.op_Inequality(Atalasoft.Imaging.Metadata.PhotoshopResource,Atalasoft.Imaging.Metadata.PhotoshopResource)"></member>
    <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResource.ToString">
      <summary>
        <para>Returns a string of:</para>
        <para>The data if the data is a string</para>
        <para>OR</para>
        <para>The description if not null</para>
        <para>OR</para>
        <para>The ID as string</para>
      </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Metadata.PhotoshopResourceCollection">
      <summary>
        <para>Contains a collection of Photoshop resources.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResourceCollection.#ctor">
      <summary> Initializes a new instance of <STRONG>PhotoshopResourceCollection</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResourceCollection.Add(Atalasoft.Imaging.Metadata.PhotoshopResource)"></member>
    <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResourceCollection.Contains(Atalasoft.Imaging.Metadata.PhotoshopResource)">
      <summary> Determines whether the given <STRONG>PhotoshopResource</STRONG> is in the collection </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResourceCollection.CopyTo(Atalasoft.Imaging.Metadata.PhotoshopResource[],System.Int32)">
      <summary> Copies the collection into an Array of <STRONG>PhotoshopResources</STRONG>. </summary>
      <param name="resources"> The array of resources. </param>
      <param name="index"> the index of the array to start copying into. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResourceCollection.IndexOf(Atalasoft.Imaging.Metadata.PhotoshopResource)">
      <summary> Returns the zero based index of a specified <STRONG>PhotoshopResource</STRONG> if located in the
            collection. </summary>
      <param name="resource"> The <STRONG>PhotoshopResource</STRONG> to search for. </param>
      <returns> Returns -1 if not found, the index in the collection if found. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResourceCollection.Insert(System.Int32,Atalasoft.Imaging.Metadata.PhotoshopResource)"></member>
    <member name="P:Atalasoft.Imaging.Metadata.PhotoshopResourceCollection.Item(System.Int32)">
      <summary> Gets an item index of the <STRONG>PhotoshopResourceCollection</STRONG>. </summary>
      <param name="index"> The zero based item index. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResourceCollection.LookupResource(System.Int32)">
      <summary> Gets a <STRONG>PhotoshopResource</STRONG> from an ID. </summary>
      <param name="id"> The PhotoshopResource ID to look for. </param>
      <returns> A PhotoshopResource that matches the specified ID. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResourceCollection.Remove(Atalasoft.Imaging.Metadata.PhotoshopResource)">
      <summary> Removes a specified <STRONG>PhotoshopResource </STRONG>from the collection. </summary>
      <param name="resource"> The <STRONG>PhotoshopResource</STRONG> to remove. </param>
    </member>
    <member name="T:Atalasoft.Imaging.Metadata.PhotoshopResourceParser">
      <summary> Parses Photoshop resources from JPEG, TIFF, and PSD images into a collection of
            <see cref="T:Atalasoft.Imaging.Metadata.PhotoshopResource">PhotoshopResources</see>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResourceParser.#ctor">
      <summary> Initializes a new instance of <STRONG>PhotoshopResourceParser</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResourceParser.ParseFromImage(System.IO.Stream)">
      <summary> Parses Photoshop Resource data from a JPEG, TIFF, or PSD image file stream. </summary>
      <param name="imageStream"> The image file stream to parse data from. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResourceParser.ParseFromImage(System.IO.Stream,System.Int32)">
      <summary> Parses Photoshop Resource data from a JPEG, TIFF, or PSD image file stream specifying the frame index.</summary>
      <param name="imageStream"> The image file stream to parse data from. </param>
      <param name="frameIndex"> The zero based frame index of a multipage TIFF image to load data from. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResourceParser.ParseFromImage(System.String)">
      <summary> Parses Photoshop Resource data from a JPEG, TIFF, or PSD image file. </summary>
      <param name="imageFile"> The image file to parse data from. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResourceParser.ParseFromImage(System.String,System.Int32)">
      <summary> Parses Photoshop Resource data from a JPEG, TIFF, or PSD image file specifying the frame index. </summary>
      <param name="imageFile"> The image file to parse data from. </param>
      <param name="frameIndex"> The zero based frame index of a multipage TIFF image to load data from. </param>
    </member>
    <member name="T:Atalasoft.Imaging.Metadata.Rational">
      <summary> A fractional value used to represent certain TIFF and EXIF tags. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.Rational.#ctor(System.Int32,System.Int32)">
      <summary> Creates a new instance of Rational. </summary>
      <param name="numerator"> The fraction numerator </param>
      <param name="denominator"> The fraction denominator </param>
    </member>
    <member name="P:Atalasoft.Imaging.Metadata.Rational.Denominator">
      <summary> Gets the denominator of the fraction </summary>
    </member>
    <member name="P:Atalasoft.Imaging.Metadata.Rational.Empty">
      <summary> Returns an 'Empty' Rational value of 0/1. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.Rational.Equals(Atalasoft.Imaging.Metadata.Rational,Atalasoft.Imaging.Metadata.Rational)"></member>
    <member name="M:Atalasoft.Imaging.Metadata.Rational.Equals(System.Object)"></member>
    <member name="M:Atalasoft.Imaging.Metadata.Rational.GetHashCode"></member>
    <member name="P:Atalasoft.Imaging.Metadata.Rational.Numerator">
      <summary> Gets the numerator of the fraction. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.Rational.op_Equality(Atalasoft.Imaging.Metadata.Rational,Atalasoft.Imaging.Metadata.Rational)"></member>
    <member name="M:Atalasoft.Imaging.Metadata.Rational.op_Inequality(Atalasoft.Imaging.Metadata.Rational,Atalasoft.Imaging.Metadata.Rational)"></member>
    <member name="M:Atalasoft.Imaging.Metadata.Rational.Parse(System.String)">
      <summary> Parses a string in the form of numerator/denominator to a Rational value. </summary>
      <param name="s"> The string to parse </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.Rational.ToString">
      <summary> Returns a string representation of the fraction (numerator/denominator) </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Metadata.TiffTag">
      <summary> Holds the data of a single TIFF Tag. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.TiffTag.#ctor(Atalasoft.Imaging.Metadata.TiffTagID,System.Object)">
      <summary> Creates a new instance of <STRONG>TiffTag</STRONG> with the tag ID enumeration and object data
            automatically determine the data type. </summary>
      <param name="id"> The TIFF Tag ID </param>
      <param name="data"> The data of the TIFF Tag </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.TiffTag.#ctor(Atalasoft.Imaging.Metadata.TiffTagID,System.Object,Atalasoft.Imaging.Metadata.TiffTagDataType)">
      <summary> Creates a new instance of <STRONG>TiffTag</STRONG> with the tag ID, object data, and data type. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.TiffTag.#ctor(System.Int32,System.Object,Atalasoft.Imaging.Metadata.TiffTagDataType)">
      <summary> Creates a new instance of <STRONG>TiffTag</STRONG> with the tag ID, object data, and data type. </summary>
      <param name="id"> The TIFF Tag ID </param>
      <param name="data"> The data of the TIFF Tag </param>
      <param name="type"> The data type of the TIFF Tag </param>
    </member>
    <member name="P:Atalasoft.Imaging.Metadata.TiffTag.Data">
      <summary> Gets or sets the data of a specific TIFF tag. </summary>
      <exception> Thrown when the conversion from the data passed in to the actual type causes an overflow. </exception>
      <exception> Thrown when the an attempt was made to convert the data to the appropriate type, but failed.
            </exception>
      <exception> Thrown when the data passed is not the correct type. </exception>
    </member>
    <member name="P:Atalasoft.Imaging.Metadata.TiffTag.ID">
      <summary> Gets the ID of this TIFF tag. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.TiffTag.ToString">
      <summary> A text description of the TiffTag. </summary>
      <returns> A text description of the TiffTag object. </returns>
    </member>
    <member name="P:Atalasoft.Imaging.Metadata.TiffTag.Type">
      <summary> Gets the TIFF DataType for this TIFF Tag. </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Metadata.TiffTagCollection">
      <summary>
        <para>Contains a collection of TIFF tags, used tor writing TIFF Tags to an image when saving.</para>
      </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.#ctor">
      <summary>
            Create a new instance of <see cref="T:Atalasoft.Imaging.Metadata.ExifCollection" />.
            </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.#ctor(System.IO.Stream)">
      <summary> Deprecated </summary>
      <param name="fileStream"> File to retreive tiff tags from. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.#ctor(System.IO.Stream,System.Int32)">
      <summary> Deprecated </summary>
      <param name="fileStream"> File to retreive tiff tags from. </param>
      <param name="frameIndex"> The zero based page in a multipage TIFF. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.#ctor(System.String)">
      <summary> Deprecated </summary>
      <param name="fileName"> File to retreive tiff tags from. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.#ctor(System.String,System.Int32)">
      <summary> Deprecated </summary>
      <param name="fileName"> File to retreive tiff tags from. </param>
      <param name="frameIndex"> The zero based page in a multipage TIFF. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.Add(Atalasoft.Imaging.Metadata.TiffTag)">
      <summary> Adds a new TIFF Tag to the collection. </summary>
      <param name="tag"> The TIFF Tag to add. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.Contains(Atalasoft.Imaging.Metadata.TiffTag)">
      <summary> Returns a value indicating if a particular TIFF Tag exists in the collection. </summary>
      <param name="tag"> The TIFF Tag to check. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.CopyTo(Atalasoft.Imaging.Metadata.TiffTag[],System.Int32)">
      <summary> Copies items from the collection into an array. </summary>
      <param name="tags"> An array of TiffTag where the data will be stored. </param>
      <param name="index"> An index in the array where the data will be stored. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.GetSingleTag(Atalasoft.Imaging.Metadata.TiffTagID,System.IO.Stream)">
      <summary> Returns a single TIFF Tag from a TIFF image specifying the TIFF Tag ID and file stream. </summary>
      <param name="tag"> The TIFF Tag ID to retrieve. </param>
      <param name="source"> The stream containing the encoded TIFF image. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.GetSingleTag(Atalasoft.Imaging.Metadata.TiffTagID,System.IO.Stream,System.Int32)">
      <summary> Returns a single TIFF Tag from a TIFF image specifying the TIFF Tag ID, file stream and zero based page
            index. </summary>
      <param name="tag"> The TIFF Tag ID to retrieve. </param>
      <param name="source"> The stream containing the encoded TIFF image. </param>
      <param name="frameIndex"> The zero based page index of a multipaged TIFF. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.GetSingleTag(Atalasoft.Imaging.Metadata.TiffTagID,System.String)">
      <summary> Returns a single TIFF Tag from a TIFF image specifying the TIFF Tag ID and file. </summary>
      <param name="tag"> The TIFF Tag ID to retrieve. </param>
      <param name="filename"> The file containing the encoded TIFF image. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.GetSingleTag(Atalasoft.Imaging.Metadata.TiffTagID,System.String,System.Int32)">
      <summary> Returns a single TIFF Tag from a TIFF image specifying the TIFF Tag ID, file and zero based page index.
            </summary>
      <param name="tag"> The TIFF Tag ID to retrieve. </param>
      <param name="filename"> The file containing the encoded TIFF image. </param>
      <param name="frameIndex"> The zero based page index of a multipaged TIFF. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.GetSingleTag(System.Int32,System.IO.Stream,System.Int32)">
      <summary> Returns a TiffTag from a TIFF image specifying the tag ID, image stream and frame index. </summary>
      <param name="tagID"> The TIFF tag ID to return. </param>
      <param name="source"> A stream containing the image data. </param>
      <param name="frameIndex"> The frame index from a multipage TIFF containing the tag data. </param>
      <returns> A object containing the TIFF tag data. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.GetSingleTag(System.Int32,System.String,System.Int32)">
      <summary> Returns the TIFF tag data from a file. </summary>
      <param name="tagID"> The TIFF Tag ID to retrieve. </param>
      <param name="filename"> The filename of the TIFF image. </param>
      <param name="frameIndex"> The zero based page index of a multipaged TIFF. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.IndexOf(Atalasoft.Imaging.Metadata.TiffTag)">
      <summary> Returns the index value of a <STRONG>TiffTag</STRONG> found in the collection. </summary>
      <param name="tag"> The specific tag to search for. </param>
      <returns> Returns -1 if the tag was not found. </returns>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.Insert(System.Int32,Atalasoft.Imaging.Metadata.TiffTag)">
      <summary> Insert a TIFF Tag into the collection at the specified index. </summary>
      <param name="index"> The index to insert into. </param>
      <param name="tag"> The tag to insert. </param>
    </member>
    <member name="P:Atalasoft.Imaging.Metadata.TiffTagCollection.Item(System.Int32)">
      <summary> Returns the <see cref="T:Atalasoft.Imaging.Metadata.TiffTag" /> by index in the collection and allows
            the Tiff tags to be enumerated. </summary>
      <param name="index"> The zero based index in the collection. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.LookupTag(Atalasoft.Imaging.Metadata.TiffTagID)"></member>
    <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.LookupTag(System.Int32)">
      <summary> Returns a TiffTag based on a TiffID. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.Remove(Atalasoft.Imaging.Metadata.TiffTag)">
      <summary> Remove a specified tag from the collection. </summary>
      <param name="tag"> The TIFF Tag to remove. </param>
    </member>
    <member name="T:Atalasoft.Imaging.Metadata.TiffTagDataType">
      <summary> Enumeration of TIFF Tag data types </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagDataType.None"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagDataType.Byte"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagDataType.Ascii"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagDataType.Short"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagDataType.Long"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagDataType.Rational"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagDataType.SByte"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagDataType.Undefined"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagDataType.SShort"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagDataType.SLong"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagDataType.SRational"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagDataType.Float"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagDataType.Double"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagDataType.Ifd"></member>
    <member name="T:Atalasoft.Imaging.Metadata.TiffTagID">
      <summary> Standard Tiff Tags that can be read from a TIFF file. </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.NewSubfileType"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.SubfileType"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.ImageWidth">
      <summary> TIFFTAG_IMAGEWIDTH (256) UInt32 </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.ImageLength">
      <summary> TIFFTAG_IMAGELENGTHUInt32 (257) UInt32 </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.BitsPerSample">
      <summary> TIFFTAG_BITSPERSAMPLE (258) UInt16 </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.Compression">
      <summary>
        <para>TIFFTAG_COMPRESSION (259) UInt16</para>
        <para>1 = COMPRESSION_NONE,<BR />2 = COMPRESSION_CCITTRLE,<BR />3 = COMPRESSION_CCITTFAX3,<BR />4 =
            COMPRESSION_CCITTFAX4,<BR />5 = COMPRESSION_LZW,<BR />6 = COMPRESSION_OJPEG,<BR />7 = COMPRESSION_JPEG,<BR />32766 =
            COMPRESSION_NEXT  (NeXT 2-bit RLE),<BR />32771 = COMPRESSION_CCITTRLEW (#1 w/ word alignment),<BR />32773 =
            COMPRESSION_PACKBITS (Macintosh RLE),<BR />32809 = COMPRESSION_THUNDERSCAN (ThunderScan RLE)</para>
      </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.PhotometricInterpretation">
      <summary>
        <para>TIFFTAG_PHOTOMETRIC (262) UInt16</para>
        <para>0 = PHOTOMETRIC_MINISWHITE (min value is white),<BR />1 = PHOTOMETRIC_MINISBLACK (min value is black),<BR />2 =
            PHOTOMETRIC_RGB (RGB color model),<BR />3 = PHOTOMETRIC_PALETTE  (color map indexed),<BR />4 = PHOTOMETRIC_MASK 
            ($holdout mask),<BR />5 = PHOTOMETRIC_SEPARATED (!color separations),<BR />6 = PHOTOMETRIC_YCBCR  (!CCIR 601),<BR />7 =
            PHOTOMETRIC_CIELAB  (!1976 CIE L*a*b*),<BR />8 = PHOTOMETRIC_ICCLAB  (ICC L*a*b* [Adobe TIFF Technote 4]),<BR />9 =
            PHOTOMETRIC_ITULAB  (ITU L*a*b*),<BR />32844 = PHOTOMETRIC_LOGL  (CIE Log2(L)),<BR />32845 = PHOTOMETRIC_LOGLUV (CIE
            Log2(L) (u',v'))</para>
      </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.Thresholding"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.CellWidth"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.CellLength"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.FillOrder"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.DocumentName">
      <summary> TIFFTAG_DOCUMENTNAME (269) String </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.ImageDescription">
      <summary> TIFFTAG_IMAGEDESCRIPTION (270) String </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.Make">
      <summary> TIFFTAG_MAKE (271) String </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.Model">
      <summary> TIFFTAG_MODEL (272) String </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.StripOffsets"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.Orientation">
      <summary>
        <para>TIFFTAG_ORIENTATION (274) UInt16</para>
        <para>1 = ORIENTATION_TOPLEFT,<BR />2 = ORIENTATION_TOPRIGHT<BR />3 = ORIENTATION_BOTRIGHT,<BR />4 =
            ORIENTATION_BOTLEFT,<BR />5 = ORIENTATION_LEFTTOP,<BR />6 = ORIENTATION_RIGHTTOP,<BR />7 = ORIENTATION_RIGHTBOT,<BR />8
            = ORIENTATION_LEFTBOT</para>
      </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.SamplesPerPixel"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.RowsPerStrip">
      <summary> TIFFTAG_ROWSPERSTRIP (The number of rows per strip in the image (not used in tiled images) </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.StripByteCounts"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.MinSampleValue"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.MaxSampleValue"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.XResolution">
      <summary> TIFFTAG_XRESOLUTION (282) Int32 </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.YResolution">
      <summary> TIFFTAG_YRESOLUTION (283) Int32 </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.PlanarConfiguration"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.PageName">
      <summary> TIFFTAG_PAGENAME (285) String </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.XPosition"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.YPosition"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.FreeOffsets"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.FreeByteCounts"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.GrayResponseUnit"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.GrayResponseCurve"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.T4Options"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.T6Options"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.ResolutionUnit">
      <summary>
        <para>TIFFTAG_RESOLUTIONUNIT (296) UInt16</para>
        <para>1 = RESUNIT_NONE,<BR />2 = RESUNIT_INCH,<BR />3 = RESUNIT_CENTIMETER</para>
      </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.PageNumber"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.TransferFunction"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.Software">
      <summary> TIFFTAG_SOFTWARE (305) String </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.DateTime">
      <summary> TIFFTAG_DATETIME (306) String </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.Artist">
      <summary> TIFFTAG_ARTIST (315) String </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.HostComputer">
      <summary> TIFFTAG_HOSTCOMPUTER (316) String </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.Predictor"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.WhitePoint"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.PrimaryChromaticities"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.ColorMap"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.HalftoneHints"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.TileWidth">
      <summary> TIFFTAG_TILEWIDTH (322) UInt32 </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.TileLength">
      <summary> TIFFTAG_TILELENGTH (323) UInt32 </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.TileOffsets"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.TileByteCounts"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.InkSet">
      <summary>
        <para>TIFFTAG_INKSET (332) UInt32 </para>
        <para>1 = INKSET_CMYK   (cyan-magenta-yellow-black color),<BR />2 = INKSET_MULTIINK  (multi-ink or hi-fi
            color)</para>
      </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.InkNames">
      <summary> TIFFTAG_INKNAMES (333) String </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.NumberOfInks">
      <summary> TIFFTAG_NUMBEROFINKS (334) UInt16 </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.DotRange">
      <summary> TIFFTAG_DOTRANGE (335) </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.TargetPrinter">
      <summary> TIFFTAG_TARGETPRINTER (337) String </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.ExtraSamples">
      <summary>
        <para>TIFFTAG_EXTRASAMPLES (338)</para>
        <para>0 = EXTRASAMPLE_UNSPECIFIED (unspecified data),<BR />1 = EXTRASAMPLE_ASSOCALPHA (associated alpha data),<BR />2
            = EXTRASAMPLE_UNASSALPHA (unassociated alpha data)</para>
      </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.SampleFormat"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.SMinSampleValue"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.SMaxSampleValue"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.TransferRange"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.JpegTable"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.JpegProc"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.JpegInterchangeFormat"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.JpegInterchangeFormatLength"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.JpegRestartInterval"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.JpegLosslessPredictors"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.JpegPointTransforms"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.JpegQTables"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.JpegDcTables"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.JpegAcTables"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.YCbCrCoefficients"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.YCbCrSubSampling"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.YCbCrPositioning"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.ReferenceBlackWhite"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.XmpData">
      <summary> TIFFTAG_XMLPACKET (700) </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.WangAnnotationData">
      <summary> TIFFTAG_ANNOTATIONS (32932) </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.RichTiffIptc">
      <summary> TIFFTAG_RICHTIFFIPTC (33723) </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.Copyright"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.Photoshop">
      <summary> TIFFTAG_PHOTOSHOP (34377) </summary>
    </member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.ExifIfd"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.GpsIfd"></member>
    <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.IccProfile">
      <summary> TIFFTAG_ICCPROFILE (34750) </summary>
    </member>
    <member name="T:Atalasoft.Imaging.Metadata.XmpParser">
      <summary> The <STRONG>XmpParser</STRONG> class can extract XMP Binary data from an image, and parse it into XML
            content. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.XmpParser.#ctor">
      <summary> Initializes a new instance of <STRONG>XmpParser</STRONG>. </summary>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.XmpParser.BytesFromImage(System.IO.Stream)">
      <summary> Returns a byte array containing XMP data from an image stream. </summary>
      <param name="imageStream"> The image stream to retrieve data from. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.XmpParser.BytesFromImage(System.IO.Stream,System.Int32)">
      <summary> Returns a byte array containing XMP data from an image stream specifying the frame index. </summary>
      <param name="imageStream"> The image stream to retrieve data from. </param>
      <param name="frameIndex"> The zero based frame index of the image to retrieve data from </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.XmpParser.BytesFromImage(System.String)">
      <summary> Returns a byte array containing XMP data from an image file. </summary>
      <param name="imageFile"> The image filename to retreive data from. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.XmpParser.BytesFromImage(System.String,System.Int32)">
      <summary> Returns a byte array containing XMP data from an image file specifying the frame index. </summary>
      <param name="imageFile"> The image filename to retreive data from </param>
      <param name="frameIndex"> The zero based frame index of the image to retrieve data from </param>
    </member>
    <member name="E:Atalasoft.Imaging.Metadata.XmpParser.CodecError"></member>
    <member name="M:Atalasoft.Imaging.Metadata.XmpParser.OnError(Atalasoft.Imaging.Codec.CodecErrorEventArgs)"></member>
    <member name="M:Atalasoft.Imaging.Metadata.XmpParser.ParseFromImage(System.IO.Stream)">
      <summary> Returns an <STRONG>XmlDocument</STRONG> containing XMP data from an image file stream. </summary>
      <param name="imageStream"> The image file stream containing XMP data. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.XmpParser.ParseFromImage(System.IO.Stream,System.Int32)">
      <summary> Returns an <STRONG>XmlDocument</STRONG> containing XMP data from an image file stream and zero based frame
            index. </summary>
      <param name="imageStream"> The image file stream containing XMP data. </param>
      <param name="frameIndex"> The zero based frame index of a multi-page image. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.XmpParser.ParseFromImage(System.String)">
      <summary> Returns an <STRONG>XmlDocument</STRONG> containing XMP data from an image file. </summary>
      <param name="imageFile"> The image file containing XMP data. </param>
    </member>
    <member name="M:Atalasoft.Imaging.Metadata.XmpParser.ParseFromImage(System.String,System.Int32)">
      <summary> Returns an <STRONG>XmlDocument</STRONG> containing XMP data from an image file and zero based frame index.
            </summary>
      <param name="imageFile"> The image file containing XMP data. </param>
      <param name="frameIndex"> The zero based frame index of a multi-page image. </param>
      <returns> A <STRONG>System.Xml.XmlDocument</STRONG> containing XMP information. </returns>
    </member>
  </members>
</doc>