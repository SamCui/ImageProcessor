<?xml version="1.0"?>
<doc processed="true">
  <assembly>
    <name>Leadtools.WinForms</name>
  </assembly>
  <members>
    <member name="T:Leadtools.WinForms.RasterViewerLineEventArgs">
      <summary>
            Provides data for various RasterImageViewer user interaction events.
            </summary>
      <remarks>
            Use this class when handling the following events:
            <list><item><description><see cref="E:Leadtools.WinForms.RasterImageViewer.InteractivePan" /></description></item></list></remarks>
      <example>Refer to <see cref="E:Leadtools.WinForms.RasterImageViewer.InteractivePan" />.</example>
    </member>
    <member name="T:Leadtools.WinForms.RasterViewerInteractiveEventArgs">
      <summary>
            Base class for other <see cref="T:Leadtools.WinForms.RasterImageViewer" /> interactive events.
            </summary>
      <noremarks />
      <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.IsInteractiveModeBusy" />.</example>
    </member>
    <member name="M:Leadtools.WinForms.RasterViewerInteractiveEventArgs.#ctor">
      <summary>
            Initializes a new RasterViewerInteractiveEventArgs with default parameters.
            </summary>
      <noremarks />
      <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.IsInteractiveModeBusy" />.</example>
    </member>
    <member name="M:Leadtools.WinForms.RasterViewerInteractiveEventArgs.#ctor(Leadtools.WinForms.RasterViewerInteractiveStatus)">
      <summary>
            Initializes a new RasterViewerInteractiveEventArgs with specified parameters.
            </summary>
      <param name="status">The status of the interactive mode.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterViewerInteractiveEventArgs.Status">
      <summary>
            Gets the current status of the interactive mode.
            </summary>
      <value>
            The current status of the interactive mode.
            </value>
      <noremarks />
      <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.IsInteractiveModeBusy" />.</example>
    </member>
    <member name="P:Leadtools.WinForms.RasterViewerInteractiveEventArgs.Cancel">
      <summary>
            Gets or sets a value indicating whether the interactive mode should be canceled.
            </summary>
      <value>true if the interactive mode should be canceled; otherwise, false.</value>
      <noremarks />
      <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.IsInteractiveModeBusy" />.</example>
    </member>
    <member name="M:Leadtools.WinForms.RasterViewerLineEventArgs.#ctor">
      <summary>
            Initializes a new RasterViewerLineEventArgs with default values.
            </summary>
      <noremarks />
      <example>Refer to <see cref="E:Leadtools.WinForms.RasterImageViewer.InteractivePan" />.</example>
    </member>
    <member name="M:Leadtools.WinForms.RasterViewerLineEventArgs.#ctor(Leadtools.WinForms.RasterViewerInteractiveStatus,System.Drawing.Point,System.Drawing.Point)">
      <summary>
            Initializes a new RasterViewerLineEventArgs with specified values.
            </summary>
      <param name="status">The status of the interactive mode.</param>
      <param name="beginPoint">The beginning point for the interactive mode line.</param>
      <param name="endPoint">The end point for the interactive mode line.</param>
      <noremarks />
      <example>Refer to <see cref="E:Leadtools.WinForms.RasterImageViewer.InteractivePan" />.</example>
    </member>
    <member name="P:Leadtools.WinForms.RasterViewerLineEventArgs.Begin">
      <summary>
            Returns the beginning point for the current interactive mode line.
            </summary>
      <value>
            The beginning point for the current interactive mode line.
            </value>
      <noremarks />
      <example>Refer to <see cref="E:Leadtools.WinForms.RasterImageViewer.InteractivePan" />.</example>
    </member>
    <member name="P:Leadtools.WinForms.RasterViewerLineEventArgs.End">
      <summary>
            Returns the end point for the current interactive mode line.
            </summary>
      <value>
            The end point for the current interactive mode line.
            </value>
      <noremarks />
      <example>Refer to <see cref="E:Leadtools.WinForms.RasterImageViewer.InteractivePan" />.</example>
    </member>
    <member name="T:Leadtools.WinForms.RasterPictureBoxFrameChangedEventArgs">
      <summary>
            The <b>RasterPictureBoxFrameChangedEventArgs</b> class provides information about the <see cref="E:Leadtools.WinForms.RasterPictureBox.FrameChanged" /> event.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterPictureBoxFrameChangedEventArgs.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.WinForms.RasterPictureBoxFrameChangedEventArgs" /> class with default values.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterPictureBoxFrameChangedEventArgs.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.WinForms.RasterPictureBoxFrameChangedEventArgs" /> class with explicit values.
            </summary>
      <param name="index">An integer which represents the index of the currently displayed frame.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterPictureBoxFrameChangedEventArgs.Index">
      <summary>
            An integer which represents the index of the currently displayed frame.
            </summary>
      <value>An integer which represents the index of the currently displayed frame.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="T:Leadtools.WinForms.RasterPictureBox">
             /&gt;
            <summary>
            Represents a LEADTOOLS PictureBox control for displaying an image.
            </summary><keywords>Picture Box|PictureBox|Animation|Play Animation|Animated GIF|GIF</keywords><remarks>
            The <b>RasterPictureBox</b> is used to display graphics from a bitmap, metafile, icon, JPEG, GIF or 
            PNG (or any other image file format supported by LEADTOOLS) file.<br />
            Set the <see cref="P:Leadtools.WinForms.RasterPictureBox.Image" /> property to an <see cref="T:Leadtools.RasterImage" /> object to be displayed.<br />
            The <b>RasterPictureBox</b> control can automatically animate Multi-Page file formats.<br /></remarks><example><code lang="VB">      Public Sub RasterPictureBox_RasterPictureBox()
         Dim form As MyForm1 = New MyForm1()
         form.ShowDialog()
      End Sub

      Private Class MyForm1 : Inherits Form
         Private thePictureBox As RasterPictureBox

         Public Sub New()
            ' Create the raster PictureBox
            thePictureBox = New RasterPictureBox()
            thePictureBox.Dock = DockStyle.Fill
            thePictureBox.BorderStyle = BorderStyle.Fixed3D
            thePictureBox.UseDpi = False

            ' Set the paint properties
            Dim p As RasterPaintProperties = New RasterPaintProperties()
            p.PaintDisplayMode = RasterPaintDisplayModeFlags.Bicubic
            p.PaintEngine = RasterPaintEngine.GdiPlus
            p.UsePaintPalette = True
            thePictureBox.PaintProperties = p

            Controls.Add(thePictureBox)
            thePictureBox.BringToFront()

            ' load an image into the viewer
            Dim codecs As RasterCodecs = New RasterCodecs()
                thePictureBox.Image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "eye.gif"))
                codecs.Dispose()

                Text = String.Format("Size mode = {0}, double click to change", thePictureBox.SizeMode)

                AddHandler thePictureBox.DoubleClick, AddressOf thePictureBox_DoubleClick
            End Sub

            Private Sub thePictureBox_DoubleClick(ByVal sender As Object, ByVal e As EventArgs)
                Select Case thePictureBox.SizeMode
                    Case RasterPictureBoxSizeMode.Normal
                        thePictureBox.SizeMode = RasterPictureBoxSizeMode.StretchImage

                    Case RasterPictureBoxSizeMode.StretchImage
                        thePictureBox.SizeMode = RasterPictureBoxSizeMode.Fit

                    Case RasterPictureBoxSizeMode.Fit
                        thePictureBox.SizeMode = RasterPictureBoxSizeMode.AutoSize

                    Case RasterPictureBoxSizeMode.AutoSize
                        thePictureBox.SizeMode = RasterPictureBoxSizeMode.CenterImage

                    Case RasterPictureBoxSizeMode.CenterImage
                        thePictureBox.SizeMode = RasterPictureBoxSizeMode.Normal
                End Select

                Text = String.Format("Size mode = {0}, double click to change", thePictureBox.SizeMode)

                MyBase.OnDoubleClick(e)
            End Sub
        End Class

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code><code lang="CS">      public void RasterPictureBox_RasterPictureBox()
      {
         MyForm1 form = new MyForm1();
         form.ShowDialog();
      }

      class MyForm1 : Form
      {
         RasterPictureBox thePictureBox;

         public MyForm1()
         {
            // Create the raster PictureBox
            thePictureBox = new RasterPictureBox();
            thePictureBox.Dock = DockStyle.Fill;
            thePictureBox.BorderStyle = BorderStyle.Fixed3D;
            thePictureBox.UseDpi = false;

            // Set the paint properties
            RasterPaintProperties p = new RasterPaintProperties();
            p.PaintDisplayMode = RasterPaintDisplayModeFlags.Bicubic;
            p.PaintEngine = RasterPaintEngine.GdiPlus;
            p.UsePaintPalette = true;
            thePictureBox.PaintProperties = p;

            Controls.Add(thePictureBox);
            thePictureBox.BringToFront();

            // load an image into the viewer
            RasterCodecs codecs = new RasterCodecs();
            thePictureBox.Image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"eye.gif"));
            codecs.Dispose();

            Text = string.Format("Size mode = {0}, double click to change", thePictureBox.SizeMode);

            thePictureBox.DoubleClick += new EventHandler(thePictureBox_DoubleClick);
         }

         void thePictureBox_DoubleClick(object sender, EventArgs e)
         {
            switch (thePictureBox.SizeMode)
            {
               case RasterPictureBoxSizeMode.Normal:
                  thePictureBox.SizeMode = RasterPictureBoxSizeMode.StretchImage;
                  break;

               case RasterPictureBoxSizeMode.StretchImage:
                  thePictureBox.SizeMode = RasterPictureBoxSizeMode.Fit;
                  break;

               case RasterPictureBoxSizeMode.Fit:
                  thePictureBox.SizeMode = RasterPictureBoxSizeMode.AutoSize;
                  break;

               case RasterPictureBoxSizeMode.AutoSize:
                  thePictureBox.SizeMode = RasterPictureBoxSizeMode.CenterImage;
                  break;

               case RasterPictureBoxSizeMode.CenterImage:
                  thePictureBox.SizeMode = RasterPictureBoxSizeMode.Normal;
                  break;
            }

            Text = string.Format("Size mode = {0}, double click to change", thePictureBox.SizeMode);

            base.OnDoubleClick(e);
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code><!--RasterPictureBox.RasterPictureBox--></example></member>
    <member name="M:Leadtools.WinForms.RasterPictureBox.#ctor">
             /&gt;
            <summary>
            Initializes a new instance of the RasterPictureBox class.
            </summary><noremarks /><example>Refer to <see cref="T:Leadtools.WinForms.RasterPictureBox" />.</example></member>
    <member name="M:Leadtools.WinForms.RasterPictureBox.BeginUpdate">
             /&gt;
            <summary>
            Prevents the control from drawing until the <see cref="M:Leadtools.WinForms.RasterPictureBox.EndUpdate" /> method is called.
            </summary><remarks>
            When you want to disable repainting of the RasterPictureBox, call <b>BeginUpdate</b>.<br />
            When you are ready to resume painting call <see cref="M:Leadtools.WinForms.RasterPictureBox.EndUpdate" />.
            </remarks><example><code lang="VB">        Public Sub RasterPictureBox_BeginUpdate(ByVal viewer As RasterPictureBox)
            viewer.BeginUpdate() ' suspend painting of the image
            viewer.SizeMode = RasterPictureBoxSizeMode.CenterImage
            viewer.UseDpi = False
            viewer.EndUpdate() ' start painting of the image
        End Sub</code><code lang="CS">      public void RasterPictureBox_BeginUpdate(RasterPictureBox viewer)
      {
         viewer.BeginUpdate();  // suspend painting of the image 
         viewer.SizeMode = RasterPictureBoxSizeMode.CenterImage;
         viewer.UseDpi = false;
         viewer.EndUpdate(); // start painting of the image 
      }</code><!--RasterPictureBox.BeginUpdate--></example></member>
    <member name="M:Leadtools.WinForms.RasterPictureBox.Dispose(System.Boolean)">
             /&gt;
            <summary> 
            Cleans up any resources being used.
            </summary><param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param><noremarks /><noexample /></member>
    <member name="M:Leadtools.WinForms.RasterPictureBox.EndUpdate">
             /&gt;
            <summary>
            Resumes drawing which was disabled by a call to <see cref="M:Leadtools.WinForms.RasterPictureBox.BeginUpdate" />.
            </summary><remarks>
            When you want to disable repainting of the RasterPictureBox, call <see cref="M:Leadtools.WinForms.RasterPictureBox.BeginUpdate" />.<br />
            When you are ready to resume painting call <b>EndUpdate</b>.
            </remarks><example>Refer to <see cref="M:Leadtools.WinForms.RasterPictureBox.BeginUpdate" />.</example></member>
    <member name="M:Leadtools.WinForms.RasterPictureBox.OnAnimationModeChanged(System.EventArgs)">
             /&gt;
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterPictureBox.AnimationModeChanged" /> event.
            </summary><param name="e">An EventArgs that contains the event data.</param><remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnAnimationModeChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnAnimationModeChanged</b> in a derived class, be sure to call the base class's <b>OnAnimationModeChanged</b> method so that registered delegates receive the event.
            </remarks><noexample /></member>
    <member name="M:Leadtools.WinForms.RasterPictureBox.OnEnabledChanged(System.EventArgs)">
             /&gt;
            <summary>
            Overrides <see cref="M:System.Windows.Forms.Control.OnEnabledChanged(System.EventArgs)">Control.OnEnabledChanged</see>.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><noremarks /><noexample /></member>
    <member name="M:Leadtools.WinForms.RasterPictureBox.OnFrameChanged(Leadtools.WinForms.RasterPictureBoxFrameChangedEventArgs)">
             /&gt;
            <summary>
            Raises the FrameChanged event.
            </summary><param name="e">A <see cref="T:Leadtools.WinForms.RasterPictureBoxFrameChangedEventArgs" /> that contains the event data.</param><remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnFrameChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnFrameChanged</b> in a derived class, be sure to call the base class's <b>OnFrameChanged</b> method so that registered delegates receive the event.
            </remarks><example>Refer to <see cref="E:Leadtools.WinForms.RasterPictureBox.FrameChanged" />.</example></member>
    <member name="M:Leadtools.WinForms.RasterPictureBox.OnPaint(System.Windows.Forms.PaintEventArgs)">
             /&gt;
            <summary>
            Overrides <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)">Control.OnPaint</see>.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><noremarks /><noexample /></member>
    <member name="M:Leadtools.WinForms.RasterPictureBox.OnParentChanged(System.EventArgs)">
             /&gt;
            <summary>
            Overrides <see cref="M:System.Windows.Forms.Control.OnParentChanged(System.EventArgs)">Control.OnParentChanged</see>.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><noremarks /><noexample /></member>
    <member name="M:Leadtools.WinForms.RasterPictureBox.OnResize(System.EventArgs)">
             /&gt;
            <summary>
            Overrides <see cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)">Control.OnResize</see>.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><noremarks /><noexample /></member>
    <member name="M:Leadtools.WinForms.RasterPictureBox.OnSizeModeChanged(System.EventArgs)">
             /&gt;
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterPictureBox.SizeModeChanged" /> event.
            </summary><param name="e">An EventArgs that contains the event data.</param><remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnSizeModeChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnSizeModeChanged</b> in a derived class, be sure to call the base class's <b>OnSizeModeChanged</b> method so that registered delegates receive the event.
            </remarks><noexample /></member>
    <member name="M:Leadtools.WinForms.RasterPictureBox.OnUseDpiChanged(System.EventArgs)">
             /&gt;
            <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterPictureBox.UseDpiChanged" /> event.
            </summary><param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param><remarks><p>Raising an event invokes the event handler through a delegate.</p><p>The <b>OnUseDpiChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p><p><b>Notes to Inheritors:</b> When overriding <b>OnUseDpiChanged</b> in a derived class, be sure to call
            the base class's <b>OnUseDpiChanged</b> method so that registered delegates receive the event.</p></remarks><noexample /></member>
    <member name="M:Leadtools.WinForms.RasterPictureBox.OnVisibleChanged(System.EventArgs)">
             /&gt;
            <summary>
            Overrides <see cref="M:System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)">Control.OnVisibleChanged</see>.
            </summary><param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param><noremarks /><noexample /></member>
    <member name="M:Leadtools.WinForms.RasterPictureBox.PauseAnimation">
             /&gt;
            <summary>
            Pauses an animation playback.
            </summary><noremarks /><example>Refer to <see cref="M:Leadtools.WinForms.RasterPictureBox.PauseAnimation" />.</example></member>
    <member name="M:Leadtools.WinForms.RasterPictureBox.StopAnimation">
             /&gt;
            <summary>
            Stops an animation playback.
            </summary><noremarks /><example><code lang="VB">      Public Sub RasterPictureBox_StopAnimation(ByVal viewer As RasterPictureBox)
         viewer.StopAnimation()
      End Sub</code><code lang="CS">      public void RasterPictureBox_StopAnimation(RasterPictureBox viewer)
      {
         viewer.StopAnimation();  // suspend painting of the image 
      }</code><!--RasterPictureBox.StopAnimation--></example></member>
    <member name="M:Leadtools.WinForms.RasterPictureBox.PlayAnimation">
             /&gt;
            <summary>
            Continues an animation playback.
            </summary><noremarks /><example>Refer to <see cref="E:Leadtools.WinForms.RasterPictureBox.AnimationModeChanged" />.</example></member>
    <member name="M:Leadtools.WinForms.RasterPictureBox.ToString">
             /&gt;
            <summary>
            Overridden. Returns a string containing the Control Name plus the SizeMode for this Control.
            </summary><returns>A string containing the Control name plus the SizeMode for this Control.</returns><noremarks /><noexample /></member>
    <member name="E:Leadtools.WinForms.RasterPictureBox.CausesValidationChanged">
      <summary>
            Overrides <see cref="E:System.Windows.Forms.Control.CausesValidationChanged" />.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="E:Leadtools.WinForms.RasterPictureBox.Enter">
      <summary>
            Overrides <see cref="E:System.Windows.Forms.Control.Enter" />.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="E:Leadtools.WinForms.RasterPictureBox.FontChanged">
      <summary>
            Overrides <see cref="E:System.Windows.Forms.Control.FontChanged" />.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="E:Leadtools.WinForms.RasterPictureBox.ForeColorChanged">
      <summary>
            Overrides <see cref="E:System.Windows.Forms.Control.ForeColorChanged" />.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="E:Leadtools.WinForms.RasterPictureBox.ImeModeChanged">
      <summary>
            Overrides <see cref="E:System.Windows.Forms.Control.ForeColorChanged" />.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="E:Leadtools.WinForms.RasterPictureBox.KeyDown">
      <summary>
            Overrides <see cref="E:System.Windows.Forms.Control.KeyDown" />.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="E:Leadtools.WinForms.RasterPictureBox.KeyPress">
      <summary>
            Overrides <see cref="E:System.Windows.Forms.Control.KeyPress" />.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="E:Leadtools.WinForms.RasterPictureBox.KeyUp">
      <summary>
            Overrides <see cref="E:System.Windows.Forms.Control.KeyUp" />.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="E:Leadtools.WinForms.RasterPictureBox.Leave">
      <summary>
            Overrides <see cref="E:System.Windows.Forms.Control.Leave" />.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="E:Leadtools.WinForms.RasterPictureBox.RightToLeftChanged">
      <summary>
            Overrides <see cref="E:System.Windows.Forms.Control.RightToLeftChanged" />.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="E:Leadtools.WinForms.RasterPictureBox.TabIndexChanged">
      <summary>
            Overrides <see cref="E:System.Windows.Forms.Control.TabIndexChanged" />.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="E:Leadtools.WinForms.RasterPictureBox.TabStopChanged">
      <summary>
            Overrides <see cref="E:System.Windows.Forms.Control.TabStopChanged" />.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="E:Leadtools.WinForms.RasterPictureBox.TextChanged">
      <summary>
            Overrides <see cref="E:System.Windows.Forms.Control.TextChanged" />.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterPictureBox.AllowDrop">
      <summary>
            Overrides <see cref="P:System.Windows.Forms.Control.AllowDrop" />.
            </summary>
      <value>
        <strong>true</strong> if drag-and-drop operations are allowed in the control; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterPictureBox.CausesValidation">
      <summary>
            Overrides <see cref="P:System.Windows.Forms.Control.CausesValidation" />.
            </summary>
      <value>
        <strong>true</strong> if the control causes validation to be performed on any controls requiring validation when it receives focus; otherwise, <strong>false</strong>. The default is <strong>true</strong>.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterPictureBox.Font">
      <summary>
            Overrides <see cref="P:System.Windows.Forms.Control.Font" />.
            </summary>
      <value>The <see cref="T:System.Drawing.Font" /> to apply to the text displayed by the control. The default is the value of the <see cref="P:System.Windows.Forms.Control.DefaultFont" /> property.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterPictureBox.ForeColor">
      <summary>
            Overrides <see cref="P:System.Windows.Forms.Control.ForeColor" />.
            </summary>
      <value>The foreground <see cref="T:System.Drawing.Color" /> of the control. The default is the value of the <see cref="P:System.Windows.Forms.Control.DefaultForeColor" /> property.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterPictureBox.ImeMode">
      <summary>
            Overrides <see cref="P:System.Windows.Forms.Control.ImeMode" />.
            </summary>
      <value>One of the <see cref="P:Leadtools.WinForms.RasterPictureBox.ImeMode" /> values. The default is <see cref="P:Leadtools.WinForms.RasterPictureBox.ImeMode">ImeMode.Inherit</see>.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterPictureBox.RightToLeft">
      <summary>
            Overrides <see cref="P:System.Windows.Forms.Control.RightToLeft" />.
            </summary>
      <value>One of the <see cref="P:Leadtools.WinForms.RasterPictureBox.RightToLeft" /> values. The default is <see cref="P:Leadtools.WinForms.RasterPictureBox.RightToLeft">RightToLeft.Inherit</see>.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterPictureBox.TabIndex">
      <summary>
            Overrides <see cref="P:System.Windows.Forms.Control.TabIndex" />.
            </summary>
      <value>A value that determines the order of logical navigation for a device. The default value is <see cref="F:System.Int32.MaxValue">Int32.MaxValue</see>.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterPictureBox.TabStop">
      <summary>
            Overrides <see cref="P:System.Windows.Forms.Control.TabStop" />.
            </summary>
      <value>
        <strong>true</strong> if the user can give the focus to the control using the TAB key; otherwise, <strong>false</strong>. The default is <strong>true</strong>.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterPictureBox.Text">
      <summary>
            Overrides <see cref="P:System.Windows.Forms.Control.Text" />.
            </summary>
      <value>The text associated with this control.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterPictureBox.AnimationMode">
              /&gt;
             <summary>
             Determines whether to use the image global animation loop or to loop the animation continuously.
             </summary><value>Determines whether to use the image global animation loop or to loop the animation continuously.</value><noremarks /><example>Refer to <see cref="T:Leadtools.WinForms.RasterPictureBox" />.</example></member>
    <member name="P:Leadtools.WinForms.RasterPictureBox.AutoDisposeImage">
             /&gt;
            <summary>
            Gets or sets a value indicating whether to auto dispose the old image when a new image is set into this <see cref="T:Leadtools.WinForms.RasterPictureBox" />.
            </summary><value>true if the image in <see cref="P:Leadtools.WinForms.RasterPictureBox.Image" /> is automatically disposed when a new image is set; otherwise, false.  Default value is true.</value><remarks>
            By default, whenever you set a new image into the <see cref="P:Leadtools.WinForms.RasterPictureBox.Image" /> property, the old image (if any) is disposed.  Set the value of this property to false to prevent disposing of the old image.
            </remarks><example><code lang="VB">        Public Sub RasterPictureBox_AutoDisposeImage(ByVal viewer As RasterPictureBox)
            ' Load two image2
            Dim codecs As RasterCodecs = New RasterCodecs()
            Dim file1 As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
            Dim file2 As String = Path.Combine(LEAD_VARS.ImagesDir, "Image2.cmp")


            Dim image1 As RasterImage = codecs.Load(file1)
            Dim image2 As RasterImage = codecs.Load(file2)

            ' Make sure the AutoDisposeImage property of the viewer is set to true
            viewer.AutoDisposeImage = True

            ' Set the first image into the viewer
            viewer.Image = image1

            ' Now set the second image into the viewer (this disposes the first image since the AutoDisposeImage property is true)
            viewer.Image = image2

            ' Try to access the first image, it generates a NullReferenceException exception since the image has been disposed
            MessageBox.Show("Try to access the first image, it generates a NullReferenceException exception since the image has been disposed.")
            Try
                Dim width As Integer = image1.Width
                MessageBox.Show(String.Format("Width is {0} pixels", width))
            Catch ex As NullReferenceException
                MessageBox.Show(ex.Message)
            End Try

            ' Set the image to null (will dispose the second image as well)
            viewer.Image = Nothing

            ' Now re-load the two images
            image1 = codecs.Load(file1)
            image2 = codecs.Load(file2)

            ' Make sure the AutoDisposeImage property of the viewer is set to false
            viewer.AutoDisposeImage = False

            ' Set the first image into the viewer
            viewer.Image = image1

            ' Now set the second image into the viewer (this will not disposes the first image since the AutoDisposeImage property is false)
            viewer.Image = image2

            ' Try to access the first image, it should work fine this time
            Try
                Dim width As Integer = image1.Width
                MessageBox.Show(String.Format("Width is {0} pixels", width))
            Catch ex As NullReferenceException
                MessageBox.Show(ex.Message)
            End Try

            ' Set the image to null (will not dispose the second image)
            viewer.Image = Nothing

            ' We should now dispose the two images manually
            image1.Dispose()
            image2.Dispose()
        End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code><code lang="CS">      public void RasterPictureBox_AutoDisposeImage(RasterPictureBox viewer)
      {
         // Load two image2
         RasterCodecs codecs = new RasterCodecs();
         string file1 = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string file2 = Path.Combine(LEAD_VARS.ImagesDir, "Image2.cmp");


         RasterImage image1 = codecs.Load(file1);
         RasterImage image2 = codecs.Load(file2);

         // Make sure the AutoDisposeImage property of the viewer is set to true
         viewer.AutoDisposeImage = true;

         // Set the first image into the viewer
         viewer.Image = image1;

         // Now set the second image into the viewer (this disposes the first image since the AutoDisposeImage property is true)
         viewer.Image = image2;

         // Try to access the first image, it generates a NullReferenceException exception since the image has been disposed
         MessageBox.Show("Try to access the first image, it generates a NullReferenceException exception since the image has been disposed.");
         try
         {
            int width = image1.Width;
            MessageBox.Show(string.Format("Width is {0} pixels", width));
         }
         catch (NullReferenceException ex)
         {
            MessageBox.Show(ex.Message);
         }

         // Set the image to null (will dispose the second image as well)
         viewer.Image = null;

         // Now re-load the two images
         image1 = codecs.Load(file1);
         image2 = codecs.Load(file2);

         // Make sure the AutoDisposeImage property of the viewer is set to false
         viewer.AutoDisposeImage = false;

         // Set the first image into the viewer
         viewer.Image = image1;

         // Now set the second image into the viewer (this will not disposes the first image since the AutoDisposeImage property is false)
         viewer.Image = image2;

         // Try to access the first image, it should work fine this time
         try
         {
            int width = image1.Width;
            MessageBox.Show(string.Format("Width is {0} pixels", width));
         }
         catch (NullReferenceException ex)
         {
            MessageBox.Show(ex.Message);
         }

         // Set the image to null (will not dispose the second image)
         viewer.Image = null;

         // We should now dispose the two images manually
         image1.Dispose();
         image2.Dispose();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code><!--RasterPictureBox.AutoDisposeImage--></example></member>
    <member name="P:Leadtools.WinForms.RasterPictureBox.BorderStyle">
             /&gt;
            <summary>
            Sets the border style for the control.
            </summary><value>The border style for the control.</value><noremarks /><example>Refer to <see cref="T:Leadtools.WinForms.RasterPictureBox" />.</example></member>
    <member name="P:Leadtools.WinForms.RasterPictureBox.CreateParams">
             /&gt;
            <summary>
            Overrides <see cref="P:System.Windows.Forms.Control.CreateParams">Control.CreateParams</see>.
            </summary><value>
            Overrides <see cref="P:System.Windows.Forms.Control.CreateParams">Control.CreateParams</see>.
            </value><noremarks /><noexample /></member>
    <member name="P:Leadtools.WinForms.RasterPictureBox.DefaultImeMode">
             /&gt;
            <summary>
            This member overrides <see cref="P:System.Windows.Forms.Control.DefaultImeMode">Control.DefaultImeMode</see>.
            </summary><value>
            This member overrides <see cref="P:System.Windows.Forms.Control.DefaultImeMode">Control.DefaultImeMode</see>.
            </value><remarks>For more information refer to <see cref="P:System.Windows.Forms.Control.DefaultImeMode">Control.DefaultImeMode</see>.</remarks><noexample /></member>
    <member name="P:Leadtools.WinForms.RasterPictureBox.DefaultSize">
             /&gt;
            <summary>
            This member overrides <see cref="P:System.Windows.Forms.Control.DefaultSize">Control.DefaultSize</see>.
            </summary><value>
            This member overrides <see cref="P:System.Windows.Forms.Control.DefaultSize">Control.DefaultSize</see>.
            </value><remarks>For more information refer to <see cref="P:System.Windows.Forms.Control.DefaultSize">Control.DefaultSize</see>.</remarks><noexample /></member>
    <member name="P:Leadtools.WinForms.RasterPictureBox.Image">
             /&gt;
            <summary>
            Gets or sets the image currently assigned for display by the control.
            </summary><value>The image to be displayed.</value><remarks>Set this property to an RasterImage object and the control will display it based on the current settings of the other properties of this class.</remarks><example>Refer to <see cref="T:Leadtools.WinForms.RasterPictureBox" />.</example></member>
    <member name="P:Leadtools.WinForms.RasterPictureBox.PaintProperties">
             /&gt;
            <summary>
            Gets or sets the <see cref="T:Leadtools.Drawing.RasterPaintProperties" /> which control the display.
            </summary><value>The <see cref="T:Leadtools.Drawing.RasterPaintProperties" /> which control the display.</value><noremarks /><example>Refer to <see cref="T:Leadtools.WinForms.RasterPictureBox" />.</example></member>
    <member name="P:Leadtools.WinForms.RasterPictureBox.SizeMode">
              /&gt;
             <summary>
             Determines how the control displays the image and whether it automatically adjusts the display rectangles.
             </summary><value>Value which determines how the control displays the image and whether it automatically adjusts the display rectangles.</value><noremarks /><example>Refer to <see cref="T:Leadtools.WinForms.RasterPictureBox" />.</example></member>
    <member name="P:Leadtools.WinForms.RasterPictureBox.UseDpi">
             /&gt;
            <summary>
            Gets or sets a value that indicates whether LEAD's automated scaling properties are used to account for the physical resolution of the bitmap.
            </summary><value><b>true</b> Account for the physical resolution.
            Default value is <b>true</b>.</value><remarks>
            The physical resolution of an image is measured in dots per inch (DPI). 
            When you load an image, the <see cref="P:Leadtools.RasterImage.XResolution" /> and <see cref="P:Leadtools.RasterImage.YResolution" /> properties are updated 
            with the DPI values for the horizontal and vertical resolution. Some images have different horizontal and vertical resolutions.
            For example, the horizontal resolution of a fax image is typically twice its vertical resolution (for example 200 by 100).
            In such cases, the displayed images will appear elongated if you do not account for the resolution.
            If the values of the <see cref="P:Leadtools.RasterImage.XResolution" /> property and the <see cref="P:Leadtools.RasterImage.YResolution" /> property are not equal, 
            set the <see cref="P:Leadtools.WinForms.RasterPictureBox.UseDpi" /> property to true to have LEAD's 
            automated scaling properties account for the physical resolution of the image.
            </remarks><example>Refer to <see cref="T:Leadtools.WinForms.RasterPictureBox" />.</example></member>
    <member name="E:Leadtools.WinForms.RasterPictureBox.AnimationModeChanged">
             /&gt;
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterPictureBox.AnimationMode" /> property changes.
            </summary><event>The event handler receives an argument of type EventArgs.</event><remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterPictureBox.AnimationMode" /> property is changed by either a programmatic modification or user interaction.
            </remarks><example><code lang="VB">        Private Sub viewer_AnimationModeChanged(ByVal sender As Object, ByVal e As EventArgs)
            Dim viewer As RasterPictureBox = CType(IIf(TypeOf sender Is RasterPictureBox, sender, Nothing), RasterPictureBox)
            Dim s As String = String.Format("AnimationModeChanged Event: {0}", viewer.AnimationMode.ToString())
            MessageBox.Show(s)
        End Sub
        Public Sub RasterPictureBox_AnimationModeChanged(ByVal viewer As RasterPictureBox)
            AddHandler viewer.AnimationModeChanged, AddressOf viewer_AnimationModeChanged

            Select Case viewer.AnimationMode
                Case RasterPictureBoxAnimationMode.Infinite
                    viewer.AnimationMode = RasterPictureBoxAnimationMode.UseImageGlobalLoop

                Case RasterPictureBoxAnimationMode.UseImageGlobalLoop
                    viewer.AnimationMode = RasterPictureBoxAnimationMode.Infinite
            End Select

            viewer.PlayAnimation()
            RemoveHandler viewer.AnimationModeChanged, AddressOf viewer_AnimationModeChanged
        End Sub</code><code lang="CS">      private void viewer_AnimationModeChanged(object sender, EventArgs e)
      {
         RasterPictureBox viewer = sender as RasterPictureBox;
         string s = string.Format("AnimationModeChanged Event: {0}", viewer.AnimationMode.ToString());
         MessageBox.Show(s);
      }
      public void RasterPictureBox_AnimationModeChanged(RasterPictureBox viewer)
      {
         viewer.AnimationModeChanged += new EventHandler(viewer_AnimationModeChanged);

         switch (viewer.AnimationMode)
         {
            case RasterPictureBoxAnimationMode.Infinite:
               viewer.AnimationMode = RasterPictureBoxAnimationMode.UseImageGlobalLoop;
               break;

            case RasterPictureBoxAnimationMode.UseImageGlobalLoop:
               viewer.AnimationMode = RasterPictureBoxAnimationMode.Infinite;
               break;
         }

         viewer.PlayAnimation();
         viewer.AnimationModeChanged-= new EventHandler(viewer_AnimationModeChanged);
      }</code><!--RasterPictureBox.AnimationModeChanged--></example></member>
    <member name="E:Leadtools.WinForms.RasterPictureBox.FrameChanged">
             /&gt;
            <summary>
            Occurs when the frame changes during animation playback.
            </summary><event>The event handler receives an argument of type RasterPictureBoxFrameChangedEventArgs.</event><remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterPictureBox.AnimationMode" /> property is changed by either a programmatic modification or user interaction.
            </remarks><example><code lang="VB">        Private Sub viewer_AnimationModeChanged(ByVal sender As Object, ByVal e As EventArgs)
            Dim viewer As RasterPictureBox = CType(IIf(TypeOf sender Is RasterPictureBox, sender, Nothing), RasterPictureBox)
            Dim s As String = String.Format("AnimationModeChanged Event: {0}", viewer.AnimationMode.ToString())
            MessageBox.Show(s)
        End Sub
        Public Sub RasterPictureBox_AnimationModeChanged(ByVal viewer As RasterPictureBox)
            AddHandler viewer.AnimationModeChanged, AddressOf viewer_AnimationModeChanged

            Select Case viewer.AnimationMode
                Case RasterPictureBoxAnimationMode.Infinite
                    viewer.AnimationMode = RasterPictureBoxAnimationMode.UseImageGlobalLoop

                Case RasterPictureBoxAnimationMode.UseImageGlobalLoop
                    viewer.AnimationMode = RasterPictureBoxAnimationMode.Infinite
            End Select

            viewer.PlayAnimation()
            RemoveHandler viewer.AnimationModeChanged, AddressOf viewer_AnimationModeChanged
        End Sub</code><code lang="CS">      private void viewer_AnimationModeChanged(object sender, EventArgs e)
      {
         RasterPictureBox viewer = sender as RasterPictureBox;
         string s = string.Format("AnimationModeChanged Event: {0}", viewer.AnimationMode.ToString());
         MessageBox.Show(s);
      }
      public void RasterPictureBox_AnimationModeChanged(RasterPictureBox viewer)
      {
         viewer.AnimationModeChanged += new EventHandler(viewer_AnimationModeChanged);

         switch (viewer.AnimationMode)
         {
            case RasterPictureBoxAnimationMode.Infinite:
               viewer.AnimationMode = RasterPictureBoxAnimationMode.UseImageGlobalLoop;
               break;

            case RasterPictureBoxAnimationMode.UseImageGlobalLoop:
               viewer.AnimationMode = RasterPictureBoxAnimationMode.Infinite;
               break;
         }

         viewer.PlayAnimation();
         viewer.AnimationModeChanged-= new EventHandler(viewer_AnimationModeChanged);
      }</code><!--RasterPictureBox.AnimationModeChanged--></example></member>
    <member name="E:Leadtools.WinForms.RasterPictureBox.SizeModeChanged">
             /&gt;
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterPictureBox.SizeMode" /> property changes.
            </summary><event>The event handler receives an argument of type EventArgs.</event><remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterPictureBox.SizeMode" /> property is changed by either a programmatic modification or user interaction.
            </remarks><example><code lang="VB">        Private Sub viewer_SizeModeChanged(ByVal sender As Object, ByVal e As EventArgs)
            Dim viewer As RasterPictureBox = CType(IIf(TypeOf sender Is RasterPictureBox, sender, Nothing), RasterPictureBox)
            Dim s As String = String.Format("SizeModeChanged Event: {0}", viewer.SizeMode.ToString())
            MessageBox.Show(s)
        End Sub
        Public Sub RasterPictureBox_SizeModeChanged(ByVal viewer As RasterPictureBox)
            AddHandler viewer.SizeModeChanged, AddressOf viewer_SizeModeChanged

            Select Case viewer.SizeMode
                Case RasterPictureBoxSizeMode.AutoSize
                    viewer.SizeMode = RasterPictureBoxSizeMode.CenterImage

                Case RasterPictureBoxSizeMode.CenterImage
                    viewer.SizeMode = RasterPictureBoxSizeMode.Normal

                Case RasterPictureBoxSizeMode.Normal
                    viewer.SizeMode = RasterPictureBoxSizeMode.StretchImage

                Case RasterPictureBoxSizeMode.StretchImage
                    viewer.SizeMode = RasterPictureBoxSizeMode.Fit

                Case RasterPictureBoxSizeMode.Fit
                    viewer.SizeMode = RasterPictureBoxSizeMode.AutoSize
            End Select

            RemoveHandler viewer.SizeModeChanged, AddressOf viewer_SizeModeChanged
        End Sub</code><code lang="CS">      private void viewer_SizeModeChanged(object sender, EventArgs e)
      {
         RasterPictureBox viewer = sender as RasterPictureBox;
         string s = string.Format("SizeModeChanged Event: {0}", viewer.SizeMode.ToString());
         MessageBox.Show(s);
      }
      public void RasterPictureBox_SizeModeChanged(RasterPictureBox viewer)
      {
         viewer.SizeModeChanged += new EventHandler(viewer_SizeModeChanged);

         switch (viewer.SizeMode)
         {
            case RasterPictureBoxSizeMode.AutoSize:
               viewer.SizeMode = RasterPictureBoxSizeMode.CenterImage;
               break;

            case RasterPictureBoxSizeMode.CenterImage:
               viewer.SizeMode = RasterPictureBoxSizeMode.Normal;
               break;

            case RasterPictureBoxSizeMode.Normal:
               viewer.SizeMode = RasterPictureBoxSizeMode.StretchImage;
               break;

            case RasterPictureBoxSizeMode.StretchImage:
               viewer.SizeMode = RasterPictureBoxSizeMode.Fit;
               break;

            case RasterPictureBoxSizeMode.Fit:
               viewer.SizeMode = RasterPictureBoxSizeMode.AutoSize;
               break;
         }

         viewer.SizeModeChanged -= new EventHandler(viewer_SizeModeChanged);
      }</code><!--RasterPictureBox.SizeModeChanged--></example></member>
    <member name="E:Leadtools.WinForms.RasterPictureBox.UseDpiChanged">
             /&gt;
            <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterPictureBox.UseDpi" /> property changes.
            </summary><remarks><p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterPictureBox.UseDpi" /> property is changed by either a programmatic modification
            or user interaction.</p></remarks><noexample /></member>
    <member name="T:Leadtools.WinForms.RasterImagePanViewerEventArgs">
      <summary>
            The <b>RasterImagePanViewerEventArgs</b> class provides information about the <see cref="E:Leadtools.WinForms.RasterImagePanViewer.Pan" /> event. 
            </summary>
      <noremarks />
      <example>
            Refer to <see cref="P:Leadtools.WinForms.RasterImagePanViewer.Viewer" /> example.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImagePanViewerEventArgs.Status">
      <summary>
            The Pan process current status.
            </summary>
      <value>
        <see cref="T:Leadtools.WinForms.RasterImagePanViewerStatus" /> value which contains the status of the current Pan Process.
            </value>
      <noremarks />
      <example>
            Refer to <see cref="P:Leadtools.WinForms.RasterImagePanViewer.Viewer" /> example.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImagePanViewerEventArgs.Rectangle">
      <summary>
            The Pan Rectangle.
            </summary>
      <value>
            The Pan Rectangle currently being drawn.
            </value>
      <noremarks />
      <example>
            Refer to <see cref="P:Leadtools.WinForms.RasterImagePanViewer.Viewer" /> example.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImagePanViewerEventArgs.Cancel">
      <summary>
            Specifies whether or not to cancel the current panning process.
            </summary>
      <value> true to cancel the panning process, false to continue normally.</value>
      <noremarks />
      <example>
            Refer to <see cref="P:Leadtools.WinForms.RasterImagePanViewer.Viewer" /> example.
            </example>
    </member>
    <member name="T:Leadtools.WinForms.RasterImageListItem">
      <summary>
            Represents an item in a <see cref="T:Leadtools.WinForms.RasterImageList" /> control.
            </summary>
      <remarks>
        <p>The <see cref="T:Leadtools.WinForms.RasterImageList" /> control is similar to a <see cref="T:System.Windows.Forms.ListView" /> in that
            it displays a list of items. The main difference is that the <see cref="T:Leadtools.WinForms.RasterImageList" /> supports viewing <see cref="T:Leadtools.RasterImage" />
            images in a number of different ways. The <b>RasterImageListItem</b> class defines
            the appearance and data associated with an item that is displayed in the <see cref="T:Leadtools.WinForms.RasterImageList" /> control.
            <see cref="T:Leadtools.WinForms.RasterImageListItem" /> objects can be displayed in the <see cref="T:Leadtools.WinForms.RasterImageList" /> control in the same
            way a <see cref="T:System.Windows.Forms.ListView" /> displays its items as large icons.</p>
        <p>Most of the properties of the <b>RasterImageListItem</b> class provide ways to change the display of the item
            in the <see cref="T:Leadtools.WinForms.RasterImageList" /> control it is associated with. The <see cref="P:Leadtools.WinForms.RasterImageListItem.Image" /> and
            <see cref="P:Leadtools.WinForms.RasterImageListItem.Page" /> properties allow you to specify the image and its page number to view.
            Items can also be selected or not selected. Use the <see cref="P:Leadtools.WinForms.RasterImageListItem.Selected" /> property to determine
            if an item is selected or to select or un-select the item at run time. Items also have a
            <see cref="P:Leadtools.WinForms.RasterImageListItem.Text" /> property that displays the text associated with the item.
            </p>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterImageList" />.
            </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageListItem.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.WinForms.RasterImageListItem" /> class with default values.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterImageList" />.
            </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageListItem.#ctor(Leadtools.RasterImage,System.Int32,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.WinForms.RasterImageListItem" /> class with an image, its page and the text to be displayed.
            </summary>
      <param name="image">A <see cref="T:Leadtools.RasterImage" /> object that specifies the image to be displayed in the item.</param>
      <param name="page">The page number (1-based) if the <i>image</i> has multiple pages.</param>
      <param name="text">The text to display for the item.</param>
      <remarks>
        <p>If the <i>image</i> contains only one page, <i>page</i> must be 1.</p>
        <para>The value of <see cref="P:Leadtools.RasterImage.Page">RasterImage.Page</see> is not used to control the page number of the item to be viewed in this item. Instead, use the <paramref name="page" /> parameter.
            This allow the same <see cref="T:Leadtools.RasterImage" /> object to be used in multiple items while setting the <see cref="P:Leadtools.WinForms.RasterImageListItem.Page" /> property to different values.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterImageList" />.
            </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageListItem.Invalidate">
      <summary>
            Redraws the item and causes a paint message to be sent to the <see cref="T:Leadtools.WinForms.RasterImageList" /> control
            that owns this item.
            </summary>
      <remarks>
            You can call <b>Invalidate</b> after you make changes to a certain <see cref="T:Leadtools.WinForms.RasterImageListItem" /> that belongs
            to a <see cref="T:Leadtools.WinForms.RasterImageList" /> control.  Calling <b>Invalidate</b> on the item causes only the portion of the
            control covered with the item to be invalidated as apposed to invalidating the surface of the entire control.
            </remarks>
      <example>
        <code lang="VB">      ''' 
      Private Sub SelectImageListItem(ByVal imageList As RasterImageList, ByVal itemIndex As Integer)
         ' Loop through all the items in the list
         Dim i As Integer = 0
         Do While i &lt; imageList.Items.Count
            Dim item As RasterImageListItem = imageList.Items(i)
            ' If this is not out item and is selected, de-select it
            If i &lt;&gt; itemIndex AndAlso item.Selected Then
               item.Selected = False

               ' re-paint only this item
               item.Invalidate()
            End If

            ' If this is our item and is not selected already, select it
            If i = itemIndex AndAlso (Not item.Selected) Then
               item.Selected = True

               ' re-paint only this item
               item.Invalidate()
            End If
            i += 1
         Loop
      End Sub</code>
        <code lang="CS">      /// 
      private void SelectImageListItem(RasterImageList imageList, int itemIndex)
      {
         // Loop through all the items in the list
         for (int i = 0; i &lt; imageList.Items.Count; i++)
         {
            RasterImageListItem item = imageList.Items[i];
            // If this is not out item and is selected, de-select it
            if (i != itemIndex &amp;&amp; item.Selected)
            {
               item.Selected = false;

               // re-paint only this item
               item.Invalidate();
            }

            // If this is our item and is not selected already, select it
            if (i == itemIndex &amp;&amp; !item.Selected)
            {
               item.Selected = true;

               // re-paint only this item
               item.Invalidate();
            }
         }
      }</code>
        <!--RasterImageListItem.Invalidate-->
      </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImageListItem.Image">
      <summary>
            The image associated with this <see cref="T:Leadtools.WinForms.RasterImageListItem" /> object.
            </summary>
      <value>An <see cref="T:Leadtools.RasterImage" /> object associated with this <see cref="T:Leadtools.WinForms.RasterImageListItem" /> object.
            The default value is null (Nothing in Visual Basic).</value>
      <remarks>
        <p>The <see cref="P:Leadtools.WinForms.RasterImageListItem.Page" /> property specifies the 1-based page number to view from this image.</p>
        <para>The value of <see cref="P:Leadtools.RasterImage.Page">RasterImage.Page</see> is not used to control the page number of the item to be viewed in this item. Instead, use the <see cref="P:Leadtools.WinForms.RasterImageListItem.Page" /> property.
            This allows the same <see cref="T:Leadtools.RasterImage" /> object to be used multiple items while setting the <see cref="P:Leadtools.WinForms.RasterImageListItem.Page" /> property to different values.</para>
        <p>The <see cref="T:Leadtools.WinForms.RasterImageList" /> control will paint this image onto the item surface. If the item does not
            have an image, the value of this property is null (Nothing in Visual Basic) and, nothing is painted.</p>
        <p>The <see cref="T:Leadtools.WinForms.RasterImageList" /> control paints the image in the following manner:
            <list type="bullet"><item><description>If the image size is less than or equal to the <see cref="P:Leadtools.WinForms.RasterImageList.ItemImageSize" /> value,
            the image is painted with its original size only centered onto the item surface.</description></item><item><description>If the image size is grater than the <see cref="P:Leadtools.WinForms.RasterImageList.ItemImageSize" /> value,
            the image is stretched to this smaller size and the aspect ratio is kept the same.</description></item><item><description>It is recommended that you populate the items with "thumbnail" images.  This will
            increase the performance of the item painting operation.  In such cases, use the <see cref="P:Leadtools.WinForms.RasterImageListItem.Tag" /> or
            <see cref="P:Leadtools.WinForms.RasterImageListItem.FileName" /> properties to store the information needed to load the image in its original size when
            requested.</description></item></list></p>
        <para>The value of <see cref="P:Leadtools.RasterImage.Page">RasterImage.Page</see> is not used to control the page number of the item to be viewed in this item. Instead, use the <see cref="P:Leadtools.WinForms.RasterImageListItem.Page" /> property.
            This allows the same <see cref="T:Leadtools.RasterImage" /> object to be used in multiple items while setting the <see cref="P:Leadtools.WinForms.RasterImageListItem.Page" /> property to different values.</para>
      </remarks>
      <example>
        <code lang="VB">      Private Class MyForm2 : Inherits Form
         Private viewer As RasterImageViewer
         Private imageList As RasterImageList
         Private codecs As RasterCodecs
         Public Sub New()
            ' Set the size of the form
            Size = New Size(400, 200)

            ' Create a new RasterImageList control
            imageList = New RasterImageList()
            imageList.Dock = DockStyle.Left
            imageList.SelectionMode = RasterImageListSelectionMode.Single
            Controls.Add(imageList)
            imageList.BringToFront()

            ' Add a handler to the SelectedIndexChanged event
            AddHandler imageList.SelectedIndexChanged, AddressOf rasterImageList_SelectedIndexChanged

            Dim splitter As Splitter = New Splitter()
            splitter.Dock = DockStyle.Left
            Controls.Add(splitter)
            splitter.BringToFront()

            viewer = New RasterImageViewer()
            viewer.Dock = DockStyle.Fill
            Controls.Add(viewer)
            viewer.BringToFront()

            ' Now load all our images
            codecs = New RasterCodecs()

            Dim folderName As String = LEAD_VARS.ImagesDir
            Dim files As String() = Directory.GetFiles(folderName, "*.*")

            ' This is going to be a lengthy operation
            ' Suspend painting the RasterImageList
            imageList.BeginUpdate()

            For Each fileName As String In files
               ' Load the image as a thumbnail
               Dim image As RasterImage = LoadThumbnail(fileName)

               ' Only add an item if we loaded the image successfuly
               If Not image Is Nothing Then
                  ' Create an item
                  Dim item As RasterImageListItem = New RasterImageListItem()


                  ' Setup the item information
                  item.Image = image
                  item.Text = Path.GetFileName(fileName)
                  item.Page = 1

                  ' To load this image in original size later
                  item.FileName = fileName

                  ' Add the item into RasterImageList
                  imageList.Items.Add(item)
               End If
            Next fileName

            imageList.EndUpdate()

         End Sub

         Private Sub rasterImageList_SelectedIndexChanged(ByVal sender As Object, ByVal e As EventArgs)
            ' User has selected an item from the RasterImageList control.
            ' Re-load the item image and show it in original size in the viewer

            ' Get the selected item(s)
            Dim selectedItems As RasterImageListItemCollection = imageList.SelectedItems
            If Not selectedItems Is Nothing AndAlso selectedItems.Count = 1 Then
               Dim item As RasterImageListItem = selectedItems(0)

               ' Load the image in its original size and set it in the viewer
               viewer.Image = codecs.Load(item.FileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1)
            End If
         End Sub

         Private Function LoadThumbnail(ByVal fileName As String) As RasterImage
            Dim image As RasterImage = Nothing

            Try
               ' See if we can load this image
               Dim info As CodecsImageInfo = codecs.GetInformation(fileName, False, 1)

               If info.Format &lt;&gt; RasterImageFormat.Unknown Then
                  ' Yes, calculate the thumbnail size to fit into RasterImageList.ItemImageSize
                  Dim rc As Rectangle = New Rectangle(0, 0, imageList.ItemImageSize.Width, imageList.ItemImageSize.Height)

                  rc = RasterImageList.GetFixedAspectRatioImageRectangle(info.Width, info.Height, rc)

                  ' Load the thumbnail
                  image = codecs.Load(fileName, rc.Width, rc.Height, 24, RasterSizeFlags.Resample, CodecsLoadByteOrder.BgrOrGray, 1, 1)
               Else
                  image = Nothing
               End If
            Catch
               image = Nothing
            End Try
            Return image
         End Function
      End Class

      Public Sub RasterImageList_Image()
         Dim form As MyForm2 = New MyForm2()
         form.ShowDialog()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MyForm2 : Form
      {
         RasterImageViewer viewer;
         RasterImageList imageList;
         RasterCodecs codecs;
         public MyForm2()
         {
            // Set the size of the form
            Size = new Size(400, 200);

            // Create a new RasterImageList control
            imageList = new RasterImageList();
            imageList.Dock = DockStyle.Left;
            imageList.SelectionMode = RasterImageListSelectionMode.Single;
            Controls.Add(imageList);
            imageList.BringToFront();

            // Add a handler to the SelectedIndexChanged event
            imageList.SelectedIndexChanged += new EventHandler(rasterImageList_SelectedIndexChanged);

            Splitter splitter = new Splitter();
            splitter.Dock = DockStyle.Left;
            Controls.Add(splitter);
            splitter.BringToFront();

            viewer = new RasterImageViewer();
            viewer.Dock = DockStyle.Fill;
            Controls.Add(viewer);
            viewer.BringToFront();

            // Now load all our images
            codecs = new RasterCodecs();

            string folderName = LEAD_VARS.ImagesDir;
            string[] files = Directory.GetFiles(folderName, "*.*");

            // This is going to be a lengthy operation
            // Suspend painting the RasterImageList
            imageList.BeginUpdate();

            foreach(string fileName in files)
            {
               // Load the image as a thumbnail
               RasterImage image = LoadThumbnail(fileName);

               // Only add an item if we loaded the image successfuly
               if(image != null)
               {
                  // Create an item
                  RasterImageListItem item = new RasterImageListItem();


                  // Setup the item information
                  item.Image = image;
                  item.Text = Path.GetFileName(fileName);
                  item.Page = 1;

                  // To load this image in original size later
                  item.FileName = fileName;

                  // Add the item into RasterImageList
                  imageList.Items.Add(item);
               }
            }

            imageList.EndUpdate();

         }

         private void rasterImageList_SelectedIndexChanged(object sender, EventArgs e)
         {
            // User has selected an item from the RasterImageList control.
            // Re-load the item image and show it in original size in the viewer

            // Get the selected item(s)
            RasterImageListItemCollection selectedItems = imageList.SelectedItems;
            if(selectedItems != null &amp;&amp; selectedItems.Count == 1)
            {
               RasterImageListItem item = selectedItems[0];

               // Load the image in its original size and set it in the viewer
               viewer.Image = codecs.Load(
                  item.FileName,
                  0,
                  CodecsLoadByteOrder.BgrOrGray,
                  1,
                  1);
            }
         }

         private RasterImage LoadThumbnail(string fileName)
         {
            RasterImage image = null;

            try
            {
               // See if we can load this image
               CodecsImageInfo info = codecs.GetInformation(fileName, false, 1);

               if(info.Format != RasterImageFormat.Unknown)
               {
                  // Yes, calculate the thumbnail size to fit into RasterImageList.ItemImageSize
                  Rectangle rc = new Rectangle(
                     0,
                     0,
                     imageList.ItemImageSize.Width,
                     imageList.ItemImageSize.Height);

                  rc = RasterImageList.GetFixedAspectRatioImageRectangle(info.Width, info.Height, rc);

                  // Load the thumbnail
                  image = codecs.Load(
                     fileName,
                     rc.Width,
                     rc.Height,
                     24,
                     RasterSizeFlags.Resample,
                     CodecsLoadByteOrder.BgrOrGray,
                     1,
                     1);
               }
               else
                  image = null;
            }
            catch
            {
               image = null;
            }
            return image;
         }
      }

      public void RasterImageList_Image()
      {
         MyForm2 form = new MyForm2();
         form.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--RasterImageListItem.Image-->
      </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImageListItem.Page">
      <summary>
            Image page number to display.
            </summary>
      <value>The 1-based page number index in <see cref="P:Leadtools.WinForms.RasterImageListItem.Image" /> to display. The default value is 1.</value>
      <remarks>
        <para>
            Set up the <see cref="T:Leadtools.WinForms.RasterImageList" /> control to an individual page of a multi-page file in each item.
            To do that, simply set the <see cref="P:Leadtools.WinForms.RasterImageListItem.Image" /> property of each item into the multi-page image, then set the
            <b>Page</b> property to the desired page.</para>
        <para>The value of <see cref="P:Leadtools.RasterImage.Page">RasterImage.Page</see> is not used to control the page number of the item to be viewed in this item. Instead, use the <see cref="P:Leadtools.WinForms.RasterImageListItem.Page" /> property.
            This allows the same <see cref="T:Leadtools.RasterImage" /> object to be used multiple items while setting the <see cref="P:Leadtools.WinForms.RasterImageListItem.Page" /> property to different values.</para>
      </remarks>
      <example>
        <code lang="VB">      Public Sub RasterImageListItem_Page(ByVal imageList As RasterImageList)
         ' Initialize the RasterCodecs class
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Clear existing items
         imageList.Items.Clear()

         ' Load a multi-page file
         Dim fileName As String = Path.Combine(LEAD_VARS.ImagesDir, "eye.gif")
         Dim image As RasterImage = codecs.Load(fileName)

         ' Create the items (1 for each page)
         Dim page As Integer = 1
         Do While page &lt;= image.PageCount
            Dim item As RasterImageListItem = New RasterImageListItem()

            item.Image = image ' Use the same image for all items
            item.Page = page ' But with a different page number
            item.Text = "Page " &amp; page.ToString()

            ' Add the item to the image list
            imageList.Items.Add(item)
            page += 1
         Loop


      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void RasterImageListItem_Page(RasterImageList imageList)
      {
         // Initialize the RasterCodecs class
         RasterCodecs codecs = new RasterCodecs();
         // Clear existing items
         imageList.Items.Clear();

         // Load a multi-page file
         string fileName = Path.Combine(LEAD_VARS.ImagesDir, "eye.gif");
         RasterImage image = codecs.Load(fileName);

         // Create the items (1 for each page)
         for (int page = 1; page &lt;= image.PageCount; page++)
         {
            RasterImageListItem item = new RasterImageListItem();

            item.Image = image;  // Use the same image for all items
            item.Page = page;  // But with a different page number
            item.Text = "Page " + page.ToString();

            // Add the item to the image list
            imageList.Items.Add(item);
         }


      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--RasterImageListItem.Page-->
      </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImageListItem.Text">
      <summary>
            Gets or sets the text of the item.
            </summary>
      <value>The text to display for the item.  Default value is null (Nothing in Visual Basic).</value>
      <remarks>
            The <b>Text</b> property allows the text displayed for the item to be changed.  This property is also used as the
            default parameter for sorting.
            </remarks>
      <example>
            Refer to <see cref="T:Leadtools.WinForms.RasterImageListItem" /> class.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImageListItem.FileName">
      <summary>
            Gets or sets the file name of the item.
            </summary>
      <value>The file name associated with this <see cref="T:Leadtools.WinForms.RasterImageListItem" /> object.
            The default value is null (Nothing in Visual Basic).</value>
      <remarks>
        <p>The <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser" /> class uses this property to store the fully qualified file name
            for the items added as a result of calling
            <see cref="M:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnails(System.String,System.String,Leadtools.WinForms.RasterThumbnailBrowserLoadFlags)">RasterThumbnailBrowser.LoadThumbnails</see></p>
        <p>The <see cref="T:Leadtools.WinForms.RasterImageList" /> class does not use this property.  However, you can use this property
            to set and get the file name when items are selected.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageListItem.Image" />.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImageListItem.Selected">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Leadtools.WinForms.RasterImageListItem" /> is selected.
            </summary>
      <value>
        <b>true</b> if this <see cref="T:Leadtools.WinForms.RasterImageListItem" /> is currently selected; otherwise, <b>false</b>.</value>
      <remarks>
        <p>You can determine whether a certain item is selected by using this property.  Also you can use the
            <see cref="P:Leadtools.WinForms.RasterImageList.SelectedItems">RasterImageList.SelectedItems</see> property to obtain a collection of
            all the currently selected items in an <see cref="T:Leadtools.WinForms.RasterImageList" /> control.</p>
        <p>Items are usually selected/un-selected in the <see cref="T:Leadtools.WinForms.RasterImageList" /> control through the user
            interface when the user clicks on an item or uses the keyboard.</p>
        <p>You can manually select/un-select items using this property.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterImageList" />.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImageListItem.Tag">
      <summary>
            Gets or sets the object that contains data about this <see cref="T:Leadtools.WinForms.RasterImageListItem" />.
            </summary>
      <value>An <see cref="T:System.Object" /> that contains data about this <see cref="T:Leadtools.WinForms.RasterImageListItem" />. The default value is a null reference
            (Nothing in Visual Basic).</value>
      <remarks>
        <p>Any <see cref="T:System.Object" /> derived type can be assigned to this property.</p>
        <p>You can use this property to associate your own user-defined data with an item.</p>
      </remarks>
      <example>
        <code lang="VB">      Private Class UserData
         Public Number As Integer
         Public Text As String
      End Class
      Public Sub RasterImageListItem_Tag(ByVal imageList As RasterImageList)
         ' Create a new RasterImageList control.
         imageList.Bounds = New Rectangle(New Point(0, 0), New Size(300, 200))

         ' Sort the items in the list in ascending order.
         imageList.Sorting = SortOrder.Ascending

         ' Initialize the RasterCodecs class
         Dim codecs As RasterCodecs = New RasterCodecs()

         ' Clear existing items
         imageList.Items.Clear()

         ' Create three items
         Dim imagesPath As String = LEAD_VARS.ImagesDir

         For i As Integer = 0 To 2
            ' Load the image
            Dim index As Integer = i + 1
            Dim imageFileName As String = Path.Combine(imagesPath, "ImageProcessingDemo\Image" &amp; index.ToString() &amp; ".cmp")
            Dim image As RasterImage = codecs.Load(imageFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1)
            Dim item As RasterImageListItem = New RasterImageListItem(image, 1, "Item" &amp; index.ToString())

            ' Select the first item
            If i = 0 Then
               item.Selected = True
            End If

            ' Add the user data
            Dim data As UserData = New UserData()
            data.Number = index
            data.Text = "This is data number " &amp; index.ToString()
            item.Tag = data

            ' Add the item to the image list
            imageList.Items.Add(item)
         Next i

         ' Add a handler to the SelectedIndexChanged event
         AddHandler imageList.SelectedIndexChanged, AddressOf imageList_SelectedIndexChanged
      End Sub

      Private Sub imageList_SelectedIndexChanged(ByVal sender As Object, ByVal e As EventArgs)
         ' User has selected an item from the RasterImageList control.
         ' Get the user data associated with the currently selected item and
         ' show it in a message box

         Dim imageList As RasterImageList = CType(IIf(TypeOf sender Is RasterImageList, sender, Nothing), RasterImageList)

         ' Get the selected item(s)
         Dim selectedItems As RasterImageListItemCollection = imageList.SelectedItems
         If Not selectedItems Is Nothing AndAlso selectedItems.Count = 1 Then
            Dim item As RasterImageListItem = selectedItems(0)

            ' Load the image in its original size and set it in the viewer
            Dim data As UserData = CType(IIf(TypeOf item.Tag Is UserData, item.Tag, Nothing), UserData)
            Dim msg As String = String.Format("Number = {0}{1}Text = {2}", data.Number, Environment.NewLine, data.Text)
            MessageBox.Show(msg)
         End If
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      private class UserData
      {
         public int Number;
         public string Text;
      }
      public void RasterImageListItem_Tag(RasterImageList imageList)
      {
         // Create a new RasterImageList control.
         imageList.Bounds = new Rectangle(new Point(0, 0), new Size(300, 200));

         // Sort the items in the list in ascending order.
         imageList.Sorting = SortOrder.Ascending;

         // Initialize the RasterCodecs class
         RasterCodecs codecs = new RasterCodecs();

         // Clear existing items
         imageList.Items.Clear();

         // Create three items
         string imagesPath = LEAD_VARS.ImagesDir;

         for (int i = 0; i &lt; 3; i++)
         {
            // Load the image
            int index = i + 1;
            string imageFileName = Path.Combine(imagesPath, @"ImageProcessingDemo\Image" + index.ToString() + ".cmp");
            RasterImage image = codecs.Load(imageFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1);
            RasterImageListItem item = new RasterImageListItem(image, 1, "Item" + index.ToString());

            // Select the first item
            if (i == 0)
               item.Selected = true;

            // Add the user data
            UserData data = new UserData();
            data.Number = index;
            data.Text = "This is data number " + index.ToString();
            item.Tag = data;

            // Add the item to the image list
            imageList.Items.Add(item);
         }

         // Add a handler to the SelectedIndexChanged event
         imageList.SelectedIndexChanged += new EventHandler(imageList_SelectedIndexChanged);
      }

      private void imageList_SelectedIndexChanged(object sender, EventArgs e)
      {
         // User has selected an item from the RasterImageList control.
         // Get the user data associated with the currently selected item and
         // show it in a message box

         RasterImageList imageList = sender as RasterImageList;

         // Get the selected item(s)
         RasterImageListItemCollection selectedItems = imageList.SelectedItems;
         if (selectedItems != null &amp;&amp; selectedItems.Count == 1)
         {
            RasterImageListItem item = selectedItems[0];

            // Load the image in its original size and set it in the viewer
            UserData data = item.Tag as UserData;
            string msg = string.Format("Number = {0}{1}Text = {2}", data.Number, Environment.NewLine, data.Text);
            MessageBox.Show(msg);
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--RasterImageListItem.Tag-->
      </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImageListItem.ImageList">
      <summary>
            Gets the <see cref="T:Leadtools.WinForms.RasterImageList" /> control that contains this item.
            </summary>
      <value>A <see cref="T:Leadtools.WinForms.RasterImageList" /> that contains this <see cref="T:Leadtools.WinForms.RasterImageListItem" />.</value>
      <remarks>
        <p>Use this property to access the <see cref="T:Leadtools.WinForms.RasterImageList" /> control that owns this
            <see cref="T:Leadtools.WinForms.RasterImageListItem" />.</p>
        <b>NOTE:</b> You cannot add an <see cref="T:Leadtools.WinForms.RasterImageListItem" /> to more than one <see cref="T:Leadtools.WinForms.RasterImageList" /> 
            control at the same time.  If you attempt to do this, an exception will be thrown.<br /></remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageListItem.FileTotalPages">
      <summary>
            Gets the total number of pages a multi page file.
            </summary>
      <value>The 1-based page number index in <see cref="P:Leadtools.WinForms.RasterImageListItem.Image" /> to display.  Default value is 1.</value>
      <remarks>
            This property is valid only when calling <see cref="M:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnails(System.String,System.String,Leadtools.WinForms.RasterThumbnailBrowserLoadFlags)" /> and the flags parameter is set to <see cref="T:Leadtools.WinForms.RasterThumbnailBrowserLoadFlags">RasterThumbnailBrowserLoadFlags.ExpandMultiPage</see></remarks>
      <example>
        <code lang="VB">      Public Sub RasterImageListItem_Page(ByVal imageList As RasterImageList)
         ' Initialize the RasterCodecs class
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Clear existing items
         imageList.Items.Clear()

         ' Load a multi-page file
         Dim fileName As String = Path.Combine(LEAD_VARS.ImagesDir, "eye.gif")
         Dim image As RasterImage = codecs.Load(fileName)

         ' Create the items (1 for each page)
         Dim page As Integer = 1
         Do While page &lt;= image.PageCount
            Dim item As RasterImageListItem = New RasterImageListItem()

            item.Image = image ' Use the same image for all items
            item.Page = page ' But with a different page number
            item.Text = "Page " &amp; page.ToString()

            ' Add the item to the image list
            imageList.Items.Add(item)
            page += 1
         Loop


      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void RasterImageListItem_Page(RasterImageList imageList)
      {
         // Initialize the RasterCodecs class
         RasterCodecs codecs = new RasterCodecs();
         // Clear existing items
         imageList.Items.Clear();

         // Load a multi-page file
         string fileName = Path.Combine(LEAD_VARS.ImagesDir, "eye.gif");
         RasterImage image = codecs.Load(fileName);

         // Create the items (1 for each page)
         for (int page = 1; page &lt;= image.PageCount; page++)
         {
            RasterImageListItem item = new RasterImageListItem();

            item.Image = image;  // Use the same image for all items
            item.Page = page;  // But with a different page number
            item.Text = "Page " + page.ToString();

            // Add the item to the image list
            imageList.Items.Add(item);
         }


      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--RasterImageListItem.Page-->
      </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImageListItem.FilePageNumber">
      <summary>
            Gets the file page number for the RasterImageListItem if this item represent a single page is a multi page file.
            </summary>
      <value>The 1-based page number index in <see cref="P:Leadtools.WinForms.RasterImageListItem.Image" /> to display. The default value is 1.</value>
      <remarks>
            This property is valid only when calling <see cref="M:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnails(System.String,System.String,Leadtools.WinForms.RasterThumbnailBrowserLoadFlags)" /> and the flags paramter set to <see cref="T:Leadtools.WinForms.RasterThumbnailBrowserLoadFlags">RasterThumbnailBrowserLoadFlags.ExpandMultiPage</see></remarks>
      <example>
        <code lang="VB">      Public Sub RasterImageListItem_Page(ByVal imageList As RasterImageList)
         ' Initialize the RasterCodecs class
         Dim codecs As RasterCodecs = New RasterCodecs()
         ' Clear existing items
         imageList.Items.Clear()

         ' Load a multi-page file
         Dim fileName As String = Path.Combine(LEAD_VARS.ImagesDir, "eye.gif")
         Dim image As RasterImage = codecs.Load(fileName)

         ' Create the items (1 for each page)
         Dim page As Integer = 1
         Do While page &lt;= image.PageCount
            Dim item As RasterImageListItem = New RasterImageListItem()

            item.Image = image ' Use the same image for all items
            item.Page = page ' But with a different page number
            item.Text = "Page " &amp; page.ToString()

            ' Add the item to the image list
            imageList.Items.Add(item)
            page += 1
         Loop


      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void RasterImageListItem_Page(RasterImageList imageList)
      {
         // Initialize the RasterCodecs class
         RasterCodecs codecs = new RasterCodecs();
         // Clear existing items
         imageList.Items.Clear();

         // Load a multi-page file
         string fileName = Path.Combine(LEAD_VARS.ImagesDir, "eye.gif");
         RasterImage image = codecs.Load(fileName);

         // Create the items (1 for each page)
         for (int page = 1; page &lt;= image.PageCount; page++)
         {
            RasterImageListItem item = new RasterImageListItem();

            item.Image = image;  // Use the same image for all items
            item.Page = page;  // But with a different page number
            item.Text = "Page " + page.ToString();

            // Add the item to the image list
            imageList.Items.Add(item);
         }


      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--RasterImageListItem.Page-->
      </example>
    </member>
    <member name="T:Leadtools.WinForms.RasterViewerRectangleEventArgs">
      <summary>
            Provides data for various RasterImageViewer user interaction events.
            </summary>
      <remarks>
            Use this class when handling the following events:
            <list><item><description><see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveZoomTo" /></description></item><item><description><see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveRegionRectangle" /></description></item><item><description><see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveRegionEllipse" /></description></item></list></remarks>
      <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.IsInteractiveModeBusy" />.</example>
    </member>
    <member name="M:Leadtools.WinForms.RasterViewerRectangleEventArgs.#ctor">
      <summary>
            Initializes a new RasterViewerRectangleEventArgs with default values.
            </summary>
      <noremarks />
      <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.IsInteractiveModeBusy" />.</example>
    </member>
    <member name="M:Leadtools.WinForms.RasterViewerRectangleEventArgs.#ctor(Leadtools.WinForms.RasterViewerInteractiveStatus,System.Drawing.Rectangle)">
      <summary>
            Initializes a new RasterViewerRectangleEventArgs with specified values.
            </summary>
      <param name="status">The status of the interactive mode.</param>
      <param name="rc">Interactive mode rectangle.</param>
      <noremarks />
      <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.IsInteractiveModeBusy" />.</example>
    </member>
    <member name="P:Leadtools.WinForms.RasterViewerRectangleEventArgs.Rectangle">
      <summary>
            Returns the current interactive mode rectangle.
            </summary>
      <value>
            The current interactive mode rectangle.
            </value>
      <noremarks />
      <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.IsInteractiveModeBusy" />.</example>
    </member>
    <member name="T:Leadtools.WinForms.RasterViewerExtraDataBindingArgs">
      <summary>
            Provides extra data for RasterImageViewer DataBinding read/write events.
            </summary>
      <remarks>
            Use this class when handling the following events:
            <list><item><description><see cref="E:Leadtools.WinForms.RasterImageViewer.WriteBindingData" /></description></item><item><description><see cref="E:Leadtools.WinForms.RasterImageViewer.ReadBindingData" /></description></item></list></remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterViewerExtraDataBindingArgs.#ctor(System.IO.MemoryStream)">
      <summary>
            Initializes a new RasterViewerExtraDataBindingArgs with specified parameters.
            </summary>
      <param name="bindingData">The extra data to write or read with the image, in DataBinding process.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterViewerExtraDataBindingArgs.BindingData">
      <summary>
            Gets or sets the extra data with the image in the DataBinding.
            </summary>
      <value>MemoryStream contains the extra data added or to be added with the image in DataBinding process.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="T:Leadtools.WinForms.RasterImagePanViewerStatus">
      <summary>
            Represents the current panning process status.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.WinForms.RasterImagePanViewerStatus.Begin">
      <summary>
            The user started the panning process.
            </summary>
    </member>
    <member name="F:Leadtools.WinForms.RasterImagePanViewerStatus.Panning">
      <summary>
            The user is panning now. 
            </summary>
    </member>
    <member name="F:Leadtools.WinForms.RasterImagePanViewerStatus.End">
      <summary>
            The user ended the panning process. 
            </summary>
    </member>
    <member name="T:Leadtools.WinForms.RasterImagePanViewer">
      <summary>
            Represents a Leadtools <b>RasterImagePanViewer</b> control for displaying a scaled view of an image.
            </summary>
      <remarks>
            The <b>RasterImagePanViewer</b> is used to display a scaled view of an image, which is also being 
            displayed in the <see cref="T:Leadtools.WinForms.RasterImageViewer" /> control at a size that would require scrolling. 
            The <b>RasterImagePanViewer</b> will maintain the images aspect ratio. 
            In the <b>RasterImagePanViewer</b>, a colored Pan rect will be displayed to 
            indicate the portion of the image currently being displayed in the 
            <see cref="T:Leadtools.WinForms.RasterImageViewer" /> associated with this PanViewer control. 
            When a user clicks inside the <b>RasterImagePanViewer</b> and moves the 
            mouse, while holding down the button, the Pan rect will move with the 
            mouse pointer. Set the <see cref="P:Leadtools.WinForms.RasterImagePanViewer.Viewer" /> property 
            to a <see cref="T:Leadtools.WinForms.RasterImageViewer" /> object to be panned.
            </remarks>
      <example>
            Refer to <see cref="P:Leadtools.WinForms.RasterImagePanViewer.Viewer" /> example.
            </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImagePanViewer.#ctor">
      <summary> 
            Initializes a new instance of the <see cref="T:Leadtools.WinForms.RasterImagePanViewer" /> class.
            </summary>
      <noremarks />
      <example>
            Refer to <see cref="P:Leadtools.WinForms.RasterImagePanViewer.Viewer" /> example.
            </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImagePanViewer.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImagePanViewer.OnViewerChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImagePanViewer.ViewerChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate. The <b>OnViewerChanged</b> method also allows 
            derived classes to handle the event without attaching a delegate. This is the preferred technique for 
            handling the event in a derived class. Notes to Inheritors: When overriding <b>OnViewerChanged</b> in a 
            derived class, be sure to call the base class's <b>OnViewerChanged</b> method so that registered delegates 
            receive the event.
            </remarks>
      <example>
        <code lang="VB">      Public Class MyRasterImagePanViewer
         Inherits RasterImagePanViewer
         '.
         '.
         '.
         Protected Overrides Sub OnViewerChanged(ByVal e As EventArgs)
            MyBase.OnViewerChanged(e)
            Console.WriteLine("OnViewerChanged is called")
         End Sub

         Protected Overrides Sub OnRectangleColorChanged(ByVal e As EventArgs)
            MyBase.OnRectangleColorChanged(e)

            Console.WriteLine("OnRectangleColorChanged is called")
         End Sub

         Protected Overrides Sub OnImageColorChanged(ByVal e As EventArgs)
            MyBase.OnImageColorChanged(e)

            Console.WriteLine("OnImageColorChanged is called")
         End Sub

         Protected Overrides Sub OnClipCursorChanged(ByVal e As EventArgs)
            MyBase.OnClipCursorChanged(e)

            Console.WriteLine("OnClipCursorChanged is called")
         End Sub

         Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            MyBase.OnPaint(e)

            Console.WriteLine("OnPaint is called")
         End Sub

         Protected Overrides Sub OnMouseDown(ByVal e As MouseEventArgs)
            MyBase.OnMouseDown(e)

            Console.WriteLine("OnMouseDown is called")
         End Sub

         Protected Overrides Sub OnMouseMove(ByVal e As MouseEventArgs)
            MyBase.OnMouseMove(e)

            Console.WriteLine("OnMouseMove is called")
         End Sub

         Protected Overrides Sub OnMouseUp(ByVal e As MouseEventArgs)
            MyBase.OnMouseUp(e)

            Console.WriteLine("OnMouseUp is called")
         End Sub

         Protected Overrides Sub OnLostFocus(ByVal e As EventArgs)
            MyBase.OnLostFocus(e)

            Console.WriteLine("OnLostFocus is called")
         End Sub

         Protected Overrides Sub OnSizeChanged(ByVal e As EventArgs)
            MyBase.OnSizeChanged(e)

            Console.WriteLine("OnSizeChanged is called")
         End Sub
      End Class</code>
        <code lang="CS">      public class MyRasterImagePanViewer : RasterImagePanViewer
      {
         //.
         //.
         //.
         protected override void OnViewerChanged(EventArgs e)
         {
            base.OnViewerChanged(e);
            Console.WriteLine("OnViewerChanged is called");
         }

         protected override void OnRectangleColorChanged(EventArgs e)
         {
            base.OnRectangleColorChanged(e);

            Console.WriteLine("OnRectangleColorChanged is called");
         }

         protected override void OnImageColorChanged(EventArgs e)
         {
            base.OnImageColorChanged(e);

            Console.WriteLine("OnImageColorChanged is called");
         }

         protected override void OnClipCursorChanged(EventArgs e)
         {
            base.OnClipCursorChanged(e);

            Console.WriteLine("OnClipCursorChanged is called");
         }

         protected override void OnPaint(PaintEventArgs e)
         {
            base.OnPaint(e);

            Console.WriteLine("OnPaint is called");
         }

         protected override void OnMouseDown(MouseEventArgs e)
         {
            base.OnMouseDown(e);

            Console.WriteLine("OnMouseDown is called");
         }

         protected override void OnMouseMove(MouseEventArgs e)
         {
            base.OnMouseMove(e);

            Console.WriteLine("OnMouseMove is called");
         }

         protected override void OnMouseUp(MouseEventArgs e)
         {
            base.OnMouseUp(e);

            Console.WriteLine("OnMouseUp is called");
         }

         protected override void OnLostFocus(EventArgs e)
         {
            base.OnLostFocus(e);

            Console.WriteLine("OnLostFocus is called");
         }

         protected override void OnSizeChanged(EventArgs e)
         {
            base.OnSizeChanged(e);

            Console.WriteLine("OnSizeChanged is called");
         }
      }</code>
        <!--RasterImagePanViewer.OnViewerChanged-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImagePanViewer.OnRectangleColorChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImagePanViewer.RectangleColorChanged" /> event. 
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate. The <b>OnRectangleColorChanged</b> method 
            also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class. Notes to Inheritors: When overriding 
            <b>OnRectangleColorChanged</b> in a derived class, be sure to call the base class's <b>OnRectangleColorChanged</b>
            method so that registered delegates receive the event.
            </remarks>
      <example>
        <code lang="VB">      Public Class MyRasterImagePanViewer
         Inherits RasterImagePanViewer
         '.
         '.
         '.
         Protected Overrides Sub OnViewerChanged(ByVal e As EventArgs)
            MyBase.OnViewerChanged(e)
            Console.WriteLine("OnViewerChanged is called")
         End Sub

         Protected Overrides Sub OnRectangleColorChanged(ByVal e As EventArgs)
            MyBase.OnRectangleColorChanged(e)

            Console.WriteLine("OnRectangleColorChanged is called")
         End Sub

         Protected Overrides Sub OnImageColorChanged(ByVal e As EventArgs)
            MyBase.OnImageColorChanged(e)

            Console.WriteLine("OnImageColorChanged is called")
         End Sub

         Protected Overrides Sub OnClipCursorChanged(ByVal e As EventArgs)
            MyBase.OnClipCursorChanged(e)

            Console.WriteLine("OnClipCursorChanged is called")
         End Sub

         Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            MyBase.OnPaint(e)

            Console.WriteLine("OnPaint is called")
         End Sub

         Protected Overrides Sub OnMouseDown(ByVal e As MouseEventArgs)
            MyBase.OnMouseDown(e)

            Console.WriteLine("OnMouseDown is called")
         End Sub

         Protected Overrides Sub OnMouseMove(ByVal e As MouseEventArgs)
            MyBase.OnMouseMove(e)

            Console.WriteLine("OnMouseMove is called")
         End Sub

         Protected Overrides Sub OnMouseUp(ByVal e As MouseEventArgs)
            MyBase.OnMouseUp(e)

            Console.WriteLine("OnMouseUp is called")
         End Sub

         Protected Overrides Sub OnLostFocus(ByVal e As EventArgs)
            MyBase.OnLostFocus(e)

            Console.WriteLine("OnLostFocus is called")
         End Sub

         Protected Overrides Sub OnSizeChanged(ByVal e As EventArgs)
            MyBase.OnSizeChanged(e)

            Console.WriteLine("OnSizeChanged is called")
         End Sub
      End Class</code>
        <code lang="CS">      public class MyRasterImagePanViewer : RasterImagePanViewer
      {
         //.
         //.
         //.
         protected override void OnViewerChanged(EventArgs e)
         {
            base.OnViewerChanged(e);
            Console.WriteLine("OnViewerChanged is called");
         }

         protected override void OnRectangleColorChanged(EventArgs e)
         {
            base.OnRectangleColorChanged(e);

            Console.WriteLine("OnRectangleColorChanged is called");
         }

         protected override void OnImageColorChanged(EventArgs e)
         {
            base.OnImageColorChanged(e);

            Console.WriteLine("OnImageColorChanged is called");
         }

         protected override void OnClipCursorChanged(EventArgs e)
         {
            base.OnClipCursorChanged(e);

            Console.WriteLine("OnClipCursorChanged is called");
         }

         protected override void OnPaint(PaintEventArgs e)
         {
            base.OnPaint(e);

            Console.WriteLine("OnPaint is called");
         }

         protected override void OnMouseDown(MouseEventArgs e)
         {
            base.OnMouseDown(e);

            Console.WriteLine("OnMouseDown is called");
         }

         protected override void OnMouseMove(MouseEventArgs e)
         {
            base.OnMouseMove(e);

            Console.WriteLine("OnMouseMove is called");
         }

         protected override void OnMouseUp(MouseEventArgs e)
         {
            base.OnMouseUp(e);

            Console.WriteLine("OnMouseUp is called");
         }

         protected override void OnLostFocus(EventArgs e)
         {
            base.OnLostFocus(e);

            Console.WriteLine("OnLostFocus is called");
         }

         protected override void OnSizeChanged(EventArgs e)
         {
            base.OnSizeChanged(e);

            Console.WriteLine("OnSizeChanged is called");
         }
      }</code>
        <!--RasterImagePanViewer.OnViewerChanged-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImagePanViewer.OnImageColorChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImagePanViewer.ImageColorChanged" /> event. 
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate. The <b>OnImageColorChanged</b> method 
            also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class. Notes to Inheritors: When overriding 
            <b>OnImageColorChanged</b> in a derived class, be sure to call the base class's <b>OnImageColorChanged</b>
            method so that registered delegates receive the event.
            </remarks>
      <example>
        <code lang="VB">      Public Class MyRasterImagePanViewer
         Inherits RasterImagePanViewer
         '.
         '.
         '.
         Protected Overrides Sub OnViewerChanged(ByVal e As EventArgs)
            MyBase.OnViewerChanged(e)
            Console.WriteLine("OnViewerChanged is called")
         End Sub

         Protected Overrides Sub OnRectangleColorChanged(ByVal e As EventArgs)
            MyBase.OnRectangleColorChanged(e)

            Console.WriteLine("OnRectangleColorChanged is called")
         End Sub

         Protected Overrides Sub OnImageColorChanged(ByVal e As EventArgs)
            MyBase.OnImageColorChanged(e)

            Console.WriteLine("OnImageColorChanged is called")
         End Sub

         Protected Overrides Sub OnClipCursorChanged(ByVal e As EventArgs)
            MyBase.OnClipCursorChanged(e)

            Console.WriteLine("OnClipCursorChanged is called")
         End Sub

         Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            MyBase.OnPaint(e)

            Console.WriteLine("OnPaint is called")
         End Sub

         Protected Overrides Sub OnMouseDown(ByVal e As MouseEventArgs)
            MyBase.OnMouseDown(e)

            Console.WriteLine("OnMouseDown is called")
         End Sub

         Protected Overrides Sub OnMouseMove(ByVal e As MouseEventArgs)
            MyBase.OnMouseMove(e)

            Console.WriteLine("OnMouseMove is called")
         End Sub

         Protected Overrides Sub OnMouseUp(ByVal e As MouseEventArgs)
            MyBase.OnMouseUp(e)

            Console.WriteLine("OnMouseUp is called")
         End Sub

         Protected Overrides Sub OnLostFocus(ByVal e As EventArgs)
            MyBase.OnLostFocus(e)

            Console.WriteLine("OnLostFocus is called")
         End Sub

         Protected Overrides Sub OnSizeChanged(ByVal e As EventArgs)
            MyBase.OnSizeChanged(e)

            Console.WriteLine("OnSizeChanged is called")
         End Sub
      End Class</code>
        <code lang="CS">      public class MyRasterImagePanViewer : RasterImagePanViewer
      {
         //.
         //.
         //.
         protected override void OnViewerChanged(EventArgs e)
         {
            base.OnViewerChanged(e);
            Console.WriteLine("OnViewerChanged is called");
         }

         protected override void OnRectangleColorChanged(EventArgs e)
         {
            base.OnRectangleColorChanged(e);

            Console.WriteLine("OnRectangleColorChanged is called");
         }

         protected override void OnImageColorChanged(EventArgs e)
         {
            base.OnImageColorChanged(e);

            Console.WriteLine("OnImageColorChanged is called");
         }

         protected override void OnClipCursorChanged(EventArgs e)
         {
            base.OnClipCursorChanged(e);

            Console.WriteLine("OnClipCursorChanged is called");
         }

         protected override void OnPaint(PaintEventArgs e)
         {
            base.OnPaint(e);

            Console.WriteLine("OnPaint is called");
         }

         protected override void OnMouseDown(MouseEventArgs e)
         {
            base.OnMouseDown(e);

            Console.WriteLine("OnMouseDown is called");
         }

         protected override void OnMouseMove(MouseEventArgs e)
         {
            base.OnMouseMove(e);

            Console.WriteLine("OnMouseMove is called");
         }

         protected override void OnMouseUp(MouseEventArgs e)
         {
            base.OnMouseUp(e);

            Console.WriteLine("OnMouseUp is called");
         }

         protected override void OnLostFocus(EventArgs e)
         {
            base.OnLostFocus(e);

            Console.WriteLine("OnLostFocus is called");
         }

         protected override void OnSizeChanged(EventArgs e)
         {
            base.OnSizeChanged(e);

            Console.WriteLine("OnSizeChanged is called");
         }
      }</code>
        <!--RasterImagePanViewer.OnViewerChanged-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImagePanViewer.OnClipCursorChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImagePanViewer.ClipCursorChanged" /> event. 
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate. The <b>OnClipCursorChanged</b> method 
            also allows derived classes to handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class. Notes to Inheritors: When overriding 
            <b>OnClipCursorChanged</b> in a derived class, be sure to call the base class's <b>OnClipCursorChanged</b>
            method so that registered delegates receive the event.
            </remarks>
      <example>
        <code lang="VB">      Public Class MyRasterImagePanViewer
         Inherits RasterImagePanViewer
         '.
         '.
         '.
         Protected Overrides Sub OnViewerChanged(ByVal e As EventArgs)
            MyBase.OnViewerChanged(e)
            Console.WriteLine("OnViewerChanged is called")
         End Sub

         Protected Overrides Sub OnRectangleColorChanged(ByVal e As EventArgs)
            MyBase.OnRectangleColorChanged(e)

            Console.WriteLine("OnRectangleColorChanged is called")
         End Sub

         Protected Overrides Sub OnImageColorChanged(ByVal e As EventArgs)
            MyBase.OnImageColorChanged(e)

            Console.WriteLine("OnImageColorChanged is called")
         End Sub

         Protected Overrides Sub OnClipCursorChanged(ByVal e As EventArgs)
            MyBase.OnClipCursorChanged(e)

            Console.WriteLine("OnClipCursorChanged is called")
         End Sub

         Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            MyBase.OnPaint(e)

            Console.WriteLine("OnPaint is called")
         End Sub

         Protected Overrides Sub OnMouseDown(ByVal e As MouseEventArgs)
            MyBase.OnMouseDown(e)

            Console.WriteLine("OnMouseDown is called")
         End Sub

         Protected Overrides Sub OnMouseMove(ByVal e As MouseEventArgs)
            MyBase.OnMouseMove(e)

            Console.WriteLine("OnMouseMove is called")
         End Sub

         Protected Overrides Sub OnMouseUp(ByVal e As MouseEventArgs)
            MyBase.OnMouseUp(e)

            Console.WriteLine("OnMouseUp is called")
         End Sub

         Protected Overrides Sub OnLostFocus(ByVal e As EventArgs)
            MyBase.OnLostFocus(e)

            Console.WriteLine("OnLostFocus is called")
         End Sub

         Protected Overrides Sub OnSizeChanged(ByVal e As EventArgs)
            MyBase.OnSizeChanged(e)

            Console.WriteLine("OnSizeChanged is called")
         End Sub
      End Class</code>
        <code lang="CS">      public class MyRasterImagePanViewer : RasterImagePanViewer
      {
         //.
         //.
         //.
         protected override void OnViewerChanged(EventArgs e)
         {
            base.OnViewerChanged(e);
            Console.WriteLine("OnViewerChanged is called");
         }

         protected override void OnRectangleColorChanged(EventArgs e)
         {
            base.OnRectangleColorChanged(e);

            Console.WriteLine("OnRectangleColorChanged is called");
         }

         protected override void OnImageColorChanged(EventArgs e)
         {
            base.OnImageColorChanged(e);

            Console.WriteLine("OnImageColorChanged is called");
         }

         protected override void OnClipCursorChanged(EventArgs e)
         {
            base.OnClipCursorChanged(e);

            Console.WriteLine("OnClipCursorChanged is called");
         }

         protected override void OnPaint(PaintEventArgs e)
         {
            base.OnPaint(e);

            Console.WriteLine("OnPaint is called");
         }

         protected override void OnMouseDown(MouseEventArgs e)
         {
            base.OnMouseDown(e);

            Console.WriteLine("OnMouseDown is called");
         }

         protected override void OnMouseMove(MouseEventArgs e)
         {
            base.OnMouseMove(e);

            Console.WriteLine("OnMouseMove is called");
         }

         protected override void OnMouseUp(MouseEventArgs e)
         {
            base.OnMouseUp(e);

            Console.WriteLine("OnMouseUp is called");
         }

         protected override void OnLostFocus(EventArgs e)
         {
            base.OnLostFocus(e);

            Console.WriteLine("OnLostFocus is called");
         }

         protected override void OnSizeChanged(EventArgs e)
         {
            base.OnSizeChanged(e);

            Console.WriteLine("OnSizeChanged is called");
         }
      }</code>
        <!--RasterImagePanViewer.OnViewerChanged-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImagePanViewer.OnPaint(System.Windows.Forms.PaintEventArgs)">
      <summary>
            Overrides <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)" />.
            </summary>
      <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains information about the control to paint.</param>
      <remarks>
        <para>Raising an event invokes the event handler through a delegate.</para>
        <para>The <b>OnPaint</b> method also allows derived classes to handle the event without attaching a delegate.
            This is the preferred technique for handling the event in a derived class.</para>
        <para>
          <b>Notes to Inheritors</b> When overriding <b>OnPaint</b> in a derived class, be sure to call the base class's <b>OnPaint</b> method so that registered delegates receive the event.</para>
      </remarks>
      <example>
        <code lang="VB">      Public Class MyRasterImagePanViewer
         Inherits RasterImagePanViewer
         '.
         '.
         '.
         Protected Overrides Sub OnViewerChanged(ByVal e As EventArgs)
            MyBase.OnViewerChanged(e)
            Console.WriteLine("OnViewerChanged is called")
         End Sub

         Protected Overrides Sub OnRectangleColorChanged(ByVal e As EventArgs)
            MyBase.OnRectangleColorChanged(e)

            Console.WriteLine("OnRectangleColorChanged is called")
         End Sub

         Protected Overrides Sub OnImageColorChanged(ByVal e As EventArgs)
            MyBase.OnImageColorChanged(e)

            Console.WriteLine("OnImageColorChanged is called")
         End Sub

         Protected Overrides Sub OnClipCursorChanged(ByVal e As EventArgs)
            MyBase.OnClipCursorChanged(e)

            Console.WriteLine("OnClipCursorChanged is called")
         End Sub

         Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            MyBase.OnPaint(e)

            Console.WriteLine("OnPaint is called")
         End Sub

         Protected Overrides Sub OnMouseDown(ByVal e As MouseEventArgs)
            MyBase.OnMouseDown(e)

            Console.WriteLine("OnMouseDown is called")
         End Sub

         Protected Overrides Sub OnMouseMove(ByVal e As MouseEventArgs)
            MyBase.OnMouseMove(e)

            Console.WriteLine("OnMouseMove is called")
         End Sub

         Protected Overrides Sub OnMouseUp(ByVal e As MouseEventArgs)
            MyBase.OnMouseUp(e)

            Console.WriteLine("OnMouseUp is called")
         End Sub

         Protected Overrides Sub OnLostFocus(ByVal e As EventArgs)
            MyBase.OnLostFocus(e)

            Console.WriteLine("OnLostFocus is called")
         End Sub

         Protected Overrides Sub OnSizeChanged(ByVal e As EventArgs)
            MyBase.OnSizeChanged(e)

            Console.WriteLine("OnSizeChanged is called")
         End Sub
      End Class</code>
        <code lang="CS">      public class MyRasterImagePanViewer : RasterImagePanViewer
      {
         //.
         //.
         //.
         protected override void OnViewerChanged(EventArgs e)
         {
            base.OnViewerChanged(e);
            Console.WriteLine("OnViewerChanged is called");
         }

         protected override void OnRectangleColorChanged(EventArgs e)
         {
            base.OnRectangleColorChanged(e);

            Console.WriteLine("OnRectangleColorChanged is called");
         }

         protected override void OnImageColorChanged(EventArgs e)
         {
            base.OnImageColorChanged(e);

            Console.WriteLine("OnImageColorChanged is called");
         }

         protected override void OnClipCursorChanged(EventArgs e)
         {
            base.OnClipCursorChanged(e);

            Console.WriteLine("OnClipCursorChanged is called");
         }

         protected override void OnPaint(PaintEventArgs e)
         {
            base.OnPaint(e);

            Console.WriteLine("OnPaint is called");
         }

         protected override void OnMouseDown(MouseEventArgs e)
         {
            base.OnMouseDown(e);

            Console.WriteLine("OnMouseDown is called");
         }

         protected override void OnMouseMove(MouseEventArgs e)
         {
            base.OnMouseMove(e);

            Console.WriteLine("OnMouseMove is called");
         }

         protected override void OnMouseUp(MouseEventArgs e)
         {
            base.OnMouseUp(e);

            Console.WriteLine("OnMouseUp is called");
         }

         protected override void OnLostFocus(EventArgs e)
         {
            base.OnLostFocus(e);

            Console.WriteLine("OnLostFocus is called");
         }

         protected override void OnSizeChanged(EventArgs e)
         {
            base.OnSizeChanged(e);

            Console.WriteLine("OnSizeChanged is called");
         }
      }</code>
        <!--RasterImagePanViewer.OnViewerChanged-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImagePanViewer.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
      <summary>
            Occurs when the user presses a mouse button. 
            </summary>
      <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
      <remarks>
        <para>Raising an event invokes the event handler through a delegate.</para>
        <para>The <b>OnMouseDown</b> method also allows derived classes to handle the event without attaching a delegate.
            This is the preferred technique for handling the event in a derived class.</para>
        <para>
          <b>Notes to Inheritors</b> When overriding <b>OnMouseDown</b> in a derived class, be sure to call the base class's <b>OnMouseDown</b> method so that registered delegates receive the event.</para>
      </remarks>
      <example>
        <code lang="VB">      Public Class MyRasterImagePanViewer
         Inherits RasterImagePanViewer
         '.
         '.
         '.
         Protected Overrides Sub OnViewerChanged(ByVal e As EventArgs)
            MyBase.OnViewerChanged(e)
            Console.WriteLine("OnViewerChanged is called")
         End Sub

         Protected Overrides Sub OnRectangleColorChanged(ByVal e As EventArgs)
            MyBase.OnRectangleColorChanged(e)

            Console.WriteLine("OnRectangleColorChanged is called")
         End Sub

         Protected Overrides Sub OnImageColorChanged(ByVal e As EventArgs)
            MyBase.OnImageColorChanged(e)

            Console.WriteLine("OnImageColorChanged is called")
         End Sub

         Protected Overrides Sub OnClipCursorChanged(ByVal e As EventArgs)
            MyBase.OnClipCursorChanged(e)

            Console.WriteLine("OnClipCursorChanged is called")
         End Sub

         Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            MyBase.OnPaint(e)

            Console.WriteLine("OnPaint is called")
         End Sub

         Protected Overrides Sub OnMouseDown(ByVal e As MouseEventArgs)
            MyBase.OnMouseDown(e)

            Console.WriteLine("OnMouseDown is called")
         End Sub

         Protected Overrides Sub OnMouseMove(ByVal e As MouseEventArgs)
            MyBase.OnMouseMove(e)

            Console.WriteLine("OnMouseMove is called")
         End Sub

         Protected Overrides Sub OnMouseUp(ByVal e As MouseEventArgs)
            MyBase.OnMouseUp(e)

            Console.WriteLine("OnMouseUp is called")
         End Sub

         Protected Overrides Sub OnLostFocus(ByVal e As EventArgs)
            MyBase.OnLostFocus(e)

            Console.WriteLine("OnLostFocus is called")
         End Sub

         Protected Overrides Sub OnSizeChanged(ByVal e As EventArgs)
            MyBase.OnSizeChanged(e)

            Console.WriteLine("OnSizeChanged is called")
         End Sub
      End Class</code>
        <code lang="CS">      public class MyRasterImagePanViewer : RasterImagePanViewer
      {
         //.
         //.
         //.
         protected override void OnViewerChanged(EventArgs e)
         {
            base.OnViewerChanged(e);
            Console.WriteLine("OnViewerChanged is called");
         }

         protected override void OnRectangleColorChanged(EventArgs e)
         {
            base.OnRectangleColorChanged(e);

            Console.WriteLine("OnRectangleColorChanged is called");
         }

         protected override void OnImageColorChanged(EventArgs e)
         {
            base.OnImageColorChanged(e);

            Console.WriteLine("OnImageColorChanged is called");
         }

         protected override void OnClipCursorChanged(EventArgs e)
         {
            base.OnClipCursorChanged(e);

            Console.WriteLine("OnClipCursorChanged is called");
         }

         protected override void OnPaint(PaintEventArgs e)
         {
            base.OnPaint(e);

            Console.WriteLine("OnPaint is called");
         }

         protected override void OnMouseDown(MouseEventArgs e)
         {
            base.OnMouseDown(e);

            Console.WriteLine("OnMouseDown is called");
         }

         protected override void OnMouseMove(MouseEventArgs e)
         {
            base.OnMouseMove(e);

            Console.WriteLine("OnMouseMove is called");
         }

         protected override void OnMouseUp(MouseEventArgs e)
         {
            base.OnMouseUp(e);

            Console.WriteLine("OnMouseUp is called");
         }

         protected override void OnLostFocus(EventArgs e)
         {
            base.OnLostFocus(e);

            Console.WriteLine("OnLostFocus is called");
         }

         protected override void OnSizeChanged(EventArgs e)
         {
            base.OnSizeChanged(e);

            Console.WriteLine("OnSizeChanged is called");
         }
      }</code>
        <!--RasterImagePanViewer.OnViewerChanged-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImagePanViewer.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
      <summary>
            Occurs when the user moves the mouse over the control.
            </summary>
      <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
      <remarks>
        <para>Raising an event invokes the event handler through a delegate.</para>
        <para>The <b>OnMouseMove</b> method also allows derived classes to handle the event without attaching a delegate.
            This is the preferred technique for handling the event in a derived class.</para>
        <para>
          <b>Notes to Inheritors</b> When overriding <b>OnMouseMove</b> in a derived class, be sure to call the base class's <b>OnMouseMove</b> method so that registered delegates receive the event.</para>
      </remarks>
      <example>
        <code lang="VB">      Public Class MyRasterImagePanViewer
         Inherits RasterImagePanViewer
         '.
         '.
         '.
         Protected Overrides Sub OnViewerChanged(ByVal e As EventArgs)
            MyBase.OnViewerChanged(e)
            Console.WriteLine("OnViewerChanged is called")
         End Sub

         Protected Overrides Sub OnRectangleColorChanged(ByVal e As EventArgs)
            MyBase.OnRectangleColorChanged(e)

            Console.WriteLine("OnRectangleColorChanged is called")
         End Sub

         Protected Overrides Sub OnImageColorChanged(ByVal e As EventArgs)
            MyBase.OnImageColorChanged(e)

            Console.WriteLine("OnImageColorChanged is called")
         End Sub

         Protected Overrides Sub OnClipCursorChanged(ByVal e As EventArgs)
            MyBase.OnClipCursorChanged(e)

            Console.WriteLine("OnClipCursorChanged is called")
         End Sub

         Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            MyBase.OnPaint(e)

            Console.WriteLine("OnPaint is called")
         End Sub

         Protected Overrides Sub OnMouseDown(ByVal e As MouseEventArgs)
            MyBase.OnMouseDown(e)

            Console.WriteLine("OnMouseDown is called")
         End Sub

         Protected Overrides Sub OnMouseMove(ByVal e As MouseEventArgs)
            MyBase.OnMouseMove(e)

            Console.WriteLine("OnMouseMove is called")
         End Sub

         Protected Overrides Sub OnMouseUp(ByVal e As MouseEventArgs)
            MyBase.OnMouseUp(e)

            Console.WriteLine("OnMouseUp is called")
         End Sub

         Protected Overrides Sub OnLostFocus(ByVal e As EventArgs)
            MyBase.OnLostFocus(e)

            Console.WriteLine("OnLostFocus is called")
         End Sub

         Protected Overrides Sub OnSizeChanged(ByVal e As EventArgs)
            MyBase.OnSizeChanged(e)

            Console.WriteLine("OnSizeChanged is called")
         End Sub
      End Class</code>
        <code lang="CS">      public class MyRasterImagePanViewer : RasterImagePanViewer
      {
         //.
         //.
         //.
         protected override void OnViewerChanged(EventArgs e)
         {
            base.OnViewerChanged(e);
            Console.WriteLine("OnViewerChanged is called");
         }

         protected override void OnRectangleColorChanged(EventArgs e)
         {
            base.OnRectangleColorChanged(e);

            Console.WriteLine("OnRectangleColorChanged is called");
         }

         protected override void OnImageColorChanged(EventArgs e)
         {
            base.OnImageColorChanged(e);

            Console.WriteLine("OnImageColorChanged is called");
         }

         protected override void OnClipCursorChanged(EventArgs e)
         {
            base.OnClipCursorChanged(e);

            Console.WriteLine("OnClipCursorChanged is called");
         }

         protected override void OnPaint(PaintEventArgs e)
         {
            base.OnPaint(e);

            Console.WriteLine("OnPaint is called");
         }

         protected override void OnMouseDown(MouseEventArgs e)
         {
            base.OnMouseDown(e);

            Console.WriteLine("OnMouseDown is called");
         }

         protected override void OnMouseMove(MouseEventArgs e)
         {
            base.OnMouseMove(e);

            Console.WriteLine("OnMouseMove is called");
         }

         protected override void OnMouseUp(MouseEventArgs e)
         {
            base.OnMouseUp(e);

            Console.WriteLine("OnMouseUp is called");
         }

         protected override void OnLostFocus(EventArgs e)
         {
            base.OnLostFocus(e);

            Console.WriteLine("OnLostFocus is called");
         }

         protected override void OnSizeChanged(EventArgs e)
         {
            base.OnSizeChanged(e);

            Console.WriteLine("OnSizeChanged is called");
         }
      }</code>
        <!--RasterImagePanViewer.OnViewerChanged-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImagePanViewer.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
      <summary>
            Occurs when the user releases a mouse button.
            </summary>
      <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
      <remarks>
        <para>Raising an event invokes the event handler through a delegate.</para>
        <para>The <b>OnMouseUp</b> method also allows derived classes to handle the event without attaching a delegate.
            This is the preferred technique for handling the event in a derived class.</para>
        <para>
          <b>Notes to Inheritors</b> When overriding <b>OnMouseUp</b> in a derived class, be sure to call the base class's <b>OnMouseUp</b> method so that registered delegates receive the event.</para>
      </remarks>
      <example>
        <code lang="VB">      Public Class MyRasterImagePanViewer
         Inherits RasterImagePanViewer
         '.
         '.
         '.
         Protected Overrides Sub OnViewerChanged(ByVal e As EventArgs)
            MyBase.OnViewerChanged(e)
            Console.WriteLine("OnViewerChanged is called")
         End Sub

         Protected Overrides Sub OnRectangleColorChanged(ByVal e As EventArgs)
            MyBase.OnRectangleColorChanged(e)

            Console.WriteLine("OnRectangleColorChanged is called")
         End Sub

         Protected Overrides Sub OnImageColorChanged(ByVal e As EventArgs)
            MyBase.OnImageColorChanged(e)

            Console.WriteLine("OnImageColorChanged is called")
         End Sub

         Protected Overrides Sub OnClipCursorChanged(ByVal e As EventArgs)
            MyBase.OnClipCursorChanged(e)

            Console.WriteLine("OnClipCursorChanged is called")
         End Sub

         Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            MyBase.OnPaint(e)

            Console.WriteLine("OnPaint is called")
         End Sub

         Protected Overrides Sub OnMouseDown(ByVal e As MouseEventArgs)
            MyBase.OnMouseDown(e)

            Console.WriteLine("OnMouseDown is called")
         End Sub

         Protected Overrides Sub OnMouseMove(ByVal e As MouseEventArgs)
            MyBase.OnMouseMove(e)

            Console.WriteLine("OnMouseMove is called")
         End Sub

         Protected Overrides Sub OnMouseUp(ByVal e As MouseEventArgs)
            MyBase.OnMouseUp(e)

            Console.WriteLine("OnMouseUp is called")
         End Sub

         Protected Overrides Sub OnLostFocus(ByVal e As EventArgs)
            MyBase.OnLostFocus(e)

            Console.WriteLine("OnLostFocus is called")
         End Sub

         Protected Overrides Sub OnSizeChanged(ByVal e As EventArgs)
            MyBase.OnSizeChanged(e)

            Console.WriteLine("OnSizeChanged is called")
         End Sub
      End Class</code>
        <code lang="CS">      public class MyRasterImagePanViewer : RasterImagePanViewer
      {
         //.
         //.
         //.
         protected override void OnViewerChanged(EventArgs e)
         {
            base.OnViewerChanged(e);
            Console.WriteLine("OnViewerChanged is called");
         }

         protected override void OnRectangleColorChanged(EventArgs e)
         {
            base.OnRectangleColorChanged(e);

            Console.WriteLine("OnRectangleColorChanged is called");
         }

         protected override void OnImageColorChanged(EventArgs e)
         {
            base.OnImageColorChanged(e);

            Console.WriteLine("OnImageColorChanged is called");
         }

         protected override void OnClipCursorChanged(EventArgs e)
         {
            base.OnClipCursorChanged(e);

            Console.WriteLine("OnClipCursorChanged is called");
         }

         protected override void OnPaint(PaintEventArgs e)
         {
            base.OnPaint(e);

            Console.WriteLine("OnPaint is called");
         }

         protected override void OnMouseDown(MouseEventArgs e)
         {
            base.OnMouseDown(e);

            Console.WriteLine("OnMouseDown is called");
         }

         protected override void OnMouseMove(MouseEventArgs e)
         {
            base.OnMouseMove(e);

            Console.WriteLine("OnMouseMove is called");
         }

         protected override void OnMouseUp(MouseEventArgs e)
         {
            base.OnMouseUp(e);

            Console.WriteLine("OnMouseUp is called");
         }

         protected override void OnLostFocus(EventArgs e)
         {
            base.OnLostFocus(e);

            Console.WriteLine("OnLostFocus is called");
         }

         protected override void OnSizeChanged(EventArgs e)
         {
            base.OnSizeChanged(e);

            Console.WriteLine("OnSizeChanged is called");
         }
      }</code>
        <!--RasterImagePanViewer.OnViewerChanged-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImagePanViewer.OnLostFocus(System.EventArgs)">
      <summary>
            Occurs when the control loses focus.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
        <para>Raising an event invokes the event handler through a delegate.</para>
        <para>The <b>OnLostFocus</b> method also allows derived classes to handle the event without attaching a delegate.
            This is the preferred technique for handling the event in a derived class.</para>
        <para>
          <b>Notes to Inheritors</b> When overriding <b>OnLostFocus</b> in a derived class, be sure to call the base class's <b>OnLostFocus</b> method so that registered delegates receive the event.</para>
      </remarks>
      <example>
        <code lang="VB">      Public Class MyRasterImagePanViewer
         Inherits RasterImagePanViewer
         '.
         '.
         '.
         Protected Overrides Sub OnViewerChanged(ByVal e As EventArgs)
            MyBase.OnViewerChanged(e)
            Console.WriteLine("OnViewerChanged is called")
         End Sub

         Protected Overrides Sub OnRectangleColorChanged(ByVal e As EventArgs)
            MyBase.OnRectangleColorChanged(e)

            Console.WriteLine("OnRectangleColorChanged is called")
         End Sub

         Protected Overrides Sub OnImageColorChanged(ByVal e As EventArgs)
            MyBase.OnImageColorChanged(e)

            Console.WriteLine("OnImageColorChanged is called")
         End Sub

         Protected Overrides Sub OnClipCursorChanged(ByVal e As EventArgs)
            MyBase.OnClipCursorChanged(e)

            Console.WriteLine("OnClipCursorChanged is called")
         End Sub

         Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            MyBase.OnPaint(e)

            Console.WriteLine("OnPaint is called")
         End Sub

         Protected Overrides Sub OnMouseDown(ByVal e As MouseEventArgs)
            MyBase.OnMouseDown(e)

            Console.WriteLine("OnMouseDown is called")
         End Sub

         Protected Overrides Sub OnMouseMove(ByVal e As MouseEventArgs)
            MyBase.OnMouseMove(e)

            Console.WriteLine("OnMouseMove is called")
         End Sub

         Protected Overrides Sub OnMouseUp(ByVal e As MouseEventArgs)
            MyBase.OnMouseUp(e)

            Console.WriteLine("OnMouseUp is called")
         End Sub

         Protected Overrides Sub OnLostFocus(ByVal e As EventArgs)
            MyBase.OnLostFocus(e)

            Console.WriteLine("OnLostFocus is called")
         End Sub

         Protected Overrides Sub OnSizeChanged(ByVal e As EventArgs)
            MyBase.OnSizeChanged(e)

            Console.WriteLine("OnSizeChanged is called")
         End Sub
      End Class</code>
        <code lang="CS">      public class MyRasterImagePanViewer : RasterImagePanViewer
      {
         //.
         //.
         //.
         protected override void OnViewerChanged(EventArgs e)
         {
            base.OnViewerChanged(e);
            Console.WriteLine("OnViewerChanged is called");
         }

         protected override void OnRectangleColorChanged(EventArgs e)
         {
            base.OnRectangleColorChanged(e);

            Console.WriteLine("OnRectangleColorChanged is called");
         }

         protected override void OnImageColorChanged(EventArgs e)
         {
            base.OnImageColorChanged(e);

            Console.WriteLine("OnImageColorChanged is called");
         }

         protected override void OnClipCursorChanged(EventArgs e)
         {
            base.OnClipCursorChanged(e);

            Console.WriteLine("OnClipCursorChanged is called");
         }

         protected override void OnPaint(PaintEventArgs e)
         {
            base.OnPaint(e);

            Console.WriteLine("OnPaint is called");
         }

         protected override void OnMouseDown(MouseEventArgs e)
         {
            base.OnMouseDown(e);

            Console.WriteLine("OnMouseDown is called");
         }

         protected override void OnMouseMove(MouseEventArgs e)
         {
            base.OnMouseMove(e);

            Console.WriteLine("OnMouseMove is called");
         }

         protected override void OnMouseUp(MouseEventArgs e)
         {
            base.OnMouseUp(e);

            Console.WriteLine("OnMouseUp is called");
         }

         protected override void OnLostFocus(EventArgs e)
         {
            base.OnLostFocus(e);

            Console.WriteLine("OnLostFocus is called");
         }

         protected override void OnSizeChanged(EventArgs e)
         {
            base.OnSizeChanged(e);

            Console.WriteLine("OnSizeChanged is called");
         }
      }</code>
        <!--RasterImagePanViewer.OnViewerChanged-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImagePanViewer.OnSizeChanged(System.EventArgs)">
      <summary>
            Occurs when the control is resized.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
        <para>Raising an event invokes the event handler through a delegate.</para>
        <para>The <b>OnSizeChanged</b> method also allows derived classes to handle the event without attaching a delegate.
            This is the preferred technique for handling the event in a derived class.</para>
        <para>
          <b>Notes to Inheritors</b> When overriding <b>OnSizeChanged</b> in a derived class, be sure to call the base class's <b>OnSizeChanged</b> method so that registered delegates receive the event.</para>
      </remarks>
      <example>
        <code lang="VB">      Public Class MyRasterImagePanViewer
         Inherits RasterImagePanViewer
         '.
         '.
         '.
         Protected Overrides Sub OnViewerChanged(ByVal e As EventArgs)
            MyBase.OnViewerChanged(e)
            Console.WriteLine("OnViewerChanged is called")
         End Sub

         Protected Overrides Sub OnRectangleColorChanged(ByVal e As EventArgs)
            MyBase.OnRectangleColorChanged(e)

            Console.WriteLine("OnRectangleColorChanged is called")
         End Sub

         Protected Overrides Sub OnImageColorChanged(ByVal e As EventArgs)
            MyBase.OnImageColorChanged(e)

            Console.WriteLine("OnImageColorChanged is called")
         End Sub

         Protected Overrides Sub OnClipCursorChanged(ByVal e As EventArgs)
            MyBase.OnClipCursorChanged(e)

            Console.WriteLine("OnClipCursorChanged is called")
         End Sub

         Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            MyBase.OnPaint(e)

            Console.WriteLine("OnPaint is called")
         End Sub

         Protected Overrides Sub OnMouseDown(ByVal e As MouseEventArgs)
            MyBase.OnMouseDown(e)

            Console.WriteLine("OnMouseDown is called")
         End Sub

         Protected Overrides Sub OnMouseMove(ByVal e As MouseEventArgs)
            MyBase.OnMouseMove(e)

            Console.WriteLine("OnMouseMove is called")
         End Sub

         Protected Overrides Sub OnMouseUp(ByVal e As MouseEventArgs)
            MyBase.OnMouseUp(e)

            Console.WriteLine("OnMouseUp is called")
         End Sub

         Protected Overrides Sub OnLostFocus(ByVal e As EventArgs)
            MyBase.OnLostFocus(e)

            Console.WriteLine("OnLostFocus is called")
         End Sub

         Protected Overrides Sub OnSizeChanged(ByVal e As EventArgs)
            MyBase.OnSizeChanged(e)

            Console.WriteLine("OnSizeChanged is called")
         End Sub
      End Class</code>
        <code lang="CS">      public class MyRasterImagePanViewer : RasterImagePanViewer
      {
         //.
         //.
         //.
         protected override void OnViewerChanged(EventArgs e)
         {
            base.OnViewerChanged(e);
            Console.WriteLine("OnViewerChanged is called");
         }

         protected override void OnRectangleColorChanged(EventArgs e)
         {
            base.OnRectangleColorChanged(e);

            Console.WriteLine("OnRectangleColorChanged is called");
         }

         protected override void OnImageColorChanged(EventArgs e)
         {
            base.OnImageColorChanged(e);

            Console.WriteLine("OnImageColorChanged is called");
         }

         protected override void OnClipCursorChanged(EventArgs e)
         {
            base.OnClipCursorChanged(e);

            Console.WriteLine("OnClipCursorChanged is called");
         }

         protected override void OnPaint(PaintEventArgs e)
         {
            base.OnPaint(e);

            Console.WriteLine("OnPaint is called");
         }

         protected override void OnMouseDown(MouseEventArgs e)
         {
            base.OnMouseDown(e);

            Console.WriteLine("OnMouseDown is called");
         }

         protected override void OnMouseMove(MouseEventArgs e)
         {
            base.OnMouseMove(e);

            Console.WriteLine("OnMouseMove is called");
         }

         protected override void OnMouseUp(MouseEventArgs e)
         {
            base.OnMouseUp(e);

            Console.WriteLine("OnMouseUp is called");
         }

         protected override void OnLostFocus(EventArgs e)
         {
            base.OnLostFocus(e);

            Console.WriteLine("OnLostFocus is called");
         }

         protected override void OnSizeChanged(EventArgs e)
         {
            base.OnSizeChanged(e);

            Console.WriteLine("OnSizeChanged is called");
         }
      }</code>
        <!--RasterImagePanViewer.OnViewerChanged-->
      </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImagePanViewer.Viewer">
      <summary>
            Gets or sets the viewer currently assigned for panning process by the control.
            </summary>
      <value>
            The viewer object, which has an image to be pan using the <see cref="T:Leadtools.WinForms.RasterImagePanViewer" /> control.
            </value>
      <remarks>
            This property contains the <see cref="T:Leadtools.WinForms.RasterImageViewer" /> object which 
            contains an image to be pan using the <see cref="T:Leadtools.WinForms.RasterImagePanViewer" /> control. Whenever the <b>Viewer</b> property 
            is changed, the image displayed in the <see cref="T:Leadtools.WinForms.RasterImagePanViewer" /> control is updated.
            </remarks>
      <example>
        <code lang="VB">      Private Class MyForm1 : Inherits Form
         Public panViewer As RasterImagePanViewer
         Public viewer As RasterImageViewer
         Public Sub New(ByVal title As String)
            Text = title
            ' Set the size of the form
            Size = New Size(400, 400)

            ' Create the viewer
            viewer = New RasterImageViewer()
            viewer.Size = New Size(Size.Width, Size.Height \ 2)
            viewer.Dock = DockStyle.Fill

            ' Load an image
            Dim codecs As RasterCodecs = New RasterCodecs()
            viewer.Image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "image1.cmp"))

            panViewer = New RasterImagePanViewer()
            panViewer.Dock = DockStyle.Top
            panViewer.BackColor = Color.Bisque
            panViewer.ClipCursor = True
            panViewer.BorderStyle = BorderStyle.Fixed3D
            panViewer.BringToFront()
            AddHandler panViewer.Pan, AddressOf panViewer_Pan
            panViewer.RectangleColor = Color.Blue
            panViewer.ImageColor = Color.FromArgb(128, 0, 0, 0)
            panViewer.Cursor = Cursors.Hand
            panViewer.Viewer = viewer

            Controls.Add(panViewer)
            Controls.Add(viewer)
            viewer.BringToFront()
         End Sub

         Private Sub panViewer_Pan(ByVal sender As Object, ByVal e As RasterImagePanViewerEventArgs)
            Select Case e.Status
               Case RasterImagePanViewerStatus.Begin, RasterImagePanViewerStatus.Panning, RasterImagePanViewerStatus.End
                  Text = "Pan Status = " &amp; e.Status.ToString() &amp; " Rectangle =" &amp; e.Rectangle.ToString() &amp; " Cancel = " &amp; e.Cancel.ToString()
                  Console.WriteLine(Text)
                  Exit Select
            End Select
         End Sub
      End Class

      Public Sub RasterImagePanViewer_Viewer()
         Dim form As MyForm1 = New MyForm1("Test_RasterImagePanViewer_Viewer")
         form.ShowDialog()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MyForm1 : Form
      {
         public RasterImagePanViewer panViewer;
         public RasterImageViewer viewer;
         public MyForm1(string title)
         {
            Text = title;
            // Set the size of the form
            Size = new Size(400, 400);

            // Create the viewer
            viewer = new RasterImageViewer();
            viewer.Size = new Size(Size.Width, Size.Height / 2);
            viewer.Dock = DockStyle.Fill;

            // Load an image
            RasterCodecs codecs = new RasterCodecs();
            viewer.Image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "image1.cmp"));

            panViewer = new RasterImagePanViewer();
            panViewer.Dock = DockStyle.Top;
            panViewer.BackColor = Color.Bisque;
            panViewer.ClipCursor = true;
            panViewer.BorderStyle = BorderStyle.Fixed3D;
            panViewer.BringToFront();
            panViewer.Pan += new EventHandler&lt;RasterImagePanViewerEventArgs&gt;(panViewer_Pan);
            panViewer.RectangleColor = Color.Blue;
            panViewer.ImageColor = Color.FromArgb(128, 0, 0, 0);
            panViewer.Cursor = Cursors.Hand;
            panViewer.Viewer = viewer;

            Controls.Add(panViewer);
            Controls.Add(viewer);
            viewer.BringToFront();
         }

         private void panViewer_Pan(object sender, RasterImagePanViewerEventArgs e)
         {
            switch (e.Status)
            {
               case RasterImagePanViewerStatus.Begin:
               case RasterImagePanViewerStatus.Panning:
               case RasterImagePanViewerStatus.End:
                  {
                     Text = "Pan Status = " + e.Status.ToString() + " Rectangle =" + e.Rectangle.ToString() + " Cancel = " + e.Cancel.ToString();
                     Console.WriteLine(Text);
                     break;
                  }
            }
         }
      }

      public void RasterImagePanViewer_Viewer()
      {
         MyForm1 form = new MyForm1("Test_RasterImagePanViewer_Viewer");
         form.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--RasterImagePanViewer.Viewer-->
      </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImagePanViewer.ViewerChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImagePanViewer.Viewer" /> property changes. 
            </summary>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImagePanViewer.Viewer" /> property is changed 
            by either a programmatic modification or user interaction.
            </remarks>
      <example>
        <code lang="VB">      Public Sub RasterImagePanViewer_ViewerChanged(ByVal panViewer As RasterImagePanViewer)
         ' set up the event handlers
         AddHandler panViewer.RectangleColorChanged, AddressOf panViewer_RectColorChanged
         AddHandler panViewer.ImageColorChanged, AddressOf panViewer_ImageColorChanged
         AddHandler panViewer.ClipCursorChanged, AddressOf panViewer_ClipCursorChanged
         AddHandler panViewer.ViewerChanged, AddressOf panViewer_ViewerChanged
         Dim viewerOld As RasterImageViewer = panViewer.Viewer
         ' fires the ViewerChanged event twice
         panViewer.Viewer = Nothing
         panViewer.Viewer = viewerOld

         ' change some properties
         If panViewer.BorderStyle &lt;&gt; BorderStyle.None Then
            panViewer.BorderStyle = BorderStyle.None
         End If
         panViewer.RectangleColor = Color.Black
         panViewer.ImageColor = Color.Red
         panViewer.ClipCursor = False
         panViewer.Refresh()
      End Sub

      Private Sub panViewer_RectColorChanged(ByVal sender As Object, ByVal e As EventArgs)
         Dim panViewer As RasterImagePanViewer = CType(sender, RasterImagePanViewer)
         If Not panViewer Is Nothing Then
            Console.WriteLine("Rectangle Color Changed to " &amp; panViewer.RectangleColor.ToString())
         End If
      End Sub

      Private Sub panViewer_ImageColorChanged(ByVal sender As Object, ByVal e As EventArgs)
         Dim panViewer As RasterImagePanViewer = CType(sender, RasterImagePanViewer)
         If Not panViewer Is Nothing Then
            Console.WriteLine("Image Color Changed to " &amp; panViewer.ImageColor.ToString())
         End If
      End Sub

      Private Sub panViewer_ClipCursorChanged(ByVal sender As Object, ByVal e As EventArgs)
         Dim panViewer As RasterImagePanViewer = CType(sender, RasterImagePanViewer)
         If Not panViewer Is Nothing Then
            Console.WriteLine("Clip Cursor changed to " &amp; panViewer.ClipCursor.ToString())
         End If
      End Sub
      Private Sub panViewer_ViewerChanged(ByVal sender As Object, ByVal e As EventArgs)
         Dim panViewer As RasterImagePanViewer = CType(sender, RasterImagePanViewer)
         If Not panViewer Is Nothing Then
            If panViewer.Viewer Is Nothing Then
               Console.WriteLine("There is no Viewer control associated with the RasterImagePanViewer Control")
            Else
               Console.WriteLine("A Viewer is now associated with the RasterImagePanViewer Control")
            End If
         End If
      End Sub</code>
        <code lang="CS">      public void RasterImagePanViewer_ViewerChanged(RasterImagePanViewer panViewer)
      {
         // set up the event handlers
         panViewer.RectangleColorChanged += new EventHandler(panViewer_RectColorChanged);
         panViewer.ImageColorChanged += new EventHandler(panViewer_ImageColorChanged);
         panViewer.ClipCursorChanged += new EventHandler(panViewer_ClipCursorChanged);
         panViewer.ViewerChanged += new EventHandler(panViewer_ViewerChanged);
         RasterImageViewer viewerOld = panViewer.Viewer;
         // fires the ViewerChanged event twice
         panViewer.Viewer = null;
         panViewer.Viewer = viewerOld;

         // change some properties
         if(panViewer.BorderStyle != BorderStyle.None)
         {
            panViewer.BorderStyle = BorderStyle.None;
         }
         panViewer.RectangleColor = Color.Black;
         panViewer.ImageColor = Color.Red;
         panViewer.ClipCursor = false;
         panViewer.Refresh();
      }

      private void panViewer_RectColorChanged(object sender, EventArgs e)
      {
         RasterImagePanViewer panViewer = (RasterImagePanViewer)sender;
         if (panViewer != null)
            Console.WriteLine("Rectangle Color Changed to " + panViewer.RectangleColor.ToString());
      }

      private void panViewer_ImageColorChanged(object sender, EventArgs e)
      {
         RasterImagePanViewer panViewer = (RasterImagePanViewer)sender;
         if(panViewer != null)
            Console.WriteLine("Image Color Changed to " + panViewer.ImageColor.ToString());
      }

      private void panViewer_ClipCursorChanged(object sender, EventArgs e)
      {
         RasterImagePanViewer panViewer = (RasterImagePanViewer)sender;
         if(panViewer != null)
            Console.WriteLine("Clip Cursor changed to " + panViewer.ClipCursor.ToString());
      }
      private void panViewer_ViewerChanged(object sender, EventArgs e)
      {
         RasterImagePanViewer panViewer = (RasterImagePanViewer)sender;
         if(panViewer != null)
         {
            if(panViewer.Viewer == null)
               Console.WriteLine("There is no Viewer control associated with the RasterImagePanViewer Control");
            else
               Console.WriteLine("A Viewer is now associated with the RasterImagePanViewer Control");
         }
      }</code>
        <!--RasterImagePanViewer.ViewerChanged-->
      </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImagePanViewer.RectangleColor">
      <summary>
            Gets or sets the color used to draw the Pan Rectangle.
            </summary>
      <value>
            The Pan Rectangle color. The default is red.
            </value>
      <noremarks />
      <example>
            Refer to <see cref="P:Leadtools.WinForms.RasterImagePanViewer.Viewer" /> example.
            </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImagePanViewer.RectangleColorChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImagePanViewer.RectangleColor" /> property changes.
            </summary>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImagePanViewer.RectangleColor" /> property is changed by 
            either a programmatic modification or user interaction.
            </remarks>
      <noremarks />
      <example>
            Refer to <see cref="E:Leadtools.WinForms.RasterImagePanViewer.ViewerChanged" /> example.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImagePanViewer.ImageColor">
      <summary>
            The <see cref="T:System.Drawing.Color" /> that covers the un-panned area.
            </summary>
      <value>
            The surrounding Pan Rectangle color.
            </value>
      <remarks>
            This property contains the color of the area that surrounds the Pan Rectangle.<br />
            The default is <b>Transparent</b> color.
            </remarks>
      <example> 
            Refer to <see cref="P:Leadtools.WinForms.RasterImagePanViewer.Viewer" /> example.
            </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImagePanViewer.ImageColorChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImagePanViewer.ImageColor" /> property changes.
            </summary>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImagePanViewer.ImageColor" /> property is changed by either 
            a programmatic modification or user interaction.
            </remarks>
      <example>
            Refer to <see cref="E:Leadtools.WinForms.RasterImagePanViewer.ViewerChanged" /> example.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImagePanViewer.ClipCursor">
      <summary>
            Enables and disables clipping the cursor.
            </summary>
      <value>
            true to clip the cursor to the bounding Rectangle of the <see cref="T:Leadtools.WinForms.RasterImagePanViewer" /> control.
            false to allow the cursor to move outside the bounding rectangle of the <see cref="T:Leadtools.WinForms.RasterImagePanViewer" /> control.
            The default is true.
            </value>
      <noremarks />
      <example>
            Refer to <see cref="P:Leadtools.WinForms.RasterImagePanViewer.Viewer" /> example.
            </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImagePanViewer.ClipCursorChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImagePanViewer.ClipCursor" /> property changes.
            </summary>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImagePanViewer.ClipCursor" /> property is changed by either 
            a programmatic modification or user interaction.
            </remarks>
      <example>
            Refer to <see cref="E:Leadtools.WinForms.RasterImagePanViewer.ViewerChanged" /> example.
            </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImagePanViewer.Pan">
      <summary>
            Occurs when the user performs a panning process for the <see cref="T:Leadtools.WinForms.RasterImagePanViewer" /> displayed image.
            </summary>
      <remarks>
            This event provides the current status of the pan operation: Begin, Panning, or End, as well the current panning rectangle.
            </remarks>
      <example> 
            Refer to <see cref="P:Leadtools.WinForms.RasterImagePanViewer.Viewer" /> example.
            </example>
    </member>
    <member name="T:Leadtools.WinForms.RasterImageList">
      <summary>
            Represents an image list control, which displays a collection of items that can be displayed using one of the
            <see cref="T:Leadtools.WinForms.RasterImageListViewStyle" /> styles.
            </summary>
      <keywords>Viewers, Windows Forms| Windows Forms| Viewers</keywords>
      <remarks>
        <p>The <see cref="T:Leadtools.WinForms.RasterImageList" /> control lets you display and manipulate a list of images. The <see cref="T:Leadtools.WinForms.RasterImageList" /> 
            control contains a list of items that can be used to view thumbnails of <see cref="T:Leadtools.RasterImage" /> objects.</p>
        <p>A <see cref="T:Leadtools.WinForms.RasterImageList" /> control allows you to display a list of items with text and an <see cref="T:Leadtools.RasterImage" />.
            For example, the Windows Explorer in <i>Thumbnails mode</i> is similar in appearance to a
            <see cref="T:Leadtools.WinForms.RasterImageList" /> control. The <see cref="T:Leadtools.WinForms.RasterImageListItem" /> class represents an item within a
            <see cref="T:Leadtools.WinForms.RasterImageList" /> control. The items that are displayed in the list can be shown using one of the
            <see cref="T:Leadtools.WinForms.RasterImageListViewStyle" /> styles. <br /><see cref="T:Leadtools.WinForms.RasterImageList" /> supports single or multiple item selection. The multiple selection
            feature lets the user select from a list of items in a way similar to a <see cref="T:System.Windows.Forms.ListBox" /> control.
            Additionally, the user can activate selected items to perform a task. For example, you could use a
            <see cref="T:Leadtools.WinForms.RasterImageList" /> control to display a list of files that the application can then open and utilize.
            The user can select the files to open and then double-click them to activate the items and open the files in the
            application.</p>
        <p>
          <see cref="T:Leadtools.WinForms.RasterImageList" /> provides a large number of properties that provide flexibility in appearance and
            behavior. The <see cref="P:Leadtools.WinForms.RasterImageList.ViewStyle" /> property allows you to change the way in which items are
            displayed. Items are added and removed from the <see cref="T:Leadtools.WinForms.RasterImageList" /> through the
            <see cref="P:Leadtools.WinForms.RasterImageList.Items" /> property. The <see cref="P:Leadtools.WinForms.RasterImageList.Items" /> property allows you to
            access the <see cref="T:Leadtools.WinForms.RasterImageListItemCollection" /> of the control, which provides methods for manipulating
            the items in the control. When your control contains a large number of items, it is often easier for the user to
            see them in a sorted list. You can use the <see cref="P:Leadtools.WinForms.RasterImageList.Sorting" /> property to sort the items alphabetically.</p>
        <p>In addition to the many properties that are available for a <see cref="T:Leadtools.WinForms.RasterImageList" /> control, there are
            methods and events that your application can use to provide additional capabilities to the
            <see cref="T:Leadtools.WinForms.RasterImageList" />. The <see cref="M:Leadtools.WinForms.RasterImageList.BeginUpdate" /> and
            <see cref="M:Leadtools.WinForms.RasterImageList.EndUpdate" /> methods allow you to add many items to a <see cref="T:Leadtools.WinForms.RasterImageList" />
            without displaying the repainting of the control each time an item is added, thus improving performance. You you may want
            to provide functionality when the user right-clicks an item. To determine the item which is being clicked, you can
            use the <see cref="M:Leadtools.WinForms.RasterImageList.HitTest(System.Int32,System.Int32)" /> method or you can manually calculate what item is displayed in what position using the
            <see cref="M:Leadtools.WinForms.RasterImageList.GetItemRectangle(Leadtools.WinForms.RasterImageListItem)" /> method. Sometimes you want to display a specific item to the user to
            view. The <see cref="M:Leadtools.WinForms.RasterImageList.EnsureVisible(System.Int32)" /> method can be called to ensure that the specific item is in the visible area of
            the control.</p>
        <p>When the user changes the selected items with the keyboard or mouse, the control will fire the
            <see cref="E:Leadtools.WinForms.RasterImageList.SelectedIndexChanged" /> event.  You can then read the
            <see cref="P:Leadtools.WinForms.RasterImageList.SelectedItems" /> to get a list of the currently selected items.</p>
        <br />
        <b>NOTE:</b> For automatic generation of thumbnails from files stored on your computer, see <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser" />.
            </remarks>
      <example>
        <code lang="VB">      Private Class MyForm1 : Inherits Form
         Public imageList As RasterImageList
         Public Sub New(ByVal title As String)
            Text = title
            ' Set the size of the form
            Size = New Size(400, 200)

            ' Create a new RasterImageList control.
            imageList = New RasterImageList()
            imageList.Bounds = New Rectangle(New Point(0, 0), Size)

            imageList.Sorting = SortOrder.Ascending
            imageList.BorderStyle = BorderStyle.None
            imageList.DoubleBuffer = True
            imageList.Dock = DockStyle.Fill
            Dim paintProperties As RasterPaintProperties = imageList.PaintProperties
            paintProperties.PaintDisplayMode = RasterPaintDisplayModeFlags.Bicubic
            imageList.PaintProperties = paintProperties
            imageList.EnableKeyboard = True
            imageList.UseDpi = True


            ' Add a handler to the PaintBackground event
            AddHandler imageList.PaintBackground, AddressOf rasterImageList_PaintBackground

            Dim codecs As RasterCodecs = New RasterCodecs()

            ' Create three items
            Dim imagesPath As String = LEAD_VARS.ImagesDir

            For i As Integer = 0 To 2
               ' Load the image
               Dim index As Integer = i + 1
               Dim imageFileName As String = Path.Combine(imagesPath, "ImageProcessingDemo\Image" &amp; index.ToString() &amp; ".cmp")
               Dim image As RasterImage = codecs.Load(imageFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1)
               Dim item As RasterImageListItem = New RasterImageListItem(image, 1, "Item" &amp; index.ToString())

               ' Select the first item
               If i = 0 Then
                  item.Selected = True
               End If

               ' Add the item to the image list
               imageList.Items.Add(item)
            Next i

            ' Add the RasterImageList to the control collection.
            Controls.Add(imageList)
         End Sub


         Private Sub rasterImageList_PaintBackground(ByVal sender As Object, ByVal e As PaintEventArgs)
            ' Get the image list control
            Dim imageList As RasterImageList = CType(IIf(TypeOf sender Is RasterImageList, sender, Nothing), RasterImageList)

            ' Fill the background with a gradient brush
            Dim rc As Rectangle = imageList.ClientRectangle

            Dim b As Brush = New LinearGradientBrush(rc, Color.Bisque, Color.White, LinearGradientMode.Vertical)
            e.Graphics.FillRectangle(b, rc)
            b.Dispose()
         End Sub

      End Class

      Public Sub RasterImageList_RasterImageList(ByVal title As String)
         Dim form As MyForm1 = New MyForm1(title)
         form.ShowDialog()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MyForm1 : Form
      {
         public RasterImageList imageList;
         public MyForm1(string title)
         {
            Text = title;
            // Set the size of the form
            Size = new Size(400, 200);

            // Create a new RasterImageList control.
            imageList = new RasterImageList();
            imageList.Bounds = new Rectangle(new Point(0, 0), Size);

            imageList.Sorting = SortOrder.Ascending;
            imageList.BorderStyle = BorderStyle.None;
            imageList.DoubleBuffer = true;
            imageList.Dock = DockStyle.Fill;
            RasterPaintProperties paintProperties = imageList.PaintProperties;
            paintProperties.PaintDisplayMode = RasterPaintDisplayModeFlags.Bicubic;
            imageList.PaintProperties = paintProperties;
            imageList.EnableKeyboard = true;
            imageList.UseDpi = true;

            // Add a handler to the PaintBackground event
            imageList.PaintBackground += new PaintEventHandler(rasterImageList_PaintBackground);

            RasterCodecs codecs = new RasterCodecs();

            // Create three items
            string imagesPath = LEAD_VARS.ImagesDir;

            for(int i = 0; i &lt; 3; i++)
            {
               // Load the image
               int index = i + 1;
               string imageFileName = Path.Combine(imagesPath, @"ImageProcessingDemo\Image" + index.ToString() + ".cmp");
               RasterImage image = codecs.Load(imageFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1);
               RasterImageListItem item = new RasterImageListItem(image, 1, "Item" + index.ToString());

               // Select the first item
               if(i == 0)
                  item.Selected = true;

               // Add the item to the image list
               imageList.Items.Add(item);
            }

            // Add the RasterImageList to the control collection.
            Controls.Add(imageList);
         }


         private void rasterImageList_PaintBackground(object sender, PaintEventArgs e)
         {
            // Get the image list control
            RasterImageList imageList = sender as RasterImageList;

            // Fill the background with a gradient brush
            Rectangle rc = imageList.ClientRectangle;

            Brush b = new LinearGradientBrush(
               rc,
               Color.Bisque,
               Color.White,
               LinearGradientMode.Vertical);
            e.Graphics.FillRectangle(b, rc);
            b.Dispose();
         }

      }

      public void RasterImageList_RasterImageList(string title)
      {
         MyForm1 form = new MyForm1(title);
         form.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--RasterImageList.RasterImageList-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageList.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.WinForms.RasterImageList" /> class.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterImageList" />.
            </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageList.Dispose(System.Boolean)">
      <exclude />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageList.OnBorderStyleChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageList.BorderStyleChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
        <p>Raising an event invokes the event handler through a delegate.</p>
        <p>The <b>OnBorderStyleChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
        <p>
          <b>Notes to Inheritors:</b> When overriding <b>OnBorderStyleChanged</b> in a derived class, be sure to call
            the base class's <b>OnBorderStyleChanged</b> method so that registered delegates receive the event.</p>
      </remarks>
      <example>
        <code lang="VB">      Public Class MyRasterImageList
         Inherits RasterImageList
         '.
         '.
         '.
         Protected Overrides Sub OnAutoDeselectItemsChanged(ByVal e As EventArgs)
            MyBase.OnAutoDeselectItemsChanged(e)
            Console.WriteLine("OnAutoDeselectItemsChanged is called")
         End Sub

         Protected Overrides Sub OnAutoDisposeImagesChanged(ByVal e As EventArgs)
            MyBase.OnAutoDisposeImagesChanged(e)
            Console.WriteLine("OnAutoDisposeImagesChanged is called")
         End Sub

         Protected Overrides Sub OnBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnBorderStyleChanged(e)
            Console.WriteLine("OnBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnDoubleBufferChanged(ByVal e As EventArgs)
            MyBase.OnDoubleBufferChanged(e)
            Console.WriteLine("OnDoubleBufferChanged is called")
         End Sub

         Protected Overrides Sub OnDrawItem(ByVal e As RasterImageListDrawItemEventArgs)
            MyBase.OnDrawItem(e)
            Console.WriteLine("OnDrawItem is called")
         End Sub

         Protected Overrides Sub OnEnableKeyboardChanged(ByVal e As EventArgs)
            MyBase.OnEnableKeyboardChanged(e)
            Console.WriteLine("OnEnableKeyboardChanged is called")
         End Sub

         Protected Overrides Sub OnEnableRubberBandSelectionChanged(ByVal e As EventArgs)
            MyBase.OnEnableRubberBandSelectionChanged(e)
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called")
         End Sub

         Protected Overrides Sub OnItemBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemBackColorChanged(e)
            Console.WriteLine("OnItemBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemBorderStyleChanged(e)
            Console.WriteLine("OnItemBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemForeColorChanged(e)
            Console.WriteLine("OnItemForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemImageBorderStyleChanged(e)
            Console.WriteLine("OnItemImageBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemImageSizeChanged(e)
            Console.WriteLine("OnItemImageSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedBackColorChanged(e)
            Console.WriteLine("OnItemSelectedBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedForeColorChanged(e)
            Console.WriteLine("OnItemSelectedForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSizeChanged(e)
            Console.WriteLine("OnItemSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSpacingSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSpacingSizeChanged(e)
            Console.WriteLine("OnItemSpacingSizeChanged is called")
         End Sub

         Protected Overrides Sub OnKeyDown(ByVal e As KeyEventArgs)
            MyBase.OnKeyDown(e)
            Console.WriteLine("OnKeyDown is called")
         End Sub

         Protected Overrides Sub OnLostFocus(ByVal e As EventArgs)
            MyBase.OnLostFocus(e)
            Console.WriteLine("OnLostFocus is called")
         End Sub

         Protected Overrides Sub OnMouseDown(ByVal e As MouseEventArgs)
            MyBase.OnMouseDown(e)
            Console.WriteLine("OnMouseDown is called")
         End Sub

         Protected Overrides Sub OnMouseMove(ByVal e As MouseEventArgs)
            MyBase.OnMouseMove(e)
            Console.WriteLine("OnMouseMove is called")
         End Sub

         Protected Overrides Sub OnMouseUp(ByVal e As MouseEventArgs)
            MyBase.OnMouseUp(e)
            Console.WriteLine("OnMouseUp is called")
         End Sub

         Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            MyBase.OnPaint(e)
            Console.WriteLine("OnPaint is called")
         End Sub

         Protected Overrides Sub OnPaintPropertiesChanged(ByVal e As EventArgs)
            MyBase.OnPaintPropertiesChanged(e)
            Console.WriteLine("OnPaintPropertiesChanged is called")
         End Sub

         Protected Overrides Sub OnScroll(ByVal e As EventArgs)
            MyBase.OnScroll(e)
            Console.WriteLine("OnScroll is called")
         End Sub

         Protected Overrides Sub OnScrollStyleChanged(ByVal e As EventArgs)
            MyBase.OnScrollStyleChanged(e)
            Console.WriteLine("OnScrollStyleChanged is called")
         End Sub

         Protected Overrides Sub OnSelectedIndexChanged(ByVal e As EventArgs)
            MyBase.OnSelectedIndexChanged(e)
            Console.WriteLine("OnSelectedIndexChanged is called")
         End Sub

         Protected Overrides Sub OnSelectionModeChanged(ByVal e As EventArgs)
            MyBase.OnSelectionModeChanged(e)
            Console.WriteLine("OnSelectionModeChanged is called")
         End Sub

         Protected Overrides Sub OnSelectUserImageChanged(ByVal e As EventArgs)
            MyBase.OnSelectUserImageChanged(e)
            Console.WriteLine("OnSelectUserImageChanged is called")
         End Sub

         Protected Overrides Sub OnShowItemTextChanged(ByVal e As EventArgs)
            MyBase.OnShowItemTextChanged(e)
            Console.WriteLine("OnShowItemTextChanged is called")
         End Sub

         Protected Overrides Sub OnSizeChanged(ByVal e As EventArgs)
            MyBase.OnSizeChanged(e)
            Console.WriteLine("OnSizeChanged is called")
         End Sub

         Protected Overrides Sub OnSorterChanged(ByVal e As EventArgs)
            MyBase.OnSorterChanged(e)
            Console.WriteLine("OnSorterChanged is called")
         End Sub

         Protected Overrides Sub OnSortingChanged(ByVal e As EventArgs)
            MyBase.OnSortingChanged(e)
            Console.WriteLine("OnSortingChanged is called")
         End Sub

         Protected Overrides Sub OnViewStyleChanged(ByVal e As EventArgs)
            MyBase.OnViewStyleChanged(e)
            Console.WriteLine("OnViewStyleChanged is called")
         End Sub
      End Class</code>
        <code lang="CS">      public class MyRasterImageList : RasterImageList
      {
         //.
         //.
         //.
         protected override void OnAutoDeselectItemsChanged(EventArgs e)
         {
            base.OnAutoDeselectItemsChanged(e);
            Console.WriteLine("OnAutoDeselectItemsChanged is called");
         }

         protected override void OnAutoDisposeImagesChanged(EventArgs e)
         {
            base.OnAutoDisposeImagesChanged(e);
            Console.WriteLine("OnAutoDisposeImagesChanged is called");
         }

         protected override void OnBorderStyleChanged(EventArgs e)
         {
            base.OnBorderStyleChanged(e);
            Console.WriteLine("OnBorderStyleChanged is called");
         }

         protected override void OnDoubleBufferChanged(EventArgs e)
         {
            base.OnDoubleBufferChanged(e);
            Console.WriteLine("OnDoubleBufferChanged is called");
         }

         protected override void OnDrawItem(RasterImageListDrawItemEventArgs e)
         {
            base.OnDrawItem(e);
            Console.WriteLine("OnDrawItem is called");
         }

         protected override void OnEnableKeyboardChanged(EventArgs e)
         {
            base.OnEnableKeyboardChanged(e);
            Console.WriteLine("OnEnableKeyboardChanged is called");
         }

         protected override void OnEnableRubberBandSelectionChanged(EventArgs e)
         {
            base.OnEnableRubberBandSelectionChanged(e);
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called");
         }

         protected override void OnItemBackColorChanged(EventArgs e)
         {
            base.OnItemBackColorChanged(e);
            Console.WriteLine("OnItemBackColorChanged is called");
         }

         protected override void OnItemBorderStyleChanged(EventArgs e)
         {
            base.OnItemBorderStyleChanged(e);
            Console.WriteLine("OnItemBorderStyleChanged is called");
         }

         protected override void OnItemForeColorChanged(EventArgs e)
         {
            base.OnItemForeColorChanged(e);
            Console.WriteLine("OnItemForeColorChanged is called");
         }

         protected override void OnItemImageBorderStyleChanged(EventArgs e)
         {
            base.OnItemImageBorderStyleChanged(e);
            Console.WriteLine("OnItemImageBorderStyleChanged is called");
         }

         protected override void OnItemImageSizeChanged(EventArgs e)
         {
            base.OnItemImageSizeChanged(e);
            Console.WriteLine("OnItemImageSizeChanged is called");
         }

         protected override void OnItemSelectedBackColorChanged(EventArgs e)
         {
            base.OnItemSelectedBackColorChanged(e);
            Console.WriteLine("OnItemSelectedBackColorChanged is called");
         }

         protected override void OnItemSelectedForeColorChanged(EventArgs e)
         {
            base.OnItemSelectedForeColorChanged(e);
            Console.WriteLine("OnItemSelectedForeColorChanged is called");
         }

         protected override void OnItemSizeChanged(EventArgs e)
         {
            base.OnItemSizeChanged(e);
            Console.WriteLine("OnItemSizeChanged is called");
         }

         protected override void OnItemSpacingSizeChanged(EventArgs e)
         {
            base.OnItemSpacingSizeChanged(e);
            Console.WriteLine("OnItemSpacingSizeChanged is called");
         }

         protected override void OnKeyDown(KeyEventArgs e)
         {
            base.OnKeyDown(e);
            Console.WriteLine("OnKeyDown is called");
         }

         protected override void OnLostFocus(EventArgs e)
         {
            base.OnLostFocus(e);
            Console.WriteLine("OnLostFocus is called");
         }

         protected override void OnMouseDown(MouseEventArgs e)
         {
            base.OnMouseDown(e);
            Console.WriteLine("OnMouseDown is called");
         }

         protected override void OnMouseMove(MouseEventArgs e)
         {
            base.OnMouseMove(e);
            Console.WriteLine("OnMouseMove is called");
         }

         protected override void OnMouseUp(MouseEventArgs e)
         {
            base.OnMouseUp(e);
            Console.WriteLine("OnMouseUp is called");
         }

         protected override void OnPaint(PaintEventArgs e)
         {
            base.OnPaint(e);
            Console.WriteLine("OnPaint is called");
         }

         protected override void OnPaintPropertiesChanged(EventArgs e)
         {
            base.OnPaintPropertiesChanged(e);
            Console.WriteLine("OnPaintPropertiesChanged is called");
         }

         protected override void OnScroll(EventArgs e)
         {
            base.OnScroll(e);
            Console.WriteLine("OnScroll is called");
         }

         protected override void OnScrollStyleChanged(EventArgs e)
         {
            base.OnScrollStyleChanged(e);
            Console.WriteLine("OnScrollStyleChanged is called");
         }

         protected override void OnSelectedIndexChanged(EventArgs e)
         {
            base.OnSelectedIndexChanged(e);
            Console.WriteLine("OnSelectedIndexChanged is called");
         }

         protected override void OnSelectionModeChanged(EventArgs e)
         {
            base.OnSelectionModeChanged(e);
            Console.WriteLine("OnSelectionModeChanged is called");
         }

         protected override void OnSelectUserImageChanged(EventArgs e)
         {
            base.OnSelectUserImageChanged(e);
            Console.WriteLine("OnSelectUserImageChanged is called");
         }

         protected override void OnShowItemTextChanged(EventArgs e)
         {
            base.OnShowItemTextChanged(e);
            Console.WriteLine("OnShowItemTextChanged is called");
         }

         protected override void OnSizeChanged(EventArgs e)
         {
            base.OnSizeChanged(e);
            Console.WriteLine("OnSizeChanged is called");
         }

         protected override void OnSorterChanged(EventArgs e)
         {
            base.OnSorterChanged(e);
            Console.WriteLine("OnSorterChanged is called");
         }

         protected override void OnSortingChanged(EventArgs e)
         {
            base.OnSortingChanged(e);
            Console.WriteLine("OnSortingChanged is called");
         }

         protected override void OnViewStyleChanged(EventArgs e)
         {
            base.OnViewStyleChanged(e);
            Console.WriteLine("OnViewStyleChanged is called");
         }
      }</code>
        <!--RasterImageList.OnBorderStyleChanged-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageList.OnDoubleBufferChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageList.DoubleBufferChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
        <p>Raising an event invokes the event handler through a delegate.</p>
        <p>The <b>OnDoubleBufferChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
        <p>
          <b>Notes to Inheritors:</b> When overriding <b>OnDoubleBufferChanged</b> in a derived class, be sure to call
            the base class's <b>OnDoubleBufferChanged</b> method so that registered delegates receive the event.</p>
      </remarks>
      <example>
        <code lang="VB">      Public Class MyRasterImageList
         Inherits RasterImageList
         '.
         '.
         '.
         Protected Overrides Sub OnAutoDeselectItemsChanged(ByVal e As EventArgs)
            MyBase.OnAutoDeselectItemsChanged(e)
            Console.WriteLine("OnAutoDeselectItemsChanged is called")
         End Sub

         Protected Overrides Sub OnAutoDisposeImagesChanged(ByVal e As EventArgs)
            MyBase.OnAutoDisposeImagesChanged(e)
            Console.WriteLine("OnAutoDisposeImagesChanged is called")
         End Sub

         Protected Overrides Sub OnBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnBorderStyleChanged(e)
            Console.WriteLine("OnBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnDoubleBufferChanged(ByVal e As EventArgs)
            MyBase.OnDoubleBufferChanged(e)
            Console.WriteLine("OnDoubleBufferChanged is called")
         End Sub

         Protected Overrides Sub OnDrawItem(ByVal e As RasterImageListDrawItemEventArgs)
            MyBase.OnDrawItem(e)
            Console.WriteLine("OnDrawItem is called")
         End Sub

         Protected Overrides Sub OnEnableKeyboardChanged(ByVal e As EventArgs)
            MyBase.OnEnableKeyboardChanged(e)
            Console.WriteLine("OnEnableKeyboardChanged is called")
         End Sub

         Protected Overrides Sub OnEnableRubberBandSelectionChanged(ByVal e As EventArgs)
            MyBase.OnEnableRubberBandSelectionChanged(e)
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called")
         End Sub

         Protected Overrides Sub OnItemBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemBackColorChanged(e)
            Console.WriteLine("OnItemBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemBorderStyleChanged(e)
            Console.WriteLine("OnItemBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemForeColorChanged(e)
            Console.WriteLine("OnItemForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemImageBorderStyleChanged(e)
            Console.WriteLine("OnItemImageBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemImageSizeChanged(e)
            Console.WriteLine("OnItemImageSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedBackColorChanged(e)
            Console.WriteLine("OnItemSelectedBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedForeColorChanged(e)
            Console.WriteLine("OnItemSelectedForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSizeChanged(e)
            Console.WriteLine("OnItemSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSpacingSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSpacingSizeChanged(e)
            Console.WriteLine("OnItemSpacingSizeChanged is called")
         End Sub

         Protected Overrides Sub OnKeyDown(ByVal e As KeyEventArgs)
            MyBase.OnKeyDown(e)
            Console.WriteLine("OnKeyDown is called")
         End Sub

         Protected Overrides Sub OnLostFocus(ByVal e As EventArgs)
            MyBase.OnLostFocus(e)
            Console.WriteLine("OnLostFocus is called")
         End Sub

         Protected Overrides Sub OnMouseDown(ByVal e As MouseEventArgs)
            MyBase.OnMouseDown(e)
            Console.WriteLine("OnMouseDown is called")
         End Sub

         Protected Overrides Sub OnMouseMove(ByVal e As MouseEventArgs)
            MyBase.OnMouseMove(e)
            Console.WriteLine("OnMouseMove is called")
         End Sub

         Protected Overrides Sub OnMouseUp(ByVal e As MouseEventArgs)
            MyBase.OnMouseUp(e)
            Console.WriteLine("OnMouseUp is called")
         End Sub

         Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            MyBase.OnPaint(e)
            Console.WriteLine("OnPaint is called")
         End Sub

         Protected Overrides Sub OnPaintPropertiesChanged(ByVal e As EventArgs)
            MyBase.OnPaintPropertiesChanged(e)
            Console.WriteLine("OnPaintPropertiesChanged is called")
         End Sub

         Protected Overrides Sub OnScroll(ByVal e As EventArgs)
            MyBase.OnScroll(e)
            Console.WriteLine("OnScroll is called")
         End Sub

         Protected Overrides Sub OnScrollStyleChanged(ByVal e As EventArgs)
            MyBase.OnScrollStyleChanged(e)
            Console.WriteLine("OnScrollStyleChanged is called")
         End Sub

         Protected Overrides Sub OnSelectedIndexChanged(ByVal e As EventArgs)
            MyBase.OnSelectedIndexChanged(e)
            Console.WriteLine("OnSelectedIndexChanged is called")
         End Sub

         Protected Overrides Sub OnSelectionModeChanged(ByVal e As EventArgs)
            MyBase.OnSelectionModeChanged(e)
            Console.WriteLine("OnSelectionModeChanged is called")
         End Sub

         Protected Overrides Sub OnSelectUserImageChanged(ByVal e As EventArgs)
            MyBase.OnSelectUserImageChanged(e)
            Console.WriteLine("OnSelectUserImageChanged is called")
         End Sub

         Protected Overrides Sub OnShowItemTextChanged(ByVal e As EventArgs)
            MyBase.OnShowItemTextChanged(e)
            Console.WriteLine("OnShowItemTextChanged is called")
         End Sub

         Protected Overrides Sub OnSizeChanged(ByVal e As EventArgs)
            MyBase.OnSizeChanged(e)
            Console.WriteLine("OnSizeChanged is called")
         End Sub

         Protected Overrides Sub OnSorterChanged(ByVal e As EventArgs)
            MyBase.OnSorterChanged(e)
            Console.WriteLine("OnSorterChanged is called")
         End Sub

         Protected Overrides Sub OnSortingChanged(ByVal e As EventArgs)
            MyBase.OnSortingChanged(e)
            Console.WriteLine("OnSortingChanged is called")
         End Sub

         Protected Overrides Sub OnViewStyleChanged(ByVal e As EventArgs)
            MyBase.OnViewStyleChanged(e)
            Console.WriteLine("OnViewStyleChanged is called")
         End Sub
      End Class</code>
        <code lang="CS">      public class MyRasterImageList : RasterImageList
      {
         //.
         //.
         //.
         protected override void OnAutoDeselectItemsChanged(EventArgs e)
         {
            base.OnAutoDeselectItemsChanged(e);
            Console.WriteLine("OnAutoDeselectItemsChanged is called");
         }

         protected override void OnAutoDisposeImagesChanged(EventArgs e)
         {
            base.OnAutoDisposeImagesChanged(e);
            Console.WriteLine("OnAutoDisposeImagesChanged is called");
         }

         protected override void OnBorderStyleChanged(EventArgs e)
         {
            base.OnBorderStyleChanged(e);
            Console.WriteLine("OnBorderStyleChanged is called");
         }

         protected override void OnDoubleBufferChanged(EventArgs e)
         {
            base.OnDoubleBufferChanged(e);
            Console.WriteLine("OnDoubleBufferChanged is called");
         }

         protected override void OnDrawItem(RasterImageListDrawItemEventArgs e)
         {
            base.OnDrawItem(e);
            Console.WriteLine("OnDrawItem is called");
         }

         protected override void OnEnableKeyboardChanged(EventArgs e)
         {
            base.OnEnableKeyboardChanged(e);
            Console.WriteLine("OnEnableKeyboardChanged is called");
         }

         protected override void OnEnableRubberBandSelectionChanged(EventArgs e)
         {
            base.OnEnableRubberBandSelectionChanged(e);
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called");
         }

         protected override void OnItemBackColorChanged(EventArgs e)
         {
            base.OnItemBackColorChanged(e);
            Console.WriteLine("OnItemBackColorChanged is called");
         }

         protected override void OnItemBorderStyleChanged(EventArgs e)
         {
            base.OnItemBorderStyleChanged(e);
            Console.WriteLine("OnItemBorderStyleChanged is called");
         }

         protected override void OnItemForeColorChanged(EventArgs e)
         {
            base.OnItemForeColorChanged(e);
            Console.WriteLine("OnItemForeColorChanged is called");
         }

         protected override void OnItemImageBorderStyleChanged(EventArgs e)
         {
            base.OnItemImageBorderStyleChanged(e);
            Console.WriteLine("OnItemImageBorderStyleChanged is called");
         }

         protected override void OnItemImageSizeChanged(EventArgs e)
         {
            base.OnItemImageSizeChanged(e);
            Console.WriteLine("OnItemImageSizeChanged is called");
         }

         protected override void OnItemSelectedBackColorChanged(EventArgs e)
         {
            base.OnItemSelectedBackColorChanged(e);
            Console.WriteLine("OnItemSelectedBackColorChanged is called");
         }

         protected override void OnItemSelectedForeColorChanged(EventArgs e)
         {
            base.OnItemSelectedForeColorChanged(e);
            Console.WriteLine("OnItemSelectedForeColorChanged is called");
         }

         protected override void OnItemSizeChanged(EventArgs e)
         {
            base.OnItemSizeChanged(e);
            Console.WriteLine("OnItemSizeChanged is called");
         }

         protected override void OnItemSpacingSizeChanged(EventArgs e)
         {
            base.OnItemSpacingSizeChanged(e);
            Console.WriteLine("OnItemSpacingSizeChanged is called");
         }

         protected override void OnKeyDown(KeyEventArgs e)
         {
            base.OnKeyDown(e);
            Console.WriteLine("OnKeyDown is called");
         }

         protected override void OnLostFocus(EventArgs e)
         {
            base.OnLostFocus(e);
            Console.WriteLine("OnLostFocus is called");
         }

         protected override void OnMouseDown(MouseEventArgs e)
         {
            base.OnMouseDown(e);
            Console.WriteLine("OnMouseDown is called");
         }

         protected override void OnMouseMove(MouseEventArgs e)
         {
            base.OnMouseMove(e);
            Console.WriteLine("OnMouseMove is called");
         }

         protected override void OnMouseUp(MouseEventArgs e)
         {
            base.OnMouseUp(e);
            Console.WriteLine("OnMouseUp is called");
         }

         protected override void OnPaint(PaintEventArgs e)
         {
            base.OnPaint(e);
            Console.WriteLine("OnPaint is called");
         }

         protected override void OnPaintPropertiesChanged(EventArgs e)
         {
            base.OnPaintPropertiesChanged(e);
            Console.WriteLine("OnPaintPropertiesChanged is called");
         }

         protected override void OnScroll(EventArgs e)
         {
            base.OnScroll(e);
            Console.WriteLine("OnScroll is called");
         }

         protected override void OnScrollStyleChanged(EventArgs e)
         {
            base.OnScrollStyleChanged(e);
            Console.WriteLine("OnScrollStyleChanged is called");
         }

         protected override void OnSelectedIndexChanged(EventArgs e)
         {
            base.OnSelectedIndexChanged(e);
            Console.WriteLine("OnSelectedIndexChanged is called");
         }

         protected override void OnSelectionModeChanged(EventArgs e)
         {
            base.OnSelectionModeChanged(e);
            Console.WriteLine("OnSelectionModeChanged is called");
         }

         protected override void OnSelectUserImageChanged(EventArgs e)
         {
            base.OnSelectUserImageChanged(e);
            Console.WriteLine("OnSelectUserImageChanged is called");
         }

         protected override void OnShowItemTextChanged(EventArgs e)
         {
            base.OnShowItemTextChanged(e);
            Console.WriteLine("OnShowItemTextChanged is called");
         }

         protected override void OnSizeChanged(EventArgs e)
         {
            base.OnSizeChanged(e);
            Console.WriteLine("OnSizeChanged is called");
         }

         protected override void OnSorterChanged(EventArgs e)
         {
            base.OnSorterChanged(e);
            Console.WriteLine("OnSorterChanged is called");
         }

         protected override void OnSortingChanged(EventArgs e)
         {
            base.OnSortingChanged(e);
            Console.WriteLine("OnSortingChanged is called");
         }

         protected override void OnViewStyleChanged(EventArgs e)
         {
            base.OnViewStyleChanged(e);
            Console.WriteLine("OnViewStyleChanged is called");
         }
      }</code>
        <!--RasterImageList.OnBorderStyleChanged-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageList.BeginUpdate">
      <summary>
            Prevents the control from drawing until the <see cref="M:Leadtools.WinForms.RasterImageList.EndUpdate" /> method is called.
            </summary>
      <remarks>
            The preferred way to add multiple items to a <see cref="T:Leadtools.WinForms.RasterImageList" /> is to use the
            <a href="ms-xhelp:///?id=Leadtools~Leadtools.RasterCollection`1~AddRange">AddRange</a>
            method of the <see cref="T:Leadtools.WinForms.RasterImageListItemCollection" /> (accessed through the <see cref="P:Leadtools.WinForms.RasterImageList.Items" /> property of the
            <see cref="T:Leadtools.WinForms.RasterImageList" />). This enables you to add an array of items to the list in a single operation. However, if
            you want to add items one at a time using the <see cref="M:Leadtools.RasterCollection`1.Add(`0)" /> method of the
            <see cref="T:Leadtools.WinForms.RasterImageListItemCollection" /> class, you can use the <b>BeginUpdate</b> method to prevent the control from
            repainting the <see cref="T:Leadtools.WinForms.RasterImageList" /> each time an item is added. Once you have completed the task of adding items
            to the control, call the <see cref="M:Leadtools.WinForms.RasterImageList.EndUpdate" /> method to enable the <see cref="T:Leadtools.WinForms.RasterImageList" /> to repaint.
            This way of adding items can prevent flickered drawing of the <see cref="T:Leadtools.WinForms.RasterImageList" /> when a large
            number of items are being added to the control.
            </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageListItem.Image" />.
            </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageList.EndUpdate">
      <summary>
            Resumes drawing of the control after drawing is suspended by the <see cref="M:Leadtools.WinForms.RasterImageList.BeginUpdate" /> method.
            </summary>
      <remarks>
            The preferred way to add multiple items to a <see cref="T:Leadtools.WinForms.RasterImageList" /> is to use the
            <a href="ms-xhelp:///?id=Leadtools~Leadtools.RasterCollection`1~AddRange">AddRange</a>
            method of the <see cref="T:Leadtools.WinForms.RasterImageListItemCollection" /> (accessed through the <see cref="P:Leadtools.WinForms.RasterImageList.Items" /> property of the
            <see cref="T:Leadtools.WinForms.RasterImageList" />). This enables you to add an array of items to the list in a single operation. However, if
            you want to add items one at a time using the <see cref="M:Leadtools.RasterCollection`1.Add(`0)" /> method of the
            <see cref="T:Leadtools.WinForms.RasterImageListItemCollection" /> class, you can use the <see cref="M:Leadtools.WinForms.RasterImageList.BeginUpdate" /> method to prevent the control
            from repainting the <see cref="T:Leadtools.WinForms.RasterImageList" /> each time an item is added. Once you have completed the task of adding
            items to the control, call the <b>EndUpdate</b> method to enable the <see cref="T:Leadtools.WinForms.RasterImageList" /> to repaint.
            This way of adding items can prevent flickered drawing of the <see cref="T:Leadtools.WinForms.RasterImageList" /> when a large
            number of items are being added to the control.
            </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageListItem.Image" />.
            </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageList.OnPaintPropertiesChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageList.PaintPropertiesChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
        <p>Raising an event invokes the event handler through a delegate.</p>
        <p>The <b>OnPaintPropertiesChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
        <p>
          <b>Notes to Inheritors:</b> When overriding <b>OnPaintPropertiesChanged</b> in a derived class, be sure to call
            the base class's <b>OnPaintPropertiesChanged</b> method so that registered delegates receive the event.</p>
      </remarks>
      <example>
        <code lang="VB">      Public Class MyRasterImageList
         Inherits RasterImageList
         '.
         '.
         '.
         Protected Overrides Sub OnAutoDeselectItemsChanged(ByVal e As EventArgs)
            MyBase.OnAutoDeselectItemsChanged(e)
            Console.WriteLine("OnAutoDeselectItemsChanged is called")
         End Sub

         Protected Overrides Sub OnAutoDisposeImagesChanged(ByVal e As EventArgs)
            MyBase.OnAutoDisposeImagesChanged(e)
            Console.WriteLine("OnAutoDisposeImagesChanged is called")
         End Sub

         Protected Overrides Sub OnBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnBorderStyleChanged(e)
            Console.WriteLine("OnBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnDoubleBufferChanged(ByVal e As EventArgs)
            MyBase.OnDoubleBufferChanged(e)
            Console.WriteLine("OnDoubleBufferChanged is called")
         End Sub

         Protected Overrides Sub OnDrawItem(ByVal e As RasterImageListDrawItemEventArgs)
            MyBase.OnDrawItem(e)
            Console.WriteLine("OnDrawItem is called")
         End Sub

         Protected Overrides Sub OnEnableKeyboardChanged(ByVal e As EventArgs)
            MyBase.OnEnableKeyboardChanged(e)
            Console.WriteLine("OnEnableKeyboardChanged is called")
         End Sub

         Protected Overrides Sub OnEnableRubberBandSelectionChanged(ByVal e As EventArgs)
            MyBase.OnEnableRubberBandSelectionChanged(e)
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called")
         End Sub

         Protected Overrides Sub OnItemBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemBackColorChanged(e)
            Console.WriteLine("OnItemBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemBorderStyleChanged(e)
            Console.WriteLine("OnItemBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemForeColorChanged(e)
            Console.WriteLine("OnItemForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemImageBorderStyleChanged(e)
            Console.WriteLine("OnItemImageBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemImageSizeChanged(e)
            Console.WriteLine("OnItemImageSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedBackColorChanged(e)
            Console.WriteLine("OnItemSelectedBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedForeColorChanged(e)
            Console.WriteLine("OnItemSelectedForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSizeChanged(e)
            Console.WriteLine("OnItemSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSpacingSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSpacingSizeChanged(e)
            Console.WriteLine("OnItemSpacingSizeChanged is called")
         End Sub

         Protected Overrides Sub OnKeyDown(ByVal e As KeyEventArgs)
            MyBase.OnKeyDown(e)
            Console.WriteLine("OnKeyDown is called")
         End Sub

         Protected Overrides Sub OnLostFocus(ByVal e As EventArgs)
            MyBase.OnLostFocus(e)
            Console.WriteLine("OnLostFocus is called")
         End Sub

         Protected Overrides Sub OnMouseDown(ByVal e As MouseEventArgs)
            MyBase.OnMouseDown(e)
            Console.WriteLine("OnMouseDown is called")
         End Sub

         Protected Overrides Sub OnMouseMove(ByVal e As MouseEventArgs)
            MyBase.OnMouseMove(e)
            Console.WriteLine("OnMouseMove is called")
         End Sub

         Protected Overrides Sub OnMouseUp(ByVal e As MouseEventArgs)
            MyBase.OnMouseUp(e)
            Console.WriteLine("OnMouseUp is called")
         End Sub

         Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            MyBase.OnPaint(e)
            Console.WriteLine("OnPaint is called")
         End Sub

         Protected Overrides Sub OnPaintPropertiesChanged(ByVal e As EventArgs)
            MyBase.OnPaintPropertiesChanged(e)
            Console.WriteLine("OnPaintPropertiesChanged is called")
         End Sub

         Protected Overrides Sub OnScroll(ByVal e As EventArgs)
            MyBase.OnScroll(e)
            Console.WriteLine("OnScroll is called")
         End Sub

         Protected Overrides Sub OnScrollStyleChanged(ByVal e As EventArgs)
            MyBase.OnScrollStyleChanged(e)
            Console.WriteLine("OnScrollStyleChanged is called")
         End Sub

         Protected Overrides Sub OnSelectedIndexChanged(ByVal e As EventArgs)
            MyBase.OnSelectedIndexChanged(e)
            Console.WriteLine("OnSelectedIndexChanged is called")
         End Sub

         Protected Overrides Sub OnSelectionModeChanged(ByVal e As EventArgs)
            MyBase.OnSelectionModeChanged(e)
            Console.WriteLine("OnSelectionModeChanged is called")
         End Sub

         Protected Overrides Sub OnSelectUserImageChanged(ByVal e As EventArgs)
            MyBase.OnSelectUserImageChanged(e)
            Console.WriteLine("OnSelectUserImageChanged is called")
         End Sub

         Protected Overrides Sub OnShowItemTextChanged(ByVal e As EventArgs)
            MyBase.OnShowItemTextChanged(e)
            Console.WriteLine("OnShowItemTextChanged is called")
         End Sub

         Protected Overrides Sub OnSizeChanged(ByVal e As EventArgs)
            MyBase.OnSizeChanged(e)
            Console.WriteLine("OnSizeChanged is called")
         End Sub

         Protected Overrides Sub OnSorterChanged(ByVal e As EventArgs)
            MyBase.OnSorterChanged(e)
            Console.WriteLine("OnSorterChanged is called")
         End Sub

         Protected Overrides Sub OnSortingChanged(ByVal e As EventArgs)
            MyBase.OnSortingChanged(e)
            Console.WriteLine("OnSortingChanged is called")
         End Sub

         Protected Overrides Sub OnViewStyleChanged(ByVal e As EventArgs)
            MyBase.OnViewStyleChanged(e)
            Console.WriteLine("OnViewStyleChanged is called")
         End Sub
      End Class</code>
        <code lang="CS">      public class MyRasterImageList : RasterImageList
      {
         //.
         //.
         //.
         protected override void OnAutoDeselectItemsChanged(EventArgs e)
         {
            base.OnAutoDeselectItemsChanged(e);
            Console.WriteLine("OnAutoDeselectItemsChanged is called");
         }

         protected override void OnAutoDisposeImagesChanged(EventArgs e)
         {
            base.OnAutoDisposeImagesChanged(e);
            Console.WriteLine("OnAutoDisposeImagesChanged is called");
         }

         protected override void OnBorderStyleChanged(EventArgs e)
         {
            base.OnBorderStyleChanged(e);
            Console.WriteLine("OnBorderStyleChanged is called");
         }

         protected override void OnDoubleBufferChanged(EventArgs e)
         {
            base.OnDoubleBufferChanged(e);
            Console.WriteLine("OnDoubleBufferChanged is called");
         }

         protected override void OnDrawItem(RasterImageListDrawItemEventArgs e)
         {
            base.OnDrawItem(e);
            Console.WriteLine("OnDrawItem is called");
         }

         protected override void OnEnableKeyboardChanged(EventArgs e)
         {
            base.OnEnableKeyboardChanged(e);
            Console.WriteLine("OnEnableKeyboardChanged is called");
         }

         protected override void OnEnableRubberBandSelectionChanged(EventArgs e)
         {
            base.OnEnableRubberBandSelectionChanged(e);
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called");
         }

         protected override void OnItemBackColorChanged(EventArgs e)
         {
            base.OnItemBackColorChanged(e);
            Console.WriteLine("OnItemBackColorChanged is called");
         }

         protected override void OnItemBorderStyleChanged(EventArgs e)
         {
            base.OnItemBorderStyleChanged(e);
            Console.WriteLine("OnItemBorderStyleChanged is called");
         }

         protected override void OnItemForeColorChanged(EventArgs e)
         {
            base.OnItemForeColorChanged(e);
            Console.WriteLine("OnItemForeColorChanged is called");
         }

         protected override void OnItemImageBorderStyleChanged(EventArgs e)
         {
            base.OnItemImageBorderStyleChanged(e);
            Console.WriteLine("OnItemImageBorderStyleChanged is called");
         }

         protected override void OnItemImageSizeChanged(EventArgs e)
         {
            base.OnItemImageSizeChanged(e);
            Console.WriteLine("OnItemImageSizeChanged is called");
         }

         protected override void OnItemSelectedBackColorChanged(EventArgs e)
         {
            base.OnItemSelectedBackColorChanged(e);
            Console.WriteLine("OnItemSelectedBackColorChanged is called");
         }

         protected override void OnItemSelectedForeColorChanged(EventArgs e)
         {
            base.OnItemSelectedForeColorChanged(e);
            Console.WriteLine("OnItemSelectedForeColorChanged is called");
         }

         protected override void OnItemSizeChanged(EventArgs e)
         {
            base.OnItemSizeChanged(e);
            Console.WriteLine("OnItemSizeChanged is called");
         }

         protected override void OnItemSpacingSizeChanged(EventArgs e)
         {
            base.OnItemSpacingSizeChanged(e);
            Console.WriteLine("OnItemSpacingSizeChanged is called");
         }

         protected override void OnKeyDown(KeyEventArgs e)
         {
            base.OnKeyDown(e);
            Console.WriteLine("OnKeyDown is called");
         }

         protected override void OnLostFocus(EventArgs e)
         {
            base.OnLostFocus(e);
            Console.WriteLine("OnLostFocus is called");
         }

         protected override void OnMouseDown(MouseEventArgs e)
         {
            base.OnMouseDown(e);
            Console.WriteLine("OnMouseDown is called");
         }

         protected override void OnMouseMove(MouseEventArgs e)
         {
            base.OnMouseMove(e);
            Console.WriteLine("OnMouseMove is called");
         }

         protected override void OnMouseUp(MouseEventArgs e)
         {
            base.OnMouseUp(e);
            Console.WriteLine("OnMouseUp is called");
         }

         protected override void OnPaint(PaintEventArgs e)
         {
            base.OnPaint(e);
            Console.WriteLine("OnPaint is called");
         }

         protected override void OnPaintPropertiesChanged(EventArgs e)
         {
            base.OnPaintPropertiesChanged(e);
            Console.WriteLine("OnPaintPropertiesChanged is called");
         }

         protected override void OnScroll(EventArgs e)
         {
            base.OnScroll(e);
            Console.WriteLine("OnScroll is called");
         }

         protected override void OnScrollStyleChanged(EventArgs e)
         {
            base.OnScrollStyleChanged(e);
            Console.WriteLine("OnScrollStyleChanged is called");
         }

         protected override void OnSelectedIndexChanged(EventArgs e)
         {
            base.OnSelectedIndexChanged(e);
            Console.WriteLine("OnSelectedIndexChanged is called");
         }

         protected override void OnSelectionModeChanged(EventArgs e)
         {
            base.OnSelectionModeChanged(e);
            Console.WriteLine("OnSelectionModeChanged is called");
         }

         protected override void OnSelectUserImageChanged(EventArgs e)
         {
            base.OnSelectUserImageChanged(e);
            Console.WriteLine("OnSelectUserImageChanged is called");
         }

         protected override void OnShowItemTextChanged(EventArgs e)
         {
            base.OnShowItemTextChanged(e);
            Console.WriteLine("OnShowItemTextChanged is called");
         }

         protected override void OnSizeChanged(EventArgs e)
         {
            base.OnSizeChanged(e);
            Console.WriteLine("OnSizeChanged is called");
         }

         protected override void OnSorterChanged(EventArgs e)
         {
            base.OnSorterChanged(e);
            Console.WriteLine("OnSorterChanged is called");
         }

         protected override void OnSortingChanged(EventArgs e)
         {
            base.OnSortingChanged(e);
            Console.WriteLine("OnSortingChanged is called");
         }

         protected override void OnViewStyleChanged(EventArgs e)
         {
            base.OnViewStyleChanged(e);
            Console.WriteLine("OnViewStyleChanged is called");
         }
      }</code>
        <!--RasterImageList.OnBorderStyleChanged-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageList.OnPaint(System.Windows.Forms.PaintEventArgs)">
      <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)">Control.OnPaint</see>.
            </summary>
      <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param>
      <remarks>
        <p>Raising an event invokes the event handler through a delegate.</p>
        <p>The <b>OnPaint</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
        <p>
          <b>Notes to Inheritors:</b> When overriding <b>OnPaint</b> in a derived class, be sure to call
            the base class's <b>OnPaint</b> method so that registered delegates receive the event.</p>
      </remarks>
      <example>
        <code lang="VB">      Public Class MyRasterImageList
         Inherits RasterImageList
         '.
         '.
         '.
         Protected Overrides Sub OnAutoDeselectItemsChanged(ByVal e As EventArgs)
            MyBase.OnAutoDeselectItemsChanged(e)
            Console.WriteLine("OnAutoDeselectItemsChanged is called")
         End Sub

         Protected Overrides Sub OnAutoDisposeImagesChanged(ByVal e As EventArgs)
            MyBase.OnAutoDisposeImagesChanged(e)
            Console.WriteLine("OnAutoDisposeImagesChanged is called")
         End Sub

         Protected Overrides Sub OnBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnBorderStyleChanged(e)
            Console.WriteLine("OnBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnDoubleBufferChanged(ByVal e As EventArgs)
            MyBase.OnDoubleBufferChanged(e)
            Console.WriteLine("OnDoubleBufferChanged is called")
         End Sub

         Protected Overrides Sub OnDrawItem(ByVal e As RasterImageListDrawItemEventArgs)
            MyBase.OnDrawItem(e)
            Console.WriteLine("OnDrawItem is called")
         End Sub

         Protected Overrides Sub OnEnableKeyboardChanged(ByVal e As EventArgs)
            MyBase.OnEnableKeyboardChanged(e)
            Console.WriteLine("OnEnableKeyboardChanged is called")
         End Sub

         Protected Overrides Sub OnEnableRubberBandSelectionChanged(ByVal e As EventArgs)
            MyBase.OnEnableRubberBandSelectionChanged(e)
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called")
         End Sub

         Protected Overrides Sub OnItemBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemBackColorChanged(e)
            Console.WriteLine("OnItemBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemBorderStyleChanged(e)
            Console.WriteLine("OnItemBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemForeColorChanged(e)
            Console.WriteLine("OnItemForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemImageBorderStyleChanged(e)
            Console.WriteLine("OnItemImageBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemImageSizeChanged(e)
            Console.WriteLine("OnItemImageSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedBackColorChanged(e)
            Console.WriteLine("OnItemSelectedBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedForeColorChanged(e)
            Console.WriteLine("OnItemSelectedForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSizeChanged(e)
            Console.WriteLine("OnItemSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSpacingSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSpacingSizeChanged(e)
            Console.WriteLine("OnItemSpacingSizeChanged is called")
         End Sub

         Protected Overrides Sub OnKeyDown(ByVal e As KeyEventArgs)
            MyBase.OnKeyDown(e)
            Console.WriteLine("OnKeyDown is called")
         End Sub

         Protected Overrides Sub OnLostFocus(ByVal e As EventArgs)
            MyBase.OnLostFocus(e)
            Console.WriteLine("OnLostFocus is called")
         End Sub

         Protected Overrides Sub OnMouseDown(ByVal e As MouseEventArgs)
            MyBase.OnMouseDown(e)
            Console.WriteLine("OnMouseDown is called")
         End Sub

         Protected Overrides Sub OnMouseMove(ByVal e As MouseEventArgs)
            MyBase.OnMouseMove(e)
            Console.WriteLine("OnMouseMove is called")
         End Sub

         Protected Overrides Sub OnMouseUp(ByVal e As MouseEventArgs)
            MyBase.OnMouseUp(e)
            Console.WriteLine("OnMouseUp is called")
         End Sub

         Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            MyBase.OnPaint(e)
            Console.WriteLine("OnPaint is called")
         End Sub

         Protected Overrides Sub OnPaintPropertiesChanged(ByVal e As EventArgs)
            MyBase.OnPaintPropertiesChanged(e)
            Console.WriteLine("OnPaintPropertiesChanged is called")
         End Sub

         Protected Overrides Sub OnScroll(ByVal e As EventArgs)
            MyBase.OnScroll(e)
            Console.WriteLine("OnScroll is called")
         End Sub

         Protected Overrides Sub OnScrollStyleChanged(ByVal e As EventArgs)
            MyBase.OnScrollStyleChanged(e)
            Console.WriteLine("OnScrollStyleChanged is called")
         End Sub

         Protected Overrides Sub OnSelectedIndexChanged(ByVal e As EventArgs)
            MyBase.OnSelectedIndexChanged(e)
            Console.WriteLine("OnSelectedIndexChanged is called")
         End Sub

         Protected Overrides Sub OnSelectionModeChanged(ByVal e As EventArgs)
            MyBase.OnSelectionModeChanged(e)
            Console.WriteLine("OnSelectionModeChanged is called")
         End Sub

         Protected Overrides Sub OnSelectUserImageChanged(ByVal e As EventArgs)
            MyBase.OnSelectUserImageChanged(e)
            Console.WriteLine("OnSelectUserImageChanged is called")
         End Sub

         Protected Overrides Sub OnShowItemTextChanged(ByVal e As EventArgs)
            MyBase.OnShowItemTextChanged(e)
            Console.WriteLine("OnShowItemTextChanged is called")
         End Sub

         Protected Overrides Sub OnSizeChanged(ByVal e As EventArgs)
            MyBase.OnSizeChanged(e)
            Console.WriteLine("OnSizeChanged is called")
         End Sub

         Protected Overrides Sub OnSorterChanged(ByVal e As EventArgs)
            MyBase.OnSorterChanged(e)
            Console.WriteLine("OnSorterChanged is called")
         End Sub

         Protected Overrides Sub OnSortingChanged(ByVal e As EventArgs)
            MyBase.OnSortingChanged(e)
            Console.WriteLine("OnSortingChanged is called")
         End Sub

         Protected Overrides Sub OnViewStyleChanged(ByVal e As EventArgs)
            MyBase.OnViewStyleChanged(e)
            Console.WriteLine("OnViewStyleChanged is called")
         End Sub
      End Class</code>
        <code lang="CS">      public class MyRasterImageList : RasterImageList
      {
         //.
         //.
         //.
         protected override void OnAutoDeselectItemsChanged(EventArgs e)
         {
            base.OnAutoDeselectItemsChanged(e);
            Console.WriteLine("OnAutoDeselectItemsChanged is called");
         }

         protected override void OnAutoDisposeImagesChanged(EventArgs e)
         {
            base.OnAutoDisposeImagesChanged(e);
            Console.WriteLine("OnAutoDisposeImagesChanged is called");
         }

         protected override void OnBorderStyleChanged(EventArgs e)
         {
            base.OnBorderStyleChanged(e);
            Console.WriteLine("OnBorderStyleChanged is called");
         }

         protected override void OnDoubleBufferChanged(EventArgs e)
         {
            base.OnDoubleBufferChanged(e);
            Console.WriteLine("OnDoubleBufferChanged is called");
         }

         protected override void OnDrawItem(RasterImageListDrawItemEventArgs e)
         {
            base.OnDrawItem(e);
            Console.WriteLine("OnDrawItem is called");
         }

         protected override void OnEnableKeyboardChanged(EventArgs e)
         {
            base.OnEnableKeyboardChanged(e);
            Console.WriteLine("OnEnableKeyboardChanged is called");
         }

         protected override void OnEnableRubberBandSelectionChanged(EventArgs e)
         {
            base.OnEnableRubberBandSelectionChanged(e);
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called");
         }

         protected override void OnItemBackColorChanged(EventArgs e)
         {
            base.OnItemBackColorChanged(e);
            Console.WriteLine("OnItemBackColorChanged is called");
         }

         protected override void OnItemBorderStyleChanged(EventArgs e)
         {
            base.OnItemBorderStyleChanged(e);
            Console.WriteLine("OnItemBorderStyleChanged is called");
         }

         protected override void OnItemForeColorChanged(EventArgs e)
         {
            base.OnItemForeColorChanged(e);
            Console.WriteLine("OnItemForeColorChanged is called");
         }

         protected override void OnItemImageBorderStyleChanged(EventArgs e)
         {
            base.OnItemImageBorderStyleChanged(e);
            Console.WriteLine("OnItemImageBorderStyleChanged is called");
         }

         protected override void OnItemImageSizeChanged(EventArgs e)
         {
            base.OnItemImageSizeChanged(e);
            Console.WriteLine("OnItemImageSizeChanged is called");
         }

         protected override void OnItemSelectedBackColorChanged(EventArgs e)
         {
            base.OnItemSelectedBackColorChanged(e);
            Console.WriteLine("OnItemSelectedBackColorChanged is called");
         }

         protected override void OnItemSelectedForeColorChanged(EventArgs e)
         {
            base.OnItemSelectedForeColorChanged(e);
            Console.WriteLine("OnItemSelectedForeColorChanged is called");
         }

         protected override void OnItemSizeChanged(EventArgs e)
         {
            base.OnItemSizeChanged(e);
            Console.WriteLine("OnItemSizeChanged is called");
         }

         protected override void OnItemSpacingSizeChanged(EventArgs e)
         {
            base.OnItemSpacingSizeChanged(e);
            Console.WriteLine("OnItemSpacingSizeChanged is called");
         }

         protected override void OnKeyDown(KeyEventArgs e)
         {
            base.OnKeyDown(e);
            Console.WriteLine("OnKeyDown is called");
         }

         protected override void OnLostFocus(EventArgs e)
         {
            base.OnLostFocus(e);
            Console.WriteLine("OnLostFocus is called");
         }

         protected override void OnMouseDown(MouseEventArgs e)
         {
            base.OnMouseDown(e);
            Console.WriteLine("OnMouseDown is called");
         }

         protected override void OnMouseMove(MouseEventArgs e)
         {
            base.OnMouseMove(e);
            Console.WriteLine("OnMouseMove is called");
         }

         protected override void OnMouseUp(MouseEventArgs e)
         {
            base.OnMouseUp(e);
            Console.WriteLine("OnMouseUp is called");
         }

         protected override void OnPaint(PaintEventArgs e)
         {
            base.OnPaint(e);
            Console.WriteLine("OnPaint is called");
         }

         protected override void OnPaintPropertiesChanged(EventArgs e)
         {
            base.OnPaintPropertiesChanged(e);
            Console.WriteLine("OnPaintPropertiesChanged is called");
         }

         protected override void OnScroll(EventArgs e)
         {
            base.OnScroll(e);
            Console.WriteLine("OnScroll is called");
         }

         protected override void OnScrollStyleChanged(EventArgs e)
         {
            base.OnScrollStyleChanged(e);
            Console.WriteLine("OnScrollStyleChanged is called");
         }

         protected override void OnSelectedIndexChanged(EventArgs e)
         {
            base.OnSelectedIndexChanged(e);
            Console.WriteLine("OnSelectedIndexChanged is called");
         }

         protected override void OnSelectionModeChanged(EventArgs e)
         {
            base.OnSelectionModeChanged(e);
            Console.WriteLine("OnSelectionModeChanged is called");
         }

         protected override void OnSelectUserImageChanged(EventArgs e)
         {
            base.OnSelectUserImageChanged(e);
            Console.WriteLine("OnSelectUserImageChanged is called");
         }

         protected override void OnShowItemTextChanged(EventArgs e)
         {
            base.OnShowItemTextChanged(e);
            Console.WriteLine("OnShowItemTextChanged is called");
         }

         protected override void OnSizeChanged(EventArgs e)
         {
            base.OnSizeChanged(e);
            Console.WriteLine("OnSizeChanged is called");
         }

         protected override void OnSorterChanged(EventArgs e)
         {
            base.OnSorterChanged(e);
            Console.WriteLine("OnSorterChanged is called");
         }

         protected override void OnSortingChanged(EventArgs e)
         {
            base.OnSortingChanged(e);
            Console.WriteLine("OnSortingChanged is called");
         }

         protected override void OnViewStyleChanged(EventArgs e)
         {
            base.OnViewStyleChanged(e);
            Console.WriteLine("OnViewStyleChanged is called");
         }
      }</code>
        <!--RasterImageList.OnBorderStyleChanged-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageList.OnDrawItem(Leadtools.WinForms.RasterImageListDrawItemEventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageList.DrawItem" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
        <p>Raising an event invokes the event handler through a delegate.</p>
        <p>The <b>OnDrawItem</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
        <p>
          <b>Notes to Inheritors:</b> When overriding <b>OnDrawItem</b> in a derived class, be sure to call
            the base class's <b>OnDrawItem</b> method so that registered delegates receive the event.</p>
      </remarks>
      <example>
        <code lang="VB">      Public Class MyRasterImageList
         Inherits RasterImageList
         '.
         '.
         '.
         Protected Overrides Sub OnAutoDeselectItemsChanged(ByVal e As EventArgs)
            MyBase.OnAutoDeselectItemsChanged(e)
            Console.WriteLine("OnAutoDeselectItemsChanged is called")
         End Sub

         Protected Overrides Sub OnAutoDisposeImagesChanged(ByVal e As EventArgs)
            MyBase.OnAutoDisposeImagesChanged(e)
            Console.WriteLine("OnAutoDisposeImagesChanged is called")
         End Sub

         Protected Overrides Sub OnBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnBorderStyleChanged(e)
            Console.WriteLine("OnBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnDoubleBufferChanged(ByVal e As EventArgs)
            MyBase.OnDoubleBufferChanged(e)
            Console.WriteLine("OnDoubleBufferChanged is called")
         End Sub

         Protected Overrides Sub OnDrawItem(ByVal e As RasterImageListDrawItemEventArgs)
            MyBase.OnDrawItem(e)
            Console.WriteLine("OnDrawItem is called")
         End Sub

         Protected Overrides Sub OnEnableKeyboardChanged(ByVal e As EventArgs)
            MyBase.OnEnableKeyboardChanged(e)
            Console.WriteLine("OnEnableKeyboardChanged is called")
         End Sub

         Protected Overrides Sub OnEnableRubberBandSelectionChanged(ByVal e As EventArgs)
            MyBase.OnEnableRubberBandSelectionChanged(e)
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called")
         End Sub

         Protected Overrides Sub OnItemBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemBackColorChanged(e)
            Console.WriteLine("OnItemBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemBorderStyleChanged(e)
            Console.WriteLine("OnItemBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemForeColorChanged(e)
            Console.WriteLine("OnItemForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemImageBorderStyleChanged(e)
            Console.WriteLine("OnItemImageBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemImageSizeChanged(e)
            Console.WriteLine("OnItemImageSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedBackColorChanged(e)
            Console.WriteLine("OnItemSelectedBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedForeColorChanged(e)
            Console.WriteLine("OnItemSelectedForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSizeChanged(e)
            Console.WriteLine("OnItemSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSpacingSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSpacingSizeChanged(e)
            Console.WriteLine("OnItemSpacingSizeChanged is called")
         End Sub

         Protected Overrides Sub OnKeyDown(ByVal e As KeyEventArgs)
            MyBase.OnKeyDown(e)
            Console.WriteLine("OnKeyDown is called")
         End Sub

         Protected Overrides Sub OnLostFocus(ByVal e As EventArgs)
            MyBase.OnLostFocus(e)
            Console.WriteLine("OnLostFocus is called")
         End Sub

         Protected Overrides Sub OnMouseDown(ByVal e As MouseEventArgs)
            MyBase.OnMouseDown(e)
            Console.WriteLine("OnMouseDown is called")
         End Sub

         Protected Overrides Sub OnMouseMove(ByVal e As MouseEventArgs)
            MyBase.OnMouseMove(e)
            Console.WriteLine("OnMouseMove is called")
         End Sub

         Protected Overrides Sub OnMouseUp(ByVal e As MouseEventArgs)
            MyBase.OnMouseUp(e)
            Console.WriteLine("OnMouseUp is called")
         End Sub

         Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            MyBase.OnPaint(e)
            Console.WriteLine("OnPaint is called")
         End Sub

         Protected Overrides Sub OnPaintPropertiesChanged(ByVal e As EventArgs)
            MyBase.OnPaintPropertiesChanged(e)
            Console.WriteLine("OnPaintPropertiesChanged is called")
         End Sub

         Protected Overrides Sub OnScroll(ByVal e As EventArgs)
            MyBase.OnScroll(e)
            Console.WriteLine("OnScroll is called")
         End Sub

         Protected Overrides Sub OnScrollStyleChanged(ByVal e As EventArgs)
            MyBase.OnScrollStyleChanged(e)
            Console.WriteLine("OnScrollStyleChanged is called")
         End Sub

         Protected Overrides Sub OnSelectedIndexChanged(ByVal e As EventArgs)
            MyBase.OnSelectedIndexChanged(e)
            Console.WriteLine("OnSelectedIndexChanged is called")
         End Sub

         Protected Overrides Sub OnSelectionModeChanged(ByVal e As EventArgs)
            MyBase.OnSelectionModeChanged(e)
            Console.WriteLine("OnSelectionModeChanged is called")
         End Sub

         Protected Overrides Sub OnSelectUserImageChanged(ByVal e As EventArgs)
            MyBase.OnSelectUserImageChanged(e)
            Console.WriteLine("OnSelectUserImageChanged is called")
         End Sub

         Protected Overrides Sub OnShowItemTextChanged(ByVal e As EventArgs)
            MyBase.OnShowItemTextChanged(e)
            Console.WriteLine("OnShowItemTextChanged is called")
         End Sub

         Protected Overrides Sub OnSizeChanged(ByVal e As EventArgs)
            MyBase.OnSizeChanged(e)
            Console.WriteLine("OnSizeChanged is called")
         End Sub

         Protected Overrides Sub OnSorterChanged(ByVal e As EventArgs)
            MyBase.OnSorterChanged(e)
            Console.WriteLine("OnSorterChanged is called")
         End Sub

         Protected Overrides Sub OnSortingChanged(ByVal e As EventArgs)
            MyBase.OnSortingChanged(e)
            Console.WriteLine("OnSortingChanged is called")
         End Sub

         Protected Overrides Sub OnViewStyleChanged(ByVal e As EventArgs)
            MyBase.OnViewStyleChanged(e)
            Console.WriteLine("OnViewStyleChanged is called")
         End Sub
      End Class</code>
        <code lang="CS">      public class MyRasterImageList : RasterImageList
      {
         //.
         //.
         //.
         protected override void OnAutoDeselectItemsChanged(EventArgs e)
         {
            base.OnAutoDeselectItemsChanged(e);
            Console.WriteLine("OnAutoDeselectItemsChanged is called");
         }

         protected override void OnAutoDisposeImagesChanged(EventArgs e)
         {
            base.OnAutoDisposeImagesChanged(e);
            Console.WriteLine("OnAutoDisposeImagesChanged is called");
         }

         protected override void OnBorderStyleChanged(EventArgs e)
         {
            base.OnBorderStyleChanged(e);
            Console.WriteLine("OnBorderStyleChanged is called");
         }

         protected override void OnDoubleBufferChanged(EventArgs e)
         {
            base.OnDoubleBufferChanged(e);
            Console.WriteLine("OnDoubleBufferChanged is called");
         }

         protected override void OnDrawItem(RasterImageListDrawItemEventArgs e)
         {
            base.OnDrawItem(e);
            Console.WriteLine("OnDrawItem is called");
         }

         protected override void OnEnableKeyboardChanged(EventArgs e)
         {
            base.OnEnableKeyboardChanged(e);
            Console.WriteLine("OnEnableKeyboardChanged is called");
         }

         protected override void OnEnableRubberBandSelectionChanged(EventArgs e)
         {
            base.OnEnableRubberBandSelectionChanged(e);
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called");
         }

         protected override void OnItemBackColorChanged(EventArgs e)
         {
            base.OnItemBackColorChanged(e);
            Console.WriteLine("OnItemBackColorChanged is called");
         }

         protected override void OnItemBorderStyleChanged(EventArgs e)
         {
            base.OnItemBorderStyleChanged(e);
            Console.WriteLine("OnItemBorderStyleChanged is called");
         }

         protected override void OnItemForeColorChanged(EventArgs e)
         {
            base.OnItemForeColorChanged(e);
            Console.WriteLine("OnItemForeColorChanged is called");
         }

         protected override void OnItemImageBorderStyleChanged(EventArgs e)
         {
            base.OnItemImageBorderStyleChanged(e);
            Console.WriteLine("OnItemImageBorderStyleChanged is called");
         }

         protected override void OnItemImageSizeChanged(EventArgs e)
         {
            base.OnItemImageSizeChanged(e);
            Console.WriteLine("OnItemImageSizeChanged is called");
         }

         protected override void OnItemSelectedBackColorChanged(EventArgs e)
         {
            base.OnItemSelectedBackColorChanged(e);
            Console.WriteLine("OnItemSelectedBackColorChanged is called");
         }

         protected override void OnItemSelectedForeColorChanged(EventArgs e)
         {
            base.OnItemSelectedForeColorChanged(e);
            Console.WriteLine("OnItemSelectedForeColorChanged is called");
         }

         protected override void OnItemSizeChanged(EventArgs e)
         {
            base.OnItemSizeChanged(e);
            Console.WriteLine("OnItemSizeChanged is called");
         }

         protected override void OnItemSpacingSizeChanged(EventArgs e)
         {
            base.OnItemSpacingSizeChanged(e);
            Console.WriteLine("OnItemSpacingSizeChanged is called");
         }

         protected override void OnKeyDown(KeyEventArgs e)
         {
            base.OnKeyDown(e);
            Console.WriteLine("OnKeyDown is called");
         }

         protected override void OnLostFocus(EventArgs e)
         {
            base.OnLostFocus(e);
            Console.WriteLine("OnLostFocus is called");
         }

         protected override void OnMouseDown(MouseEventArgs e)
         {
            base.OnMouseDown(e);
            Console.WriteLine("OnMouseDown is called");
         }

         protected override void OnMouseMove(MouseEventArgs e)
         {
            base.OnMouseMove(e);
            Console.WriteLine("OnMouseMove is called");
         }

         protected override void OnMouseUp(MouseEventArgs e)
         {
            base.OnMouseUp(e);
            Console.WriteLine("OnMouseUp is called");
         }

         protected override void OnPaint(PaintEventArgs e)
         {
            base.OnPaint(e);
            Console.WriteLine("OnPaint is called");
         }

         protected override void OnPaintPropertiesChanged(EventArgs e)
         {
            base.OnPaintPropertiesChanged(e);
            Console.WriteLine("OnPaintPropertiesChanged is called");
         }

         protected override void OnScroll(EventArgs e)
         {
            base.OnScroll(e);
            Console.WriteLine("OnScroll is called");
         }

         protected override void OnScrollStyleChanged(EventArgs e)
         {
            base.OnScrollStyleChanged(e);
            Console.WriteLine("OnScrollStyleChanged is called");
         }

         protected override void OnSelectedIndexChanged(EventArgs e)
         {
            base.OnSelectedIndexChanged(e);
            Console.WriteLine("OnSelectedIndexChanged is called");
         }

         protected override void OnSelectionModeChanged(EventArgs e)
         {
            base.OnSelectionModeChanged(e);
            Console.WriteLine("OnSelectionModeChanged is called");
         }

         protected override void OnSelectUserImageChanged(EventArgs e)
         {
            base.OnSelectUserImageChanged(e);
            Console.WriteLine("OnSelectUserImageChanged is called");
         }

         protected override void OnShowItemTextChanged(EventArgs e)
         {
            base.OnShowItemTextChanged(e);
            Console.WriteLine("OnShowItemTextChanged is called");
         }

         protected override void OnSizeChanged(EventArgs e)
         {
            base.OnSizeChanged(e);
            Console.WriteLine("OnSizeChanged is called");
         }

         protected override void OnSorterChanged(EventArgs e)
         {
            base.OnSorterChanged(e);
            Console.WriteLine("OnSorterChanged is called");
         }

         protected override void OnSortingChanged(EventArgs e)
         {
            base.OnSortingChanged(e);
            Console.WriteLine("OnSortingChanged is called");
         }

         protected override void OnViewStyleChanged(EventArgs e)
         {
            base.OnViewStyleChanged(e);
            Console.WriteLine("OnViewStyleChanged is called");
         }
      }</code>
        <!--RasterImageList.OnBorderStyleChanged-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageList.GetFixedAspectRatioImageRectangle(System.Int32,System.Int32,System.Drawing.Rectangle)">
      <summary>
            Calculates how an image is to be sized and positioned in a rectangle while keeping the aspect ratio fixed.
            </summary>
      <param name="imageWidth">Width of the image in pixels</param>
      <param name="imageHeight">Height of the image in pixels</param>
      <param name="imageRect">The source rectangle</param>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> structure that specifies where the image is to be positioned and sized
            in <i>imageRect</i> while keeping the aspect ratio fixed.</returns>
      <remarks>
            When the <see cref="T:Leadtools.WinForms.RasterImageList" /> class draws an item image, it tries to fit the image into the item image
            rectangle while maintaining the aspect ratio.  The control internally calls this method to calculate these
            values.
            </remarks>
      <example>
            For an example, refer to <see cref="E:Leadtools.WinForms.RasterImageList.DrawItem" />.
            </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageList.GetItemRectangle(Leadtools.WinForms.RasterImageListItem)">
      <summary>
            Retrieves the bounding rectangle for a specific item within the <see cref="T:Leadtools.WinForms.RasterImageList" /> control.
            </summary>
      <param name="item">The item within the <see cref="T:Leadtools.WinForms.RasterImageList" /> whose bounding rectangle you want
            to retrieve.</param>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> that represents the bounding rectangle of the specified
            <see cref="T:Leadtools.WinForms.RasterImageListItem" />.</returns>
      <remarks>
        <p>The bounding rectangle returned by this method represents the entire item.</p>
        <p>The bounding rectangle that this method returns could contain a negative position or could be outside
            the client rectangle of the control.  The exact position of the item depends on the current size of the
            control as well as the current scroll position.</p>
      </remarks>
      <example>
        <code lang="VB">      Public Sub RasterImageList_GetItemRectangle(ByVal imageList As RasterImageList)
         ' Loop through all items
         For Each item As RasterImageListItem In imageList.Items
            ' Get the item bounding rectangle
            Dim rc As Rectangle = imageList.GetItemRectangle(item)
            ' If this rectangle is visible, highlight it
            If imageList.ClientRectangle.IntersectsWith(rc) Then
               ' Convert the rectangle to screen coordinates
               rc = imageList.RectangleToScreen(rc)
               ControlPaint.DrawReversibleFrame(rc, Color.Transparent, FrameStyle.Thick)
            End If
         Next item
      End Sub</code>
        <code lang="CS">      public void RasterImageList_GetItemRectangle(RasterImageList imageList)
      {
         // Loop through all items
         foreach(RasterImageListItem item in imageList.Items)
         {
            // Get the item bounding rectangle
            Rectangle rc = imageList.GetItemRectangle(item);
            // If this rectangle is visible, highlight it
            if(imageList.ClientRectangle.IntersectsWith(rc))
            {
               // Convert the rectangle to screen coordinates
               rc = imageList.RectangleToScreen(rc);
               ControlPaint.DrawReversibleFrame(rc, Color.Transparent, FrameStyle.Thick);
            }
         }
      }</code>
        <!--RasterImageList.GetItemRectangle-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageList.OnSelectedIndexChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageList.SelectedIndexChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
        <p>Raising an event invokes the event handler through a delegate.</p>
        <p>The <b>OnSelectedIndexChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
        <p>
          <b>Notes to Inheritors:</b> When overriding <b>OnSelectedIndexChanged</b> in a derived class, be sure to call
            the base class's <b>OnSelectedIndexChanged</b> method so that registered delegates receive the event.</p>
      </remarks>
      <example>
        <code lang="VB">      Public Class MyRasterImageList
         Inherits RasterImageList
         '.
         '.
         '.
         Protected Overrides Sub OnAutoDeselectItemsChanged(ByVal e As EventArgs)
            MyBase.OnAutoDeselectItemsChanged(e)
            Console.WriteLine("OnAutoDeselectItemsChanged is called")
         End Sub

         Protected Overrides Sub OnAutoDisposeImagesChanged(ByVal e As EventArgs)
            MyBase.OnAutoDisposeImagesChanged(e)
            Console.WriteLine("OnAutoDisposeImagesChanged is called")
         End Sub

         Protected Overrides Sub OnBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnBorderStyleChanged(e)
            Console.WriteLine("OnBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnDoubleBufferChanged(ByVal e As EventArgs)
            MyBase.OnDoubleBufferChanged(e)
            Console.WriteLine("OnDoubleBufferChanged is called")
         End Sub

         Protected Overrides Sub OnDrawItem(ByVal e As RasterImageListDrawItemEventArgs)
            MyBase.OnDrawItem(e)
            Console.WriteLine("OnDrawItem is called")
         End Sub

         Protected Overrides Sub OnEnableKeyboardChanged(ByVal e As EventArgs)
            MyBase.OnEnableKeyboardChanged(e)
            Console.WriteLine("OnEnableKeyboardChanged is called")
         End Sub

         Protected Overrides Sub OnEnableRubberBandSelectionChanged(ByVal e As EventArgs)
            MyBase.OnEnableRubberBandSelectionChanged(e)
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called")
         End Sub

         Protected Overrides Sub OnItemBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemBackColorChanged(e)
            Console.WriteLine("OnItemBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemBorderStyleChanged(e)
            Console.WriteLine("OnItemBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemForeColorChanged(e)
            Console.WriteLine("OnItemForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemImageBorderStyleChanged(e)
            Console.WriteLine("OnItemImageBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemImageSizeChanged(e)
            Console.WriteLine("OnItemImageSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedBackColorChanged(e)
            Console.WriteLine("OnItemSelectedBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedForeColorChanged(e)
            Console.WriteLine("OnItemSelectedForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSizeChanged(e)
            Console.WriteLine("OnItemSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSpacingSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSpacingSizeChanged(e)
            Console.WriteLine("OnItemSpacingSizeChanged is called")
         End Sub

         Protected Overrides Sub OnKeyDown(ByVal e As KeyEventArgs)
            MyBase.OnKeyDown(e)
            Console.WriteLine("OnKeyDown is called")
         End Sub

         Protected Overrides Sub OnLostFocus(ByVal e As EventArgs)
            MyBase.OnLostFocus(e)
            Console.WriteLine("OnLostFocus is called")
         End Sub

         Protected Overrides Sub OnMouseDown(ByVal e As MouseEventArgs)
            MyBase.OnMouseDown(e)
            Console.WriteLine("OnMouseDown is called")
         End Sub

         Protected Overrides Sub OnMouseMove(ByVal e As MouseEventArgs)
            MyBase.OnMouseMove(e)
            Console.WriteLine("OnMouseMove is called")
         End Sub

         Protected Overrides Sub OnMouseUp(ByVal e As MouseEventArgs)
            MyBase.OnMouseUp(e)
            Console.WriteLine("OnMouseUp is called")
         End Sub

         Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            MyBase.OnPaint(e)
            Console.WriteLine("OnPaint is called")
         End Sub

         Protected Overrides Sub OnPaintPropertiesChanged(ByVal e As EventArgs)
            MyBase.OnPaintPropertiesChanged(e)
            Console.WriteLine("OnPaintPropertiesChanged is called")
         End Sub

         Protected Overrides Sub OnScroll(ByVal e As EventArgs)
            MyBase.OnScroll(e)
            Console.WriteLine("OnScroll is called")
         End Sub

         Protected Overrides Sub OnScrollStyleChanged(ByVal e As EventArgs)
            MyBase.OnScrollStyleChanged(e)
            Console.WriteLine("OnScrollStyleChanged is called")
         End Sub

         Protected Overrides Sub OnSelectedIndexChanged(ByVal e As EventArgs)
            MyBase.OnSelectedIndexChanged(e)
            Console.WriteLine("OnSelectedIndexChanged is called")
         End Sub

         Protected Overrides Sub OnSelectionModeChanged(ByVal e As EventArgs)
            MyBase.OnSelectionModeChanged(e)
            Console.WriteLine("OnSelectionModeChanged is called")
         End Sub

         Protected Overrides Sub OnSelectUserImageChanged(ByVal e As EventArgs)
            MyBase.OnSelectUserImageChanged(e)
            Console.WriteLine("OnSelectUserImageChanged is called")
         End Sub

         Protected Overrides Sub OnShowItemTextChanged(ByVal e As EventArgs)
            MyBase.OnShowItemTextChanged(e)
            Console.WriteLine("OnShowItemTextChanged is called")
         End Sub

         Protected Overrides Sub OnSizeChanged(ByVal e As EventArgs)
            MyBase.OnSizeChanged(e)
            Console.WriteLine("OnSizeChanged is called")
         End Sub

         Protected Overrides Sub OnSorterChanged(ByVal e As EventArgs)
            MyBase.OnSorterChanged(e)
            Console.WriteLine("OnSorterChanged is called")
         End Sub

         Protected Overrides Sub OnSortingChanged(ByVal e As EventArgs)
            MyBase.OnSortingChanged(e)
            Console.WriteLine("OnSortingChanged is called")
         End Sub

         Protected Overrides Sub OnViewStyleChanged(ByVal e As EventArgs)
            MyBase.OnViewStyleChanged(e)
            Console.WriteLine("OnViewStyleChanged is called")
         End Sub
      End Class</code>
        <code lang="CS">      public class MyRasterImageList : RasterImageList
      {
         //.
         //.
         //.
         protected override void OnAutoDeselectItemsChanged(EventArgs e)
         {
            base.OnAutoDeselectItemsChanged(e);
            Console.WriteLine("OnAutoDeselectItemsChanged is called");
         }

         protected override void OnAutoDisposeImagesChanged(EventArgs e)
         {
            base.OnAutoDisposeImagesChanged(e);
            Console.WriteLine("OnAutoDisposeImagesChanged is called");
         }

         protected override void OnBorderStyleChanged(EventArgs e)
         {
            base.OnBorderStyleChanged(e);
            Console.WriteLine("OnBorderStyleChanged is called");
         }

         protected override void OnDoubleBufferChanged(EventArgs e)
         {
            base.OnDoubleBufferChanged(e);
            Console.WriteLine("OnDoubleBufferChanged is called");
         }

         protected override void OnDrawItem(RasterImageListDrawItemEventArgs e)
         {
            base.OnDrawItem(e);
            Console.WriteLine("OnDrawItem is called");
         }

         protected override void OnEnableKeyboardChanged(EventArgs e)
         {
            base.OnEnableKeyboardChanged(e);
            Console.WriteLine("OnEnableKeyboardChanged is called");
         }

         protected override void OnEnableRubberBandSelectionChanged(EventArgs e)
         {
            base.OnEnableRubberBandSelectionChanged(e);
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called");
         }

         protected override void OnItemBackColorChanged(EventArgs e)
         {
            base.OnItemBackColorChanged(e);
            Console.WriteLine("OnItemBackColorChanged is called");
         }

         protected override void OnItemBorderStyleChanged(EventArgs e)
         {
            base.OnItemBorderStyleChanged(e);
            Console.WriteLine("OnItemBorderStyleChanged is called");
         }

         protected override void OnItemForeColorChanged(EventArgs e)
         {
            base.OnItemForeColorChanged(e);
            Console.WriteLine("OnItemForeColorChanged is called");
         }

         protected override void OnItemImageBorderStyleChanged(EventArgs e)
         {
            base.OnItemImageBorderStyleChanged(e);
            Console.WriteLine("OnItemImageBorderStyleChanged is called");
         }

         protected override void OnItemImageSizeChanged(EventArgs e)
         {
            base.OnItemImageSizeChanged(e);
            Console.WriteLine("OnItemImageSizeChanged is called");
         }

         protected override void OnItemSelectedBackColorChanged(EventArgs e)
         {
            base.OnItemSelectedBackColorChanged(e);
            Console.WriteLine("OnItemSelectedBackColorChanged is called");
         }

         protected override void OnItemSelectedForeColorChanged(EventArgs e)
         {
            base.OnItemSelectedForeColorChanged(e);
            Console.WriteLine("OnItemSelectedForeColorChanged is called");
         }

         protected override void OnItemSizeChanged(EventArgs e)
         {
            base.OnItemSizeChanged(e);
            Console.WriteLine("OnItemSizeChanged is called");
         }

         protected override void OnItemSpacingSizeChanged(EventArgs e)
         {
            base.OnItemSpacingSizeChanged(e);
            Console.WriteLine("OnItemSpacingSizeChanged is called");
         }

         protected override void OnKeyDown(KeyEventArgs e)
         {
            base.OnKeyDown(e);
            Console.WriteLine("OnKeyDown is called");
         }

         protected override void OnLostFocus(EventArgs e)
         {
            base.OnLostFocus(e);
            Console.WriteLine("OnLostFocus is called");
         }

         protected override void OnMouseDown(MouseEventArgs e)
         {
            base.OnMouseDown(e);
            Console.WriteLine("OnMouseDown is called");
         }

         protected override void OnMouseMove(MouseEventArgs e)
         {
            base.OnMouseMove(e);
            Console.WriteLine("OnMouseMove is called");
         }

         protected override void OnMouseUp(MouseEventArgs e)
         {
            base.OnMouseUp(e);
            Console.WriteLine("OnMouseUp is called");
         }

         protected override void OnPaint(PaintEventArgs e)
         {
            base.OnPaint(e);
            Console.WriteLine("OnPaint is called");
         }

         protected override void OnPaintPropertiesChanged(EventArgs e)
         {
            base.OnPaintPropertiesChanged(e);
            Console.WriteLine("OnPaintPropertiesChanged is called");
         }

         protected override void OnScroll(EventArgs e)
         {
            base.OnScroll(e);
            Console.WriteLine("OnScroll is called");
         }

         protected override void OnScrollStyleChanged(EventArgs e)
         {
            base.OnScrollStyleChanged(e);
            Console.WriteLine("OnScrollStyleChanged is called");
         }

         protected override void OnSelectedIndexChanged(EventArgs e)
         {
            base.OnSelectedIndexChanged(e);
            Console.WriteLine("OnSelectedIndexChanged is called");
         }

         protected override void OnSelectionModeChanged(EventArgs e)
         {
            base.OnSelectionModeChanged(e);
            Console.WriteLine("OnSelectionModeChanged is called");
         }

         protected override void OnSelectUserImageChanged(EventArgs e)
         {
            base.OnSelectUserImageChanged(e);
            Console.WriteLine("OnSelectUserImageChanged is called");
         }

         protected override void OnShowItemTextChanged(EventArgs e)
         {
            base.OnShowItemTextChanged(e);
            Console.WriteLine("OnShowItemTextChanged is called");
         }

         protected override void OnSizeChanged(EventArgs e)
         {
            base.OnSizeChanged(e);
            Console.WriteLine("OnSizeChanged is called");
         }

         protected override void OnSorterChanged(EventArgs e)
         {
            base.OnSorterChanged(e);
            Console.WriteLine("OnSorterChanged is called");
         }

         protected override void OnSortingChanged(EventArgs e)
         {
            base.OnSortingChanged(e);
            Console.WriteLine("OnSortingChanged is called");
         }

         protected override void OnViewStyleChanged(EventArgs e)
         {
            base.OnViewStyleChanged(e);
            Console.WriteLine("OnViewStyleChanged is called");
         }
      }</code>
        <!--RasterImageList.OnBorderStyleChanged-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageList.HitTest(System.Int32,System.Int32)">
      <summary>
            Queries the specified location to determine if the point is over a <see cref="T:Leadtools.WinForms.RasterImageListItem" />.
            </summary>
      <param name="x">The horizontal position of the coordinate in client coordinates.</param>
      <param name="y">The vertical position of the coordinate in client coordinates.</param>
      <returns>An <see cref="T:Leadtools.WinForms.RasterImageListItem" /> object under the given location, or null
            (Nothing in Visual Basic) if no <see cref="T:Leadtools.WinForms.RasterImageListItem" /> is under the location.</returns>
      <noremarks />
      <example>
        <code lang="VB">      Private Class MyForm4 : Inherits Form
         Private imageList As RasterImageList
         Private codecs As RasterCodecs
         Public Sub New(ByVal title As String)
            Text = title

            ' Set the size of the form
            Size = New Size(400, 200)

            ' Create a new RasterImageList control
            imageList = New RasterImageList()
            imageList.Dock = DockStyle.Fill
            imageList.SelectionMode = RasterImageListSelectionMode.Single
            imageList.Size = Size
            Controls.Add(imageList)
            imageList.BringToFront()

            codecs = New RasterCodecs()

            ' Create three items
            Dim imagesPath As String = LEAD_VARS.ImagesDir

            For i As Integer = 0 To 2
               ' Load the image
               Dim index As Integer = i + 1
               Dim imageFileName As String = Path.Combine(imagesPath, "ImageProcessingDemo\Image" &amp; index.ToString() &amp; ".cmp")
               Dim image As RasterImage = codecs.Load(imageFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1)
               Dim item As RasterImageListItem = New RasterImageListItem(image, 1, "Item" &amp; index.ToString())

               ' Select the first item
               If i = 0 Then
                  item.Selected = True
               End If

               ' Add the item to the image list
               imageList.Items.Add(item)
            Next i


            ' Add a handler to the MouseDown event
            AddHandler imageList.MouseDown, AddressOf rasterImageList_MouseDown

            ' Add the RasterImageList to the control collection.
            Controls.Add(imageList)
         End Sub

         Private Sub rasterImageList_MouseDown(ByVal sender As Object, ByVal e As MouseEventArgs)
            ' Check for right button clicks
            If e.Button = Windows.Forms.MouseButtons.Right Then
               ' Check if any item is under the cursor poisition
               Dim imageList As RasterImageList = CType(IIf(TypeOf sender Is RasterImageList, sender, Nothing), RasterImageList)
               Dim item As RasterImageListItem = imageList.HitTest(e.X, e.Y)
               If Not item Is Nothing Then
                  ' Yes, show the item text in a message box
                  MessageBox.Show(Me, item.Text)
               End If
            End If
         End Sub
      End Class

      Public Sub RasterImageList_HitTest(ByVal title As String)
         Dim form As MyForm4 = New MyForm4(title)
         form.ShowDialog()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MyForm4 : Form
      {
         RasterImageList imageList;
         RasterCodecs codecs;
         public MyForm4(string title)
         {
            Text = title;

            // Set the size of the form
            Size = new Size(400, 200);

            // Create a new RasterImageList control
            imageList = new RasterImageList();
            imageList.Dock = DockStyle.Fill;
            imageList.SelectionMode = RasterImageListSelectionMode.Single;
            imageList.Size = Size;
            Controls.Add(imageList);
            imageList.BringToFront();

            codecs = new RasterCodecs();

            // Create three items
            string imagesPath = LEAD_VARS.ImagesDir;

            for(int i = 0; i &lt; 3; i++)
            {
               // Load the image
               int index = i + 1;
               string imageFileName = Path.Combine(imagesPath, @"ImageProcessingDemo\Image" + index.ToString() + ".cmp");
               RasterImage image = codecs.Load(imageFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1);
               RasterImageListItem item = new RasterImageListItem(image, 1, "Item" + index.ToString());

               // Select the first item
               if(i == 0)
                  item.Selected = true;

               // Add the item to the image list
               imageList.Items.Add(item);
            }


            // Add a handler to the MouseDown event
            imageList.MouseDown += new MouseEventHandler(rasterImageList_MouseDown);

            // Add the RasterImageList to the control collection.
            Controls.Add(imageList);
         }

         private void rasterImageList_MouseDown(object sender, MouseEventArgs e)
         {
            // Check for right button clicks
            if(e.Button == MouseButtons.Right)
            {
               // Check if any item is under the cursor poisition
               RasterImageList imageList = sender as RasterImageList;
               RasterImageListItem item = imageList.HitTest(e.X, e.Y);
               if(item != null)
               {
                  // Yes, show the item text in a message box
                  MessageBox.Show(this, item.Text);
               }
            }
         }
      }

      public void RasterImageList_HitTest(string title)
      {
         MyForm4 form = new MyForm4(title);
         form.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--RasterImageList.HitTest-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageList.SelectAll(System.Boolean)">
      <summary>
            Selects or un-selects all the items in this <see cref="T:Leadtools.WinForms.RasterImageList" /> control.
            </summary>
      <param name="select">
        <b>true</b> to select all items, <b>false</b> to un-select all items.</param>
      <remarks>
            The <see cref="E:Leadtools.WinForms.RasterImageList.SelectedIndexChanged" /> event will occur if the value of the 
            <see cref="P:Leadtools.WinForms.RasterImageListItem.Selected">RasterImageListItem.Selected</see> property of any item inside the 
            control changes as a result of calling this method.
            </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageList.SelectionMode" />.
            </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageList.OnItemSizeChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageList.ItemSizeChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
        <p>Raising an event invokes the event handler through a delegate.</p>
        <p>The <b>OnItemSizeChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
        <p>
          <b>Notes to Inheritors:</b> When overriding <b>OnItemSizeChanged</b> in a derived class, be sure to call
            the base class's <b>OnItemSizeChanged</b> method so that registered delegates receive the event.</p>
      </remarks>
      <example>
        <code lang="VB">      Public Class MyRasterImageList
         Inherits RasterImageList
         '.
         '.
         '.
         Protected Overrides Sub OnAutoDeselectItemsChanged(ByVal e As EventArgs)
            MyBase.OnAutoDeselectItemsChanged(e)
            Console.WriteLine("OnAutoDeselectItemsChanged is called")
         End Sub

         Protected Overrides Sub OnAutoDisposeImagesChanged(ByVal e As EventArgs)
            MyBase.OnAutoDisposeImagesChanged(e)
            Console.WriteLine("OnAutoDisposeImagesChanged is called")
         End Sub

         Protected Overrides Sub OnBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnBorderStyleChanged(e)
            Console.WriteLine("OnBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnDoubleBufferChanged(ByVal e As EventArgs)
            MyBase.OnDoubleBufferChanged(e)
            Console.WriteLine("OnDoubleBufferChanged is called")
         End Sub

         Protected Overrides Sub OnDrawItem(ByVal e As RasterImageListDrawItemEventArgs)
            MyBase.OnDrawItem(e)
            Console.WriteLine("OnDrawItem is called")
         End Sub

         Protected Overrides Sub OnEnableKeyboardChanged(ByVal e As EventArgs)
            MyBase.OnEnableKeyboardChanged(e)
            Console.WriteLine("OnEnableKeyboardChanged is called")
         End Sub

         Protected Overrides Sub OnEnableRubberBandSelectionChanged(ByVal e As EventArgs)
            MyBase.OnEnableRubberBandSelectionChanged(e)
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called")
         End Sub

         Protected Overrides Sub OnItemBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemBackColorChanged(e)
            Console.WriteLine("OnItemBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemBorderStyleChanged(e)
            Console.WriteLine("OnItemBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemForeColorChanged(e)
            Console.WriteLine("OnItemForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemImageBorderStyleChanged(e)
            Console.WriteLine("OnItemImageBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemImageSizeChanged(e)
            Console.WriteLine("OnItemImageSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedBackColorChanged(e)
            Console.WriteLine("OnItemSelectedBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedForeColorChanged(e)
            Console.WriteLine("OnItemSelectedForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSizeChanged(e)
            Console.WriteLine("OnItemSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSpacingSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSpacingSizeChanged(e)
            Console.WriteLine("OnItemSpacingSizeChanged is called")
         End Sub

         Protected Overrides Sub OnKeyDown(ByVal e As KeyEventArgs)
            MyBase.OnKeyDown(e)
            Console.WriteLine("OnKeyDown is called")
         End Sub

         Protected Overrides Sub OnLostFocus(ByVal e As EventArgs)
            MyBase.OnLostFocus(e)
            Console.WriteLine("OnLostFocus is called")
         End Sub

         Protected Overrides Sub OnMouseDown(ByVal e As MouseEventArgs)
            MyBase.OnMouseDown(e)
            Console.WriteLine("OnMouseDown is called")
         End Sub

         Protected Overrides Sub OnMouseMove(ByVal e As MouseEventArgs)
            MyBase.OnMouseMove(e)
            Console.WriteLine("OnMouseMove is called")
         End Sub

         Protected Overrides Sub OnMouseUp(ByVal e As MouseEventArgs)
            MyBase.OnMouseUp(e)
            Console.WriteLine("OnMouseUp is called")
         End Sub

         Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            MyBase.OnPaint(e)
            Console.WriteLine("OnPaint is called")
         End Sub

         Protected Overrides Sub OnPaintPropertiesChanged(ByVal e As EventArgs)
            MyBase.OnPaintPropertiesChanged(e)
            Console.WriteLine("OnPaintPropertiesChanged is called")
         End Sub

         Protected Overrides Sub OnScroll(ByVal e As EventArgs)
            MyBase.OnScroll(e)
            Console.WriteLine("OnScroll is called")
         End Sub

         Protected Overrides Sub OnScrollStyleChanged(ByVal e As EventArgs)
            MyBase.OnScrollStyleChanged(e)
            Console.WriteLine("OnScrollStyleChanged is called")
         End Sub

         Protected Overrides Sub OnSelectedIndexChanged(ByVal e As EventArgs)
            MyBase.OnSelectedIndexChanged(e)
            Console.WriteLine("OnSelectedIndexChanged is called")
         End Sub

         Protected Overrides Sub OnSelectionModeChanged(ByVal e As EventArgs)
            MyBase.OnSelectionModeChanged(e)
            Console.WriteLine("OnSelectionModeChanged is called")
         End Sub

         Protected Overrides Sub OnSelectUserImageChanged(ByVal e As EventArgs)
            MyBase.OnSelectUserImageChanged(e)
            Console.WriteLine("OnSelectUserImageChanged is called")
         End Sub

         Protected Overrides Sub OnShowItemTextChanged(ByVal e As EventArgs)
            MyBase.OnShowItemTextChanged(e)
            Console.WriteLine("OnShowItemTextChanged is called")
         End Sub

         Protected Overrides Sub OnSizeChanged(ByVal e As EventArgs)
            MyBase.OnSizeChanged(e)
            Console.WriteLine("OnSizeChanged is called")
         End Sub

         Protected Overrides Sub OnSorterChanged(ByVal e As EventArgs)
            MyBase.OnSorterChanged(e)
            Console.WriteLine("OnSorterChanged is called")
         End Sub

         Protected Overrides Sub OnSortingChanged(ByVal e As EventArgs)
            MyBase.OnSortingChanged(e)
            Console.WriteLine("OnSortingChanged is called")
         End Sub

         Protected Overrides Sub OnViewStyleChanged(ByVal e As EventArgs)
            MyBase.OnViewStyleChanged(e)
            Console.WriteLine("OnViewStyleChanged is called")
         End Sub
      End Class</code>
        <code lang="CS">      public class MyRasterImageList : RasterImageList
      {
         //.
         //.
         //.
         protected override void OnAutoDeselectItemsChanged(EventArgs e)
         {
            base.OnAutoDeselectItemsChanged(e);
            Console.WriteLine("OnAutoDeselectItemsChanged is called");
         }

         protected override void OnAutoDisposeImagesChanged(EventArgs e)
         {
            base.OnAutoDisposeImagesChanged(e);
            Console.WriteLine("OnAutoDisposeImagesChanged is called");
         }

         protected override void OnBorderStyleChanged(EventArgs e)
         {
            base.OnBorderStyleChanged(e);
            Console.WriteLine("OnBorderStyleChanged is called");
         }

         protected override void OnDoubleBufferChanged(EventArgs e)
         {
            base.OnDoubleBufferChanged(e);
            Console.WriteLine("OnDoubleBufferChanged is called");
         }

         protected override void OnDrawItem(RasterImageListDrawItemEventArgs e)
         {
            base.OnDrawItem(e);
            Console.WriteLine("OnDrawItem is called");
         }

         protected override void OnEnableKeyboardChanged(EventArgs e)
         {
            base.OnEnableKeyboardChanged(e);
            Console.WriteLine("OnEnableKeyboardChanged is called");
         }

         protected override void OnEnableRubberBandSelectionChanged(EventArgs e)
         {
            base.OnEnableRubberBandSelectionChanged(e);
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called");
         }

         protected override void OnItemBackColorChanged(EventArgs e)
         {
            base.OnItemBackColorChanged(e);
            Console.WriteLine("OnItemBackColorChanged is called");
         }

         protected override void OnItemBorderStyleChanged(EventArgs e)
         {
            base.OnItemBorderStyleChanged(e);
            Console.WriteLine("OnItemBorderStyleChanged is called");
         }

         protected override void OnItemForeColorChanged(EventArgs e)
         {
            base.OnItemForeColorChanged(e);
            Console.WriteLine("OnItemForeColorChanged is called");
         }

         protected override void OnItemImageBorderStyleChanged(EventArgs e)
         {
            base.OnItemImageBorderStyleChanged(e);
            Console.WriteLine("OnItemImageBorderStyleChanged is called");
         }

         protected override void OnItemImageSizeChanged(EventArgs e)
         {
            base.OnItemImageSizeChanged(e);
            Console.WriteLine("OnItemImageSizeChanged is called");
         }

         protected override void OnItemSelectedBackColorChanged(EventArgs e)
         {
            base.OnItemSelectedBackColorChanged(e);
            Console.WriteLine("OnItemSelectedBackColorChanged is called");
         }

         protected override void OnItemSelectedForeColorChanged(EventArgs e)
         {
            base.OnItemSelectedForeColorChanged(e);
            Console.WriteLine("OnItemSelectedForeColorChanged is called");
         }

         protected override void OnItemSizeChanged(EventArgs e)
         {
            base.OnItemSizeChanged(e);
            Console.WriteLine("OnItemSizeChanged is called");
         }

         protected override void OnItemSpacingSizeChanged(EventArgs e)
         {
            base.OnItemSpacingSizeChanged(e);
            Console.WriteLine("OnItemSpacingSizeChanged is called");
         }

         protected override void OnKeyDown(KeyEventArgs e)
         {
            base.OnKeyDown(e);
            Console.WriteLine("OnKeyDown is called");
         }

         protected override void OnLostFocus(EventArgs e)
         {
            base.OnLostFocus(e);
            Console.WriteLine("OnLostFocus is called");
         }

         protected override void OnMouseDown(MouseEventArgs e)
         {
            base.OnMouseDown(e);
            Console.WriteLine("OnMouseDown is called");
         }

         protected override void OnMouseMove(MouseEventArgs e)
         {
            base.OnMouseMove(e);
            Console.WriteLine("OnMouseMove is called");
         }

         protected override void OnMouseUp(MouseEventArgs e)
         {
            base.OnMouseUp(e);
            Console.WriteLine("OnMouseUp is called");
         }

         protected override void OnPaint(PaintEventArgs e)
         {
            base.OnPaint(e);
            Console.WriteLine("OnPaint is called");
         }

         protected override void OnPaintPropertiesChanged(EventArgs e)
         {
            base.OnPaintPropertiesChanged(e);
            Console.WriteLine("OnPaintPropertiesChanged is called");
         }

         protected override void OnScroll(EventArgs e)
         {
            base.OnScroll(e);
            Console.WriteLine("OnScroll is called");
         }

         protected override void OnScrollStyleChanged(EventArgs e)
         {
            base.OnScrollStyleChanged(e);
            Console.WriteLine("OnScrollStyleChanged is called");
         }

         protected override void OnSelectedIndexChanged(EventArgs e)
         {
            base.OnSelectedIndexChanged(e);
            Console.WriteLine("OnSelectedIndexChanged is called");
         }

         protected override void OnSelectionModeChanged(EventArgs e)
         {
            base.OnSelectionModeChanged(e);
            Console.WriteLine("OnSelectionModeChanged is called");
         }

         protected override void OnSelectUserImageChanged(EventArgs e)
         {
            base.OnSelectUserImageChanged(e);
            Console.WriteLine("OnSelectUserImageChanged is called");
         }

         protected override void OnShowItemTextChanged(EventArgs e)
         {
            base.OnShowItemTextChanged(e);
            Console.WriteLine("OnShowItemTextChanged is called");
         }

         protected override void OnSizeChanged(EventArgs e)
         {
            base.OnSizeChanged(e);
            Console.WriteLine("OnSizeChanged is called");
         }

         protected override void OnSorterChanged(EventArgs e)
         {
            base.OnSorterChanged(e);
            Console.WriteLine("OnSorterChanged is called");
         }

         protected override void OnSortingChanged(EventArgs e)
         {
            base.OnSortingChanged(e);
            Console.WriteLine("OnSortingChanged is called");
         }

         protected override void OnViewStyleChanged(EventArgs e)
         {
            base.OnViewStyleChanged(e);
            Console.WriteLine("OnViewStyleChanged is called");
         }
      }</code>
        <!--RasterImageList.OnBorderStyleChanged-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageList.OnItemImageSizeChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageList.ItemImageSizeChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
        <p>Raising an event invokes the event handler through a delegate.</p>
        <p>The <b>OnItemImageSizeChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
        <p>
          <b>Notes to Inheritors:</b> When overriding <b>OnItemImageSizeChanged</b> in a derived class, be sure to call
            the base class's <b>OnItemImageSizeChanged</b> method so that registered delegates receive the event.</p>
      </remarks>
      <example>
        <code lang="VB">      Public Class MyRasterImageList
         Inherits RasterImageList
         '.
         '.
         '.
         Protected Overrides Sub OnAutoDeselectItemsChanged(ByVal e As EventArgs)
            MyBase.OnAutoDeselectItemsChanged(e)
            Console.WriteLine("OnAutoDeselectItemsChanged is called")
         End Sub

         Protected Overrides Sub OnAutoDisposeImagesChanged(ByVal e As EventArgs)
            MyBase.OnAutoDisposeImagesChanged(e)
            Console.WriteLine("OnAutoDisposeImagesChanged is called")
         End Sub

         Protected Overrides Sub OnBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnBorderStyleChanged(e)
            Console.WriteLine("OnBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnDoubleBufferChanged(ByVal e As EventArgs)
            MyBase.OnDoubleBufferChanged(e)
            Console.WriteLine("OnDoubleBufferChanged is called")
         End Sub

         Protected Overrides Sub OnDrawItem(ByVal e As RasterImageListDrawItemEventArgs)
            MyBase.OnDrawItem(e)
            Console.WriteLine("OnDrawItem is called")
         End Sub

         Protected Overrides Sub OnEnableKeyboardChanged(ByVal e As EventArgs)
            MyBase.OnEnableKeyboardChanged(e)
            Console.WriteLine("OnEnableKeyboardChanged is called")
         End Sub

         Protected Overrides Sub OnEnableRubberBandSelectionChanged(ByVal e As EventArgs)
            MyBase.OnEnableRubberBandSelectionChanged(e)
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called")
         End Sub

         Protected Overrides Sub OnItemBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemBackColorChanged(e)
            Console.WriteLine("OnItemBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemBorderStyleChanged(e)
            Console.WriteLine("OnItemBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemForeColorChanged(e)
            Console.WriteLine("OnItemForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemImageBorderStyleChanged(e)
            Console.WriteLine("OnItemImageBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemImageSizeChanged(e)
            Console.WriteLine("OnItemImageSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedBackColorChanged(e)
            Console.WriteLine("OnItemSelectedBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedForeColorChanged(e)
            Console.WriteLine("OnItemSelectedForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSizeChanged(e)
            Console.WriteLine("OnItemSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSpacingSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSpacingSizeChanged(e)
            Console.WriteLine("OnItemSpacingSizeChanged is called")
         End Sub

         Protected Overrides Sub OnKeyDown(ByVal e As KeyEventArgs)
            MyBase.OnKeyDown(e)
            Console.WriteLine("OnKeyDown is called")
         End Sub

         Protected Overrides Sub OnLostFocus(ByVal e As EventArgs)
            MyBase.OnLostFocus(e)
            Console.WriteLine("OnLostFocus is called")
         End Sub

         Protected Overrides Sub OnMouseDown(ByVal e As MouseEventArgs)
            MyBase.OnMouseDown(e)
            Console.WriteLine("OnMouseDown is called")
         End Sub

         Protected Overrides Sub OnMouseMove(ByVal e As MouseEventArgs)
            MyBase.OnMouseMove(e)
            Console.WriteLine("OnMouseMove is called")
         End Sub

         Protected Overrides Sub OnMouseUp(ByVal e As MouseEventArgs)
            MyBase.OnMouseUp(e)
            Console.WriteLine("OnMouseUp is called")
         End Sub

         Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            MyBase.OnPaint(e)
            Console.WriteLine("OnPaint is called")
         End Sub

         Protected Overrides Sub OnPaintPropertiesChanged(ByVal e As EventArgs)
            MyBase.OnPaintPropertiesChanged(e)
            Console.WriteLine("OnPaintPropertiesChanged is called")
         End Sub

         Protected Overrides Sub OnScroll(ByVal e As EventArgs)
            MyBase.OnScroll(e)
            Console.WriteLine("OnScroll is called")
         End Sub

         Protected Overrides Sub OnScrollStyleChanged(ByVal e As EventArgs)
            MyBase.OnScrollStyleChanged(e)
            Console.WriteLine("OnScrollStyleChanged is called")
         End Sub

         Protected Overrides Sub OnSelectedIndexChanged(ByVal e As EventArgs)
            MyBase.OnSelectedIndexChanged(e)
            Console.WriteLine("OnSelectedIndexChanged is called")
         End Sub

         Protected Overrides Sub OnSelectionModeChanged(ByVal e As EventArgs)
            MyBase.OnSelectionModeChanged(e)
            Console.WriteLine("OnSelectionModeChanged is called")
         End Sub

         Protected Overrides Sub OnSelectUserImageChanged(ByVal e As EventArgs)
            MyBase.OnSelectUserImageChanged(e)
            Console.WriteLine("OnSelectUserImageChanged is called")
         End Sub

         Protected Overrides Sub OnShowItemTextChanged(ByVal e As EventArgs)
            MyBase.OnShowItemTextChanged(e)
            Console.WriteLine("OnShowItemTextChanged is called")
         End Sub

         Protected Overrides Sub OnSizeChanged(ByVal e As EventArgs)
            MyBase.OnSizeChanged(e)
            Console.WriteLine("OnSizeChanged is called")
         End Sub

         Protected Overrides Sub OnSorterChanged(ByVal e As EventArgs)
            MyBase.OnSorterChanged(e)
            Console.WriteLine("OnSorterChanged is called")
         End Sub

         Protected Overrides Sub OnSortingChanged(ByVal e As EventArgs)
            MyBase.OnSortingChanged(e)
            Console.WriteLine("OnSortingChanged is called")
         End Sub

         Protected Overrides Sub OnViewStyleChanged(ByVal e As EventArgs)
            MyBase.OnViewStyleChanged(e)
            Console.WriteLine("OnViewStyleChanged is called")
         End Sub
      End Class</code>
        <code lang="CS">      public class MyRasterImageList : RasterImageList
      {
         //.
         //.
         //.
         protected override void OnAutoDeselectItemsChanged(EventArgs e)
         {
            base.OnAutoDeselectItemsChanged(e);
            Console.WriteLine("OnAutoDeselectItemsChanged is called");
         }

         protected override void OnAutoDisposeImagesChanged(EventArgs e)
         {
            base.OnAutoDisposeImagesChanged(e);
            Console.WriteLine("OnAutoDisposeImagesChanged is called");
         }

         protected override void OnBorderStyleChanged(EventArgs e)
         {
            base.OnBorderStyleChanged(e);
            Console.WriteLine("OnBorderStyleChanged is called");
         }

         protected override void OnDoubleBufferChanged(EventArgs e)
         {
            base.OnDoubleBufferChanged(e);
            Console.WriteLine("OnDoubleBufferChanged is called");
         }

         protected override void OnDrawItem(RasterImageListDrawItemEventArgs e)
         {
            base.OnDrawItem(e);
            Console.WriteLine("OnDrawItem is called");
         }

         protected override void OnEnableKeyboardChanged(EventArgs e)
         {
            base.OnEnableKeyboardChanged(e);
            Console.WriteLine("OnEnableKeyboardChanged is called");
         }

         protected override void OnEnableRubberBandSelectionChanged(EventArgs e)
         {
            base.OnEnableRubberBandSelectionChanged(e);
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called");
         }

         protected override void OnItemBackColorChanged(EventArgs e)
         {
            base.OnItemBackColorChanged(e);
            Console.WriteLine("OnItemBackColorChanged is called");
         }

         protected override void OnItemBorderStyleChanged(EventArgs e)
         {
            base.OnItemBorderStyleChanged(e);
            Console.WriteLine("OnItemBorderStyleChanged is called");
         }

         protected override void OnItemForeColorChanged(EventArgs e)
         {
            base.OnItemForeColorChanged(e);
            Console.WriteLine("OnItemForeColorChanged is called");
         }

         protected override void OnItemImageBorderStyleChanged(EventArgs e)
         {
            base.OnItemImageBorderStyleChanged(e);
            Console.WriteLine("OnItemImageBorderStyleChanged is called");
         }

         protected override void OnItemImageSizeChanged(EventArgs e)
         {
            base.OnItemImageSizeChanged(e);
            Console.WriteLine("OnItemImageSizeChanged is called");
         }

         protected override void OnItemSelectedBackColorChanged(EventArgs e)
         {
            base.OnItemSelectedBackColorChanged(e);
            Console.WriteLine("OnItemSelectedBackColorChanged is called");
         }

         protected override void OnItemSelectedForeColorChanged(EventArgs e)
         {
            base.OnItemSelectedForeColorChanged(e);
            Console.WriteLine("OnItemSelectedForeColorChanged is called");
         }

         protected override void OnItemSizeChanged(EventArgs e)
         {
            base.OnItemSizeChanged(e);
            Console.WriteLine("OnItemSizeChanged is called");
         }

         protected override void OnItemSpacingSizeChanged(EventArgs e)
         {
            base.OnItemSpacingSizeChanged(e);
            Console.WriteLine("OnItemSpacingSizeChanged is called");
         }

         protected override void OnKeyDown(KeyEventArgs e)
         {
            base.OnKeyDown(e);
            Console.WriteLine("OnKeyDown is called");
         }

         protected override void OnLostFocus(EventArgs e)
         {
            base.OnLostFocus(e);
            Console.WriteLine("OnLostFocus is called");
         }

         protected override void OnMouseDown(MouseEventArgs e)
         {
            base.OnMouseDown(e);
            Console.WriteLine("OnMouseDown is called");
         }

         protected override void OnMouseMove(MouseEventArgs e)
         {
            base.OnMouseMove(e);
            Console.WriteLine("OnMouseMove is called");
         }

         protected override void OnMouseUp(MouseEventArgs e)
         {
            base.OnMouseUp(e);
            Console.WriteLine("OnMouseUp is called");
         }

         protected override void OnPaint(PaintEventArgs e)
         {
            base.OnPaint(e);
            Console.WriteLine("OnPaint is called");
         }

         protected override void OnPaintPropertiesChanged(EventArgs e)
         {
            base.OnPaintPropertiesChanged(e);
            Console.WriteLine("OnPaintPropertiesChanged is called");
         }

         protected override void OnScroll(EventArgs e)
         {
            base.OnScroll(e);
            Console.WriteLine("OnScroll is called");
         }

         protected override void OnScrollStyleChanged(EventArgs e)
         {
            base.OnScrollStyleChanged(e);
            Console.WriteLine("OnScrollStyleChanged is called");
         }

         protected override void OnSelectedIndexChanged(EventArgs e)
         {
            base.OnSelectedIndexChanged(e);
            Console.WriteLine("OnSelectedIndexChanged is called");
         }

         protected override void OnSelectionModeChanged(EventArgs e)
         {
            base.OnSelectionModeChanged(e);
            Console.WriteLine("OnSelectionModeChanged is called");
         }

         protected override void OnSelectUserImageChanged(EventArgs e)
         {
            base.OnSelectUserImageChanged(e);
            Console.WriteLine("OnSelectUserImageChanged is called");
         }

         protected override void OnShowItemTextChanged(EventArgs e)
         {
            base.OnShowItemTextChanged(e);
            Console.WriteLine("OnShowItemTextChanged is called");
         }

         protected override void OnSizeChanged(EventArgs e)
         {
            base.OnSizeChanged(e);
            Console.WriteLine("OnSizeChanged is called");
         }

         protected override void OnSorterChanged(EventArgs e)
         {
            base.OnSorterChanged(e);
            Console.WriteLine("OnSorterChanged is called");
         }

         protected override void OnSortingChanged(EventArgs e)
         {
            base.OnSortingChanged(e);
            Console.WriteLine("OnSortingChanged is called");
         }

         protected override void OnViewStyleChanged(EventArgs e)
         {
            base.OnViewStyleChanged(e);
            Console.WriteLine("OnViewStyleChanged is called");
         }
      }</code>
        <!--RasterImageList.OnBorderStyleChanged-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageList.OnItemImageBorderStyleChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageList.ItemImageBorderStyleChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
        <p>Raising an event invokes the event handler through a delegate.</p>
        <p>The <b>OnItemImageBorderStyleChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
        <p>
          <b>Notes to Inheritors:</b> When overriding <b>OnItemImageBorderStyleChanged</b> in a derived class, be sure to call
            the base class's <b>OnItemImageBorderStyleChanged</b> method so that registered delegates receive the event.</p>
      </remarks>
      <example>
        <code lang="VB">      Public Class MyRasterImageList
         Inherits RasterImageList
         '.
         '.
         '.
         Protected Overrides Sub OnAutoDeselectItemsChanged(ByVal e As EventArgs)
            MyBase.OnAutoDeselectItemsChanged(e)
            Console.WriteLine("OnAutoDeselectItemsChanged is called")
         End Sub

         Protected Overrides Sub OnAutoDisposeImagesChanged(ByVal e As EventArgs)
            MyBase.OnAutoDisposeImagesChanged(e)
            Console.WriteLine("OnAutoDisposeImagesChanged is called")
         End Sub

         Protected Overrides Sub OnBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnBorderStyleChanged(e)
            Console.WriteLine("OnBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnDoubleBufferChanged(ByVal e As EventArgs)
            MyBase.OnDoubleBufferChanged(e)
            Console.WriteLine("OnDoubleBufferChanged is called")
         End Sub

         Protected Overrides Sub OnDrawItem(ByVal e As RasterImageListDrawItemEventArgs)
            MyBase.OnDrawItem(e)
            Console.WriteLine("OnDrawItem is called")
         End Sub

         Protected Overrides Sub OnEnableKeyboardChanged(ByVal e As EventArgs)
            MyBase.OnEnableKeyboardChanged(e)
            Console.WriteLine("OnEnableKeyboardChanged is called")
         End Sub

         Protected Overrides Sub OnEnableRubberBandSelectionChanged(ByVal e As EventArgs)
            MyBase.OnEnableRubberBandSelectionChanged(e)
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called")
         End Sub

         Protected Overrides Sub OnItemBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemBackColorChanged(e)
            Console.WriteLine("OnItemBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemBorderStyleChanged(e)
            Console.WriteLine("OnItemBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemForeColorChanged(e)
            Console.WriteLine("OnItemForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemImageBorderStyleChanged(e)
            Console.WriteLine("OnItemImageBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemImageSizeChanged(e)
            Console.WriteLine("OnItemImageSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedBackColorChanged(e)
            Console.WriteLine("OnItemSelectedBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedForeColorChanged(e)
            Console.WriteLine("OnItemSelectedForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSizeChanged(e)
            Console.WriteLine("OnItemSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSpacingSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSpacingSizeChanged(e)
            Console.WriteLine("OnItemSpacingSizeChanged is called")
         End Sub

         Protected Overrides Sub OnKeyDown(ByVal e As KeyEventArgs)
            MyBase.OnKeyDown(e)
            Console.WriteLine("OnKeyDown is called")
         End Sub

         Protected Overrides Sub OnLostFocus(ByVal e As EventArgs)
            MyBase.OnLostFocus(e)
            Console.WriteLine("OnLostFocus is called")
         End Sub

         Protected Overrides Sub OnMouseDown(ByVal e As MouseEventArgs)
            MyBase.OnMouseDown(e)
            Console.WriteLine("OnMouseDown is called")
         End Sub

         Protected Overrides Sub OnMouseMove(ByVal e As MouseEventArgs)
            MyBase.OnMouseMove(e)
            Console.WriteLine("OnMouseMove is called")
         End Sub

         Protected Overrides Sub OnMouseUp(ByVal e As MouseEventArgs)
            MyBase.OnMouseUp(e)
            Console.WriteLine("OnMouseUp is called")
         End Sub

         Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            MyBase.OnPaint(e)
            Console.WriteLine("OnPaint is called")
         End Sub

         Protected Overrides Sub OnPaintPropertiesChanged(ByVal e As EventArgs)
            MyBase.OnPaintPropertiesChanged(e)
            Console.WriteLine("OnPaintPropertiesChanged is called")
         End Sub

         Protected Overrides Sub OnScroll(ByVal e As EventArgs)
            MyBase.OnScroll(e)
            Console.WriteLine("OnScroll is called")
         End Sub

         Protected Overrides Sub OnScrollStyleChanged(ByVal e As EventArgs)
            MyBase.OnScrollStyleChanged(e)
            Console.WriteLine("OnScrollStyleChanged is called")
         End Sub

         Protected Overrides Sub OnSelectedIndexChanged(ByVal e As EventArgs)
            MyBase.OnSelectedIndexChanged(e)
            Console.WriteLine("OnSelectedIndexChanged is called")
         End Sub

         Protected Overrides Sub OnSelectionModeChanged(ByVal e As EventArgs)
            MyBase.OnSelectionModeChanged(e)
            Console.WriteLine("OnSelectionModeChanged is called")
         End Sub

         Protected Overrides Sub OnSelectUserImageChanged(ByVal e As EventArgs)
            MyBase.OnSelectUserImageChanged(e)
            Console.WriteLine("OnSelectUserImageChanged is called")
         End Sub

         Protected Overrides Sub OnShowItemTextChanged(ByVal e As EventArgs)
            MyBase.OnShowItemTextChanged(e)
            Console.WriteLine("OnShowItemTextChanged is called")
         End Sub

         Protected Overrides Sub OnSizeChanged(ByVal e As EventArgs)
            MyBase.OnSizeChanged(e)
            Console.WriteLine("OnSizeChanged is called")
         End Sub

         Protected Overrides Sub OnSorterChanged(ByVal e As EventArgs)
            MyBase.OnSorterChanged(e)
            Console.WriteLine("OnSorterChanged is called")
         End Sub

         Protected Overrides Sub OnSortingChanged(ByVal e As EventArgs)
            MyBase.OnSortingChanged(e)
            Console.WriteLine("OnSortingChanged is called")
         End Sub

         Protected Overrides Sub OnViewStyleChanged(ByVal e As EventArgs)
            MyBase.OnViewStyleChanged(e)
            Console.WriteLine("OnViewStyleChanged is called")
         End Sub
      End Class</code>
        <code lang="CS">      public class MyRasterImageList : RasterImageList
      {
         //.
         //.
         //.
         protected override void OnAutoDeselectItemsChanged(EventArgs e)
         {
            base.OnAutoDeselectItemsChanged(e);
            Console.WriteLine("OnAutoDeselectItemsChanged is called");
         }

         protected override void OnAutoDisposeImagesChanged(EventArgs e)
         {
            base.OnAutoDisposeImagesChanged(e);
            Console.WriteLine("OnAutoDisposeImagesChanged is called");
         }

         protected override void OnBorderStyleChanged(EventArgs e)
         {
            base.OnBorderStyleChanged(e);
            Console.WriteLine("OnBorderStyleChanged is called");
         }

         protected override void OnDoubleBufferChanged(EventArgs e)
         {
            base.OnDoubleBufferChanged(e);
            Console.WriteLine("OnDoubleBufferChanged is called");
         }

         protected override void OnDrawItem(RasterImageListDrawItemEventArgs e)
         {
            base.OnDrawItem(e);
            Console.WriteLine("OnDrawItem is called");
         }

         protected override void OnEnableKeyboardChanged(EventArgs e)
         {
            base.OnEnableKeyboardChanged(e);
            Console.WriteLine("OnEnableKeyboardChanged is called");
         }

         protected override void OnEnableRubberBandSelectionChanged(EventArgs e)
         {
            base.OnEnableRubberBandSelectionChanged(e);
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called");
         }

         protected override void OnItemBackColorChanged(EventArgs e)
         {
            base.OnItemBackColorChanged(e);
            Console.WriteLine("OnItemBackColorChanged is called");
         }

         protected override void OnItemBorderStyleChanged(EventArgs e)
         {
            base.OnItemBorderStyleChanged(e);
            Console.WriteLine("OnItemBorderStyleChanged is called");
         }

         protected override void OnItemForeColorChanged(EventArgs e)
         {
            base.OnItemForeColorChanged(e);
            Console.WriteLine("OnItemForeColorChanged is called");
         }

         protected override void OnItemImageBorderStyleChanged(EventArgs e)
         {
            base.OnItemImageBorderStyleChanged(e);
            Console.WriteLine("OnItemImageBorderStyleChanged is called");
         }

         protected override void OnItemImageSizeChanged(EventArgs e)
         {
            base.OnItemImageSizeChanged(e);
            Console.WriteLine("OnItemImageSizeChanged is called");
         }

         protected override void OnItemSelectedBackColorChanged(EventArgs e)
         {
            base.OnItemSelectedBackColorChanged(e);
            Console.WriteLine("OnItemSelectedBackColorChanged is called");
         }

         protected override void OnItemSelectedForeColorChanged(EventArgs e)
         {
            base.OnItemSelectedForeColorChanged(e);
            Console.WriteLine("OnItemSelectedForeColorChanged is called");
         }

         protected override void OnItemSizeChanged(EventArgs e)
         {
            base.OnItemSizeChanged(e);
            Console.WriteLine("OnItemSizeChanged is called");
         }

         protected override void OnItemSpacingSizeChanged(EventArgs e)
         {
            base.OnItemSpacingSizeChanged(e);
            Console.WriteLine("OnItemSpacingSizeChanged is called");
         }

         protected override void OnKeyDown(KeyEventArgs e)
         {
            base.OnKeyDown(e);
            Console.WriteLine("OnKeyDown is called");
         }

         protected override void OnLostFocus(EventArgs e)
         {
            base.OnLostFocus(e);
            Console.WriteLine("OnLostFocus is called");
         }

         protected override void OnMouseDown(MouseEventArgs e)
         {
            base.OnMouseDown(e);
            Console.WriteLine("OnMouseDown is called");
         }

         protected override void OnMouseMove(MouseEventArgs e)
         {
            base.OnMouseMove(e);
            Console.WriteLine("OnMouseMove is called");
         }

         protected override void OnMouseUp(MouseEventArgs e)
         {
            base.OnMouseUp(e);
            Console.WriteLine("OnMouseUp is called");
         }

         protected override void OnPaint(PaintEventArgs e)
         {
            base.OnPaint(e);
            Console.WriteLine("OnPaint is called");
         }

         protected override void OnPaintPropertiesChanged(EventArgs e)
         {
            base.OnPaintPropertiesChanged(e);
            Console.WriteLine("OnPaintPropertiesChanged is called");
         }

         protected override void OnScroll(EventArgs e)
         {
            base.OnScroll(e);
            Console.WriteLine("OnScroll is called");
         }

         protected override void OnScrollStyleChanged(EventArgs e)
         {
            base.OnScrollStyleChanged(e);
            Console.WriteLine("OnScrollStyleChanged is called");
         }

         protected override void OnSelectedIndexChanged(EventArgs e)
         {
            base.OnSelectedIndexChanged(e);
            Console.WriteLine("OnSelectedIndexChanged is called");
         }

         protected override void OnSelectionModeChanged(EventArgs e)
         {
            base.OnSelectionModeChanged(e);
            Console.WriteLine("OnSelectionModeChanged is called");
         }

         protected override void OnSelectUserImageChanged(EventArgs e)
         {
            base.OnSelectUserImageChanged(e);
            Console.WriteLine("OnSelectUserImageChanged is called");
         }

         protected override void OnShowItemTextChanged(EventArgs e)
         {
            base.OnShowItemTextChanged(e);
            Console.WriteLine("OnShowItemTextChanged is called");
         }

         protected override void OnSizeChanged(EventArgs e)
         {
            base.OnSizeChanged(e);
            Console.WriteLine("OnSizeChanged is called");
         }

         protected override void OnSorterChanged(EventArgs e)
         {
            base.OnSorterChanged(e);
            Console.WriteLine("OnSorterChanged is called");
         }

         protected override void OnSortingChanged(EventArgs e)
         {
            base.OnSortingChanged(e);
            Console.WriteLine("OnSortingChanged is called");
         }

         protected override void OnViewStyleChanged(EventArgs e)
         {
            base.OnViewStyleChanged(e);
            Console.WriteLine("OnViewStyleChanged is called");
         }
      }</code>
        <!--RasterImageList.OnBorderStyleChanged-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageList.OnItemBorderStyleChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageList.ItemBorderStyleChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
        <p>Raising an event invokes the event handler through a delegate.</p>
        <p>The <b>OnItemBorderStyleChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
        <p>
          <b>Notes to Inheritors:</b> When overriding <b>OnItemBorderStyleChanged</b> in a derived class, be sure to call
            the base class's <b>OnItemBorderStyleChanged</b> method so that registered delegates receive the event.</p>
      </remarks>
      <example>
        <code lang="VB">      Public Class MyRasterImageList
         Inherits RasterImageList
         '.
         '.
         '.
         Protected Overrides Sub OnAutoDeselectItemsChanged(ByVal e As EventArgs)
            MyBase.OnAutoDeselectItemsChanged(e)
            Console.WriteLine("OnAutoDeselectItemsChanged is called")
         End Sub

         Protected Overrides Sub OnAutoDisposeImagesChanged(ByVal e As EventArgs)
            MyBase.OnAutoDisposeImagesChanged(e)
            Console.WriteLine("OnAutoDisposeImagesChanged is called")
         End Sub

         Protected Overrides Sub OnBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnBorderStyleChanged(e)
            Console.WriteLine("OnBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnDoubleBufferChanged(ByVal e As EventArgs)
            MyBase.OnDoubleBufferChanged(e)
            Console.WriteLine("OnDoubleBufferChanged is called")
         End Sub

         Protected Overrides Sub OnDrawItem(ByVal e As RasterImageListDrawItemEventArgs)
            MyBase.OnDrawItem(e)
            Console.WriteLine("OnDrawItem is called")
         End Sub

         Protected Overrides Sub OnEnableKeyboardChanged(ByVal e As EventArgs)
            MyBase.OnEnableKeyboardChanged(e)
            Console.WriteLine("OnEnableKeyboardChanged is called")
         End Sub

         Protected Overrides Sub OnEnableRubberBandSelectionChanged(ByVal e As EventArgs)
            MyBase.OnEnableRubberBandSelectionChanged(e)
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called")
         End Sub

         Protected Overrides Sub OnItemBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemBackColorChanged(e)
            Console.WriteLine("OnItemBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemBorderStyleChanged(e)
            Console.WriteLine("OnItemBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemForeColorChanged(e)
            Console.WriteLine("OnItemForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemImageBorderStyleChanged(e)
            Console.WriteLine("OnItemImageBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemImageSizeChanged(e)
            Console.WriteLine("OnItemImageSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedBackColorChanged(e)
            Console.WriteLine("OnItemSelectedBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedForeColorChanged(e)
            Console.WriteLine("OnItemSelectedForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSizeChanged(e)
            Console.WriteLine("OnItemSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSpacingSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSpacingSizeChanged(e)
            Console.WriteLine("OnItemSpacingSizeChanged is called")
         End Sub

         Protected Overrides Sub OnKeyDown(ByVal e As KeyEventArgs)
            MyBase.OnKeyDown(e)
            Console.WriteLine("OnKeyDown is called")
         End Sub

         Protected Overrides Sub OnLostFocus(ByVal e As EventArgs)
            MyBase.OnLostFocus(e)
            Console.WriteLine("OnLostFocus is called")
         End Sub

         Protected Overrides Sub OnMouseDown(ByVal e As MouseEventArgs)
            MyBase.OnMouseDown(e)
            Console.WriteLine("OnMouseDown is called")
         End Sub

         Protected Overrides Sub OnMouseMove(ByVal e As MouseEventArgs)
            MyBase.OnMouseMove(e)
            Console.WriteLine("OnMouseMove is called")
         End Sub

         Protected Overrides Sub OnMouseUp(ByVal e As MouseEventArgs)
            MyBase.OnMouseUp(e)
            Console.WriteLine("OnMouseUp is called")
         End Sub

         Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            MyBase.OnPaint(e)
            Console.WriteLine("OnPaint is called")
         End Sub

         Protected Overrides Sub OnPaintPropertiesChanged(ByVal e As EventArgs)
            MyBase.OnPaintPropertiesChanged(e)
            Console.WriteLine("OnPaintPropertiesChanged is called")
         End Sub

         Protected Overrides Sub OnScroll(ByVal e As EventArgs)
            MyBase.OnScroll(e)
            Console.WriteLine("OnScroll is called")
         End Sub

         Protected Overrides Sub OnScrollStyleChanged(ByVal e As EventArgs)
            MyBase.OnScrollStyleChanged(e)
            Console.WriteLine("OnScrollStyleChanged is called")
         End Sub

         Protected Overrides Sub OnSelectedIndexChanged(ByVal e As EventArgs)
            MyBase.OnSelectedIndexChanged(e)
            Console.WriteLine("OnSelectedIndexChanged is called")
         End Sub

         Protected Overrides Sub OnSelectionModeChanged(ByVal e As EventArgs)
            MyBase.OnSelectionModeChanged(e)
            Console.WriteLine("OnSelectionModeChanged is called")
         End Sub

         Protected Overrides Sub OnSelectUserImageChanged(ByVal e As EventArgs)
            MyBase.OnSelectUserImageChanged(e)
            Console.WriteLine("OnSelectUserImageChanged is called")
         End Sub

         Protected Overrides Sub OnShowItemTextChanged(ByVal e As EventArgs)
            MyBase.OnShowItemTextChanged(e)
            Console.WriteLine("OnShowItemTextChanged is called")
         End Sub

         Protected Overrides Sub OnSizeChanged(ByVal e As EventArgs)
            MyBase.OnSizeChanged(e)
            Console.WriteLine("OnSizeChanged is called")
         End Sub

         Protected Overrides Sub OnSorterChanged(ByVal e As EventArgs)
            MyBase.OnSorterChanged(e)
            Console.WriteLine("OnSorterChanged is called")
         End Sub

         Protected Overrides Sub OnSortingChanged(ByVal e As EventArgs)
            MyBase.OnSortingChanged(e)
            Console.WriteLine("OnSortingChanged is called")
         End Sub

         Protected Overrides Sub OnViewStyleChanged(ByVal e As EventArgs)
            MyBase.OnViewStyleChanged(e)
            Console.WriteLine("OnViewStyleChanged is called")
         End Sub
      End Class</code>
        <code lang="CS">      public class MyRasterImageList : RasterImageList
      {
         //.
         //.
         //.
         protected override void OnAutoDeselectItemsChanged(EventArgs e)
         {
            base.OnAutoDeselectItemsChanged(e);
            Console.WriteLine("OnAutoDeselectItemsChanged is called");
         }

         protected override void OnAutoDisposeImagesChanged(EventArgs e)
         {
            base.OnAutoDisposeImagesChanged(e);
            Console.WriteLine("OnAutoDisposeImagesChanged is called");
         }

         protected override void OnBorderStyleChanged(EventArgs e)
         {
            base.OnBorderStyleChanged(e);
            Console.WriteLine("OnBorderStyleChanged is called");
         }

         protected override void OnDoubleBufferChanged(EventArgs e)
         {
            base.OnDoubleBufferChanged(e);
            Console.WriteLine("OnDoubleBufferChanged is called");
         }

         protected override void OnDrawItem(RasterImageListDrawItemEventArgs e)
         {
            base.OnDrawItem(e);
            Console.WriteLine("OnDrawItem is called");
         }

         protected override void OnEnableKeyboardChanged(EventArgs e)
         {
            base.OnEnableKeyboardChanged(e);
            Console.WriteLine("OnEnableKeyboardChanged is called");
         }

         protected override void OnEnableRubberBandSelectionChanged(EventArgs e)
         {
            base.OnEnableRubberBandSelectionChanged(e);
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called");
         }

         protected override void OnItemBackColorChanged(EventArgs e)
         {
            base.OnItemBackColorChanged(e);
            Console.WriteLine("OnItemBackColorChanged is called");
         }

         protected override void OnItemBorderStyleChanged(EventArgs e)
         {
            base.OnItemBorderStyleChanged(e);
            Console.WriteLine("OnItemBorderStyleChanged is called");
         }

         protected override void OnItemForeColorChanged(EventArgs e)
         {
            base.OnItemForeColorChanged(e);
            Console.WriteLine("OnItemForeColorChanged is called");
         }

         protected override void OnItemImageBorderStyleChanged(EventArgs e)
         {
            base.OnItemImageBorderStyleChanged(e);
            Console.WriteLine("OnItemImageBorderStyleChanged is called");
         }

         protected override void OnItemImageSizeChanged(EventArgs e)
         {
            base.OnItemImageSizeChanged(e);
            Console.WriteLine("OnItemImageSizeChanged is called");
         }

         protected override void OnItemSelectedBackColorChanged(EventArgs e)
         {
            base.OnItemSelectedBackColorChanged(e);
            Console.WriteLine("OnItemSelectedBackColorChanged is called");
         }

         protected override void OnItemSelectedForeColorChanged(EventArgs e)
         {
            base.OnItemSelectedForeColorChanged(e);
            Console.WriteLine("OnItemSelectedForeColorChanged is called");
         }

         protected override void OnItemSizeChanged(EventArgs e)
         {
            base.OnItemSizeChanged(e);
            Console.WriteLine("OnItemSizeChanged is called");
         }

         protected override void OnItemSpacingSizeChanged(EventArgs e)
         {
            base.OnItemSpacingSizeChanged(e);
            Console.WriteLine("OnItemSpacingSizeChanged is called");
         }

         protected override void OnKeyDown(KeyEventArgs e)
         {
            base.OnKeyDown(e);
            Console.WriteLine("OnKeyDown is called");
         }

         protected override void OnLostFocus(EventArgs e)
         {
            base.OnLostFocus(e);
            Console.WriteLine("OnLostFocus is called");
         }

         protected override void OnMouseDown(MouseEventArgs e)
         {
            base.OnMouseDown(e);
            Console.WriteLine("OnMouseDown is called");
         }

         protected override void OnMouseMove(MouseEventArgs e)
         {
            base.OnMouseMove(e);
            Console.WriteLine("OnMouseMove is called");
         }

         protected override void OnMouseUp(MouseEventArgs e)
         {
            base.OnMouseUp(e);
            Console.WriteLine("OnMouseUp is called");
         }

         protected override void OnPaint(PaintEventArgs e)
         {
            base.OnPaint(e);
            Console.WriteLine("OnPaint is called");
         }

         protected override void OnPaintPropertiesChanged(EventArgs e)
         {
            base.OnPaintPropertiesChanged(e);
            Console.WriteLine("OnPaintPropertiesChanged is called");
         }

         protected override void OnScroll(EventArgs e)
         {
            base.OnScroll(e);
            Console.WriteLine("OnScroll is called");
         }

         protected override void OnScrollStyleChanged(EventArgs e)
         {
            base.OnScrollStyleChanged(e);
            Console.WriteLine("OnScrollStyleChanged is called");
         }

         protected override void OnSelectedIndexChanged(EventArgs e)
         {
            base.OnSelectedIndexChanged(e);
            Console.WriteLine("OnSelectedIndexChanged is called");
         }

         protected override void OnSelectionModeChanged(EventArgs e)
         {
            base.OnSelectionModeChanged(e);
            Console.WriteLine("OnSelectionModeChanged is called");
         }

         protected override void OnSelectUserImageChanged(EventArgs e)
         {
            base.OnSelectUserImageChanged(e);
            Console.WriteLine("OnSelectUserImageChanged is called");
         }

         protected override void OnShowItemTextChanged(EventArgs e)
         {
            base.OnShowItemTextChanged(e);
            Console.WriteLine("OnShowItemTextChanged is called");
         }

         protected override void OnSizeChanged(EventArgs e)
         {
            base.OnSizeChanged(e);
            Console.WriteLine("OnSizeChanged is called");
         }

         protected override void OnSorterChanged(EventArgs e)
         {
            base.OnSorterChanged(e);
            Console.WriteLine("OnSorterChanged is called");
         }

         protected override void OnSortingChanged(EventArgs e)
         {
            base.OnSortingChanged(e);
            Console.WriteLine("OnSortingChanged is called");
         }

         protected override void OnViewStyleChanged(EventArgs e)
         {
            base.OnViewStyleChanged(e);
            Console.WriteLine("OnViewStyleChanged is called");
         }
      }</code>
        <!--RasterImageList.OnBorderStyleChanged-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageList.OnItemSpacingSizeChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageList.ItemSpacingSizeChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
        <p>Raising an event invokes the event handler through a delegate.</p>
        <p>The <b>OnItemSpacingSizeChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
        <p>
          <b>Notes to Inheritors:</b> When overriding <b>OnItemSpacingSizeChanged</b> in a derived class, be sure to call
            the base class's <b>OnItemSpacingSizeChanged</b> method so that registered delegates receive the event.</p>
      </remarks>
      <example>
        <code lang="VB">      Public Class MyRasterImageList
         Inherits RasterImageList
         '.
         '.
         '.
         Protected Overrides Sub OnAutoDeselectItemsChanged(ByVal e As EventArgs)
            MyBase.OnAutoDeselectItemsChanged(e)
            Console.WriteLine("OnAutoDeselectItemsChanged is called")
         End Sub

         Protected Overrides Sub OnAutoDisposeImagesChanged(ByVal e As EventArgs)
            MyBase.OnAutoDisposeImagesChanged(e)
            Console.WriteLine("OnAutoDisposeImagesChanged is called")
         End Sub

         Protected Overrides Sub OnBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnBorderStyleChanged(e)
            Console.WriteLine("OnBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnDoubleBufferChanged(ByVal e As EventArgs)
            MyBase.OnDoubleBufferChanged(e)
            Console.WriteLine("OnDoubleBufferChanged is called")
         End Sub

         Protected Overrides Sub OnDrawItem(ByVal e As RasterImageListDrawItemEventArgs)
            MyBase.OnDrawItem(e)
            Console.WriteLine("OnDrawItem is called")
         End Sub

         Protected Overrides Sub OnEnableKeyboardChanged(ByVal e As EventArgs)
            MyBase.OnEnableKeyboardChanged(e)
            Console.WriteLine("OnEnableKeyboardChanged is called")
         End Sub

         Protected Overrides Sub OnEnableRubberBandSelectionChanged(ByVal e As EventArgs)
            MyBase.OnEnableRubberBandSelectionChanged(e)
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called")
         End Sub

         Protected Overrides Sub OnItemBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemBackColorChanged(e)
            Console.WriteLine("OnItemBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemBorderStyleChanged(e)
            Console.WriteLine("OnItemBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemForeColorChanged(e)
            Console.WriteLine("OnItemForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemImageBorderStyleChanged(e)
            Console.WriteLine("OnItemImageBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemImageSizeChanged(e)
            Console.WriteLine("OnItemImageSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedBackColorChanged(e)
            Console.WriteLine("OnItemSelectedBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedForeColorChanged(e)
            Console.WriteLine("OnItemSelectedForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSizeChanged(e)
            Console.WriteLine("OnItemSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSpacingSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSpacingSizeChanged(e)
            Console.WriteLine("OnItemSpacingSizeChanged is called")
         End Sub

         Protected Overrides Sub OnKeyDown(ByVal e As KeyEventArgs)
            MyBase.OnKeyDown(e)
            Console.WriteLine("OnKeyDown is called")
         End Sub

         Protected Overrides Sub OnLostFocus(ByVal e As EventArgs)
            MyBase.OnLostFocus(e)
            Console.WriteLine("OnLostFocus is called")
         End Sub

         Protected Overrides Sub OnMouseDown(ByVal e As MouseEventArgs)
            MyBase.OnMouseDown(e)
            Console.WriteLine("OnMouseDown is called")
         End Sub

         Protected Overrides Sub OnMouseMove(ByVal e As MouseEventArgs)
            MyBase.OnMouseMove(e)
            Console.WriteLine("OnMouseMove is called")
         End Sub

         Protected Overrides Sub OnMouseUp(ByVal e As MouseEventArgs)
            MyBase.OnMouseUp(e)
            Console.WriteLine("OnMouseUp is called")
         End Sub

         Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            MyBase.OnPaint(e)
            Console.WriteLine("OnPaint is called")
         End Sub

         Protected Overrides Sub OnPaintPropertiesChanged(ByVal e As EventArgs)
            MyBase.OnPaintPropertiesChanged(e)
            Console.WriteLine("OnPaintPropertiesChanged is called")
         End Sub

         Protected Overrides Sub OnScroll(ByVal e As EventArgs)
            MyBase.OnScroll(e)
            Console.WriteLine("OnScroll is called")
         End Sub

         Protected Overrides Sub OnScrollStyleChanged(ByVal e As EventArgs)
            MyBase.OnScrollStyleChanged(e)
            Console.WriteLine("OnScrollStyleChanged is called")
         End Sub

         Protected Overrides Sub OnSelectedIndexChanged(ByVal e As EventArgs)
            MyBase.OnSelectedIndexChanged(e)
            Console.WriteLine("OnSelectedIndexChanged is called")
         End Sub

         Protected Overrides Sub OnSelectionModeChanged(ByVal e As EventArgs)
            MyBase.OnSelectionModeChanged(e)
            Console.WriteLine("OnSelectionModeChanged is called")
         End Sub

         Protected Overrides Sub OnSelectUserImageChanged(ByVal e As EventArgs)
            MyBase.OnSelectUserImageChanged(e)
            Console.WriteLine("OnSelectUserImageChanged is called")
         End Sub

         Protected Overrides Sub OnShowItemTextChanged(ByVal e As EventArgs)
            MyBase.OnShowItemTextChanged(e)
            Console.WriteLine("OnShowItemTextChanged is called")
         End Sub

         Protected Overrides Sub OnSizeChanged(ByVal e As EventArgs)
            MyBase.OnSizeChanged(e)
            Console.WriteLine("OnSizeChanged is called")
         End Sub

         Protected Overrides Sub OnSorterChanged(ByVal e As EventArgs)
            MyBase.OnSorterChanged(e)
            Console.WriteLine("OnSorterChanged is called")
         End Sub

         Protected Overrides Sub OnSortingChanged(ByVal e As EventArgs)
            MyBase.OnSortingChanged(e)
            Console.WriteLine("OnSortingChanged is called")
         End Sub

         Protected Overrides Sub OnViewStyleChanged(ByVal e As EventArgs)
            MyBase.OnViewStyleChanged(e)
            Console.WriteLine("OnViewStyleChanged is called")
         End Sub
      End Class</code>
        <code lang="CS">      public class MyRasterImageList : RasterImageList
      {
         //.
         //.
         //.
         protected override void OnAutoDeselectItemsChanged(EventArgs e)
         {
            base.OnAutoDeselectItemsChanged(e);
            Console.WriteLine("OnAutoDeselectItemsChanged is called");
         }

         protected override void OnAutoDisposeImagesChanged(EventArgs e)
         {
            base.OnAutoDisposeImagesChanged(e);
            Console.WriteLine("OnAutoDisposeImagesChanged is called");
         }

         protected override void OnBorderStyleChanged(EventArgs e)
         {
            base.OnBorderStyleChanged(e);
            Console.WriteLine("OnBorderStyleChanged is called");
         }

         protected override void OnDoubleBufferChanged(EventArgs e)
         {
            base.OnDoubleBufferChanged(e);
            Console.WriteLine("OnDoubleBufferChanged is called");
         }

         protected override void OnDrawItem(RasterImageListDrawItemEventArgs e)
         {
            base.OnDrawItem(e);
            Console.WriteLine("OnDrawItem is called");
         }

         protected override void OnEnableKeyboardChanged(EventArgs e)
         {
            base.OnEnableKeyboardChanged(e);
            Console.WriteLine("OnEnableKeyboardChanged is called");
         }

         protected override void OnEnableRubberBandSelectionChanged(EventArgs e)
         {
            base.OnEnableRubberBandSelectionChanged(e);
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called");
         }

         protected override void OnItemBackColorChanged(EventArgs e)
         {
            base.OnItemBackColorChanged(e);
            Console.WriteLine("OnItemBackColorChanged is called");
         }

         protected override void OnItemBorderStyleChanged(EventArgs e)
         {
            base.OnItemBorderStyleChanged(e);
            Console.WriteLine("OnItemBorderStyleChanged is called");
         }

         protected override void OnItemForeColorChanged(EventArgs e)
         {
            base.OnItemForeColorChanged(e);
            Console.WriteLine("OnItemForeColorChanged is called");
         }

         protected override void OnItemImageBorderStyleChanged(EventArgs e)
         {
            base.OnItemImageBorderStyleChanged(e);
            Console.WriteLine("OnItemImageBorderStyleChanged is called");
         }

         protected override void OnItemImageSizeChanged(EventArgs e)
         {
            base.OnItemImageSizeChanged(e);
            Console.WriteLine("OnItemImageSizeChanged is called");
         }

         protected override void OnItemSelectedBackColorChanged(EventArgs e)
         {
            base.OnItemSelectedBackColorChanged(e);
            Console.WriteLine("OnItemSelectedBackColorChanged is called");
         }

         protected override void OnItemSelectedForeColorChanged(EventArgs e)
         {
            base.OnItemSelectedForeColorChanged(e);
            Console.WriteLine("OnItemSelectedForeColorChanged is called");
         }

         protected override void OnItemSizeChanged(EventArgs e)
         {
            base.OnItemSizeChanged(e);
            Console.WriteLine("OnItemSizeChanged is called");
         }

         protected override void OnItemSpacingSizeChanged(EventArgs e)
         {
            base.OnItemSpacingSizeChanged(e);
            Console.WriteLine("OnItemSpacingSizeChanged is called");
         }

         protected override void OnKeyDown(KeyEventArgs e)
         {
            base.OnKeyDown(e);
            Console.WriteLine("OnKeyDown is called");
         }

         protected override void OnLostFocus(EventArgs e)
         {
            base.OnLostFocus(e);
            Console.WriteLine("OnLostFocus is called");
         }

         protected override void OnMouseDown(MouseEventArgs e)
         {
            base.OnMouseDown(e);
            Console.WriteLine("OnMouseDown is called");
         }

         protected override void OnMouseMove(MouseEventArgs e)
         {
            base.OnMouseMove(e);
            Console.WriteLine("OnMouseMove is called");
         }

         protected override void OnMouseUp(MouseEventArgs e)
         {
            base.OnMouseUp(e);
            Console.WriteLine("OnMouseUp is called");
         }

         protected override void OnPaint(PaintEventArgs e)
         {
            base.OnPaint(e);
            Console.WriteLine("OnPaint is called");
         }

         protected override void OnPaintPropertiesChanged(EventArgs e)
         {
            base.OnPaintPropertiesChanged(e);
            Console.WriteLine("OnPaintPropertiesChanged is called");
         }

         protected override void OnScroll(EventArgs e)
         {
            base.OnScroll(e);
            Console.WriteLine("OnScroll is called");
         }

         protected override void OnScrollStyleChanged(EventArgs e)
         {
            base.OnScrollStyleChanged(e);
            Console.WriteLine("OnScrollStyleChanged is called");
         }

         protected override void OnSelectedIndexChanged(EventArgs e)
         {
            base.OnSelectedIndexChanged(e);
            Console.WriteLine("OnSelectedIndexChanged is called");
         }

         protected override void OnSelectionModeChanged(EventArgs e)
         {
            base.OnSelectionModeChanged(e);
            Console.WriteLine("OnSelectionModeChanged is called");
         }

         protected override void OnSelectUserImageChanged(EventArgs e)
         {
            base.OnSelectUserImageChanged(e);
            Console.WriteLine("OnSelectUserImageChanged is called");
         }

         protected override void OnShowItemTextChanged(EventArgs e)
         {
            base.OnShowItemTextChanged(e);
            Console.WriteLine("OnShowItemTextChanged is called");
         }

         protected override void OnSizeChanged(EventArgs e)
         {
            base.OnSizeChanged(e);
            Console.WriteLine("OnSizeChanged is called");
         }

         protected override void OnSorterChanged(EventArgs e)
         {
            base.OnSorterChanged(e);
            Console.WriteLine("OnSorterChanged is called");
         }

         protected override void OnSortingChanged(EventArgs e)
         {
            base.OnSortingChanged(e);
            Console.WriteLine("OnSortingChanged is called");
         }

         protected override void OnViewStyleChanged(EventArgs e)
         {
            base.OnViewStyleChanged(e);
            Console.WriteLine("OnViewStyleChanged is called");
         }
      }</code>
        <!--RasterImageList.OnBorderStyleChanged-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageList.OnItemForeColorChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageList.ItemForeColorChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
        <p>Raising an event invokes the event handler through a delegate.</p>
        <p>The <b>OnItemForeColorChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
        <p>
          <b>Notes to Inheritors:</b> When overriding <b>OnItemForeColorChanged</b> in a derived class, be sure to call
            the base class's <b>OnItemForeColorChanged</b> method so that registered delegates receive the event.</p>
      </remarks>
      <example>
        <code lang="VB">      Public Class MyRasterImageList
         Inherits RasterImageList
         '.
         '.
         '.
         Protected Overrides Sub OnAutoDeselectItemsChanged(ByVal e As EventArgs)
            MyBase.OnAutoDeselectItemsChanged(e)
            Console.WriteLine("OnAutoDeselectItemsChanged is called")
         End Sub

         Protected Overrides Sub OnAutoDisposeImagesChanged(ByVal e As EventArgs)
            MyBase.OnAutoDisposeImagesChanged(e)
            Console.WriteLine("OnAutoDisposeImagesChanged is called")
         End Sub

         Protected Overrides Sub OnBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnBorderStyleChanged(e)
            Console.WriteLine("OnBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnDoubleBufferChanged(ByVal e As EventArgs)
            MyBase.OnDoubleBufferChanged(e)
            Console.WriteLine("OnDoubleBufferChanged is called")
         End Sub

         Protected Overrides Sub OnDrawItem(ByVal e As RasterImageListDrawItemEventArgs)
            MyBase.OnDrawItem(e)
            Console.WriteLine("OnDrawItem is called")
         End Sub

         Protected Overrides Sub OnEnableKeyboardChanged(ByVal e As EventArgs)
            MyBase.OnEnableKeyboardChanged(e)
            Console.WriteLine("OnEnableKeyboardChanged is called")
         End Sub

         Protected Overrides Sub OnEnableRubberBandSelectionChanged(ByVal e As EventArgs)
            MyBase.OnEnableRubberBandSelectionChanged(e)
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called")
         End Sub

         Protected Overrides Sub OnItemBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemBackColorChanged(e)
            Console.WriteLine("OnItemBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemBorderStyleChanged(e)
            Console.WriteLine("OnItemBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemForeColorChanged(e)
            Console.WriteLine("OnItemForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemImageBorderStyleChanged(e)
            Console.WriteLine("OnItemImageBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemImageSizeChanged(e)
            Console.WriteLine("OnItemImageSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedBackColorChanged(e)
            Console.WriteLine("OnItemSelectedBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedForeColorChanged(e)
            Console.WriteLine("OnItemSelectedForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSizeChanged(e)
            Console.WriteLine("OnItemSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSpacingSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSpacingSizeChanged(e)
            Console.WriteLine("OnItemSpacingSizeChanged is called")
         End Sub

         Protected Overrides Sub OnKeyDown(ByVal e As KeyEventArgs)
            MyBase.OnKeyDown(e)
            Console.WriteLine("OnKeyDown is called")
         End Sub

         Protected Overrides Sub OnLostFocus(ByVal e As EventArgs)
            MyBase.OnLostFocus(e)
            Console.WriteLine("OnLostFocus is called")
         End Sub

         Protected Overrides Sub OnMouseDown(ByVal e As MouseEventArgs)
            MyBase.OnMouseDown(e)
            Console.WriteLine("OnMouseDown is called")
         End Sub

         Protected Overrides Sub OnMouseMove(ByVal e As MouseEventArgs)
            MyBase.OnMouseMove(e)
            Console.WriteLine("OnMouseMove is called")
         End Sub

         Protected Overrides Sub OnMouseUp(ByVal e As MouseEventArgs)
            MyBase.OnMouseUp(e)
            Console.WriteLine("OnMouseUp is called")
         End Sub

         Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            MyBase.OnPaint(e)
            Console.WriteLine("OnPaint is called")
         End Sub

         Protected Overrides Sub OnPaintPropertiesChanged(ByVal e As EventArgs)
            MyBase.OnPaintPropertiesChanged(e)
            Console.WriteLine("OnPaintPropertiesChanged is called")
         End Sub

         Protected Overrides Sub OnScroll(ByVal e As EventArgs)
            MyBase.OnScroll(e)
            Console.WriteLine("OnScroll is called")
         End Sub

         Protected Overrides Sub OnScrollStyleChanged(ByVal e As EventArgs)
            MyBase.OnScrollStyleChanged(e)
            Console.WriteLine("OnScrollStyleChanged is called")
         End Sub

         Protected Overrides Sub OnSelectedIndexChanged(ByVal e As EventArgs)
            MyBase.OnSelectedIndexChanged(e)
            Console.WriteLine("OnSelectedIndexChanged is called")
         End Sub

         Protected Overrides Sub OnSelectionModeChanged(ByVal e As EventArgs)
            MyBase.OnSelectionModeChanged(e)
            Console.WriteLine("OnSelectionModeChanged is called")
         End Sub

         Protected Overrides Sub OnSelectUserImageChanged(ByVal e As EventArgs)
            MyBase.OnSelectUserImageChanged(e)
            Console.WriteLine("OnSelectUserImageChanged is called")
         End Sub

         Protected Overrides Sub OnShowItemTextChanged(ByVal e As EventArgs)
            MyBase.OnShowItemTextChanged(e)
            Console.WriteLine("OnShowItemTextChanged is called")
         End Sub

         Protected Overrides Sub OnSizeChanged(ByVal e As EventArgs)
            MyBase.OnSizeChanged(e)
            Console.WriteLine("OnSizeChanged is called")
         End Sub

         Protected Overrides Sub OnSorterChanged(ByVal e As EventArgs)
            MyBase.OnSorterChanged(e)
            Console.WriteLine("OnSorterChanged is called")
         End Sub

         Protected Overrides Sub OnSortingChanged(ByVal e As EventArgs)
            MyBase.OnSortingChanged(e)
            Console.WriteLine("OnSortingChanged is called")
         End Sub

         Protected Overrides Sub OnViewStyleChanged(ByVal e As EventArgs)
            MyBase.OnViewStyleChanged(e)
            Console.WriteLine("OnViewStyleChanged is called")
         End Sub
      End Class</code>
        <code lang="CS">      public class MyRasterImageList : RasterImageList
      {
         //.
         //.
         //.
         protected override void OnAutoDeselectItemsChanged(EventArgs e)
         {
            base.OnAutoDeselectItemsChanged(e);
            Console.WriteLine("OnAutoDeselectItemsChanged is called");
         }

         protected override void OnAutoDisposeImagesChanged(EventArgs e)
         {
            base.OnAutoDisposeImagesChanged(e);
            Console.WriteLine("OnAutoDisposeImagesChanged is called");
         }

         protected override void OnBorderStyleChanged(EventArgs e)
         {
            base.OnBorderStyleChanged(e);
            Console.WriteLine("OnBorderStyleChanged is called");
         }

         protected override void OnDoubleBufferChanged(EventArgs e)
         {
            base.OnDoubleBufferChanged(e);
            Console.WriteLine("OnDoubleBufferChanged is called");
         }

         protected override void OnDrawItem(RasterImageListDrawItemEventArgs e)
         {
            base.OnDrawItem(e);
            Console.WriteLine("OnDrawItem is called");
         }

         protected override void OnEnableKeyboardChanged(EventArgs e)
         {
            base.OnEnableKeyboardChanged(e);
            Console.WriteLine("OnEnableKeyboardChanged is called");
         }

         protected override void OnEnableRubberBandSelectionChanged(EventArgs e)
         {
            base.OnEnableRubberBandSelectionChanged(e);
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called");
         }

         protected override void OnItemBackColorChanged(EventArgs e)
         {
            base.OnItemBackColorChanged(e);
            Console.WriteLine("OnItemBackColorChanged is called");
         }

         protected override void OnItemBorderStyleChanged(EventArgs e)
         {
            base.OnItemBorderStyleChanged(e);
            Console.WriteLine("OnItemBorderStyleChanged is called");
         }

         protected override void OnItemForeColorChanged(EventArgs e)
         {
            base.OnItemForeColorChanged(e);
            Console.WriteLine("OnItemForeColorChanged is called");
         }

         protected override void OnItemImageBorderStyleChanged(EventArgs e)
         {
            base.OnItemImageBorderStyleChanged(e);
            Console.WriteLine("OnItemImageBorderStyleChanged is called");
         }

         protected override void OnItemImageSizeChanged(EventArgs e)
         {
            base.OnItemImageSizeChanged(e);
            Console.WriteLine("OnItemImageSizeChanged is called");
         }

         protected override void OnItemSelectedBackColorChanged(EventArgs e)
         {
            base.OnItemSelectedBackColorChanged(e);
            Console.WriteLine("OnItemSelectedBackColorChanged is called");
         }

         protected override void OnItemSelectedForeColorChanged(EventArgs e)
         {
            base.OnItemSelectedForeColorChanged(e);
            Console.WriteLine("OnItemSelectedForeColorChanged is called");
         }

         protected override void OnItemSizeChanged(EventArgs e)
         {
            base.OnItemSizeChanged(e);
            Console.WriteLine("OnItemSizeChanged is called");
         }

         protected override void OnItemSpacingSizeChanged(EventArgs e)
         {
            base.OnItemSpacingSizeChanged(e);
            Console.WriteLine("OnItemSpacingSizeChanged is called");
         }

         protected override void OnKeyDown(KeyEventArgs e)
         {
            base.OnKeyDown(e);
            Console.WriteLine("OnKeyDown is called");
         }

         protected override void OnLostFocus(EventArgs e)
         {
            base.OnLostFocus(e);
            Console.WriteLine("OnLostFocus is called");
         }

         protected override void OnMouseDown(MouseEventArgs e)
         {
            base.OnMouseDown(e);
            Console.WriteLine("OnMouseDown is called");
         }

         protected override void OnMouseMove(MouseEventArgs e)
         {
            base.OnMouseMove(e);
            Console.WriteLine("OnMouseMove is called");
         }

         protected override void OnMouseUp(MouseEventArgs e)
         {
            base.OnMouseUp(e);
            Console.WriteLine("OnMouseUp is called");
         }

         protected override void OnPaint(PaintEventArgs e)
         {
            base.OnPaint(e);
            Console.WriteLine("OnPaint is called");
         }

         protected override void OnPaintPropertiesChanged(EventArgs e)
         {
            base.OnPaintPropertiesChanged(e);
            Console.WriteLine("OnPaintPropertiesChanged is called");
         }

         protected override void OnScroll(EventArgs e)
         {
            base.OnScroll(e);
            Console.WriteLine("OnScroll is called");
         }

         protected override void OnScrollStyleChanged(EventArgs e)
         {
            base.OnScrollStyleChanged(e);
            Console.WriteLine("OnScrollStyleChanged is called");
         }

         protected override void OnSelectedIndexChanged(EventArgs e)
         {
            base.OnSelectedIndexChanged(e);
            Console.WriteLine("OnSelectedIndexChanged is called");
         }

         protected override void OnSelectionModeChanged(EventArgs e)
         {
            base.OnSelectionModeChanged(e);
            Console.WriteLine("OnSelectionModeChanged is called");
         }

         protected override void OnSelectUserImageChanged(EventArgs e)
         {
            base.OnSelectUserImageChanged(e);
            Console.WriteLine("OnSelectUserImageChanged is called");
         }

         protected override void OnShowItemTextChanged(EventArgs e)
         {
            base.OnShowItemTextChanged(e);
            Console.WriteLine("OnShowItemTextChanged is called");
         }

         protected override void OnSizeChanged(EventArgs e)
         {
            base.OnSizeChanged(e);
            Console.WriteLine("OnSizeChanged is called");
         }

         protected override void OnSorterChanged(EventArgs e)
         {
            base.OnSorterChanged(e);
            Console.WriteLine("OnSorterChanged is called");
         }

         protected override void OnSortingChanged(EventArgs e)
         {
            base.OnSortingChanged(e);
            Console.WriteLine("OnSortingChanged is called");
         }

         protected override void OnViewStyleChanged(EventArgs e)
         {
            base.OnViewStyleChanged(e);
            Console.WriteLine("OnViewStyleChanged is called");
         }
      }</code>
        <!--RasterImageList.OnBorderStyleChanged-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageList.OnItemSelectedForeColorChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageList.ItemSelectedForeColorChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
        <p>Raising an event invokes the event handler through a delegate.</p>
        <p>The <b>OnItemSelectedForeColorChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
        <p>
          <b>Notes to Inheritors:</b> When overriding <b>OnItemSelectedForeColorChanged</b> in a derived class, be sure to call
            the base class's <b>OnItemSelectedForeColorChanged</b> method so that registered delegates receive the event.</p>
      </remarks>
      <example>
        <code lang="VB">      Public Class MyRasterImageList
         Inherits RasterImageList
         '.
         '.
         '.
         Protected Overrides Sub OnAutoDeselectItemsChanged(ByVal e As EventArgs)
            MyBase.OnAutoDeselectItemsChanged(e)
            Console.WriteLine("OnAutoDeselectItemsChanged is called")
         End Sub

         Protected Overrides Sub OnAutoDisposeImagesChanged(ByVal e As EventArgs)
            MyBase.OnAutoDisposeImagesChanged(e)
            Console.WriteLine("OnAutoDisposeImagesChanged is called")
         End Sub

         Protected Overrides Sub OnBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnBorderStyleChanged(e)
            Console.WriteLine("OnBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnDoubleBufferChanged(ByVal e As EventArgs)
            MyBase.OnDoubleBufferChanged(e)
            Console.WriteLine("OnDoubleBufferChanged is called")
         End Sub

         Protected Overrides Sub OnDrawItem(ByVal e As RasterImageListDrawItemEventArgs)
            MyBase.OnDrawItem(e)
            Console.WriteLine("OnDrawItem is called")
         End Sub

         Protected Overrides Sub OnEnableKeyboardChanged(ByVal e As EventArgs)
            MyBase.OnEnableKeyboardChanged(e)
            Console.WriteLine("OnEnableKeyboardChanged is called")
         End Sub

         Protected Overrides Sub OnEnableRubberBandSelectionChanged(ByVal e As EventArgs)
            MyBase.OnEnableRubberBandSelectionChanged(e)
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called")
         End Sub

         Protected Overrides Sub OnItemBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemBackColorChanged(e)
            Console.WriteLine("OnItemBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemBorderStyleChanged(e)
            Console.WriteLine("OnItemBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemForeColorChanged(e)
            Console.WriteLine("OnItemForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemImageBorderStyleChanged(e)
            Console.WriteLine("OnItemImageBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemImageSizeChanged(e)
            Console.WriteLine("OnItemImageSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedBackColorChanged(e)
            Console.WriteLine("OnItemSelectedBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedForeColorChanged(e)
            Console.WriteLine("OnItemSelectedForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSizeChanged(e)
            Console.WriteLine("OnItemSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSpacingSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSpacingSizeChanged(e)
            Console.WriteLine("OnItemSpacingSizeChanged is called")
         End Sub

         Protected Overrides Sub OnKeyDown(ByVal e As KeyEventArgs)
            MyBase.OnKeyDown(e)
            Console.WriteLine("OnKeyDown is called")
         End Sub

         Protected Overrides Sub OnLostFocus(ByVal e As EventArgs)
            MyBase.OnLostFocus(e)
            Console.WriteLine("OnLostFocus is called")
         End Sub

         Protected Overrides Sub OnMouseDown(ByVal e As MouseEventArgs)
            MyBase.OnMouseDown(e)
            Console.WriteLine("OnMouseDown is called")
         End Sub

         Protected Overrides Sub OnMouseMove(ByVal e As MouseEventArgs)
            MyBase.OnMouseMove(e)
            Console.WriteLine("OnMouseMove is called")
         End Sub

         Protected Overrides Sub OnMouseUp(ByVal e As MouseEventArgs)
            MyBase.OnMouseUp(e)
            Console.WriteLine("OnMouseUp is called")
         End Sub

         Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            MyBase.OnPaint(e)
            Console.WriteLine("OnPaint is called")
         End Sub

         Protected Overrides Sub OnPaintPropertiesChanged(ByVal e As EventArgs)
            MyBase.OnPaintPropertiesChanged(e)
            Console.WriteLine("OnPaintPropertiesChanged is called")
         End Sub

         Protected Overrides Sub OnScroll(ByVal e As EventArgs)
            MyBase.OnScroll(e)
            Console.WriteLine("OnScroll is called")
         End Sub

         Protected Overrides Sub OnScrollStyleChanged(ByVal e As EventArgs)
            MyBase.OnScrollStyleChanged(e)
            Console.WriteLine("OnScrollStyleChanged is called")
         End Sub

         Protected Overrides Sub OnSelectedIndexChanged(ByVal e As EventArgs)
            MyBase.OnSelectedIndexChanged(e)
            Console.WriteLine("OnSelectedIndexChanged is called")
         End Sub

         Protected Overrides Sub OnSelectionModeChanged(ByVal e As EventArgs)
            MyBase.OnSelectionModeChanged(e)
            Console.WriteLine("OnSelectionModeChanged is called")
         End Sub

         Protected Overrides Sub OnSelectUserImageChanged(ByVal e As EventArgs)
            MyBase.OnSelectUserImageChanged(e)
            Console.WriteLine("OnSelectUserImageChanged is called")
         End Sub

         Protected Overrides Sub OnShowItemTextChanged(ByVal e As EventArgs)
            MyBase.OnShowItemTextChanged(e)
            Console.WriteLine("OnShowItemTextChanged is called")
         End Sub

         Protected Overrides Sub OnSizeChanged(ByVal e As EventArgs)
            MyBase.OnSizeChanged(e)
            Console.WriteLine("OnSizeChanged is called")
         End Sub

         Protected Overrides Sub OnSorterChanged(ByVal e As EventArgs)
            MyBase.OnSorterChanged(e)
            Console.WriteLine("OnSorterChanged is called")
         End Sub

         Protected Overrides Sub OnSortingChanged(ByVal e As EventArgs)
            MyBase.OnSortingChanged(e)
            Console.WriteLine("OnSortingChanged is called")
         End Sub

         Protected Overrides Sub OnViewStyleChanged(ByVal e As EventArgs)
            MyBase.OnViewStyleChanged(e)
            Console.WriteLine("OnViewStyleChanged is called")
         End Sub
      End Class</code>
        <code lang="CS">      public class MyRasterImageList : RasterImageList
      {
         //.
         //.
         //.
         protected override void OnAutoDeselectItemsChanged(EventArgs e)
         {
            base.OnAutoDeselectItemsChanged(e);
            Console.WriteLine("OnAutoDeselectItemsChanged is called");
         }

         protected override void OnAutoDisposeImagesChanged(EventArgs e)
         {
            base.OnAutoDisposeImagesChanged(e);
            Console.WriteLine("OnAutoDisposeImagesChanged is called");
         }

         protected override void OnBorderStyleChanged(EventArgs e)
         {
            base.OnBorderStyleChanged(e);
            Console.WriteLine("OnBorderStyleChanged is called");
         }

         protected override void OnDoubleBufferChanged(EventArgs e)
         {
            base.OnDoubleBufferChanged(e);
            Console.WriteLine("OnDoubleBufferChanged is called");
         }

         protected override void OnDrawItem(RasterImageListDrawItemEventArgs e)
         {
            base.OnDrawItem(e);
            Console.WriteLine("OnDrawItem is called");
         }

         protected override void OnEnableKeyboardChanged(EventArgs e)
         {
            base.OnEnableKeyboardChanged(e);
            Console.WriteLine("OnEnableKeyboardChanged is called");
         }

         protected override void OnEnableRubberBandSelectionChanged(EventArgs e)
         {
            base.OnEnableRubberBandSelectionChanged(e);
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called");
         }

         protected override void OnItemBackColorChanged(EventArgs e)
         {
            base.OnItemBackColorChanged(e);
            Console.WriteLine("OnItemBackColorChanged is called");
         }

         protected override void OnItemBorderStyleChanged(EventArgs e)
         {
            base.OnItemBorderStyleChanged(e);
            Console.WriteLine("OnItemBorderStyleChanged is called");
         }

         protected override void OnItemForeColorChanged(EventArgs e)
         {
            base.OnItemForeColorChanged(e);
            Console.WriteLine("OnItemForeColorChanged is called");
         }

         protected override void OnItemImageBorderStyleChanged(EventArgs e)
         {
            base.OnItemImageBorderStyleChanged(e);
            Console.WriteLine("OnItemImageBorderStyleChanged is called");
         }

         protected override void OnItemImageSizeChanged(EventArgs e)
         {
            base.OnItemImageSizeChanged(e);
            Console.WriteLine("OnItemImageSizeChanged is called");
         }

         protected override void OnItemSelectedBackColorChanged(EventArgs e)
         {
            base.OnItemSelectedBackColorChanged(e);
            Console.WriteLine("OnItemSelectedBackColorChanged is called");
         }

         protected override void OnItemSelectedForeColorChanged(EventArgs e)
         {
            base.OnItemSelectedForeColorChanged(e);
            Console.WriteLine("OnItemSelectedForeColorChanged is called");
         }

         protected override void OnItemSizeChanged(EventArgs e)
         {
            base.OnItemSizeChanged(e);
            Console.WriteLine("OnItemSizeChanged is called");
         }

         protected override void OnItemSpacingSizeChanged(EventArgs e)
         {
            base.OnItemSpacingSizeChanged(e);
            Console.WriteLine("OnItemSpacingSizeChanged is called");
         }

         protected override void OnKeyDown(KeyEventArgs e)
         {
            base.OnKeyDown(e);
            Console.WriteLine("OnKeyDown is called");
         }

         protected override void OnLostFocus(EventArgs e)
         {
            base.OnLostFocus(e);
            Console.WriteLine("OnLostFocus is called");
         }

         protected override void OnMouseDown(MouseEventArgs e)
         {
            base.OnMouseDown(e);
            Console.WriteLine("OnMouseDown is called");
         }

         protected override void OnMouseMove(MouseEventArgs e)
         {
            base.OnMouseMove(e);
            Console.WriteLine("OnMouseMove is called");
         }

         protected override void OnMouseUp(MouseEventArgs e)
         {
            base.OnMouseUp(e);
            Console.WriteLine("OnMouseUp is called");
         }

         protected override void OnPaint(PaintEventArgs e)
         {
            base.OnPaint(e);
            Console.WriteLine("OnPaint is called");
         }

         protected override void OnPaintPropertiesChanged(EventArgs e)
         {
            base.OnPaintPropertiesChanged(e);
            Console.WriteLine("OnPaintPropertiesChanged is called");
         }

         protected override void OnScroll(EventArgs e)
         {
            base.OnScroll(e);
            Console.WriteLine("OnScroll is called");
         }

         protected override void OnScrollStyleChanged(EventArgs e)
         {
            base.OnScrollStyleChanged(e);
            Console.WriteLine("OnScrollStyleChanged is called");
         }

         protected override void OnSelectedIndexChanged(EventArgs e)
         {
            base.OnSelectedIndexChanged(e);
            Console.WriteLine("OnSelectedIndexChanged is called");
         }

         protected override void OnSelectionModeChanged(EventArgs e)
         {
            base.OnSelectionModeChanged(e);
            Console.WriteLine("OnSelectionModeChanged is called");
         }

         protected override void OnSelectUserImageChanged(EventArgs e)
         {
            base.OnSelectUserImageChanged(e);
            Console.WriteLine("OnSelectUserImageChanged is called");
         }

         protected override void OnShowItemTextChanged(EventArgs e)
         {
            base.OnShowItemTextChanged(e);
            Console.WriteLine("OnShowItemTextChanged is called");
         }

         protected override void OnSizeChanged(EventArgs e)
         {
            base.OnSizeChanged(e);
            Console.WriteLine("OnSizeChanged is called");
         }

         protected override void OnSorterChanged(EventArgs e)
         {
            base.OnSorterChanged(e);
            Console.WriteLine("OnSorterChanged is called");
         }

         protected override void OnSortingChanged(EventArgs e)
         {
            base.OnSortingChanged(e);
            Console.WriteLine("OnSortingChanged is called");
         }

         protected override void OnViewStyleChanged(EventArgs e)
         {
            base.OnViewStyleChanged(e);
            Console.WriteLine("OnViewStyleChanged is called");
         }
      }</code>
        <!--RasterImageList.OnBorderStyleChanged-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageList.OnItemBackColorChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageList.ItemBackColorChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
        <p>Raising an event invokes the event handler through a delegate.</p>
        <p>The <b>OnItemBackColorChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
        <p>
          <b>Notes to Inheritors:</b> When overriding <b>OnItemBackColorChanged</b> in a derived class, be sure to call
            the base class's <b>OnItemBackColorChanged</b> method so that registered delegates receive the event.</p>
      </remarks>
      <example>
        <code lang="VB">      Public Class MyRasterImageList
         Inherits RasterImageList
         '.
         '.
         '.
         Protected Overrides Sub OnAutoDeselectItemsChanged(ByVal e As EventArgs)
            MyBase.OnAutoDeselectItemsChanged(e)
            Console.WriteLine("OnAutoDeselectItemsChanged is called")
         End Sub

         Protected Overrides Sub OnAutoDisposeImagesChanged(ByVal e As EventArgs)
            MyBase.OnAutoDisposeImagesChanged(e)
            Console.WriteLine("OnAutoDisposeImagesChanged is called")
         End Sub

         Protected Overrides Sub OnBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnBorderStyleChanged(e)
            Console.WriteLine("OnBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnDoubleBufferChanged(ByVal e As EventArgs)
            MyBase.OnDoubleBufferChanged(e)
            Console.WriteLine("OnDoubleBufferChanged is called")
         End Sub

         Protected Overrides Sub OnDrawItem(ByVal e As RasterImageListDrawItemEventArgs)
            MyBase.OnDrawItem(e)
            Console.WriteLine("OnDrawItem is called")
         End Sub

         Protected Overrides Sub OnEnableKeyboardChanged(ByVal e As EventArgs)
            MyBase.OnEnableKeyboardChanged(e)
            Console.WriteLine("OnEnableKeyboardChanged is called")
         End Sub

         Protected Overrides Sub OnEnableRubberBandSelectionChanged(ByVal e As EventArgs)
            MyBase.OnEnableRubberBandSelectionChanged(e)
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called")
         End Sub

         Protected Overrides Sub OnItemBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemBackColorChanged(e)
            Console.WriteLine("OnItemBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemBorderStyleChanged(e)
            Console.WriteLine("OnItemBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemForeColorChanged(e)
            Console.WriteLine("OnItemForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemImageBorderStyleChanged(e)
            Console.WriteLine("OnItemImageBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemImageSizeChanged(e)
            Console.WriteLine("OnItemImageSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedBackColorChanged(e)
            Console.WriteLine("OnItemSelectedBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedForeColorChanged(e)
            Console.WriteLine("OnItemSelectedForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSizeChanged(e)
            Console.WriteLine("OnItemSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSpacingSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSpacingSizeChanged(e)
            Console.WriteLine("OnItemSpacingSizeChanged is called")
         End Sub

         Protected Overrides Sub OnKeyDown(ByVal e As KeyEventArgs)
            MyBase.OnKeyDown(e)
            Console.WriteLine("OnKeyDown is called")
         End Sub

         Protected Overrides Sub OnLostFocus(ByVal e As EventArgs)
            MyBase.OnLostFocus(e)
            Console.WriteLine("OnLostFocus is called")
         End Sub

         Protected Overrides Sub OnMouseDown(ByVal e As MouseEventArgs)
            MyBase.OnMouseDown(e)
            Console.WriteLine("OnMouseDown is called")
         End Sub

         Protected Overrides Sub OnMouseMove(ByVal e As MouseEventArgs)
            MyBase.OnMouseMove(e)
            Console.WriteLine("OnMouseMove is called")
         End Sub

         Protected Overrides Sub OnMouseUp(ByVal e As MouseEventArgs)
            MyBase.OnMouseUp(e)
            Console.WriteLine("OnMouseUp is called")
         End Sub

         Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            MyBase.OnPaint(e)
            Console.WriteLine("OnPaint is called")
         End Sub

         Protected Overrides Sub OnPaintPropertiesChanged(ByVal e As EventArgs)
            MyBase.OnPaintPropertiesChanged(e)
            Console.WriteLine("OnPaintPropertiesChanged is called")
         End Sub

         Protected Overrides Sub OnScroll(ByVal e As EventArgs)
            MyBase.OnScroll(e)
            Console.WriteLine("OnScroll is called")
         End Sub

         Protected Overrides Sub OnScrollStyleChanged(ByVal e As EventArgs)
            MyBase.OnScrollStyleChanged(e)
            Console.WriteLine("OnScrollStyleChanged is called")
         End Sub

         Protected Overrides Sub OnSelectedIndexChanged(ByVal e As EventArgs)
            MyBase.OnSelectedIndexChanged(e)
            Console.WriteLine("OnSelectedIndexChanged is called")
         End Sub

         Protected Overrides Sub OnSelectionModeChanged(ByVal e As EventArgs)
            MyBase.OnSelectionModeChanged(e)
            Console.WriteLine("OnSelectionModeChanged is called")
         End Sub

         Protected Overrides Sub OnSelectUserImageChanged(ByVal e As EventArgs)
            MyBase.OnSelectUserImageChanged(e)
            Console.WriteLine("OnSelectUserImageChanged is called")
         End Sub

         Protected Overrides Sub OnShowItemTextChanged(ByVal e As EventArgs)
            MyBase.OnShowItemTextChanged(e)
            Console.WriteLine("OnShowItemTextChanged is called")
         End Sub

         Protected Overrides Sub OnSizeChanged(ByVal e As EventArgs)
            MyBase.OnSizeChanged(e)
            Console.WriteLine("OnSizeChanged is called")
         End Sub

         Protected Overrides Sub OnSorterChanged(ByVal e As EventArgs)
            MyBase.OnSorterChanged(e)
            Console.WriteLine("OnSorterChanged is called")
         End Sub

         Protected Overrides Sub OnSortingChanged(ByVal e As EventArgs)
            MyBase.OnSortingChanged(e)
            Console.WriteLine("OnSortingChanged is called")
         End Sub

         Protected Overrides Sub OnViewStyleChanged(ByVal e As EventArgs)
            MyBase.OnViewStyleChanged(e)
            Console.WriteLine("OnViewStyleChanged is called")
         End Sub
      End Class</code>
        <code lang="CS">      public class MyRasterImageList : RasterImageList
      {
         //.
         //.
         //.
         protected override void OnAutoDeselectItemsChanged(EventArgs e)
         {
            base.OnAutoDeselectItemsChanged(e);
            Console.WriteLine("OnAutoDeselectItemsChanged is called");
         }

         protected override void OnAutoDisposeImagesChanged(EventArgs e)
         {
            base.OnAutoDisposeImagesChanged(e);
            Console.WriteLine("OnAutoDisposeImagesChanged is called");
         }

         protected override void OnBorderStyleChanged(EventArgs e)
         {
            base.OnBorderStyleChanged(e);
            Console.WriteLine("OnBorderStyleChanged is called");
         }

         protected override void OnDoubleBufferChanged(EventArgs e)
         {
            base.OnDoubleBufferChanged(e);
            Console.WriteLine("OnDoubleBufferChanged is called");
         }

         protected override void OnDrawItem(RasterImageListDrawItemEventArgs e)
         {
            base.OnDrawItem(e);
            Console.WriteLine("OnDrawItem is called");
         }

         protected override void OnEnableKeyboardChanged(EventArgs e)
         {
            base.OnEnableKeyboardChanged(e);
            Console.WriteLine("OnEnableKeyboardChanged is called");
         }

         protected override void OnEnableRubberBandSelectionChanged(EventArgs e)
         {
            base.OnEnableRubberBandSelectionChanged(e);
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called");
         }

         protected override void OnItemBackColorChanged(EventArgs e)
         {
            base.OnItemBackColorChanged(e);
            Console.WriteLine("OnItemBackColorChanged is called");
         }

         protected override void OnItemBorderStyleChanged(EventArgs e)
         {
            base.OnItemBorderStyleChanged(e);
            Console.WriteLine("OnItemBorderStyleChanged is called");
         }

         protected override void OnItemForeColorChanged(EventArgs e)
         {
            base.OnItemForeColorChanged(e);
            Console.WriteLine("OnItemForeColorChanged is called");
         }

         protected override void OnItemImageBorderStyleChanged(EventArgs e)
         {
            base.OnItemImageBorderStyleChanged(e);
            Console.WriteLine("OnItemImageBorderStyleChanged is called");
         }

         protected override void OnItemImageSizeChanged(EventArgs e)
         {
            base.OnItemImageSizeChanged(e);
            Console.WriteLine("OnItemImageSizeChanged is called");
         }

         protected override void OnItemSelectedBackColorChanged(EventArgs e)
         {
            base.OnItemSelectedBackColorChanged(e);
            Console.WriteLine("OnItemSelectedBackColorChanged is called");
         }

         protected override void OnItemSelectedForeColorChanged(EventArgs e)
         {
            base.OnItemSelectedForeColorChanged(e);
            Console.WriteLine("OnItemSelectedForeColorChanged is called");
         }

         protected override void OnItemSizeChanged(EventArgs e)
         {
            base.OnItemSizeChanged(e);
            Console.WriteLine("OnItemSizeChanged is called");
         }

         protected override void OnItemSpacingSizeChanged(EventArgs e)
         {
            base.OnItemSpacingSizeChanged(e);
            Console.WriteLine("OnItemSpacingSizeChanged is called");
         }

         protected override void OnKeyDown(KeyEventArgs e)
         {
            base.OnKeyDown(e);
            Console.WriteLine("OnKeyDown is called");
         }

         protected override void OnLostFocus(EventArgs e)
         {
            base.OnLostFocus(e);
            Console.WriteLine("OnLostFocus is called");
         }

         protected override void OnMouseDown(MouseEventArgs e)
         {
            base.OnMouseDown(e);
            Console.WriteLine("OnMouseDown is called");
         }

         protected override void OnMouseMove(MouseEventArgs e)
         {
            base.OnMouseMove(e);
            Console.WriteLine("OnMouseMove is called");
         }

         protected override void OnMouseUp(MouseEventArgs e)
         {
            base.OnMouseUp(e);
            Console.WriteLine("OnMouseUp is called");
         }

         protected override void OnPaint(PaintEventArgs e)
         {
            base.OnPaint(e);
            Console.WriteLine("OnPaint is called");
         }

         protected override void OnPaintPropertiesChanged(EventArgs e)
         {
            base.OnPaintPropertiesChanged(e);
            Console.WriteLine("OnPaintPropertiesChanged is called");
         }

         protected override void OnScroll(EventArgs e)
         {
            base.OnScroll(e);
            Console.WriteLine("OnScroll is called");
         }

         protected override void OnScrollStyleChanged(EventArgs e)
         {
            base.OnScrollStyleChanged(e);
            Console.WriteLine("OnScrollStyleChanged is called");
         }

         protected override void OnSelectedIndexChanged(EventArgs e)
         {
            base.OnSelectedIndexChanged(e);
            Console.WriteLine("OnSelectedIndexChanged is called");
         }

         protected override void OnSelectionModeChanged(EventArgs e)
         {
            base.OnSelectionModeChanged(e);
            Console.WriteLine("OnSelectionModeChanged is called");
         }

         protected override void OnSelectUserImageChanged(EventArgs e)
         {
            base.OnSelectUserImageChanged(e);
            Console.WriteLine("OnSelectUserImageChanged is called");
         }

         protected override void OnShowItemTextChanged(EventArgs e)
         {
            base.OnShowItemTextChanged(e);
            Console.WriteLine("OnShowItemTextChanged is called");
         }

         protected override void OnSizeChanged(EventArgs e)
         {
            base.OnSizeChanged(e);
            Console.WriteLine("OnSizeChanged is called");
         }

         protected override void OnSorterChanged(EventArgs e)
         {
            base.OnSorterChanged(e);
            Console.WriteLine("OnSorterChanged is called");
         }

         protected override void OnSortingChanged(EventArgs e)
         {
            base.OnSortingChanged(e);
            Console.WriteLine("OnSortingChanged is called");
         }

         protected override void OnViewStyleChanged(EventArgs e)
         {
            base.OnViewStyleChanged(e);
            Console.WriteLine("OnViewStyleChanged is called");
         }
      }</code>
        <!--RasterImageList.OnBorderStyleChanged-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageList.OnItemSelectedBackColorChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageList.ItemSelectedBackColorChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
        <p>Raising an event invokes the event handler through a delegate.</p>
        <p>The <b>OnItemSelectedBackColorChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
        <p>
          <b>Notes to Inheritors:</b> When overriding <b>OnItemSelectedBackColorChanged</b> in a derived class, be sure to call
            the base class's <b>OnItemSelectedBackColorChanged</b> method so that registered delegates receive the event.</p>
      </remarks>
      <example>
        <code lang="VB">      Public Class MyRasterImageList
         Inherits RasterImageList
         '.
         '.
         '.
         Protected Overrides Sub OnAutoDeselectItemsChanged(ByVal e As EventArgs)
            MyBase.OnAutoDeselectItemsChanged(e)
            Console.WriteLine("OnAutoDeselectItemsChanged is called")
         End Sub

         Protected Overrides Sub OnAutoDisposeImagesChanged(ByVal e As EventArgs)
            MyBase.OnAutoDisposeImagesChanged(e)
            Console.WriteLine("OnAutoDisposeImagesChanged is called")
         End Sub

         Protected Overrides Sub OnBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnBorderStyleChanged(e)
            Console.WriteLine("OnBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnDoubleBufferChanged(ByVal e As EventArgs)
            MyBase.OnDoubleBufferChanged(e)
            Console.WriteLine("OnDoubleBufferChanged is called")
         End Sub

         Protected Overrides Sub OnDrawItem(ByVal e As RasterImageListDrawItemEventArgs)
            MyBase.OnDrawItem(e)
            Console.WriteLine("OnDrawItem is called")
         End Sub

         Protected Overrides Sub OnEnableKeyboardChanged(ByVal e As EventArgs)
            MyBase.OnEnableKeyboardChanged(e)
            Console.WriteLine("OnEnableKeyboardChanged is called")
         End Sub

         Protected Overrides Sub OnEnableRubberBandSelectionChanged(ByVal e As EventArgs)
            MyBase.OnEnableRubberBandSelectionChanged(e)
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called")
         End Sub

         Protected Overrides Sub OnItemBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemBackColorChanged(e)
            Console.WriteLine("OnItemBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemBorderStyleChanged(e)
            Console.WriteLine("OnItemBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemForeColorChanged(e)
            Console.WriteLine("OnItemForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemImageBorderStyleChanged(e)
            Console.WriteLine("OnItemImageBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemImageSizeChanged(e)
            Console.WriteLine("OnItemImageSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedBackColorChanged(e)
            Console.WriteLine("OnItemSelectedBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedForeColorChanged(e)
            Console.WriteLine("OnItemSelectedForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSizeChanged(e)
            Console.WriteLine("OnItemSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSpacingSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSpacingSizeChanged(e)
            Console.WriteLine("OnItemSpacingSizeChanged is called")
         End Sub

         Protected Overrides Sub OnKeyDown(ByVal e As KeyEventArgs)
            MyBase.OnKeyDown(e)
            Console.WriteLine("OnKeyDown is called")
         End Sub

         Protected Overrides Sub OnLostFocus(ByVal e As EventArgs)
            MyBase.OnLostFocus(e)
            Console.WriteLine("OnLostFocus is called")
         End Sub

         Protected Overrides Sub OnMouseDown(ByVal e As MouseEventArgs)
            MyBase.OnMouseDown(e)
            Console.WriteLine("OnMouseDown is called")
         End Sub

         Protected Overrides Sub OnMouseMove(ByVal e As MouseEventArgs)
            MyBase.OnMouseMove(e)
            Console.WriteLine("OnMouseMove is called")
         End Sub

         Protected Overrides Sub OnMouseUp(ByVal e As MouseEventArgs)
            MyBase.OnMouseUp(e)
            Console.WriteLine("OnMouseUp is called")
         End Sub

         Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            MyBase.OnPaint(e)
            Console.WriteLine("OnPaint is called")
         End Sub

         Protected Overrides Sub OnPaintPropertiesChanged(ByVal e As EventArgs)
            MyBase.OnPaintPropertiesChanged(e)
            Console.WriteLine("OnPaintPropertiesChanged is called")
         End Sub

         Protected Overrides Sub OnScroll(ByVal e As EventArgs)
            MyBase.OnScroll(e)
            Console.WriteLine("OnScroll is called")
         End Sub

         Protected Overrides Sub OnScrollStyleChanged(ByVal e As EventArgs)
            MyBase.OnScrollStyleChanged(e)
            Console.WriteLine("OnScrollStyleChanged is called")
         End Sub

         Protected Overrides Sub OnSelectedIndexChanged(ByVal e As EventArgs)
            MyBase.OnSelectedIndexChanged(e)
            Console.WriteLine("OnSelectedIndexChanged is called")
         End Sub

         Protected Overrides Sub OnSelectionModeChanged(ByVal e As EventArgs)
            MyBase.OnSelectionModeChanged(e)
            Console.WriteLine("OnSelectionModeChanged is called")
         End Sub

         Protected Overrides Sub OnSelectUserImageChanged(ByVal e As EventArgs)
            MyBase.OnSelectUserImageChanged(e)
            Console.WriteLine("OnSelectUserImageChanged is called")
         End Sub

         Protected Overrides Sub OnShowItemTextChanged(ByVal e As EventArgs)
            MyBase.OnShowItemTextChanged(e)
            Console.WriteLine("OnShowItemTextChanged is called")
         End Sub

         Protected Overrides Sub OnSizeChanged(ByVal e As EventArgs)
            MyBase.OnSizeChanged(e)
            Console.WriteLine("OnSizeChanged is called")
         End Sub

         Protected Overrides Sub OnSorterChanged(ByVal e As EventArgs)
            MyBase.OnSorterChanged(e)
            Console.WriteLine("OnSorterChanged is called")
         End Sub

         Protected Overrides Sub OnSortingChanged(ByVal e As EventArgs)
            MyBase.OnSortingChanged(e)
            Console.WriteLine("OnSortingChanged is called")
         End Sub

         Protected Overrides Sub OnViewStyleChanged(ByVal e As EventArgs)
            MyBase.OnViewStyleChanged(e)
            Console.WriteLine("OnViewStyleChanged is called")
         End Sub
      End Class</code>
        <code lang="CS">      public class MyRasterImageList : RasterImageList
      {
         //.
         //.
         //.
         protected override void OnAutoDeselectItemsChanged(EventArgs e)
         {
            base.OnAutoDeselectItemsChanged(e);
            Console.WriteLine("OnAutoDeselectItemsChanged is called");
         }

         protected override void OnAutoDisposeImagesChanged(EventArgs e)
         {
            base.OnAutoDisposeImagesChanged(e);
            Console.WriteLine("OnAutoDisposeImagesChanged is called");
         }

         protected override void OnBorderStyleChanged(EventArgs e)
         {
            base.OnBorderStyleChanged(e);
            Console.WriteLine("OnBorderStyleChanged is called");
         }

         protected override void OnDoubleBufferChanged(EventArgs e)
         {
            base.OnDoubleBufferChanged(e);
            Console.WriteLine("OnDoubleBufferChanged is called");
         }

         protected override void OnDrawItem(RasterImageListDrawItemEventArgs e)
         {
            base.OnDrawItem(e);
            Console.WriteLine("OnDrawItem is called");
         }

         protected override void OnEnableKeyboardChanged(EventArgs e)
         {
            base.OnEnableKeyboardChanged(e);
            Console.WriteLine("OnEnableKeyboardChanged is called");
         }

         protected override void OnEnableRubberBandSelectionChanged(EventArgs e)
         {
            base.OnEnableRubberBandSelectionChanged(e);
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called");
         }

         protected override void OnItemBackColorChanged(EventArgs e)
         {
            base.OnItemBackColorChanged(e);
            Console.WriteLine("OnItemBackColorChanged is called");
         }

         protected override void OnItemBorderStyleChanged(EventArgs e)
         {
            base.OnItemBorderStyleChanged(e);
            Console.WriteLine("OnItemBorderStyleChanged is called");
         }

         protected override void OnItemForeColorChanged(EventArgs e)
         {
            base.OnItemForeColorChanged(e);
            Console.WriteLine("OnItemForeColorChanged is called");
         }

         protected override void OnItemImageBorderStyleChanged(EventArgs e)
         {
            base.OnItemImageBorderStyleChanged(e);
            Console.WriteLine("OnItemImageBorderStyleChanged is called");
         }

         protected override void OnItemImageSizeChanged(EventArgs e)
         {
            base.OnItemImageSizeChanged(e);
            Console.WriteLine("OnItemImageSizeChanged is called");
         }

         protected override void OnItemSelectedBackColorChanged(EventArgs e)
         {
            base.OnItemSelectedBackColorChanged(e);
            Console.WriteLine("OnItemSelectedBackColorChanged is called");
         }

         protected override void OnItemSelectedForeColorChanged(EventArgs e)
         {
            base.OnItemSelectedForeColorChanged(e);
            Console.WriteLine("OnItemSelectedForeColorChanged is called");
         }

         protected override void OnItemSizeChanged(EventArgs e)
         {
            base.OnItemSizeChanged(e);
            Console.WriteLine("OnItemSizeChanged is called");
         }

         protected override void OnItemSpacingSizeChanged(EventArgs e)
         {
            base.OnItemSpacingSizeChanged(e);
            Console.WriteLine("OnItemSpacingSizeChanged is called");
         }

         protected override void OnKeyDown(KeyEventArgs e)
         {
            base.OnKeyDown(e);
            Console.WriteLine("OnKeyDown is called");
         }

         protected override void OnLostFocus(EventArgs e)
         {
            base.OnLostFocus(e);
            Console.WriteLine("OnLostFocus is called");
         }

         protected override void OnMouseDown(MouseEventArgs e)
         {
            base.OnMouseDown(e);
            Console.WriteLine("OnMouseDown is called");
         }

         protected override void OnMouseMove(MouseEventArgs e)
         {
            base.OnMouseMove(e);
            Console.WriteLine("OnMouseMove is called");
         }

         protected override void OnMouseUp(MouseEventArgs e)
         {
            base.OnMouseUp(e);
            Console.WriteLine("OnMouseUp is called");
         }

         protected override void OnPaint(PaintEventArgs e)
         {
            base.OnPaint(e);
            Console.WriteLine("OnPaint is called");
         }

         protected override void OnPaintPropertiesChanged(EventArgs e)
         {
            base.OnPaintPropertiesChanged(e);
            Console.WriteLine("OnPaintPropertiesChanged is called");
         }

         protected override void OnScroll(EventArgs e)
         {
            base.OnScroll(e);
            Console.WriteLine("OnScroll is called");
         }

         protected override void OnScrollStyleChanged(EventArgs e)
         {
            base.OnScrollStyleChanged(e);
            Console.WriteLine("OnScrollStyleChanged is called");
         }

         protected override void OnSelectedIndexChanged(EventArgs e)
         {
            base.OnSelectedIndexChanged(e);
            Console.WriteLine("OnSelectedIndexChanged is called");
         }

         protected override void OnSelectionModeChanged(EventArgs e)
         {
            base.OnSelectionModeChanged(e);
            Console.WriteLine("OnSelectionModeChanged is called");
         }

         protected override void OnSelectUserImageChanged(EventArgs e)
         {
            base.OnSelectUserImageChanged(e);
            Console.WriteLine("OnSelectUserImageChanged is called");
         }

         protected override void OnShowItemTextChanged(EventArgs e)
         {
            base.OnShowItemTextChanged(e);
            Console.WriteLine("OnShowItemTextChanged is called");
         }

         protected override void OnSizeChanged(EventArgs e)
         {
            base.OnSizeChanged(e);
            Console.WriteLine("OnSizeChanged is called");
         }

         protected override void OnSorterChanged(EventArgs e)
         {
            base.OnSorterChanged(e);
            Console.WriteLine("OnSorterChanged is called");
         }

         protected override void OnSortingChanged(EventArgs e)
         {
            base.OnSortingChanged(e);
            Console.WriteLine("OnSortingChanged is called");
         }

         protected override void OnViewStyleChanged(EventArgs e)
         {
            base.OnViewStyleChanged(e);
            Console.WriteLine("OnViewStyleChanged is called");
         }
      }</code>
        <!--RasterImageList.OnBorderStyleChanged-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageList.OnSelectUserImageChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageList.SelectUserImageChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
        <p>Raising an event invokes the event handler through a delegate.</p>
        <p>The <b>OnSelectUserImageChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
        <p>
          <b>Notes to Inheritors:</b> When overriding <b>OnSelectUserImageChanged</b> in a derived class, be sure to call
            the base class's <b>OnSelectUserImageChanged</b> method so that registered delegates receive the event.</p>
      </remarks>
      <example>
        <code lang="VB">      Public Class MyRasterImageList
         Inherits RasterImageList
         '.
         '.
         '.
         Protected Overrides Sub OnAutoDeselectItemsChanged(ByVal e As EventArgs)
            MyBase.OnAutoDeselectItemsChanged(e)
            Console.WriteLine("OnAutoDeselectItemsChanged is called")
         End Sub

         Protected Overrides Sub OnAutoDisposeImagesChanged(ByVal e As EventArgs)
            MyBase.OnAutoDisposeImagesChanged(e)
            Console.WriteLine("OnAutoDisposeImagesChanged is called")
         End Sub

         Protected Overrides Sub OnBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnBorderStyleChanged(e)
            Console.WriteLine("OnBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnDoubleBufferChanged(ByVal e As EventArgs)
            MyBase.OnDoubleBufferChanged(e)
            Console.WriteLine("OnDoubleBufferChanged is called")
         End Sub

         Protected Overrides Sub OnDrawItem(ByVal e As RasterImageListDrawItemEventArgs)
            MyBase.OnDrawItem(e)
            Console.WriteLine("OnDrawItem is called")
         End Sub

         Protected Overrides Sub OnEnableKeyboardChanged(ByVal e As EventArgs)
            MyBase.OnEnableKeyboardChanged(e)
            Console.WriteLine("OnEnableKeyboardChanged is called")
         End Sub

         Protected Overrides Sub OnEnableRubberBandSelectionChanged(ByVal e As EventArgs)
            MyBase.OnEnableRubberBandSelectionChanged(e)
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called")
         End Sub

         Protected Overrides Sub OnItemBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemBackColorChanged(e)
            Console.WriteLine("OnItemBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemBorderStyleChanged(e)
            Console.WriteLine("OnItemBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemForeColorChanged(e)
            Console.WriteLine("OnItemForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemImageBorderStyleChanged(e)
            Console.WriteLine("OnItemImageBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemImageSizeChanged(e)
            Console.WriteLine("OnItemImageSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedBackColorChanged(e)
            Console.WriteLine("OnItemSelectedBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedForeColorChanged(e)
            Console.WriteLine("OnItemSelectedForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSizeChanged(e)
            Console.WriteLine("OnItemSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSpacingSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSpacingSizeChanged(e)
            Console.WriteLine("OnItemSpacingSizeChanged is called")
         End Sub

         Protected Overrides Sub OnKeyDown(ByVal e As KeyEventArgs)
            MyBase.OnKeyDown(e)
            Console.WriteLine("OnKeyDown is called")
         End Sub

         Protected Overrides Sub OnLostFocus(ByVal e As EventArgs)
            MyBase.OnLostFocus(e)
            Console.WriteLine("OnLostFocus is called")
         End Sub

         Protected Overrides Sub OnMouseDown(ByVal e As MouseEventArgs)
            MyBase.OnMouseDown(e)
            Console.WriteLine("OnMouseDown is called")
         End Sub

         Protected Overrides Sub OnMouseMove(ByVal e As MouseEventArgs)
            MyBase.OnMouseMove(e)
            Console.WriteLine("OnMouseMove is called")
         End Sub

         Protected Overrides Sub OnMouseUp(ByVal e As MouseEventArgs)
            MyBase.OnMouseUp(e)
            Console.WriteLine("OnMouseUp is called")
         End Sub

         Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            MyBase.OnPaint(e)
            Console.WriteLine("OnPaint is called")
         End Sub

         Protected Overrides Sub OnPaintPropertiesChanged(ByVal e As EventArgs)
            MyBase.OnPaintPropertiesChanged(e)
            Console.WriteLine("OnPaintPropertiesChanged is called")
         End Sub

         Protected Overrides Sub OnScroll(ByVal e As EventArgs)
            MyBase.OnScroll(e)
            Console.WriteLine("OnScroll is called")
         End Sub

         Protected Overrides Sub OnScrollStyleChanged(ByVal e As EventArgs)
            MyBase.OnScrollStyleChanged(e)
            Console.WriteLine("OnScrollStyleChanged is called")
         End Sub

         Protected Overrides Sub OnSelectedIndexChanged(ByVal e As EventArgs)
            MyBase.OnSelectedIndexChanged(e)
            Console.WriteLine("OnSelectedIndexChanged is called")
         End Sub

         Protected Overrides Sub OnSelectionModeChanged(ByVal e As EventArgs)
            MyBase.OnSelectionModeChanged(e)
            Console.WriteLine("OnSelectionModeChanged is called")
         End Sub

         Protected Overrides Sub OnSelectUserImageChanged(ByVal e As EventArgs)
            MyBase.OnSelectUserImageChanged(e)
            Console.WriteLine("OnSelectUserImageChanged is called")
         End Sub

         Protected Overrides Sub OnShowItemTextChanged(ByVal e As EventArgs)
            MyBase.OnShowItemTextChanged(e)
            Console.WriteLine("OnShowItemTextChanged is called")
         End Sub

         Protected Overrides Sub OnSizeChanged(ByVal e As EventArgs)
            MyBase.OnSizeChanged(e)
            Console.WriteLine("OnSizeChanged is called")
         End Sub

         Protected Overrides Sub OnSorterChanged(ByVal e As EventArgs)
            MyBase.OnSorterChanged(e)
            Console.WriteLine("OnSorterChanged is called")
         End Sub

         Protected Overrides Sub OnSortingChanged(ByVal e As EventArgs)
            MyBase.OnSortingChanged(e)
            Console.WriteLine("OnSortingChanged is called")
         End Sub

         Protected Overrides Sub OnViewStyleChanged(ByVal e As EventArgs)
            MyBase.OnViewStyleChanged(e)
            Console.WriteLine("OnViewStyleChanged is called")
         End Sub
      End Class</code>
        <code lang="CS">      public class MyRasterImageList : RasterImageList
      {
         //.
         //.
         //.
         protected override void OnAutoDeselectItemsChanged(EventArgs e)
         {
            base.OnAutoDeselectItemsChanged(e);
            Console.WriteLine("OnAutoDeselectItemsChanged is called");
         }

         protected override void OnAutoDisposeImagesChanged(EventArgs e)
         {
            base.OnAutoDisposeImagesChanged(e);
            Console.WriteLine("OnAutoDisposeImagesChanged is called");
         }

         protected override void OnBorderStyleChanged(EventArgs e)
         {
            base.OnBorderStyleChanged(e);
            Console.WriteLine("OnBorderStyleChanged is called");
         }

         protected override void OnDoubleBufferChanged(EventArgs e)
         {
            base.OnDoubleBufferChanged(e);
            Console.WriteLine("OnDoubleBufferChanged is called");
         }

         protected override void OnDrawItem(RasterImageListDrawItemEventArgs e)
         {
            base.OnDrawItem(e);
            Console.WriteLine("OnDrawItem is called");
         }

         protected override void OnEnableKeyboardChanged(EventArgs e)
         {
            base.OnEnableKeyboardChanged(e);
            Console.WriteLine("OnEnableKeyboardChanged is called");
         }

         protected override void OnEnableRubberBandSelectionChanged(EventArgs e)
         {
            base.OnEnableRubberBandSelectionChanged(e);
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called");
         }

         protected override void OnItemBackColorChanged(EventArgs e)
         {
            base.OnItemBackColorChanged(e);
            Console.WriteLine("OnItemBackColorChanged is called");
         }

         protected override void OnItemBorderStyleChanged(EventArgs e)
         {
            base.OnItemBorderStyleChanged(e);
            Console.WriteLine("OnItemBorderStyleChanged is called");
         }

         protected override void OnItemForeColorChanged(EventArgs e)
         {
            base.OnItemForeColorChanged(e);
            Console.WriteLine("OnItemForeColorChanged is called");
         }

         protected override void OnItemImageBorderStyleChanged(EventArgs e)
         {
            base.OnItemImageBorderStyleChanged(e);
            Console.WriteLine("OnItemImageBorderStyleChanged is called");
         }

         protected override void OnItemImageSizeChanged(EventArgs e)
         {
            base.OnItemImageSizeChanged(e);
            Console.WriteLine("OnItemImageSizeChanged is called");
         }

         protected override void OnItemSelectedBackColorChanged(EventArgs e)
         {
            base.OnItemSelectedBackColorChanged(e);
            Console.WriteLine("OnItemSelectedBackColorChanged is called");
         }

         protected override void OnItemSelectedForeColorChanged(EventArgs e)
         {
            base.OnItemSelectedForeColorChanged(e);
            Console.WriteLine("OnItemSelectedForeColorChanged is called");
         }

         protected override void OnItemSizeChanged(EventArgs e)
         {
            base.OnItemSizeChanged(e);
            Console.WriteLine("OnItemSizeChanged is called");
         }

         protected override void OnItemSpacingSizeChanged(EventArgs e)
         {
            base.OnItemSpacingSizeChanged(e);
            Console.WriteLine("OnItemSpacingSizeChanged is called");
         }

         protected override void OnKeyDown(KeyEventArgs e)
         {
            base.OnKeyDown(e);
            Console.WriteLine("OnKeyDown is called");
         }

         protected override void OnLostFocus(EventArgs e)
         {
            base.OnLostFocus(e);
            Console.WriteLine("OnLostFocus is called");
         }

         protected override void OnMouseDown(MouseEventArgs e)
         {
            base.OnMouseDown(e);
            Console.WriteLine("OnMouseDown is called");
         }

         protected override void OnMouseMove(MouseEventArgs e)
         {
            base.OnMouseMove(e);
            Console.WriteLine("OnMouseMove is called");
         }

         protected override void OnMouseUp(MouseEventArgs e)
         {
            base.OnMouseUp(e);
            Console.WriteLine("OnMouseUp is called");
         }

         protected override void OnPaint(PaintEventArgs e)
         {
            base.OnPaint(e);
            Console.WriteLine("OnPaint is called");
         }

         protected override void OnPaintPropertiesChanged(EventArgs e)
         {
            base.OnPaintPropertiesChanged(e);
            Console.WriteLine("OnPaintPropertiesChanged is called");
         }

         protected override void OnScroll(EventArgs e)
         {
            base.OnScroll(e);
            Console.WriteLine("OnScroll is called");
         }

         protected override void OnScrollStyleChanged(EventArgs e)
         {
            base.OnScrollStyleChanged(e);
            Console.WriteLine("OnScrollStyleChanged is called");
         }

         protected override void OnSelectedIndexChanged(EventArgs e)
         {
            base.OnSelectedIndexChanged(e);
            Console.WriteLine("OnSelectedIndexChanged is called");
         }

         protected override void OnSelectionModeChanged(EventArgs e)
         {
            base.OnSelectionModeChanged(e);
            Console.WriteLine("OnSelectionModeChanged is called");
         }

         protected override void OnSelectUserImageChanged(EventArgs e)
         {
            base.OnSelectUserImageChanged(e);
            Console.WriteLine("OnSelectUserImageChanged is called");
         }

         protected override void OnShowItemTextChanged(EventArgs e)
         {
            base.OnShowItemTextChanged(e);
            Console.WriteLine("OnShowItemTextChanged is called");
         }

         protected override void OnSizeChanged(EventArgs e)
         {
            base.OnSizeChanged(e);
            Console.WriteLine("OnSizeChanged is called");
         }

         protected override void OnSorterChanged(EventArgs e)
         {
            base.OnSorterChanged(e);
            Console.WriteLine("OnSorterChanged is called");
         }

         protected override void OnSortingChanged(EventArgs e)
         {
            base.OnSortingChanged(e);
            Console.WriteLine("OnSortingChanged is called");
         }

         protected override void OnViewStyleChanged(EventArgs e)
         {
            base.OnViewStyleChanged(e);
            Console.WriteLine("OnViewStyleChanged is called");
         }
      }</code>
        <!--RasterImageList.OnBorderStyleChanged-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageList.OnSizeChanged(System.EventArgs)">
      <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)">Control.OnSizeChanged</see>.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
        <p>Raising an event invokes the event handler through a delegate.</p>
        <p>The <b>OnSizeChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
        <p>
          <b>Notes to Inheritors:</b> When overriding <b>OnSizeChanged</b> in a derived class, be sure to call
            the base class's <b>OnSizeChanged</b> method so that registered delegates receive the event.</p>
      </remarks>
      <example>
        <code lang="VB">      Public Class MyRasterImageList
         Inherits RasterImageList
         '.
         '.
         '.
         Protected Overrides Sub OnAutoDeselectItemsChanged(ByVal e As EventArgs)
            MyBase.OnAutoDeselectItemsChanged(e)
            Console.WriteLine("OnAutoDeselectItemsChanged is called")
         End Sub

         Protected Overrides Sub OnAutoDisposeImagesChanged(ByVal e As EventArgs)
            MyBase.OnAutoDisposeImagesChanged(e)
            Console.WriteLine("OnAutoDisposeImagesChanged is called")
         End Sub

         Protected Overrides Sub OnBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnBorderStyleChanged(e)
            Console.WriteLine("OnBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnDoubleBufferChanged(ByVal e As EventArgs)
            MyBase.OnDoubleBufferChanged(e)
            Console.WriteLine("OnDoubleBufferChanged is called")
         End Sub

         Protected Overrides Sub OnDrawItem(ByVal e As RasterImageListDrawItemEventArgs)
            MyBase.OnDrawItem(e)
            Console.WriteLine("OnDrawItem is called")
         End Sub

         Protected Overrides Sub OnEnableKeyboardChanged(ByVal e As EventArgs)
            MyBase.OnEnableKeyboardChanged(e)
            Console.WriteLine("OnEnableKeyboardChanged is called")
         End Sub

         Protected Overrides Sub OnEnableRubberBandSelectionChanged(ByVal e As EventArgs)
            MyBase.OnEnableRubberBandSelectionChanged(e)
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called")
         End Sub

         Protected Overrides Sub OnItemBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemBackColorChanged(e)
            Console.WriteLine("OnItemBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemBorderStyleChanged(e)
            Console.WriteLine("OnItemBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemForeColorChanged(e)
            Console.WriteLine("OnItemForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemImageBorderStyleChanged(e)
            Console.WriteLine("OnItemImageBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemImageSizeChanged(e)
            Console.WriteLine("OnItemImageSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedBackColorChanged(e)
            Console.WriteLine("OnItemSelectedBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedForeColorChanged(e)
            Console.WriteLine("OnItemSelectedForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSizeChanged(e)
            Console.WriteLine("OnItemSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSpacingSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSpacingSizeChanged(e)
            Console.WriteLine("OnItemSpacingSizeChanged is called")
         End Sub

         Protected Overrides Sub OnKeyDown(ByVal e As KeyEventArgs)
            MyBase.OnKeyDown(e)
            Console.WriteLine("OnKeyDown is called")
         End Sub

         Protected Overrides Sub OnLostFocus(ByVal e As EventArgs)
            MyBase.OnLostFocus(e)
            Console.WriteLine("OnLostFocus is called")
         End Sub

         Protected Overrides Sub OnMouseDown(ByVal e As MouseEventArgs)
            MyBase.OnMouseDown(e)
            Console.WriteLine("OnMouseDown is called")
         End Sub

         Protected Overrides Sub OnMouseMove(ByVal e As MouseEventArgs)
            MyBase.OnMouseMove(e)
            Console.WriteLine("OnMouseMove is called")
         End Sub

         Protected Overrides Sub OnMouseUp(ByVal e As MouseEventArgs)
            MyBase.OnMouseUp(e)
            Console.WriteLine("OnMouseUp is called")
         End Sub

         Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            MyBase.OnPaint(e)
            Console.WriteLine("OnPaint is called")
         End Sub

         Protected Overrides Sub OnPaintPropertiesChanged(ByVal e As EventArgs)
            MyBase.OnPaintPropertiesChanged(e)
            Console.WriteLine("OnPaintPropertiesChanged is called")
         End Sub

         Protected Overrides Sub OnScroll(ByVal e As EventArgs)
            MyBase.OnScroll(e)
            Console.WriteLine("OnScroll is called")
         End Sub

         Protected Overrides Sub OnScrollStyleChanged(ByVal e As EventArgs)
            MyBase.OnScrollStyleChanged(e)
            Console.WriteLine("OnScrollStyleChanged is called")
         End Sub

         Protected Overrides Sub OnSelectedIndexChanged(ByVal e As EventArgs)
            MyBase.OnSelectedIndexChanged(e)
            Console.WriteLine("OnSelectedIndexChanged is called")
         End Sub

         Protected Overrides Sub OnSelectionModeChanged(ByVal e As EventArgs)
            MyBase.OnSelectionModeChanged(e)
            Console.WriteLine("OnSelectionModeChanged is called")
         End Sub

         Protected Overrides Sub OnSelectUserImageChanged(ByVal e As EventArgs)
            MyBase.OnSelectUserImageChanged(e)
            Console.WriteLine("OnSelectUserImageChanged is called")
         End Sub

         Protected Overrides Sub OnShowItemTextChanged(ByVal e As EventArgs)
            MyBase.OnShowItemTextChanged(e)
            Console.WriteLine("OnShowItemTextChanged is called")
         End Sub

         Protected Overrides Sub OnSizeChanged(ByVal e As EventArgs)
            MyBase.OnSizeChanged(e)
            Console.WriteLine("OnSizeChanged is called")
         End Sub

         Protected Overrides Sub OnSorterChanged(ByVal e As EventArgs)
            MyBase.OnSorterChanged(e)
            Console.WriteLine("OnSorterChanged is called")
         End Sub

         Protected Overrides Sub OnSortingChanged(ByVal e As EventArgs)
            MyBase.OnSortingChanged(e)
            Console.WriteLine("OnSortingChanged is called")
         End Sub

         Protected Overrides Sub OnViewStyleChanged(ByVal e As EventArgs)
            MyBase.OnViewStyleChanged(e)
            Console.WriteLine("OnViewStyleChanged is called")
         End Sub
      End Class</code>
        <code lang="CS">      public class MyRasterImageList : RasterImageList
      {
         //.
         //.
         //.
         protected override void OnAutoDeselectItemsChanged(EventArgs e)
         {
            base.OnAutoDeselectItemsChanged(e);
            Console.WriteLine("OnAutoDeselectItemsChanged is called");
         }

         protected override void OnAutoDisposeImagesChanged(EventArgs e)
         {
            base.OnAutoDisposeImagesChanged(e);
            Console.WriteLine("OnAutoDisposeImagesChanged is called");
         }

         protected override void OnBorderStyleChanged(EventArgs e)
         {
            base.OnBorderStyleChanged(e);
            Console.WriteLine("OnBorderStyleChanged is called");
         }

         protected override void OnDoubleBufferChanged(EventArgs e)
         {
            base.OnDoubleBufferChanged(e);
            Console.WriteLine("OnDoubleBufferChanged is called");
         }

         protected override void OnDrawItem(RasterImageListDrawItemEventArgs e)
         {
            base.OnDrawItem(e);
            Console.WriteLine("OnDrawItem is called");
         }

         protected override void OnEnableKeyboardChanged(EventArgs e)
         {
            base.OnEnableKeyboardChanged(e);
            Console.WriteLine("OnEnableKeyboardChanged is called");
         }

         protected override void OnEnableRubberBandSelectionChanged(EventArgs e)
         {
            base.OnEnableRubberBandSelectionChanged(e);
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called");
         }

         protected override void OnItemBackColorChanged(EventArgs e)
         {
            base.OnItemBackColorChanged(e);
            Console.WriteLine("OnItemBackColorChanged is called");
         }

         protected override void OnItemBorderStyleChanged(EventArgs e)
         {
            base.OnItemBorderStyleChanged(e);
            Console.WriteLine("OnItemBorderStyleChanged is called");
         }

         protected override void OnItemForeColorChanged(EventArgs e)
         {
            base.OnItemForeColorChanged(e);
            Console.WriteLine("OnItemForeColorChanged is called");
         }

         protected override void OnItemImageBorderStyleChanged(EventArgs e)
         {
            base.OnItemImageBorderStyleChanged(e);
            Console.WriteLine("OnItemImageBorderStyleChanged is called");
         }

         protected override void OnItemImageSizeChanged(EventArgs e)
         {
            base.OnItemImageSizeChanged(e);
            Console.WriteLine("OnItemImageSizeChanged is called");
         }

         protected override void OnItemSelectedBackColorChanged(EventArgs e)
         {
            base.OnItemSelectedBackColorChanged(e);
            Console.WriteLine("OnItemSelectedBackColorChanged is called");
         }

         protected override void OnItemSelectedForeColorChanged(EventArgs e)
         {
            base.OnItemSelectedForeColorChanged(e);
            Console.WriteLine("OnItemSelectedForeColorChanged is called");
         }

         protected override void OnItemSizeChanged(EventArgs e)
         {
            base.OnItemSizeChanged(e);
            Console.WriteLine("OnItemSizeChanged is called");
         }

         protected override void OnItemSpacingSizeChanged(EventArgs e)
         {
            base.OnItemSpacingSizeChanged(e);
            Console.WriteLine("OnItemSpacingSizeChanged is called");
         }

         protected override void OnKeyDown(KeyEventArgs e)
         {
            base.OnKeyDown(e);
            Console.WriteLine("OnKeyDown is called");
         }

         protected override void OnLostFocus(EventArgs e)
         {
            base.OnLostFocus(e);
            Console.WriteLine("OnLostFocus is called");
         }

         protected override void OnMouseDown(MouseEventArgs e)
         {
            base.OnMouseDown(e);
            Console.WriteLine("OnMouseDown is called");
         }

         protected override void OnMouseMove(MouseEventArgs e)
         {
            base.OnMouseMove(e);
            Console.WriteLine("OnMouseMove is called");
         }

         protected override void OnMouseUp(MouseEventArgs e)
         {
            base.OnMouseUp(e);
            Console.WriteLine("OnMouseUp is called");
         }

         protected override void OnPaint(PaintEventArgs e)
         {
            base.OnPaint(e);
            Console.WriteLine("OnPaint is called");
         }

         protected override void OnPaintPropertiesChanged(EventArgs e)
         {
            base.OnPaintPropertiesChanged(e);
            Console.WriteLine("OnPaintPropertiesChanged is called");
         }

         protected override void OnScroll(EventArgs e)
         {
            base.OnScroll(e);
            Console.WriteLine("OnScroll is called");
         }

         protected override void OnScrollStyleChanged(EventArgs e)
         {
            base.OnScrollStyleChanged(e);
            Console.WriteLine("OnScrollStyleChanged is called");
         }

         protected override void OnSelectedIndexChanged(EventArgs e)
         {
            base.OnSelectedIndexChanged(e);
            Console.WriteLine("OnSelectedIndexChanged is called");
         }

         protected override void OnSelectionModeChanged(EventArgs e)
         {
            base.OnSelectionModeChanged(e);
            Console.WriteLine("OnSelectionModeChanged is called");
         }

         protected override void OnSelectUserImageChanged(EventArgs e)
         {
            base.OnSelectUserImageChanged(e);
            Console.WriteLine("OnSelectUserImageChanged is called");
         }

         protected override void OnShowItemTextChanged(EventArgs e)
         {
            base.OnShowItemTextChanged(e);
            Console.WriteLine("OnShowItemTextChanged is called");
         }

         protected override void OnSizeChanged(EventArgs e)
         {
            base.OnSizeChanged(e);
            Console.WriteLine("OnSizeChanged is called");
         }

         protected override void OnSorterChanged(EventArgs e)
         {
            base.OnSorterChanged(e);
            Console.WriteLine("OnSorterChanged is called");
         }

         protected override void OnSortingChanged(EventArgs e)
         {
            base.OnSortingChanged(e);
            Console.WriteLine("OnSortingChanged is called");
         }

         protected override void OnViewStyleChanged(EventArgs e)
         {
            base.OnViewStyleChanged(e);
            Console.WriteLine("OnViewStyleChanged is called");
         }
      }</code>
        <!--RasterImageList.OnBorderStyleChanged-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageList.WndProc(System.Windows.Forms.Message@)">
      <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)">Control.WndProc</see>.
            </summary>
      <param name="m">The Windows <see cref="T:System.Windows.Forms.Message" /> to process.</param>
      <remarks>
        <para>The WndProc method corresponds exactly to the Windows WindowProc function. For more information about processing Windows messages, see the WindowProc function documentation in the Windows Platform SDK reference located in the MSDN library at http://msdn.microsoft.com/library.</para>
        <para>
          <b>Notes to Inheritors</b> Inheriting controls should call the base class's WndProc method to process any messages that they do not handle. </para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageList.OnSelectionModeChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageList.SelectionModeChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
        <p>Raising an event invokes the event handler through a delegate.</p>
        <p>The <b>OnSelectionModeChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
        <p>
          <b>Notes to Inheritors:</b> When overriding <b>OnSelectionModeChanged</b> in a derived class, be sure to call
            the base class's <b>OnSelectionModeChanged</b> method so that registered delegates receive the event.</p>
      </remarks>
      <example>
        <code lang="VB">      Public Class MyRasterImageList
         Inherits RasterImageList
         '.
         '.
         '.
         Protected Overrides Sub OnAutoDeselectItemsChanged(ByVal e As EventArgs)
            MyBase.OnAutoDeselectItemsChanged(e)
            Console.WriteLine("OnAutoDeselectItemsChanged is called")
         End Sub

         Protected Overrides Sub OnAutoDisposeImagesChanged(ByVal e As EventArgs)
            MyBase.OnAutoDisposeImagesChanged(e)
            Console.WriteLine("OnAutoDisposeImagesChanged is called")
         End Sub

         Protected Overrides Sub OnBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnBorderStyleChanged(e)
            Console.WriteLine("OnBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnDoubleBufferChanged(ByVal e As EventArgs)
            MyBase.OnDoubleBufferChanged(e)
            Console.WriteLine("OnDoubleBufferChanged is called")
         End Sub

         Protected Overrides Sub OnDrawItem(ByVal e As RasterImageListDrawItemEventArgs)
            MyBase.OnDrawItem(e)
            Console.WriteLine("OnDrawItem is called")
         End Sub

         Protected Overrides Sub OnEnableKeyboardChanged(ByVal e As EventArgs)
            MyBase.OnEnableKeyboardChanged(e)
            Console.WriteLine("OnEnableKeyboardChanged is called")
         End Sub

         Protected Overrides Sub OnEnableRubberBandSelectionChanged(ByVal e As EventArgs)
            MyBase.OnEnableRubberBandSelectionChanged(e)
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called")
         End Sub

         Protected Overrides Sub OnItemBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemBackColorChanged(e)
            Console.WriteLine("OnItemBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemBorderStyleChanged(e)
            Console.WriteLine("OnItemBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemForeColorChanged(e)
            Console.WriteLine("OnItemForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemImageBorderStyleChanged(e)
            Console.WriteLine("OnItemImageBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemImageSizeChanged(e)
            Console.WriteLine("OnItemImageSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedBackColorChanged(e)
            Console.WriteLine("OnItemSelectedBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedForeColorChanged(e)
            Console.WriteLine("OnItemSelectedForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSizeChanged(e)
            Console.WriteLine("OnItemSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSpacingSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSpacingSizeChanged(e)
            Console.WriteLine("OnItemSpacingSizeChanged is called")
         End Sub

         Protected Overrides Sub OnKeyDown(ByVal e As KeyEventArgs)
            MyBase.OnKeyDown(e)
            Console.WriteLine("OnKeyDown is called")
         End Sub

         Protected Overrides Sub OnLostFocus(ByVal e As EventArgs)
            MyBase.OnLostFocus(e)
            Console.WriteLine("OnLostFocus is called")
         End Sub

         Protected Overrides Sub OnMouseDown(ByVal e As MouseEventArgs)
            MyBase.OnMouseDown(e)
            Console.WriteLine("OnMouseDown is called")
         End Sub

         Protected Overrides Sub OnMouseMove(ByVal e As MouseEventArgs)
            MyBase.OnMouseMove(e)
            Console.WriteLine("OnMouseMove is called")
         End Sub

         Protected Overrides Sub OnMouseUp(ByVal e As MouseEventArgs)
            MyBase.OnMouseUp(e)
            Console.WriteLine("OnMouseUp is called")
         End Sub

         Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            MyBase.OnPaint(e)
            Console.WriteLine("OnPaint is called")
         End Sub

         Protected Overrides Sub OnPaintPropertiesChanged(ByVal e As EventArgs)
            MyBase.OnPaintPropertiesChanged(e)
            Console.WriteLine("OnPaintPropertiesChanged is called")
         End Sub

         Protected Overrides Sub OnScroll(ByVal e As EventArgs)
            MyBase.OnScroll(e)
            Console.WriteLine("OnScroll is called")
         End Sub

         Protected Overrides Sub OnScrollStyleChanged(ByVal e As EventArgs)
            MyBase.OnScrollStyleChanged(e)
            Console.WriteLine("OnScrollStyleChanged is called")
         End Sub

         Protected Overrides Sub OnSelectedIndexChanged(ByVal e As EventArgs)
            MyBase.OnSelectedIndexChanged(e)
            Console.WriteLine("OnSelectedIndexChanged is called")
         End Sub

         Protected Overrides Sub OnSelectionModeChanged(ByVal e As EventArgs)
            MyBase.OnSelectionModeChanged(e)
            Console.WriteLine("OnSelectionModeChanged is called")
         End Sub

         Protected Overrides Sub OnSelectUserImageChanged(ByVal e As EventArgs)
            MyBase.OnSelectUserImageChanged(e)
            Console.WriteLine("OnSelectUserImageChanged is called")
         End Sub

         Protected Overrides Sub OnShowItemTextChanged(ByVal e As EventArgs)
            MyBase.OnShowItemTextChanged(e)
            Console.WriteLine("OnShowItemTextChanged is called")
         End Sub

         Protected Overrides Sub OnSizeChanged(ByVal e As EventArgs)
            MyBase.OnSizeChanged(e)
            Console.WriteLine("OnSizeChanged is called")
         End Sub

         Protected Overrides Sub OnSorterChanged(ByVal e As EventArgs)
            MyBase.OnSorterChanged(e)
            Console.WriteLine("OnSorterChanged is called")
         End Sub

         Protected Overrides Sub OnSortingChanged(ByVal e As EventArgs)
            MyBase.OnSortingChanged(e)
            Console.WriteLine("OnSortingChanged is called")
         End Sub

         Protected Overrides Sub OnViewStyleChanged(ByVal e As EventArgs)
            MyBase.OnViewStyleChanged(e)
            Console.WriteLine("OnViewStyleChanged is called")
         End Sub
      End Class</code>
        <code lang="CS">      public class MyRasterImageList : RasterImageList
      {
         //.
         //.
         //.
         protected override void OnAutoDeselectItemsChanged(EventArgs e)
         {
            base.OnAutoDeselectItemsChanged(e);
            Console.WriteLine("OnAutoDeselectItemsChanged is called");
         }

         protected override void OnAutoDisposeImagesChanged(EventArgs e)
         {
            base.OnAutoDisposeImagesChanged(e);
            Console.WriteLine("OnAutoDisposeImagesChanged is called");
         }

         protected override void OnBorderStyleChanged(EventArgs e)
         {
            base.OnBorderStyleChanged(e);
            Console.WriteLine("OnBorderStyleChanged is called");
         }

         protected override void OnDoubleBufferChanged(EventArgs e)
         {
            base.OnDoubleBufferChanged(e);
            Console.WriteLine("OnDoubleBufferChanged is called");
         }

         protected override void OnDrawItem(RasterImageListDrawItemEventArgs e)
         {
            base.OnDrawItem(e);
            Console.WriteLine("OnDrawItem is called");
         }

         protected override void OnEnableKeyboardChanged(EventArgs e)
         {
            base.OnEnableKeyboardChanged(e);
            Console.WriteLine("OnEnableKeyboardChanged is called");
         }

         protected override void OnEnableRubberBandSelectionChanged(EventArgs e)
         {
            base.OnEnableRubberBandSelectionChanged(e);
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called");
         }

         protected override void OnItemBackColorChanged(EventArgs e)
         {
            base.OnItemBackColorChanged(e);
            Console.WriteLine("OnItemBackColorChanged is called");
         }

         protected override void OnItemBorderStyleChanged(EventArgs e)
         {
            base.OnItemBorderStyleChanged(e);
            Console.WriteLine("OnItemBorderStyleChanged is called");
         }

         protected override void OnItemForeColorChanged(EventArgs e)
         {
            base.OnItemForeColorChanged(e);
            Console.WriteLine("OnItemForeColorChanged is called");
         }

         protected override void OnItemImageBorderStyleChanged(EventArgs e)
         {
            base.OnItemImageBorderStyleChanged(e);
            Console.WriteLine("OnItemImageBorderStyleChanged is called");
         }

         protected override void OnItemImageSizeChanged(EventArgs e)
         {
            base.OnItemImageSizeChanged(e);
            Console.WriteLine("OnItemImageSizeChanged is called");
         }

         protected override void OnItemSelectedBackColorChanged(EventArgs e)
         {
            base.OnItemSelectedBackColorChanged(e);
            Console.WriteLine("OnItemSelectedBackColorChanged is called");
         }

         protected override void OnItemSelectedForeColorChanged(EventArgs e)
         {
            base.OnItemSelectedForeColorChanged(e);
            Console.WriteLine("OnItemSelectedForeColorChanged is called");
         }

         protected override void OnItemSizeChanged(EventArgs e)
         {
            base.OnItemSizeChanged(e);
            Console.WriteLine("OnItemSizeChanged is called");
         }

         protected override void OnItemSpacingSizeChanged(EventArgs e)
         {
            base.OnItemSpacingSizeChanged(e);
            Console.WriteLine("OnItemSpacingSizeChanged is called");
         }

         protected override void OnKeyDown(KeyEventArgs e)
         {
            base.OnKeyDown(e);
            Console.WriteLine("OnKeyDown is called");
         }

         protected override void OnLostFocus(EventArgs e)
         {
            base.OnLostFocus(e);
            Console.WriteLine("OnLostFocus is called");
         }

         protected override void OnMouseDown(MouseEventArgs e)
         {
            base.OnMouseDown(e);
            Console.WriteLine("OnMouseDown is called");
         }

         protected override void OnMouseMove(MouseEventArgs e)
         {
            base.OnMouseMove(e);
            Console.WriteLine("OnMouseMove is called");
         }

         protected override void OnMouseUp(MouseEventArgs e)
         {
            base.OnMouseUp(e);
            Console.WriteLine("OnMouseUp is called");
         }

         protected override void OnPaint(PaintEventArgs e)
         {
            base.OnPaint(e);
            Console.WriteLine("OnPaint is called");
         }

         protected override void OnPaintPropertiesChanged(EventArgs e)
         {
            base.OnPaintPropertiesChanged(e);
            Console.WriteLine("OnPaintPropertiesChanged is called");
         }

         protected override void OnScroll(EventArgs e)
         {
            base.OnScroll(e);
            Console.WriteLine("OnScroll is called");
         }

         protected override void OnScrollStyleChanged(EventArgs e)
         {
            base.OnScrollStyleChanged(e);
            Console.WriteLine("OnScrollStyleChanged is called");
         }

         protected override void OnSelectedIndexChanged(EventArgs e)
         {
            base.OnSelectedIndexChanged(e);
            Console.WriteLine("OnSelectedIndexChanged is called");
         }

         protected override void OnSelectionModeChanged(EventArgs e)
         {
            base.OnSelectionModeChanged(e);
            Console.WriteLine("OnSelectionModeChanged is called");
         }

         protected override void OnSelectUserImageChanged(EventArgs e)
         {
            base.OnSelectUserImageChanged(e);
            Console.WriteLine("OnSelectUserImageChanged is called");
         }

         protected override void OnShowItemTextChanged(EventArgs e)
         {
            base.OnShowItemTextChanged(e);
            Console.WriteLine("OnShowItemTextChanged is called");
         }

         protected override void OnSizeChanged(EventArgs e)
         {
            base.OnSizeChanged(e);
            Console.WriteLine("OnSizeChanged is called");
         }

         protected override void OnSorterChanged(EventArgs e)
         {
            base.OnSorterChanged(e);
            Console.WriteLine("OnSorterChanged is called");
         }

         protected override void OnSortingChanged(EventArgs e)
         {
            base.OnSortingChanged(e);
            Console.WriteLine("OnSortingChanged is called");
         }

         protected override void OnViewStyleChanged(EventArgs e)
         {
            base.OnViewStyleChanged(e);
            Console.WriteLine("OnViewStyleChanged is called");
         }
      }</code>
        <!--RasterImageList.OnBorderStyleChanged-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageList.OnEnableRubberBandSelectionChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageList.EnableRubberBandSelectionChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
        <p>Raising an event invokes the event handler through a delegate.</p>
        <p>The <b>OnEnableRubberBandSelectionChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
        <p>
          <b>Notes to Inheritors:</b> When overriding <b>OnEnableRubberBandSelectionChanged</b> in a derived class, be sure to call
            the base class's <b>OnEnableRubberBandSelectionChanged</b> method so that registered delegates receive the event.</p>
      </remarks>
      <example>
        <code lang="VB">      Public Class MyRasterImageList
         Inherits RasterImageList
         '.
         '.
         '.
         Protected Overrides Sub OnAutoDeselectItemsChanged(ByVal e As EventArgs)
            MyBase.OnAutoDeselectItemsChanged(e)
            Console.WriteLine("OnAutoDeselectItemsChanged is called")
         End Sub

         Protected Overrides Sub OnAutoDisposeImagesChanged(ByVal e As EventArgs)
            MyBase.OnAutoDisposeImagesChanged(e)
            Console.WriteLine("OnAutoDisposeImagesChanged is called")
         End Sub

         Protected Overrides Sub OnBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnBorderStyleChanged(e)
            Console.WriteLine("OnBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnDoubleBufferChanged(ByVal e As EventArgs)
            MyBase.OnDoubleBufferChanged(e)
            Console.WriteLine("OnDoubleBufferChanged is called")
         End Sub

         Protected Overrides Sub OnDrawItem(ByVal e As RasterImageListDrawItemEventArgs)
            MyBase.OnDrawItem(e)
            Console.WriteLine("OnDrawItem is called")
         End Sub

         Protected Overrides Sub OnEnableKeyboardChanged(ByVal e As EventArgs)
            MyBase.OnEnableKeyboardChanged(e)
            Console.WriteLine("OnEnableKeyboardChanged is called")
         End Sub

         Protected Overrides Sub OnEnableRubberBandSelectionChanged(ByVal e As EventArgs)
            MyBase.OnEnableRubberBandSelectionChanged(e)
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called")
         End Sub

         Protected Overrides Sub OnItemBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemBackColorChanged(e)
            Console.WriteLine("OnItemBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemBorderStyleChanged(e)
            Console.WriteLine("OnItemBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemForeColorChanged(e)
            Console.WriteLine("OnItemForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemImageBorderStyleChanged(e)
            Console.WriteLine("OnItemImageBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemImageSizeChanged(e)
            Console.WriteLine("OnItemImageSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedBackColorChanged(e)
            Console.WriteLine("OnItemSelectedBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedForeColorChanged(e)
            Console.WriteLine("OnItemSelectedForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSizeChanged(e)
            Console.WriteLine("OnItemSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSpacingSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSpacingSizeChanged(e)
            Console.WriteLine("OnItemSpacingSizeChanged is called")
         End Sub

         Protected Overrides Sub OnKeyDown(ByVal e As KeyEventArgs)
            MyBase.OnKeyDown(e)
            Console.WriteLine("OnKeyDown is called")
         End Sub

         Protected Overrides Sub OnLostFocus(ByVal e As EventArgs)
            MyBase.OnLostFocus(e)
            Console.WriteLine("OnLostFocus is called")
         End Sub

         Protected Overrides Sub OnMouseDown(ByVal e As MouseEventArgs)
            MyBase.OnMouseDown(e)
            Console.WriteLine("OnMouseDown is called")
         End Sub

         Protected Overrides Sub OnMouseMove(ByVal e As MouseEventArgs)
            MyBase.OnMouseMove(e)
            Console.WriteLine("OnMouseMove is called")
         End Sub

         Protected Overrides Sub OnMouseUp(ByVal e As MouseEventArgs)
            MyBase.OnMouseUp(e)
            Console.WriteLine("OnMouseUp is called")
         End Sub

         Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            MyBase.OnPaint(e)
            Console.WriteLine("OnPaint is called")
         End Sub

         Protected Overrides Sub OnPaintPropertiesChanged(ByVal e As EventArgs)
            MyBase.OnPaintPropertiesChanged(e)
            Console.WriteLine("OnPaintPropertiesChanged is called")
         End Sub

         Protected Overrides Sub OnScroll(ByVal e As EventArgs)
            MyBase.OnScroll(e)
            Console.WriteLine("OnScroll is called")
         End Sub

         Protected Overrides Sub OnScrollStyleChanged(ByVal e As EventArgs)
            MyBase.OnScrollStyleChanged(e)
            Console.WriteLine("OnScrollStyleChanged is called")
         End Sub

         Protected Overrides Sub OnSelectedIndexChanged(ByVal e As EventArgs)
            MyBase.OnSelectedIndexChanged(e)
            Console.WriteLine("OnSelectedIndexChanged is called")
         End Sub

         Protected Overrides Sub OnSelectionModeChanged(ByVal e As EventArgs)
            MyBase.OnSelectionModeChanged(e)
            Console.WriteLine("OnSelectionModeChanged is called")
         End Sub

         Protected Overrides Sub OnSelectUserImageChanged(ByVal e As EventArgs)
            MyBase.OnSelectUserImageChanged(e)
            Console.WriteLine("OnSelectUserImageChanged is called")
         End Sub

         Protected Overrides Sub OnShowItemTextChanged(ByVal e As EventArgs)
            MyBase.OnShowItemTextChanged(e)
            Console.WriteLine("OnShowItemTextChanged is called")
         End Sub

         Protected Overrides Sub OnSizeChanged(ByVal e As EventArgs)
            MyBase.OnSizeChanged(e)
            Console.WriteLine("OnSizeChanged is called")
         End Sub

         Protected Overrides Sub OnSorterChanged(ByVal e As EventArgs)
            MyBase.OnSorterChanged(e)
            Console.WriteLine("OnSorterChanged is called")
         End Sub

         Protected Overrides Sub OnSortingChanged(ByVal e As EventArgs)
            MyBase.OnSortingChanged(e)
            Console.WriteLine("OnSortingChanged is called")
         End Sub

         Protected Overrides Sub OnViewStyleChanged(ByVal e As EventArgs)
            MyBase.OnViewStyleChanged(e)
            Console.WriteLine("OnViewStyleChanged is called")
         End Sub
      End Class</code>
        <code lang="CS">      public class MyRasterImageList : RasterImageList
      {
         //.
         //.
         //.
         protected override void OnAutoDeselectItemsChanged(EventArgs e)
         {
            base.OnAutoDeselectItemsChanged(e);
            Console.WriteLine("OnAutoDeselectItemsChanged is called");
         }

         protected override void OnAutoDisposeImagesChanged(EventArgs e)
         {
            base.OnAutoDisposeImagesChanged(e);
            Console.WriteLine("OnAutoDisposeImagesChanged is called");
         }

         protected override void OnBorderStyleChanged(EventArgs e)
         {
            base.OnBorderStyleChanged(e);
            Console.WriteLine("OnBorderStyleChanged is called");
         }

         protected override void OnDoubleBufferChanged(EventArgs e)
         {
            base.OnDoubleBufferChanged(e);
            Console.WriteLine("OnDoubleBufferChanged is called");
         }

         protected override void OnDrawItem(RasterImageListDrawItemEventArgs e)
         {
            base.OnDrawItem(e);
            Console.WriteLine("OnDrawItem is called");
         }

         protected override void OnEnableKeyboardChanged(EventArgs e)
         {
            base.OnEnableKeyboardChanged(e);
            Console.WriteLine("OnEnableKeyboardChanged is called");
         }

         protected override void OnEnableRubberBandSelectionChanged(EventArgs e)
         {
            base.OnEnableRubberBandSelectionChanged(e);
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called");
         }

         protected override void OnItemBackColorChanged(EventArgs e)
         {
            base.OnItemBackColorChanged(e);
            Console.WriteLine("OnItemBackColorChanged is called");
         }

         protected override void OnItemBorderStyleChanged(EventArgs e)
         {
            base.OnItemBorderStyleChanged(e);
            Console.WriteLine("OnItemBorderStyleChanged is called");
         }

         protected override void OnItemForeColorChanged(EventArgs e)
         {
            base.OnItemForeColorChanged(e);
            Console.WriteLine("OnItemForeColorChanged is called");
         }

         protected override void OnItemImageBorderStyleChanged(EventArgs e)
         {
            base.OnItemImageBorderStyleChanged(e);
            Console.WriteLine("OnItemImageBorderStyleChanged is called");
         }

         protected override void OnItemImageSizeChanged(EventArgs e)
         {
            base.OnItemImageSizeChanged(e);
            Console.WriteLine("OnItemImageSizeChanged is called");
         }

         protected override void OnItemSelectedBackColorChanged(EventArgs e)
         {
            base.OnItemSelectedBackColorChanged(e);
            Console.WriteLine("OnItemSelectedBackColorChanged is called");
         }

         protected override void OnItemSelectedForeColorChanged(EventArgs e)
         {
            base.OnItemSelectedForeColorChanged(e);
            Console.WriteLine("OnItemSelectedForeColorChanged is called");
         }

         protected override void OnItemSizeChanged(EventArgs e)
         {
            base.OnItemSizeChanged(e);
            Console.WriteLine("OnItemSizeChanged is called");
         }

         protected override void OnItemSpacingSizeChanged(EventArgs e)
         {
            base.OnItemSpacingSizeChanged(e);
            Console.WriteLine("OnItemSpacingSizeChanged is called");
         }

         protected override void OnKeyDown(KeyEventArgs e)
         {
            base.OnKeyDown(e);
            Console.WriteLine("OnKeyDown is called");
         }

         protected override void OnLostFocus(EventArgs e)
         {
            base.OnLostFocus(e);
            Console.WriteLine("OnLostFocus is called");
         }

         protected override void OnMouseDown(MouseEventArgs e)
         {
            base.OnMouseDown(e);
            Console.WriteLine("OnMouseDown is called");
         }

         protected override void OnMouseMove(MouseEventArgs e)
         {
            base.OnMouseMove(e);
            Console.WriteLine("OnMouseMove is called");
         }

         protected override void OnMouseUp(MouseEventArgs e)
         {
            base.OnMouseUp(e);
            Console.WriteLine("OnMouseUp is called");
         }

         protected override void OnPaint(PaintEventArgs e)
         {
            base.OnPaint(e);
            Console.WriteLine("OnPaint is called");
         }

         protected override void OnPaintPropertiesChanged(EventArgs e)
         {
            base.OnPaintPropertiesChanged(e);
            Console.WriteLine("OnPaintPropertiesChanged is called");
         }

         protected override void OnScroll(EventArgs e)
         {
            base.OnScroll(e);
            Console.WriteLine("OnScroll is called");
         }

         protected override void OnScrollStyleChanged(EventArgs e)
         {
            base.OnScrollStyleChanged(e);
            Console.WriteLine("OnScrollStyleChanged is called");
         }

         protected override void OnSelectedIndexChanged(EventArgs e)
         {
            base.OnSelectedIndexChanged(e);
            Console.WriteLine("OnSelectedIndexChanged is called");
         }

         protected override void OnSelectionModeChanged(EventArgs e)
         {
            base.OnSelectionModeChanged(e);
            Console.WriteLine("OnSelectionModeChanged is called");
         }

         protected override void OnSelectUserImageChanged(EventArgs e)
         {
            base.OnSelectUserImageChanged(e);
            Console.WriteLine("OnSelectUserImageChanged is called");
         }

         protected override void OnShowItemTextChanged(EventArgs e)
         {
            base.OnShowItemTextChanged(e);
            Console.WriteLine("OnShowItemTextChanged is called");
         }

         protected override void OnSizeChanged(EventArgs e)
         {
            base.OnSizeChanged(e);
            Console.WriteLine("OnSizeChanged is called");
         }

         protected override void OnSorterChanged(EventArgs e)
         {
            base.OnSorterChanged(e);
            Console.WriteLine("OnSorterChanged is called");
         }

         protected override void OnSortingChanged(EventArgs e)
         {
            base.OnSortingChanged(e);
            Console.WriteLine("OnSortingChanged is called");
         }

         protected override void OnViewStyleChanged(EventArgs e)
         {
            base.OnViewStyleChanged(e);
            Console.WriteLine("OnViewStyleChanged is called");
         }
      }</code>
        <!--RasterImageList.OnBorderStyleChanged-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageList.OnAutoDeselectItemsChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageList.AutoDeselectItemsChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
        <p>Raising an event invokes the event handler through a delegate.</p>
        <p>The <b>OnAutoDeselectItemsChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
        <p>
          <b>Notes to Inheritors:</b> When overriding <b>OnAutoDeselectItemsChanged</b> in a derived class, be sure to call
            the base class's <b>OnAutoDeselectItemsChanged</b> method so that registered delegates receive the event.</p>
      </remarks>
      <example>
        <code lang="VB">      Public Class MyRasterImageList
         Inherits RasterImageList
         '.
         '.
         '.
         Protected Overrides Sub OnAutoDeselectItemsChanged(ByVal e As EventArgs)
            MyBase.OnAutoDeselectItemsChanged(e)
            Console.WriteLine("OnAutoDeselectItemsChanged is called")
         End Sub

         Protected Overrides Sub OnAutoDisposeImagesChanged(ByVal e As EventArgs)
            MyBase.OnAutoDisposeImagesChanged(e)
            Console.WriteLine("OnAutoDisposeImagesChanged is called")
         End Sub

         Protected Overrides Sub OnBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnBorderStyleChanged(e)
            Console.WriteLine("OnBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnDoubleBufferChanged(ByVal e As EventArgs)
            MyBase.OnDoubleBufferChanged(e)
            Console.WriteLine("OnDoubleBufferChanged is called")
         End Sub

         Protected Overrides Sub OnDrawItem(ByVal e As RasterImageListDrawItemEventArgs)
            MyBase.OnDrawItem(e)
            Console.WriteLine("OnDrawItem is called")
         End Sub

         Protected Overrides Sub OnEnableKeyboardChanged(ByVal e As EventArgs)
            MyBase.OnEnableKeyboardChanged(e)
            Console.WriteLine("OnEnableKeyboardChanged is called")
         End Sub

         Protected Overrides Sub OnEnableRubberBandSelectionChanged(ByVal e As EventArgs)
            MyBase.OnEnableRubberBandSelectionChanged(e)
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called")
         End Sub

         Protected Overrides Sub OnItemBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemBackColorChanged(e)
            Console.WriteLine("OnItemBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemBorderStyleChanged(e)
            Console.WriteLine("OnItemBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemForeColorChanged(e)
            Console.WriteLine("OnItemForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemImageBorderStyleChanged(e)
            Console.WriteLine("OnItemImageBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemImageSizeChanged(e)
            Console.WriteLine("OnItemImageSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedBackColorChanged(e)
            Console.WriteLine("OnItemSelectedBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedForeColorChanged(e)
            Console.WriteLine("OnItemSelectedForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSizeChanged(e)
            Console.WriteLine("OnItemSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSpacingSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSpacingSizeChanged(e)
            Console.WriteLine("OnItemSpacingSizeChanged is called")
         End Sub

         Protected Overrides Sub OnKeyDown(ByVal e As KeyEventArgs)
            MyBase.OnKeyDown(e)
            Console.WriteLine("OnKeyDown is called")
         End Sub

         Protected Overrides Sub OnLostFocus(ByVal e As EventArgs)
            MyBase.OnLostFocus(e)
            Console.WriteLine("OnLostFocus is called")
         End Sub

         Protected Overrides Sub OnMouseDown(ByVal e As MouseEventArgs)
            MyBase.OnMouseDown(e)
            Console.WriteLine("OnMouseDown is called")
         End Sub

         Protected Overrides Sub OnMouseMove(ByVal e As MouseEventArgs)
            MyBase.OnMouseMove(e)
            Console.WriteLine("OnMouseMove is called")
         End Sub

         Protected Overrides Sub OnMouseUp(ByVal e As MouseEventArgs)
            MyBase.OnMouseUp(e)
            Console.WriteLine("OnMouseUp is called")
         End Sub

         Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            MyBase.OnPaint(e)
            Console.WriteLine("OnPaint is called")
         End Sub

         Protected Overrides Sub OnPaintPropertiesChanged(ByVal e As EventArgs)
            MyBase.OnPaintPropertiesChanged(e)
            Console.WriteLine("OnPaintPropertiesChanged is called")
         End Sub

         Protected Overrides Sub OnScroll(ByVal e As EventArgs)
            MyBase.OnScroll(e)
            Console.WriteLine("OnScroll is called")
         End Sub

         Protected Overrides Sub OnScrollStyleChanged(ByVal e As EventArgs)
            MyBase.OnScrollStyleChanged(e)
            Console.WriteLine("OnScrollStyleChanged is called")
         End Sub

         Protected Overrides Sub OnSelectedIndexChanged(ByVal e As EventArgs)
            MyBase.OnSelectedIndexChanged(e)
            Console.WriteLine("OnSelectedIndexChanged is called")
         End Sub

         Protected Overrides Sub OnSelectionModeChanged(ByVal e As EventArgs)
            MyBase.OnSelectionModeChanged(e)
            Console.WriteLine("OnSelectionModeChanged is called")
         End Sub

         Protected Overrides Sub OnSelectUserImageChanged(ByVal e As EventArgs)
            MyBase.OnSelectUserImageChanged(e)
            Console.WriteLine("OnSelectUserImageChanged is called")
         End Sub

         Protected Overrides Sub OnShowItemTextChanged(ByVal e As EventArgs)
            MyBase.OnShowItemTextChanged(e)
            Console.WriteLine("OnShowItemTextChanged is called")
         End Sub

         Protected Overrides Sub OnSizeChanged(ByVal e As EventArgs)
            MyBase.OnSizeChanged(e)
            Console.WriteLine("OnSizeChanged is called")
         End Sub

         Protected Overrides Sub OnSorterChanged(ByVal e As EventArgs)
            MyBase.OnSorterChanged(e)
            Console.WriteLine("OnSorterChanged is called")
         End Sub

         Protected Overrides Sub OnSortingChanged(ByVal e As EventArgs)
            MyBase.OnSortingChanged(e)
            Console.WriteLine("OnSortingChanged is called")
         End Sub

         Protected Overrides Sub OnViewStyleChanged(ByVal e As EventArgs)
            MyBase.OnViewStyleChanged(e)
            Console.WriteLine("OnViewStyleChanged is called")
         End Sub
      End Class</code>
        <code lang="CS">      public class MyRasterImageList : RasterImageList
      {
         //.
         //.
         //.
         protected override void OnAutoDeselectItemsChanged(EventArgs e)
         {
            base.OnAutoDeselectItemsChanged(e);
            Console.WriteLine("OnAutoDeselectItemsChanged is called");
         }

         protected override void OnAutoDisposeImagesChanged(EventArgs e)
         {
            base.OnAutoDisposeImagesChanged(e);
            Console.WriteLine("OnAutoDisposeImagesChanged is called");
         }

         protected override void OnBorderStyleChanged(EventArgs e)
         {
            base.OnBorderStyleChanged(e);
            Console.WriteLine("OnBorderStyleChanged is called");
         }

         protected override void OnDoubleBufferChanged(EventArgs e)
         {
            base.OnDoubleBufferChanged(e);
            Console.WriteLine("OnDoubleBufferChanged is called");
         }

         protected override void OnDrawItem(RasterImageListDrawItemEventArgs e)
         {
            base.OnDrawItem(e);
            Console.WriteLine("OnDrawItem is called");
         }

         protected override void OnEnableKeyboardChanged(EventArgs e)
         {
            base.OnEnableKeyboardChanged(e);
            Console.WriteLine("OnEnableKeyboardChanged is called");
         }

         protected override void OnEnableRubberBandSelectionChanged(EventArgs e)
         {
            base.OnEnableRubberBandSelectionChanged(e);
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called");
         }

         protected override void OnItemBackColorChanged(EventArgs e)
         {
            base.OnItemBackColorChanged(e);
            Console.WriteLine("OnItemBackColorChanged is called");
         }

         protected override void OnItemBorderStyleChanged(EventArgs e)
         {
            base.OnItemBorderStyleChanged(e);
            Console.WriteLine("OnItemBorderStyleChanged is called");
         }

         protected override void OnItemForeColorChanged(EventArgs e)
         {
            base.OnItemForeColorChanged(e);
            Console.WriteLine("OnItemForeColorChanged is called");
         }

         protected override void OnItemImageBorderStyleChanged(EventArgs e)
         {
            base.OnItemImageBorderStyleChanged(e);
            Console.WriteLine("OnItemImageBorderStyleChanged is called");
         }

         protected override void OnItemImageSizeChanged(EventArgs e)
         {
            base.OnItemImageSizeChanged(e);
            Console.WriteLine("OnItemImageSizeChanged is called");
         }

         protected override void OnItemSelectedBackColorChanged(EventArgs e)
         {
            base.OnItemSelectedBackColorChanged(e);
            Console.WriteLine("OnItemSelectedBackColorChanged is called");
         }

         protected override void OnItemSelectedForeColorChanged(EventArgs e)
         {
            base.OnItemSelectedForeColorChanged(e);
            Console.WriteLine("OnItemSelectedForeColorChanged is called");
         }

         protected override void OnItemSizeChanged(EventArgs e)
         {
            base.OnItemSizeChanged(e);
            Console.WriteLine("OnItemSizeChanged is called");
         }

         protected override void OnItemSpacingSizeChanged(EventArgs e)
         {
            base.OnItemSpacingSizeChanged(e);
            Console.WriteLine("OnItemSpacingSizeChanged is called");
         }

         protected override void OnKeyDown(KeyEventArgs e)
         {
            base.OnKeyDown(e);
            Console.WriteLine("OnKeyDown is called");
         }

         protected override void OnLostFocus(EventArgs e)
         {
            base.OnLostFocus(e);
            Console.WriteLine("OnLostFocus is called");
         }

         protected override void OnMouseDown(MouseEventArgs e)
         {
            base.OnMouseDown(e);
            Console.WriteLine("OnMouseDown is called");
         }

         protected override void OnMouseMove(MouseEventArgs e)
         {
            base.OnMouseMove(e);
            Console.WriteLine("OnMouseMove is called");
         }

         protected override void OnMouseUp(MouseEventArgs e)
         {
            base.OnMouseUp(e);
            Console.WriteLine("OnMouseUp is called");
         }

         protected override void OnPaint(PaintEventArgs e)
         {
            base.OnPaint(e);
            Console.WriteLine("OnPaint is called");
         }

         protected override void OnPaintPropertiesChanged(EventArgs e)
         {
            base.OnPaintPropertiesChanged(e);
            Console.WriteLine("OnPaintPropertiesChanged is called");
         }

         protected override void OnScroll(EventArgs e)
         {
            base.OnScroll(e);
            Console.WriteLine("OnScroll is called");
         }

         protected override void OnScrollStyleChanged(EventArgs e)
         {
            base.OnScrollStyleChanged(e);
            Console.WriteLine("OnScrollStyleChanged is called");
         }

         protected override void OnSelectedIndexChanged(EventArgs e)
         {
            base.OnSelectedIndexChanged(e);
            Console.WriteLine("OnSelectedIndexChanged is called");
         }

         protected override void OnSelectionModeChanged(EventArgs e)
         {
            base.OnSelectionModeChanged(e);
            Console.WriteLine("OnSelectionModeChanged is called");
         }

         protected override void OnSelectUserImageChanged(EventArgs e)
         {
            base.OnSelectUserImageChanged(e);
            Console.WriteLine("OnSelectUserImageChanged is called");
         }

         protected override void OnShowItemTextChanged(EventArgs e)
         {
            base.OnShowItemTextChanged(e);
            Console.WriteLine("OnShowItemTextChanged is called");
         }

         protected override void OnSizeChanged(EventArgs e)
         {
            base.OnSizeChanged(e);
            Console.WriteLine("OnSizeChanged is called");
         }

         protected override void OnSorterChanged(EventArgs e)
         {
            base.OnSorterChanged(e);
            Console.WriteLine("OnSorterChanged is called");
         }

         protected override void OnSortingChanged(EventArgs e)
         {
            base.OnSortingChanged(e);
            Console.WriteLine("OnSortingChanged is called");
         }

         protected override void OnViewStyleChanged(EventArgs e)
         {
            base.OnViewStyleChanged(e);
            Console.WriteLine("OnViewStyleChanged is called");
         }
      }</code>
        <!--RasterImageList.OnBorderStyleChanged-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageList.OnViewStyleChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageList.ViewStyleChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
        <p>Raising an event invokes the event handler through a delegate.</p>
        <p>The <b>OnViewStyleChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
        <p>
          <b>Notes to Inheritors:</b> When overriding <b>OnViewStyleChanged</b> in a derived class, be sure to call
            the base class's <b>OnViewStyleChanged</b> method so that registered delegates receive the event.</p>
      </remarks>
      <example>
        <code lang="VB">      Public Class MyRasterImageList
         Inherits RasterImageList
         '.
         '.
         '.
         Protected Overrides Sub OnAutoDeselectItemsChanged(ByVal e As EventArgs)
            MyBase.OnAutoDeselectItemsChanged(e)
            Console.WriteLine("OnAutoDeselectItemsChanged is called")
         End Sub

         Protected Overrides Sub OnAutoDisposeImagesChanged(ByVal e As EventArgs)
            MyBase.OnAutoDisposeImagesChanged(e)
            Console.WriteLine("OnAutoDisposeImagesChanged is called")
         End Sub

         Protected Overrides Sub OnBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnBorderStyleChanged(e)
            Console.WriteLine("OnBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnDoubleBufferChanged(ByVal e As EventArgs)
            MyBase.OnDoubleBufferChanged(e)
            Console.WriteLine("OnDoubleBufferChanged is called")
         End Sub

         Protected Overrides Sub OnDrawItem(ByVal e As RasterImageListDrawItemEventArgs)
            MyBase.OnDrawItem(e)
            Console.WriteLine("OnDrawItem is called")
         End Sub

         Protected Overrides Sub OnEnableKeyboardChanged(ByVal e As EventArgs)
            MyBase.OnEnableKeyboardChanged(e)
            Console.WriteLine("OnEnableKeyboardChanged is called")
         End Sub

         Protected Overrides Sub OnEnableRubberBandSelectionChanged(ByVal e As EventArgs)
            MyBase.OnEnableRubberBandSelectionChanged(e)
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called")
         End Sub

         Protected Overrides Sub OnItemBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemBackColorChanged(e)
            Console.WriteLine("OnItemBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemBorderStyleChanged(e)
            Console.WriteLine("OnItemBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemForeColorChanged(e)
            Console.WriteLine("OnItemForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemImageBorderStyleChanged(e)
            Console.WriteLine("OnItemImageBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemImageSizeChanged(e)
            Console.WriteLine("OnItemImageSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedBackColorChanged(e)
            Console.WriteLine("OnItemSelectedBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedForeColorChanged(e)
            Console.WriteLine("OnItemSelectedForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSizeChanged(e)
            Console.WriteLine("OnItemSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSpacingSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSpacingSizeChanged(e)
            Console.WriteLine("OnItemSpacingSizeChanged is called")
         End Sub

         Protected Overrides Sub OnKeyDown(ByVal e As KeyEventArgs)
            MyBase.OnKeyDown(e)
            Console.WriteLine("OnKeyDown is called")
         End Sub

         Protected Overrides Sub OnLostFocus(ByVal e As EventArgs)
            MyBase.OnLostFocus(e)
            Console.WriteLine("OnLostFocus is called")
         End Sub

         Protected Overrides Sub OnMouseDown(ByVal e As MouseEventArgs)
            MyBase.OnMouseDown(e)
            Console.WriteLine("OnMouseDown is called")
         End Sub

         Protected Overrides Sub OnMouseMove(ByVal e As MouseEventArgs)
            MyBase.OnMouseMove(e)
            Console.WriteLine("OnMouseMove is called")
         End Sub

         Protected Overrides Sub OnMouseUp(ByVal e As MouseEventArgs)
            MyBase.OnMouseUp(e)
            Console.WriteLine("OnMouseUp is called")
         End Sub

         Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            MyBase.OnPaint(e)
            Console.WriteLine("OnPaint is called")
         End Sub

         Protected Overrides Sub OnPaintPropertiesChanged(ByVal e As EventArgs)
            MyBase.OnPaintPropertiesChanged(e)
            Console.WriteLine("OnPaintPropertiesChanged is called")
         End Sub

         Protected Overrides Sub OnScroll(ByVal e As EventArgs)
            MyBase.OnScroll(e)
            Console.WriteLine("OnScroll is called")
         End Sub

         Protected Overrides Sub OnScrollStyleChanged(ByVal e As EventArgs)
            MyBase.OnScrollStyleChanged(e)
            Console.WriteLine("OnScrollStyleChanged is called")
         End Sub

         Protected Overrides Sub OnSelectedIndexChanged(ByVal e As EventArgs)
            MyBase.OnSelectedIndexChanged(e)
            Console.WriteLine("OnSelectedIndexChanged is called")
         End Sub

         Protected Overrides Sub OnSelectionModeChanged(ByVal e As EventArgs)
            MyBase.OnSelectionModeChanged(e)
            Console.WriteLine("OnSelectionModeChanged is called")
         End Sub

         Protected Overrides Sub OnSelectUserImageChanged(ByVal e As EventArgs)
            MyBase.OnSelectUserImageChanged(e)
            Console.WriteLine("OnSelectUserImageChanged is called")
         End Sub

         Protected Overrides Sub OnShowItemTextChanged(ByVal e As EventArgs)
            MyBase.OnShowItemTextChanged(e)
            Console.WriteLine("OnShowItemTextChanged is called")
         End Sub

         Protected Overrides Sub OnSizeChanged(ByVal e As EventArgs)
            MyBase.OnSizeChanged(e)
            Console.WriteLine("OnSizeChanged is called")
         End Sub

         Protected Overrides Sub OnSorterChanged(ByVal e As EventArgs)
            MyBase.OnSorterChanged(e)
            Console.WriteLine("OnSorterChanged is called")
         End Sub

         Protected Overrides Sub OnSortingChanged(ByVal e As EventArgs)
            MyBase.OnSortingChanged(e)
            Console.WriteLine("OnSortingChanged is called")
         End Sub

         Protected Overrides Sub OnViewStyleChanged(ByVal e As EventArgs)
            MyBase.OnViewStyleChanged(e)
            Console.WriteLine("OnViewStyleChanged is called")
         End Sub
      End Class</code>
        <code lang="CS">      public class MyRasterImageList : RasterImageList
      {
         //.
         //.
         //.
         protected override void OnAutoDeselectItemsChanged(EventArgs e)
         {
            base.OnAutoDeselectItemsChanged(e);
            Console.WriteLine("OnAutoDeselectItemsChanged is called");
         }

         protected override void OnAutoDisposeImagesChanged(EventArgs e)
         {
            base.OnAutoDisposeImagesChanged(e);
            Console.WriteLine("OnAutoDisposeImagesChanged is called");
         }

         protected override void OnBorderStyleChanged(EventArgs e)
         {
            base.OnBorderStyleChanged(e);
            Console.WriteLine("OnBorderStyleChanged is called");
         }

         protected override void OnDoubleBufferChanged(EventArgs e)
         {
            base.OnDoubleBufferChanged(e);
            Console.WriteLine("OnDoubleBufferChanged is called");
         }

         protected override void OnDrawItem(RasterImageListDrawItemEventArgs e)
         {
            base.OnDrawItem(e);
            Console.WriteLine("OnDrawItem is called");
         }

         protected override void OnEnableKeyboardChanged(EventArgs e)
         {
            base.OnEnableKeyboardChanged(e);
            Console.WriteLine("OnEnableKeyboardChanged is called");
         }

         protected override void OnEnableRubberBandSelectionChanged(EventArgs e)
         {
            base.OnEnableRubberBandSelectionChanged(e);
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called");
         }

         protected override void OnItemBackColorChanged(EventArgs e)
         {
            base.OnItemBackColorChanged(e);
            Console.WriteLine("OnItemBackColorChanged is called");
         }

         protected override void OnItemBorderStyleChanged(EventArgs e)
         {
            base.OnItemBorderStyleChanged(e);
            Console.WriteLine("OnItemBorderStyleChanged is called");
         }

         protected override void OnItemForeColorChanged(EventArgs e)
         {
            base.OnItemForeColorChanged(e);
            Console.WriteLine("OnItemForeColorChanged is called");
         }

         protected override void OnItemImageBorderStyleChanged(EventArgs e)
         {
            base.OnItemImageBorderStyleChanged(e);
            Console.WriteLine("OnItemImageBorderStyleChanged is called");
         }

         protected override void OnItemImageSizeChanged(EventArgs e)
         {
            base.OnItemImageSizeChanged(e);
            Console.WriteLine("OnItemImageSizeChanged is called");
         }

         protected override void OnItemSelectedBackColorChanged(EventArgs e)
         {
            base.OnItemSelectedBackColorChanged(e);
            Console.WriteLine("OnItemSelectedBackColorChanged is called");
         }

         protected override void OnItemSelectedForeColorChanged(EventArgs e)
         {
            base.OnItemSelectedForeColorChanged(e);
            Console.WriteLine("OnItemSelectedForeColorChanged is called");
         }

         protected override void OnItemSizeChanged(EventArgs e)
         {
            base.OnItemSizeChanged(e);
            Console.WriteLine("OnItemSizeChanged is called");
         }

         protected override void OnItemSpacingSizeChanged(EventArgs e)
         {
            base.OnItemSpacingSizeChanged(e);
            Console.WriteLine("OnItemSpacingSizeChanged is called");
         }

         protected override void OnKeyDown(KeyEventArgs e)
         {
            base.OnKeyDown(e);
            Console.WriteLine("OnKeyDown is called");
         }

         protected override void OnLostFocus(EventArgs e)
         {
            base.OnLostFocus(e);
            Console.WriteLine("OnLostFocus is called");
         }

         protected override void OnMouseDown(MouseEventArgs e)
         {
            base.OnMouseDown(e);
            Console.WriteLine("OnMouseDown is called");
         }

         protected override void OnMouseMove(MouseEventArgs e)
         {
            base.OnMouseMove(e);
            Console.WriteLine("OnMouseMove is called");
         }

         protected override void OnMouseUp(MouseEventArgs e)
         {
            base.OnMouseUp(e);
            Console.WriteLine("OnMouseUp is called");
         }

         protected override void OnPaint(PaintEventArgs e)
         {
            base.OnPaint(e);
            Console.WriteLine("OnPaint is called");
         }

         protected override void OnPaintPropertiesChanged(EventArgs e)
         {
            base.OnPaintPropertiesChanged(e);
            Console.WriteLine("OnPaintPropertiesChanged is called");
         }

         protected override void OnScroll(EventArgs e)
         {
            base.OnScroll(e);
            Console.WriteLine("OnScroll is called");
         }

         protected override void OnScrollStyleChanged(EventArgs e)
         {
            base.OnScrollStyleChanged(e);
            Console.WriteLine("OnScrollStyleChanged is called");
         }

         protected override void OnSelectedIndexChanged(EventArgs e)
         {
            base.OnSelectedIndexChanged(e);
            Console.WriteLine("OnSelectedIndexChanged is called");
         }

         protected override void OnSelectionModeChanged(EventArgs e)
         {
            base.OnSelectionModeChanged(e);
            Console.WriteLine("OnSelectionModeChanged is called");
         }

         protected override void OnSelectUserImageChanged(EventArgs e)
         {
            base.OnSelectUserImageChanged(e);
            Console.WriteLine("OnSelectUserImageChanged is called");
         }

         protected override void OnShowItemTextChanged(EventArgs e)
         {
            base.OnShowItemTextChanged(e);
            Console.WriteLine("OnShowItemTextChanged is called");
         }

         protected override void OnSizeChanged(EventArgs e)
         {
            base.OnSizeChanged(e);
            Console.WriteLine("OnSizeChanged is called");
         }

         protected override void OnSorterChanged(EventArgs e)
         {
            base.OnSorterChanged(e);
            Console.WriteLine("OnSorterChanged is called");
         }

         protected override void OnSortingChanged(EventArgs e)
         {
            base.OnSortingChanged(e);
            Console.WriteLine("OnSortingChanged is called");
         }

         protected override void OnViewStyleChanged(EventArgs e)
         {
            base.OnViewStyleChanged(e);
            Console.WriteLine("OnViewStyleChanged is called");
         }
      }</code>
        <!--RasterImageList.OnBorderStyleChanged-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageList.OnShowItemTextChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageList.ShowItemTextChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
        <p>Raising an event invokes the event handler through a delegate.</p>
        <p>The <b>OnShowItemTextChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
        <p>
          <b>Notes to Inheritors:</b> When overriding <b>OnShowItemTextChanged</b> in a derived class, be sure to call
            the base class's <b>OnShowItemTextChanged</b> method so that registered delegates receive the event.</p>
      </remarks>
      <example>
        <code lang="VB">      Public Class MyRasterImageList
         Inherits RasterImageList
         '.
         '.
         '.
         Protected Overrides Sub OnAutoDeselectItemsChanged(ByVal e As EventArgs)
            MyBase.OnAutoDeselectItemsChanged(e)
            Console.WriteLine("OnAutoDeselectItemsChanged is called")
         End Sub

         Protected Overrides Sub OnAutoDisposeImagesChanged(ByVal e As EventArgs)
            MyBase.OnAutoDisposeImagesChanged(e)
            Console.WriteLine("OnAutoDisposeImagesChanged is called")
         End Sub

         Protected Overrides Sub OnBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnBorderStyleChanged(e)
            Console.WriteLine("OnBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnDoubleBufferChanged(ByVal e As EventArgs)
            MyBase.OnDoubleBufferChanged(e)
            Console.WriteLine("OnDoubleBufferChanged is called")
         End Sub

         Protected Overrides Sub OnDrawItem(ByVal e As RasterImageListDrawItemEventArgs)
            MyBase.OnDrawItem(e)
            Console.WriteLine("OnDrawItem is called")
         End Sub

         Protected Overrides Sub OnEnableKeyboardChanged(ByVal e As EventArgs)
            MyBase.OnEnableKeyboardChanged(e)
            Console.WriteLine("OnEnableKeyboardChanged is called")
         End Sub

         Protected Overrides Sub OnEnableRubberBandSelectionChanged(ByVal e As EventArgs)
            MyBase.OnEnableRubberBandSelectionChanged(e)
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called")
         End Sub

         Protected Overrides Sub OnItemBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemBackColorChanged(e)
            Console.WriteLine("OnItemBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemBorderStyleChanged(e)
            Console.WriteLine("OnItemBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemForeColorChanged(e)
            Console.WriteLine("OnItemForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemImageBorderStyleChanged(e)
            Console.WriteLine("OnItemImageBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemImageSizeChanged(e)
            Console.WriteLine("OnItemImageSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedBackColorChanged(e)
            Console.WriteLine("OnItemSelectedBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedForeColorChanged(e)
            Console.WriteLine("OnItemSelectedForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSizeChanged(e)
            Console.WriteLine("OnItemSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSpacingSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSpacingSizeChanged(e)
            Console.WriteLine("OnItemSpacingSizeChanged is called")
         End Sub

         Protected Overrides Sub OnKeyDown(ByVal e As KeyEventArgs)
            MyBase.OnKeyDown(e)
            Console.WriteLine("OnKeyDown is called")
         End Sub

         Protected Overrides Sub OnLostFocus(ByVal e As EventArgs)
            MyBase.OnLostFocus(e)
            Console.WriteLine("OnLostFocus is called")
         End Sub

         Protected Overrides Sub OnMouseDown(ByVal e As MouseEventArgs)
            MyBase.OnMouseDown(e)
            Console.WriteLine("OnMouseDown is called")
         End Sub

         Protected Overrides Sub OnMouseMove(ByVal e As MouseEventArgs)
            MyBase.OnMouseMove(e)
            Console.WriteLine("OnMouseMove is called")
         End Sub

         Protected Overrides Sub OnMouseUp(ByVal e As MouseEventArgs)
            MyBase.OnMouseUp(e)
            Console.WriteLine("OnMouseUp is called")
         End Sub

         Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            MyBase.OnPaint(e)
            Console.WriteLine("OnPaint is called")
         End Sub

         Protected Overrides Sub OnPaintPropertiesChanged(ByVal e As EventArgs)
            MyBase.OnPaintPropertiesChanged(e)
            Console.WriteLine("OnPaintPropertiesChanged is called")
         End Sub

         Protected Overrides Sub OnScroll(ByVal e As EventArgs)
            MyBase.OnScroll(e)
            Console.WriteLine("OnScroll is called")
         End Sub

         Protected Overrides Sub OnScrollStyleChanged(ByVal e As EventArgs)
            MyBase.OnScrollStyleChanged(e)
            Console.WriteLine("OnScrollStyleChanged is called")
         End Sub

         Protected Overrides Sub OnSelectedIndexChanged(ByVal e As EventArgs)
            MyBase.OnSelectedIndexChanged(e)
            Console.WriteLine("OnSelectedIndexChanged is called")
         End Sub

         Protected Overrides Sub OnSelectionModeChanged(ByVal e As EventArgs)
            MyBase.OnSelectionModeChanged(e)
            Console.WriteLine("OnSelectionModeChanged is called")
         End Sub

         Protected Overrides Sub OnSelectUserImageChanged(ByVal e As EventArgs)
            MyBase.OnSelectUserImageChanged(e)
            Console.WriteLine("OnSelectUserImageChanged is called")
         End Sub

         Protected Overrides Sub OnShowItemTextChanged(ByVal e As EventArgs)
            MyBase.OnShowItemTextChanged(e)
            Console.WriteLine("OnShowItemTextChanged is called")
         End Sub

         Protected Overrides Sub OnSizeChanged(ByVal e As EventArgs)
            MyBase.OnSizeChanged(e)
            Console.WriteLine("OnSizeChanged is called")
         End Sub

         Protected Overrides Sub OnSorterChanged(ByVal e As EventArgs)
            MyBase.OnSorterChanged(e)
            Console.WriteLine("OnSorterChanged is called")
         End Sub

         Protected Overrides Sub OnSortingChanged(ByVal e As EventArgs)
            MyBase.OnSortingChanged(e)
            Console.WriteLine("OnSortingChanged is called")
         End Sub

         Protected Overrides Sub OnViewStyleChanged(ByVal e As EventArgs)
            MyBase.OnViewStyleChanged(e)
            Console.WriteLine("OnViewStyleChanged is called")
         End Sub
      End Class</code>
        <code lang="CS">      public class MyRasterImageList : RasterImageList
      {
         //.
         //.
         //.
         protected override void OnAutoDeselectItemsChanged(EventArgs e)
         {
            base.OnAutoDeselectItemsChanged(e);
            Console.WriteLine("OnAutoDeselectItemsChanged is called");
         }

         protected override void OnAutoDisposeImagesChanged(EventArgs e)
         {
            base.OnAutoDisposeImagesChanged(e);
            Console.WriteLine("OnAutoDisposeImagesChanged is called");
         }

         protected override void OnBorderStyleChanged(EventArgs e)
         {
            base.OnBorderStyleChanged(e);
            Console.WriteLine("OnBorderStyleChanged is called");
         }

         protected override void OnDoubleBufferChanged(EventArgs e)
         {
            base.OnDoubleBufferChanged(e);
            Console.WriteLine("OnDoubleBufferChanged is called");
         }

         protected override void OnDrawItem(RasterImageListDrawItemEventArgs e)
         {
            base.OnDrawItem(e);
            Console.WriteLine("OnDrawItem is called");
         }

         protected override void OnEnableKeyboardChanged(EventArgs e)
         {
            base.OnEnableKeyboardChanged(e);
            Console.WriteLine("OnEnableKeyboardChanged is called");
         }

         protected override void OnEnableRubberBandSelectionChanged(EventArgs e)
         {
            base.OnEnableRubberBandSelectionChanged(e);
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called");
         }

         protected override void OnItemBackColorChanged(EventArgs e)
         {
            base.OnItemBackColorChanged(e);
            Console.WriteLine("OnItemBackColorChanged is called");
         }

         protected override void OnItemBorderStyleChanged(EventArgs e)
         {
            base.OnItemBorderStyleChanged(e);
            Console.WriteLine("OnItemBorderStyleChanged is called");
         }

         protected override void OnItemForeColorChanged(EventArgs e)
         {
            base.OnItemForeColorChanged(e);
            Console.WriteLine("OnItemForeColorChanged is called");
         }

         protected override void OnItemImageBorderStyleChanged(EventArgs e)
         {
            base.OnItemImageBorderStyleChanged(e);
            Console.WriteLine("OnItemImageBorderStyleChanged is called");
         }

         protected override void OnItemImageSizeChanged(EventArgs e)
         {
            base.OnItemImageSizeChanged(e);
            Console.WriteLine("OnItemImageSizeChanged is called");
         }

         protected override void OnItemSelectedBackColorChanged(EventArgs e)
         {
            base.OnItemSelectedBackColorChanged(e);
            Console.WriteLine("OnItemSelectedBackColorChanged is called");
         }

         protected override void OnItemSelectedForeColorChanged(EventArgs e)
         {
            base.OnItemSelectedForeColorChanged(e);
            Console.WriteLine("OnItemSelectedForeColorChanged is called");
         }

         protected override void OnItemSizeChanged(EventArgs e)
         {
            base.OnItemSizeChanged(e);
            Console.WriteLine("OnItemSizeChanged is called");
         }

         protected override void OnItemSpacingSizeChanged(EventArgs e)
         {
            base.OnItemSpacingSizeChanged(e);
            Console.WriteLine("OnItemSpacingSizeChanged is called");
         }

         protected override void OnKeyDown(KeyEventArgs e)
         {
            base.OnKeyDown(e);
            Console.WriteLine("OnKeyDown is called");
         }

         protected override void OnLostFocus(EventArgs e)
         {
            base.OnLostFocus(e);
            Console.WriteLine("OnLostFocus is called");
         }

         protected override void OnMouseDown(MouseEventArgs e)
         {
            base.OnMouseDown(e);
            Console.WriteLine("OnMouseDown is called");
         }

         protected override void OnMouseMove(MouseEventArgs e)
         {
            base.OnMouseMove(e);
            Console.WriteLine("OnMouseMove is called");
         }

         protected override void OnMouseUp(MouseEventArgs e)
         {
            base.OnMouseUp(e);
            Console.WriteLine("OnMouseUp is called");
         }

         protected override void OnPaint(PaintEventArgs e)
         {
            base.OnPaint(e);
            Console.WriteLine("OnPaint is called");
         }

         protected override void OnPaintPropertiesChanged(EventArgs e)
         {
            base.OnPaintPropertiesChanged(e);
            Console.WriteLine("OnPaintPropertiesChanged is called");
         }

         protected override void OnScroll(EventArgs e)
         {
            base.OnScroll(e);
            Console.WriteLine("OnScroll is called");
         }

         protected override void OnScrollStyleChanged(EventArgs e)
         {
            base.OnScrollStyleChanged(e);
            Console.WriteLine("OnScrollStyleChanged is called");
         }

         protected override void OnSelectedIndexChanged(EventArgs e)
         {
            base.OnSelectedIndexChanged(e);
            Console.WriteLine("OnSelectedIndexChanged is called");
         }

         protected override void OnSelectionModeChanged(EventArgs e)
         {
            base.OnSelectionModeChanged(e);
            Console.WriteLine("OnSelectionModeChanged is called");
         }

         protected override void OnSelectUserImageChanged(EventArgs e)
         {
            base.OnSelectUserImageChanged(e);
            Console.WriteLine("OnSelectUserImageChanged is called");
         }

         protected override void OnShowItemTextChanged(EventArgs e)
         {
            base.OnShowItemTextChanged(e);
            Console.WriteLine("OnShowItemTextChanged is called");
         }

         protected override void OnSizeChanged(EventArgs e)
         {
            base.OnSizeChanged(e);
            Console.WriteLine("OnSizeChanged is called");
         }

         protected override void OnSorterChanged(EventArgs e)
         {
            base.OnSorterChanged(e);
            Console.WriteLine("OnSorterChanged is called");
         }

         protected override void OnSortingChanged(EventArgs e)
         {
            base.OnSortingChanged(e);
            Console.WriteLine("OnSortingChanged is called");
         }

         protected override void OnViewStyleChanged(EventArgs e)
         {
            base.OnViewStyleChanged(e);
            Console.WriteLine("OnViewStyleChanged is called");
         }
      }</code>
        <!--RasterImageList.OnBorderStyleChanged-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageList.OnScrollStyleChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageList.ScrollStyleChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
        <p>Raising an event invokes the event handler through a delegate.</p>
        <p>The <b>OnScrollStyleChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
        <p>
          <b>Notes to Inheritors:</b> When overriding <b>OnScrollStyleChanged</b> in a derived class, be sure to call
            the base class's <b>OnScrollStyleChanged</b> method so that registered delegates receive the event.</p>
      </remarks>
      <example>
        <code lang="VB">      Public Class MyRasterImageList
         Inherits RasterImageList
         '.
         '.
         '.
         Protected Overrides Sub OnAutoDeselectItemsChanged(ByVal e As EventArgs)
            MyBase.OnAutoDeselectItemsChanged(e)
            Console.WriteLine("OnAutoDeselectItemsChanged is called")
         End Sub

         Protected Overrides Sub OnAutoDisposeImagesChanged(ByVal e As EventArgs)
            MyBase.OnAutoDisposeImagesChanged(e)
            Console.WriteLine("OnAutoDisposeImagesChanged is called")
         End Sub

         Protected Overrides Sub OnBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnBorderStyleChanged(e)
            Console.WriteLine("OnBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnDoubleBufferChanged(ByVal e As EventArgs)
            MyBase.OnDoubleBufferChanged(e)
            Console.WriteLine("OnDoubleBufferChanged is called")
         End Sub

         Protected Overrides Sub OnDrawItem(ByVal e As RasterImageListDrawItemEventArgs)
            MyBase.OnDrawItem(e)
            Console.WriteLine("OnDrawItem is called")
         End Sub

         Protected Overrides Sub OnEnableKeyboardChanged(ByVal e As EventArgs)
            MyBase.OnEnableKeyboardChanged(e)
            Console.WriteLine("OnEnableKeyboardChanged is called")
         End Sub

         Protected Overrides Sub OnEnableRubberBandSelectionChanged(ByVal e As EventArgs)
            MyBase.OnEnableRubberBandSelectionChanged(e)
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called")
         End Sub

         Protected Overrides Sub OnItemBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemBackColorChanged(e)
            Console.WriteLine("OnItemBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemBorderStyleChanged(e)
            Console.WriteLine("OnItemBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemForeColorChanged(e)
            Console.WriteLine("OnItemForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemImageBorderStyleChanged(e)
            Console.WriteLine("OnItemImageBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemImageSizeChanged(e)
            Console.WriteLine("OnItemImageSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedBackColorChanged(e)
            Console.WriteLine("OnItemSelectedBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedForeColorChanged(e)
            Console.WriteLine("OnItemSelectedForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSizeChanged(e)
            Console.WriteLine("OnItemSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSpacingSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSpacingSizeChanged(e)
            Console.WriteLine("OnItemSpacingSizeChanged is called")
         End Sub

         Protected Overrides Sub OnKeyDown(ByVal e As KeyEventArgs)
            MyBase.OnKeyDown(e)
            Console.WriteLine("OnKeyDown is called")
         End Sub

         Protected Overrides Sub OnLostFocus(ByVal e As EventArgs)
            MyBase.OnLostFocus(e)
            Console.WriteLine("OnLostFocus is called")
         End Sub

         Protected Overrides Sub OnMouseDown(ByVal e As MouseEventArgs)
            MyBase.OnMouseDown(e)
            Console.WriteLine("OnMouseDown is called")
         End Sub

         Protected Overrides Sub OnMouseMove(ByVal e As MouseEventArgs)
            MyBase.OnMouseMove(e)
            Console.WriteLine("OnMouseMove is called")
         End Sub

         Protected Overrides Sub OnMouseUp(ByVal e As MouseEventArgs)
            MyBase.OnMouseUp(e)
            Console.WriteLine("OnMouseUp is called")
         End Sub

         Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            MyBase.OnPaint(e)
            Console.WriteLine("OnPaint is called")
         End Sub

         Protected Overrides Sub OnPaintPropertiesChanged(ByVal e As EventArgs)
            MyBase.OnPaintPropertiesChanged(e)
            Console.WriteLine("OnPaintPropertiesChanged is called")
         End Sub

         Protected Overrides Sub OnScroll(ByVal e As EventArgs)
            MyBase.OnScroll(e)
            Console.WriteLine("OnScroll is called")
         End Sub

         Protected Overrides Sub OnScrollStyleChanged(ByVal e As EventArgs)
            MyBase.OnScrollStyleChanged(e)
            Console.WriteLine("OnScrollStyleChanged is called")
         End Sub

         Protected Overrides Sub OnSelectedIndexChanged(ByVal e As EventArgs)
            MyBase.OnSelectedIndexChanged(e)
            Console.WriteLine("OnSelectedIndexChanged is called")
         End Sub

         Protected Overrides Sub OnSelectionModeChanged(ByVal e As EventArgs)
            MyBase.OnSelectionModeChanged(e)
            Console.WriteLine("OnSelectionModeChanged is called")
         End Sub

         Protected Overrides Sub OnSelectUserImageChanged(ByVal e As EventArgs)
            MyBase.OnSelectUserImageChanged(e)
            Console.WriteLine("OnSelectUserImageChanged is called")
         End Sub

         Protected Overrides Sub OnShowItemTextChanged(ByVal e As EventArgs)
            MyBase.OnShowItemTextChanged(e)
            Console.WriteLine("OnShowItemTextChanged is called")
         End Sub

         Protected Overrides Sub OnSizeChanged(ByVal e As EventArgs)
            MyBase.OnSizeChanged(e)
            Console.WriteLine("OnSizeChanged is called")
         End Sub

         Protected Overrides Sub OnSorterChanged(ByVal e As EventArgs)
            MyBase.OnSorterChanged(e)
            Console.WriteLine("OnSorterChanged is called")
         End Sub

         Protected Overrides Sub OnSortingChanged(ByVal e As EventArgs)
            MyBase.OnSortingChanged(e)
            Console.WriteLine("OnSortingChanged is called")
         End Sub

         Protected Overrides Sub OnViewStyleChanged(ByVal e As EventArgs)
            MyBase.OnViewStyleChanged(e)
            Console.WriteLine("OnViewStyleChanged is called")
         End Sub
      End Class</code>
        <code lang="CS">      public class MyRasterImageList : RasterImageList
      {
         //.
         //.
         //.
         protected override void OnAutoDeselectItemsChanged(EventArgs e)
         {
            base.OnAutoDeselectItemsChanged(e);
            Console.WriteLine("OnAutoDeselectItemsChanged is called");
         }

         protected override void OnAutoDisposeImagesChanged(EventArgs e)
         {
            base.OnAutoDisposeImagesChanged(e);
            Console.WriteLine("OnAutoDisposeImagesChanged is called");
         }

         protected override void OnBorderStyleChanged(EventArgs e)
         {
            base.OnBorderStyleChanged(e);
            Console.WriteLine("OnBorderStyleChanged is called");
         }

         protected override void OnDoubleBufferChanged(EventArgs e)
         {
            base.OnDoubleBufferChanged(e);
            Console.WriteLine("OnDoubleBufferChanged is called");
         }

         protected override void OnDrawItem(RasterImageListDrawItemEventArgs e)
         {
            base.OnDrawItem(e);
            Console.WriteLine("OnDrawItem is called");
         }

         protected override void OnEnableKeyboardChanged(EventArgs e)
         {
            base.OnEnableKeyboardChanged(e);
            Console.WriteLine("OnEnableKeyboardChanged is called");
         }

         protected override void OnEnableRubberBandSelectionChanged(EventArgs e)
         {
            base.OnEnableRubberBandSelectionChanged(e);
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called");
         }

         protected override void OnItemBackColorChanged(EventArgs e)
         {
            base.OnItemBackColorChanged(e);
            Console.WriteLine("OnItemBackColorChanged is called");
         }

         protected override void OnItemBorderStyleChanged(EventArgs e)
         {
            base.OnItemBorderStyleChanged(e);
            Console.WriteLine("OnItemBorderStyleChanged is called");
         }

         protected override void OnItemForeColorChanged(EventArgs e)
         {
            base.OnItemForeColorChanged(e);
            Console.WriteLine("OnItemForeColorChanged is called");
         }

         protected override void OnItemImageBorderStyleChanged(EventArgs e)
         {
            base.OnItemImageBorderStyleChanged(e);
            Console.WriteLine("OnItemImageBorderStyleChanged is called");
         }

         protected override void OnItemImageSizeChanged(EventArgs e)
         {
            base.OnItemImageSizeChanged(e);
            Console.WriteLine("OnItemImageSizeChanged is called");
         }

         protected override void OnItemSelectedBackColorChanged(EventArgs e)
         {
            base.OnItemSelectedBackColorChanged(e);
            Console.WriteLine("OnItemSelectedBackColorChanged is called");
         }

         protected override void OnItemSelectedForeColorChanged(EventArgs e)
         {
            base.OnItemSelectedForeColorChanged(e);
            Console.WriteLine("OnItemSelectedForeColorChanged is called");
         }

         protected override void OnItemSizeChanged(EventArgs e)
         {
            base.OnItemSizeChanged(e);
            Console.WriteLine("OnItemSizeChanged is called");
         }

         protected override void OnItemSpacingSizeChanged(EventArgs e)
         {
            base.OnItemSpacingSizeChanged(e);
            Console.WriteLine("OnItemSpacingSizeChanged is called");
         }

         protected override void OnKeyDown(KeyEventArgs e)
         {
            base.OnKeyDown(e);
            Console.WriteLine("OnKeyDown is called");
         }

         protected override void OnLostFocus(EventArgs e)
         {
            base.OnLostFocus(e);
            Console.WriteLine("OnLostFocus is called");
         }

         protected override void OnMouseDown(MouseEventArgs e)
         {
            base.OnMouseDown(e);
            Console.WriteLine("OnMouseDown is called");
         }

         protected override void OnMouseMove(MouseEventArgs e)
         {
            base.OnMouseMove(e);
            Console.WriteLine("OnMouseMove is called");
         }

         protected override void OnMouseUp(MouseEventArgs e)
         {
            base.OnMouseUp(e);
            Console.WriteLine("OnMouseUp is called");
         }

         protected override void OnPaint(PaintEventArgs e)
         {
            base.OnPaint(e);
            Console.WriteLine("OnPaint is called");
         }

         protected override void OnPaintPropertiesChanged(EventArgs e)
         {
            base.OnPaintPropertiesChanged(e);
            Console.WriteLine("OnPaintPropertiesChanged is called");
         }

         protected override void OnScroll(EventArgs e)
         {
            base.OnScroll(e);
            Console.WriteLine("OnScroll is called");
         }

         protected override void OnScrollStyleChanged(EventArgs e)
         {
            base.OnScrollStyleChanged(e);
            Console.WriteLine("OnScrollStyleChanged is called");
         }

         protected override void OnSelectedIndexChanged(EventArgs e)
         {
            base.OnSelectedIndexChanged(e);
            Console.WriteLine("OnSelectedIndexChanged is called");
         }

         protected override void OnSelectionModeChanged(EventArgs e)
         {
            base.OnSelectionModeChanged(e);
            Console.WriteLine("OnSelectionModeChanged is called");
         }

         protected override void OnSelectUserImageChanged(EventArgs e)
         {
            base.OnSelectUserImageChanged(e);
            Console.WriteLine("OnSelectUserImageChanged is called");
         }

         protected override void OnShowItemTextChanged(EventArgs e)
         {
            base.OnShowItemTextChanged(e);
            Console.WriteLine("OnShowItemTextChanged is called");
         }

         protected override void OnSizeChanged(EventArgs e)
         {
            base.OnSizeChanged(e);
            Console.WriteLine("OnSizeChanged is called");
         }

         protected override void OnSorterChanged(EventArgs e)
         {
            base.OnSorterChanged(e);
            Console.WriteLine("OnSorterChanged is called");
         }

         protected override void OnSortingChanged(EventArgs e)
         {
            base.OnSortingChanged(e);
            Console.WriteLine("OnSortingChanged is called");
         }

         protected override void OnViewStyleChanged(EventArgs e)
         {
            base.OnViewStyleChanged(e);
            Console.WriteLine("OnViewStyleChanged is called");
         }
      }</code>
        <!--RasterImageList.OnBorderStyleChanged-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageList.OnAutoDisposeImagesChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageList.AutoDisposeImagesChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
        <p>Raising an event invokes the event handler through a delegate.</p>
        <p>The <b>OnAutoDisposeImagesChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
        <p>
          <b>Notes to Inheritors:</b> When overriding <b>OnAutoDisposeImagesChanged</b> in a derived class, be sure to call
            the base class's <b>OnAutoDisposeImagesChanged</b> method so that registered delegates receive the event.</p>
      </remarks>
      <example>
        <code lang="VB">      Public Class MyRasterImageList
         Inherits RasterImageList
         '.
         '.
         '.
         Protected Overrides Sub OnAutoDeselectItemsChanged(ByVal e As EventArgs)
            MyBase.OnAutoDeselectItemsChanged(e)
            Console.WriteLine("OnAutoDeselectItemsChanged is called")
         End Sub

         Protected Overrides Sub OnAutoDisposeImagesChanged(ByVal e As EventArgs)
            MyBase.OnAutoDisposeImagesChanged(e)
            Console.WriteLine("OnAutoDisposeImagesChanged is called")
         End Sub

         Protected Overrides Sub OnBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnBorderStyleChanged(e)
            Console.WriteLine("OnBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnDoubleBufferChanged(ByVal e As EventArgs)
            MyBase.OnDoubleBufferChanged(e)
            Console.WriteLine("OnDoubleBufferChanged is called")
         End Sub

         Protected Overrides Sub OnDrawItem(ByVal e As RasterImageListDrawItemEventArgs)
            MyBase.OnDrawItem(e)
            Console.WriteLine("OnDrawItem is called")
         End Sub

         Protected Overrides Sub OnEnableKeyboardChanged(ByVal e As EventArgs)
            MyBase.OnEnableKeyboardChanged(e)
            Console.WriteLine("OnEnableKeyboardChanged is called")
         End Sub

         Protected Overrides Sub OnEnableRubberBandSelectionChanged(ByVal e As EventArgs)
            MyBase.OnEnableRubberBandSelectionChanged(e)
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called")
         End Sub

         Protected Overrides Sub OnItemBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemBackColorChanged(e)
            Console.WriteLine("OnItemBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemBorderStyleChanged(e)
            Console.WriteLine("OnItemBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemForeColorChanged(e)
            Console.WriteLine("OnItemForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemImageBorderStyleChanged(e)
            Console.WriteLine("OnItemImageBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemImageSizeChanged(e)
            Console.WriteLine("OnItemImageSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedBackColorChanged(e)
            Console.WriteLine("OnItemSelectedBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedForeColorChanged(e)
            Console.WriteLine("OnItemSelectedForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSizeChanged(e)
            Console.WriteLine("OnItemSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSpacingSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSpacingSizeChanged(e)
            Console.WriteLine("OnItemSpacingSizeChanged is called")
         End Sub

         Protected Overrides Sub OnKeyDown(ByVal e As KeyEventArgs)
            MyBase.OnKeyDown(e)
            Console.WriteLine("OnKeyDown is called")
         End Sub

         Protected Overrides Sub OnLostFocus(ByVal e As EventArgs)
            MyBase.OnLostFocus(e)
            Console.WriteLine("OnLostFocus is called")
         End Sub

         Protected Overrides Sub OnMouseDown(ByVal e As MouseEventArgs)
            MyBase.OnMouseDown(e)
            Console.WriteLine("OnMouseDown is called")
         End Sub

         Protected Overrides Sub OnMouseMove(ByVal e As MouseEventArgs)
            MyBase.OnMouseMove(e)
            Console.WriteLine("OnMouseMove is called")
         End Sub

         Protected Overrides Sub OnMouseUp(ByVal e As MouseEventArgs)
            MyBase.OnMouseUp(e)
            Console.WriteLine("OnMouseUp is called")
         End Sub

         Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            MyBase.OnPaint(e)
            Console.WriteLine("OnPaint is called")
         End Sub

         Protected Overrides Sub OnPaintPropertiesChanged(ByVal e As EventArgs)
            MyBase.OnPaintPropertiesChanged(e)
            Console.WriteLine("OnPaintPropertiesChanged is called")
         End Sub

         Protected Overrides Sub OnScroll(ByVal e As EventArgs)
            MyBase.OnScroll(e)
            Console.WriteLine("OnScroll is called")
         End Sub

         Protected Overrides Sub OnScrollStyleChanged(ByVal e As EventArgs)
            MyBase.OnScrollStyleChanged(e)
            Console.WriteLine("OnScrollStyleChanged is called")
         End Sub

         Protected Overrides Sub OnSelectedIndexChanged(ByVal e As EventArgs)
            MyBase.OnSelectedIndexChanged(e)
            Console.WriteLine("OnSelectedIndexChanged is called")
         End Sub

         Protected Overrides Sub OnSelectionModeChanged(ByVal e As EventArgs)
            MyBase.OnSelectionModeChanged(e)
            Console.WriteLine("OnSelectionModeChanged is called")
         End Sub

         Protected Overrides Sub OnSelectUserImageChanged(ByVal e As EventArgs)
            MyBase.OnSelectUserImageChanged(e)
            Console.WriteLine("OnSelectUserImageChanged is called")
         End Sub

         Protected Overrides Sub OnShowItemTextChanged(ByVal e As EventArgs)
            MyBase.OnShowItemTextChanged(e)
            Console.WriteLine("OnShowItemTextChanged is called")
         End Sub

         Protected Overrides Sub OnSizeChanged(ByVal e As EventArgs)
            MyBase.OnSizeChanged(e)
            Console.WriteLine("OnSizeChanged is called")
         End Sub

         Protected Overrides Sub OnSorterChanged(ByVal e As EventArgs)
            MyBase.OnSorterChanged(e)
            Console.WriteLine("OnSorterChanged is called")
         End Sub

         Protected Overrides Sub OnSortingChanged(ByVal e As EventArgs)
            MyBase.OnSortingChanged(e)
            Console.WriteLine("OnSortingChanged is called")
         End Sub

         Protected Overrides Sub OnViewStyleChanged(ByVal e As EventArgs)
            MyBase.OnViewStyleChanged(e)
            Console.WriteLine("OnViewStyleChanged is called")
         End Sub
      End Class</code>
        <code lang="CS">      public class MyRasterImageList : RasterImageList
      {
         //.
         //.
         //.
         protected override void OnAutoDeselectItemsChanged(EventArgs e)
         {
            base.OnAutoDeselectItemsChanged(e);
            Console.WriteLine("OnAutoDeselectItemsChanged is called");
         }

         protected override void OnAutoDisposeImagesChanged(EventArgs e)
         {
            base.OnAutoDisposeImagesChanged(e);
            Console.WriteLine("OnAutoDisposeImagesChanged is called");
         }

         protected override void OnBorderStyleChanged(EventArgs e)
         {
            base.OnBorderStyleChanged(e);
            Console.WriteLine("OnBorderStyleChanged is called");
         }

         protected override void OnDoubleBufferChanged(EventArgs e)
         {
            base.OnDoubleBufferChanged(e);
            Console.WriteLine("OnDoubleBufferChanged is called");
         }

         protected override void OnDrawItem(RasterImageListDrawItemEventArgs e)
         {
            base.OnDrawItem(e);
            Console.WriteLine("OnDrawItem is called");
         }

         protected override void OnEnableKeyboardChanged(EventArgs e)
         {
            base.OnEnableKeyboardChanged(e);
            Console.WriteLine("OnEnableKeyboardChanged is called");
         }

         protected override void OnEnableRubberBandSelectionChanged(EventArgs e)
         {
            base.OnEnableRubberBandSelectionChanged(e);
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called");
         }

         protected override void OnItemBackColorChanged(EventArgs e)
         {
            base.OnItemBackColorChanged(e);
            Console.WriteLine("OnItemBackColorChanged is called");
         }

         protected override void OnItemBorderStyleChanged(EventArgs e)
         {
            base.OnItemBorderStyleChanged(e);
            Console.WriteLine("OnItemBorderStyleChanged is called");
         }

         protected override void OnItemForeColorChanged(EventArgs e)
         {
            base.OnItemForeColorChanged(e);
            Console.WriteLine("OnItemForeColorChanged is called");
         }

         protected override void OnItemImageBorderStyleChanged(EventArgs e)
         {
            base.OnItemImageBorderStyleChanged(e);
            Console.WriteLine("OnItemImageBorderStyleChanged is called");
         }

         protected override void OnItemImageSizeChanged(EventArgs e)
         {
            base.OnItemImageSizeChanged(e);
            Console.WriteLine("OnItemImageSizeChanged is called");
         }

         protected override void OnItemSelectedBackColorChanged(EventArgs e)
         {
            base.OnItemSelectedBackColorChanged(e);
            Console.WriteLine("OnItemSelectedBackColorChanged is called");
         }

         protected override void OnItemSelectedForeColorChanged(EventArgs e)
         {
            base.OnItemSelectedForeColorChanged(e);
            Console.WriteLine("OnItemSelectedForeColorChanged is called");
         }

         protected override void OnItemSizeChanged(EventArgs e)
         {
            base.OnItemSizeChanged(e);
            Console.WriteLine("OnItemSizeChanged is called");
         }

         protected override void OnItemSpacingSizeChanged(EventArgs e)
         {
            base.OnItemSpacingSizeChanged(e);
            Console.WriteLine("OnItemSpacingSizeChanged is called");
         }

         protected override void OnKeyDown(KeyEventArgs e)
         {
            base.OnKeyDown(e);
            Console.WriteLine("OnKeyDown is called");
         }

         protected override void OnLostFocus(EventArgs e)
         {
            base.OnLostFocus(e);
            Console.WriteLine("OnLostFocus is called");
         }

         protected override void OnMouseDown(MouseEventArgs e)
         {
            base.OnMouseDown(e);
            Console.WriteLine("OnMouseDown is called");
         }

         protected override void OnMouseMove(MouseEventArgs e)
         {
            base.OnMouseMove(e);
            Console.WriteLine("OnMouseMove is called");
         }

         protected override void OnMouseUp(MouseEventArgs e)
         {
            base.OnMouseUp(e);
            Console.WriteLine("OnMouseUp is called");
         }

         protected override void OnPaint(PaintEventArgs e)
         {
            base.OnPaint(e);
            Console.WriteLine("OnPaint is called");
         }

         protected override void OnPaintPropertiesChanged(EventArgs e)
         {
            base.OnPaintPropertiesChanged(e);
            Console.WriteLine("OnPaintPropertiesChanged is called");
         }

         protected override void OnScroll(EventArgs e)
         {
            base.OnScroll(e);
            Console.WriteLine("OnScroll is called");
         }

         protected override void OnScrollStyleChanged(EventArgs e)
         {
            base.OnScrollStyleChanged(e);
            Console.WriteLine("OnScrollStyleChanged is called");
         }

         protected override void OnSelectedIndexChanged(EventArgs e)
         {
            base.OnSelectedIndexChanged(e);
            Console.WriteLine("OnSelectedIndexChanged is called");
         }

         protected override void OnSelectionModeChanged(EventArgs e)
         {
            base.OnSelectionModeChanged(e);
            Console.WriteLine("OnSelectionModeChanged is called");
         }

         protected override void OnSelectUserImageChanged(EventArgs e)
         {
            base.OnSelectUserImageChanged(e);
            Console.WriteLine("OnSelectUserImageChanged is called");
         }

         protected override void OnShowItemTextChanged(EventArgs e)
         {
            base.OnShowItemTextChanged(e);
            Console.WriteLine("OnShowItemTextChanged is called");
         }

         protected override void OnSizeChanged(EventArgs e)
         {
            base.OnSizeChanged(e);
            Console.WriteLine("OnSizeChanged is called");
         }

         protected override void OnSorterChanged(EventArgs e)
         {
            base.OnSorterChanged(e);
            Console.WriteLine("OnSorterChanged is called");
         }

         protected override void OnSortingChanged(EventArgs e)
         {
            base.OnSortingChanged(e);
            Console.WriteLine("OnSortingChanged is called");
         }

         protected override void OnViewStyleChanged(EventArgs e)
         {
            base.OnViewStyleChanged(e);
            Console.WriteLine("OnViewStyleChanged is called");
         }
      }</code>
        <!--RasterImageList.OnBorderStyleChanged-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageList.EnsureVisible(System.Int32)">
      <summary>
            Ensures that the specified item is visible within the control, scrolling the contents of the control if necessary.
            </summary>
      <param name="index">The zero-based index of the item to scroll into view.</param>
      <remarks>
        <p>You can use this method to ensure that a specific item is visible within the <see cref="T:Leadtools.WinForms.RasterImageList" />
            control. When performing validation on the items in a <see cref="T:Leadtools.WinForms.RasterImageList" />, you can call the
            <see cref="M:Leadtools.WinForms.RasterImageList.EnsureVisible(System.Int32)" /> method to ensure that an item that failed validation is displayed in the
            <see cref="T:Leadtools.WinForms.RasterImageList" /> control to allow the user to perform changes on the item. If the item that you
            want to ensure is visible is located above the viewable region of the <see cref="T:Leadtools.WinForms.RasterImageList" /> control,
            calling the <see cref="M:Leadtools.WinForms.RasterImageList.EnsureVisible(System.Int32)" /> method will scroll the contents of the control until it is the first
            item in the viewable area of the control. If the item is below the viewable region of the
            <see cref="T:Leadtools.WinForms.RasterImageList" /> control, calling the <see cref="M:Leadtools.WinForms.RasterImageList.EnsureVisible(System.Int32)" /> method will scroll the contents
            of the <see cref="T:Leadtools.WinForms.RasterImageList" /> control until the item is the last item in the viewable area of the control.</p>
        <p>To determine if an item is located at the top of the display area of a <see cref="T:Leadtools.WinForms.RasterImageList" /> control,
            use the <see cref="P:Leadtools.WinForms.RasterImageList.TopIndex" /> property.</p>
      </remarks>
      <example>
        <code lang="VB">      Public Sub RasterImageList_EnsureVisible(ByVal imageList As RasterImageList)
         Dim codecs As RasterCodecs = New RasterCodecs()
         Dim image As RasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "image1.cmp"))
         imageList.ScrollStyle = RasterImageListScrollStyle.Horizontal

         ' Append the new item to the image list control
         Dim item As RasterImageListItem = New RasterImageListItem(image, 1, "New Item")
         imageList.Items.Add(item)
         Dim nIndex As Integer = imageList.Items.IndexOf(item)

         ' Make sure this new item is visible to the user
         imageList.EnsureVisible(nIndex)
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void RasterImageList_EnsureVisible(RasterImageList imageList)
      {
         RasterCodecs codecs = new RasterCodecs();
         RasterImage image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "image1.cmp"));
         imageList.ScrollStyle = RasterImageListScrollStyle.Horizontal;

         // Append the new item to the image list control
         RasterImageListItem item = new RasterImageListItem(image, 1, "New Item");
         imageList.Items.Add(item);
         int nIndex = imageList.Items.IndexOf(item);

         // Make sure this new item is visible to the user
         imageList.EnsureVisible(nIndex);
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--RasterImageList.EnsureVisible-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageList.OnScroll(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageList.Scroll" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
        <p>Raising an event invokes the event handler through a delegate.</p>
        <p>The <b>OnScroll</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
        <p>
          <b>Notes to Inheritors:</b> When overriding <b>OnScroll</b> in a derived class, be sure to call
            the base class's <b>OnScroll</b> method so that registered delegates receive the event.</p>
      </remarks>
      <example>
        <code lang="VB">      Public Class MyRasterImageList
         Inherits RasterImageList
         '.
         '.
         '.
         Protected Overrides Sub OnAutoDeselectItemsChanged(ByVal e As EventArgs)
            MyBase.OnAutoDeselectItemsChanged(e)
            Console.WriteLine("OnAutoDeselectItemsChanged is called")
         End Sub

         Protected Overrides Sub OnAutoDisposeImagesChanged(ByVal e As EventArgs)
            MyBase.OnAutoDisposeImagesChanged(e)
            Console.WriteLine("OnAutoDisposeImagesChanged is called")
         End Sub

         Protected Overrides Sub OnBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnBorderStyleChanged(e)
            Console.WriteLine("OnBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnDoubleBufferChanged(ByVal e As EventArgs)
            MyBase.OnDoubleBufferChanged(e)
            Console.WriteLine("OnDoubleBufferChanged is called")
         End Sub

         Protected Overrides Sub OnDrawItem(ByVal e As RasterImageListDrawItemEventArgs)
            MyBase.OnDrawItem(e)
            Console.WriteLine("OnDrawItem is called")
         End Sub

         Protected Overrides Sub OnEnableKeyboardChanged(ByVal e As EventArgs)
            MyBase.OnEnableKeyboardChanged(e)
            Console.WriteLine("OnEnableKeyboardChanged is called")
         End Sub

         Protected Overrides Sub OnEnableRubberBandSelectionChanged(ByVal e As EventArgs)
            MyBase.OnEnableRubberBandSelectionChanged(e)
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called")
         End Sub

         Protected Overrides Sub OnItemBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemBackColorChanged(e)
            Console.WriteLine("OnItemBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemBorderStyleChanged(e)
            Console.WriteLine("OnItemBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemForeColorChanged(e)
            Console.WriteLine("OnItemForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemImageBorderStyleChanged(e)
            Console.WriteLine("OnItemImageBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemImageSizeChanged(e)
            Console.WriteLine("OnItemImageSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedBackColorChanged(e)
            Console.WriteLine("OnItemSelectedBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedForeColorChanged(e)
            Console.WriteLine("OnItemSelectedForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSizeChanged(e)
            Console.WriteLine("OnItemSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSpacingSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSpacingSizeChanged(e)
            Console.WriteLine("OnItemSpacingSizeChanged is called")
         End Sub

         Protected Overrides Sub OnKeyDown(ByVal e As KeyEventArgs)
            MyBase.OnKeyDown(e)
            Console.WriteLine("OnKeyDown is called")
         End Sub

         Protected Overrides Sub OnLostFocus(ByVal e As EventArgs)
            MyBase.OnLostFocus(e)
            Console.WriteLine("OnLostFocus is called")
         End Sub

         Protected Overrides Sub OnMouseDown(ByVal e As MouseEventArgs)
            MyBase.OnMouseDown(e)
            Console.WriteLine("OnMouseDown is called")
         End Sub

         Protected Overrides Sub OnMouseMove(ByVal e As MouseEventArgs)
            MyBase.OnMouseMove(e)
            Console.WriteLine("OnMouseMove is called")
         End Sub

         Protected Overrides Sub OnMouseUp(ByVal e As MouseEventArgs)
            MyBase.OnMouseUp(e)
            Console.WriteLine("OnMouseUp is called")
         End Sub

         Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            MyBase.OnPaint(e)
            Console.WriteLine("OnPaint is called")
         End Sub

         Protected Overrides Sub OnPaintPropertiesChanged(ByVal e As EventArgs)
            MyBase.OnPaintPropertiesChanged(e)
            Console.WriteLine("OnPaintPropertiesChanged is called")
         End Sub

         Protected Overrides Sub OnScroll(ByVal e As EventArgs)
            MyBase.OnScroll(e)
            Console.WriteLine("OnScroll is called")
         End Sub

         Protected Overrides Sub OnScrollStyleChanged(ByVal e As EventArgs)
            MyBase.OnScrollStyleChanged(e)
            Console.WriteLine("OnScrollStyleChanged is called")
         End Sub

         Protected Overrides Sub OnSelectedIndexChanged(ByVal e As EventArgs)
            MyBase.OnSelectedIndexChanged(e)
            Console.WriteLine("OnSelectedIndexChanged is called")
         End Sub

         Protected Overrides Sub OnSelectionModeChanged(ByVal e As EventArgs)
            MyBase.OnSelectionModeChanged(e)
            Console.WriteLine("OnSelectionModeChanged is called")
         End Sub

         Protected Overrides Sub OnSelectUserImageChanged(ByVal e As EventArgs)
            MyBase.OnSelectUserImageChanged(e)
            Console.WriteLine("OnSelectUserImageChanged is called")
         End Sub

         Protected Overrides Sub OnShowItemTextChanged(ByVal e As EventArgs)
            MyBase.OnShowItemTextChanged(e)
            Console.WriteLine("OnShowItemTextChanged is called")
         End Sub

         Protected Overrides Sub OnSizeChanged(ByVal e As EventArgs)
            MyBase.OnSizeChanged(e)
            Console.WriteLine("OnSizeChanged is called")
         End Sub

         Protected Overrides Sub OnSorterChanged(ByVal e As EventArgs)
            MyBase.OnSorterChanged(e)
            Console.WriteLine("OnSorterChanged is called")
         End Sub

         Protected Overrides Sub OnSortingChanged(ByVal e As EventArgs)
            MyBase.OnSortingChanged(e)
            Console.WriteLine("OnSortingChanged is called")
         End Sub

         Protected Overrides Sub OnViewStyleChanged(ByVal e As EventArgs)
            MyBase.OnViewStyleChanged(e)
            Console.WriteLine("OnViewStyleChanged is called")
         End Sub
      End Class</code>
        <code lang="CS">      public class MyRasterImageList : RasterImageList
      {
         //.
         //.
         //.
         protected override void OnAutoDeselectItemsChanged(EventArgs e)
         {
            base.OnAutoDeselectItemsChanged(e);
            Console.WriteLine("OnAutoDeselectItemsChanged is called");
         }

         protected override void OnAutoDisposeImagesChanged(EventArgs e)
         {
            base.OnAutoDisposeImagesChanged(e);
            Console.WriteLine("OnAutoDisposeImagesChanged is called");
         }

         protected override void OnBorderStyleChanged(EventArgs e)
         {
            base.OnBorderStyleChanged(e);
            Console.WriteLine("OnBorderStyleChanged is called");
         }

         protected override void OnDoubleBufferChanged(EventArgs e)
         {
            base.OnDoubleBufferChanged(e);
            Console.WriteLine("OnDoubleBufferChanged is called");
         }

         protected override void OnDrawItem(RasterImageListDrawItemEventArgs e)
         {
            base.OnDrawItem(e);
            Console.WriteLine("OnDrawItem is called");
         }

         protected override void OnEnableKeyboardChanged(EventArgs e)
         {
            base.OnEnableKeyboardChanged(e);
            Console.WriteLine("OnEnableKeyboardChanged is called");
         }

         protected override void OnEnableRubberBandSelectionChanged(EventArgs e)
         {
            base.OnEnableRubberBandSelectionChanged(e);
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called");
         }

         protected override void OnItemBackColorChanged(EventArgs e)
         {
            base.OnItemBackColorChanged(e);
            Console.WriteLine("OnItemBackColorChanged is called");
         }

         protected override void OnItemBorderStyleChanged(EventArgs e)
         {
            base.OnItemBorderStyleChanged(e);
            Console.WriteLine("OnItemBorderStyleChanged is called");
         }

         protected override void OnItemForeColorChanged(EventArgs e)
         {
            base.OnItemForeColorChanged(e);
            Console.WriteLine("OnItemForeColorChanged is called");
         }

         protected override void OnItemImageBorderStyleChanged(EventArgs e)
         {
            base.OnItemImageBorderStyleChanged(e);
            Console.WriteLine("OnItemImageBorderStyleChanged is called");
         }

         protected override void OnItemImageSizeChanged(EventArgs e)
         {
            base.OnItemImageSizeChanged(e);
            Console.WriteLine("OnItemImageSizeChanged is called");
         }

         protected override void OnItemSelectedBackColorChanged(EventArgs e)
         {
            base.OnItemSelectedBackColorChanged(e);
            Console.WriteLine("OnItemSelectedBackColorChanged is called");
         }

         protected override void OnItemSelectedForeColorChanged(EventArgs e)
         {
            base.OnItemSelectedForeColorChanged(e);
            Console.WriteLine("OnItemSelectedForeColorChanged is called");
         }

         protected override void OnItemSizeChanged(EventArgs e)
         {
            base.OnItemSizeChanged(e);
            Console.WriteLine("OnItemSizeChanged is called");
         }

         protected override void OnItemSpacingSizeChanged(EventArgs e)
         {
            base.OnItemSpacingSizeChanged(e);
            Console.WriteLine("OnItemSpacingSizeChanged is called");
         }

         protected override void OnKeyDown(KeyEventArgs e)
         {
            base.OnKeyDown(e);
            Console.WriteLine("OnKeyDown is called");
         }

         protected override void OnLostFocus(EventArgs e)
         {
            base.OnLostFocus(e);
            Console.WriteLine("OnLostFocus is called");
         }

         protected override void OnMouseDown(MouseEventArgs e)
         {
            base.OnMouseDown(e);
            Console.WriteLine("OnMouseDown is called");
         }

         protected override void OnMouseMove(MouseEventArgs e)
         {
            base.OnMouseMove(e);
            Console.WriteLine("OnMouseMove is called");
         }

         protected override void OnMouseUp(MouseEventArgs e)
         {
            base.OnMouseUp(e);
            Console.WriteLine("OnMouseUp is called");
         }

         protected override void OnPaint(PaintEventArgs e)
         {
            base.OnPaint(e);
            Console.WriteLine("OnPaint is called");
         }

         protected override void OnPaintPropertiesChanged(EventArgs e)
         {
            base.OnPaintPropertiesChanged(e);
            Console.WriteLine("OnPaintPropertiesChanged is called");
         }

         protected override void OnScroll(EventArgs e)
         {
            base.OnScroll(e);
            Console.WriteLine("OnScroll is called");
         }

         protected override void OnScrollStyleChanged(EventArgs e)
         {
            base.OnScrollStyleChanged(e);
            Console.WriteLine("OnScrollStyleChanged is called");
         }

         protected override void OnSelectedIndexChanged(EventArgs e)
         {
            base.OnSelectedIndexChanged(e);
            Console.WriteLine("OnSelectedIndexChanged is called");
         }

         protected override void OnSelectionModeChanged(EventArgs e)
         {
            base.OnSelectionModeChanged(e);
            Console.WriteLine("OnSelectionModeChanged is called");
         }

         protected override void OnSelectUserImageChanged(EventArgs e)
         {
            base.OnSelectUserImageChanged(e);
            Console.WriteLine("OnSelectUserImageChanged is called");
         }

         protected override void OnShowItemTextChanged(EventArgs e)
         {
            base.OnShowItemTextChanged(e);
            Console.WriteLine("OnShowItemTextChanged is called");
         }

         protected override void OnSizeChanged(EventArgs e)
         {
            base.OnSizeChanged(e);
            Console.WriteLine("OnSizeChanged is called");
         }

         protected override void OnSorterChanged(EventArgs e)
         {
            base.OnSorterChanged(e);
            Console.WriteLine("OnSorterChanged is called");
         }

         protected override void OnSortingChanged(EventArgs e)
         {
            base.OnSortingChanged(e);
            Console.WriteLine("OnSortingChanged is called");
         }

         protected override void OnViewStyleChanged(EventArgs e)
         {
            base.OnViewStyleChanged(e);
            Console.WriteLine("OnViewStyleChanged is called");
         }
      }</code>
        <!--RasterImageList.OnBorderStyleChanged-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageList.ScrollItems(System.Int32)">
      <summary>
            Scrolls the content of the control.
            </summary>
      <param name="amount">Rows or columns to scroll.</param>
      <remarks>
        <p>If the <see cref="P:Leadtools.WinForms.RasterImageList.ScrollStyle" /> value is set to <see cref="T:Leadtools.WinForms.RasterImageListScrollStyle">RasterImageListScrollStyle.Vertical</see>, then <i>amount</i>
            should be the number of rows to scroll up or down.  A positive number will scroll the context of the control
            down, a negative number will scroll the context of the control up.</p>
        <p>If the <see cref="P:Leadtools.WinForms.RasterImageList.ScrollStyle" /> value is set to <see cref="T:Leadtools.WinForms.RasterImageListScrollStyle">RasterImageListScrollStyle.Horizontal</see>, then <i>amount</i>
            should be the number of columns to scroll left or right.  A positive number will scroll the context of the control
            to the right, a negative number will scroll the context of the control to the left.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageList.ScrollStyle" />.
            </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageList.OnEnableKeyboardChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageList.EnableKeyboardChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
        <p>Raising an event invokes the event handler through a delegate.</p>
        <p>The <b>OnEnableKeyboardChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
        <p>
          <b>Notes to Inheritors:</b> When overriding <b>OnEnableKeyboardChanged</b> in a derived class, be sure to call
            the base class's <b>OnEnableKeyboardChanged</b> method so that registered delegates receive the event.</p>
      </remarks>
      <example>
        <code lang="VB">      Public Class MyRasterImageList
         Inherits RasterImageList
         '.
         '.
         '.
         Protected Overrides Sub OnAutoDeselectItemsChanged(ByVal e As EventArgs)
            MyBase.OnAutoDeselectItemsChanged(e)
            Console.WriteLine("OnAutoDeselectItemsChanged is called")
         End Sub

         Protected Overrides Sub OnAutoDisposeImagesChanged(ByVal e As EventArgs)
            MyBase.OnAutoDisposeImagesChanged(e)
            Console.WriteLine("OnAutoDisposeImagesChanged is called")
         End Sub

         Protected Overrides Sub OnBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnBorderStyleChanged(e)
            Console.WriteLine("OnBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnDoubleBufferChanged(ByVal e As EventArgs)
            MyBase.OnDoubleBufferChanged(e)
            Console.WriteLine("OnDoubleBufferChanged is called")
         End Sub

         Protected Overrides Sub OnDrawItem(ByVal e As RasterImageListDrawItemEventArgs)
            MyBase.OnDrawItem(e)
            Console.WriteLine("OnDrawItem is called")
         End Sub

         Protected Overrides Sub OnEnableKeyboardChanged(ByVal e As EventArgs)
            MyBase.OnEnableKeyboardChanged(e)
            Console.WriteLine("OnEnableKeyboardChanged is called")
         End Sub

         Protected Overrides Sub OnEnableRubberBandSelectionChanged(ByVal e As EventArgs)
            MyBase.OnEnableRubberBandSelectionChanged(e)
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called")
         End Sub

         Protected Overrides Sub OnItemBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemBackColorChanged(e)
            Console.WriteLine("OnItemBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemBorderStyleChanged(e)
            Console.WriteLine("OnItemBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemForeColorChanged(e)
            Console.WriteLine("OnItemForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemImageBorderStyleChanged(e)
            Console.WriteLine("OnItemImageBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemImageSizeChanged(e)
            Console.WriteLine("OnItemImageSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedBackColorChanged(e)
            Console.WriteLine("OnItemSelectedBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedForeColorChanged(e)
            Console.WriteLine("OnItemSelectedForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSizeChanged(e)
            Console.WriteLine("OnItemSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSpacingSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSpacingSizeChanged(e)
            Console.WriteLine("OnItemSpacingSizeChanged is called")
         End Sub

         Protected Overrides Sub OnKeyDown(ByVal e As KeyEventArgs)
            MyBase.OnKeyDown(e)
            Console.WriteLine("OnKeyDown is called")
         End Sub

         Protected Overrides Sub OnLostFocus(ByVal e As EventArgs)
            MyBase.OnLostFocus(e)
            Console.WriteLine("OnLostFocus is called")
         End Sub

         Protected Overrides Sub OnMouseDown(ByVal e As MouseEventArgs)
            MyBase.OnMouseDown(e)
            Console.WriteLine("OnMouseDown is called")
         End Sub

         Protected Overrides Sub OnMouseMove(ByVal e As MouseEventArgs)
            MyBase.OnMouseMove(e)
            Console.WriteLine("OnMouseMove is called")
         End Sub

         Protected Overrides Sub OnMouseUp(ByVal e As MouseEventArgs)
            MyBase.OnMouseUp(e)
            Console.WriteLine("OnMouseUp is called")
         End Sub

         Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            MyBase.OnPaint(e)
            Console.WriteLine("OnPaint is called")
         End Sub

         Protected Overrides Sub OnPaintPropertiesChanged(ByVal e As EventArgs)
            MyBase.OnPaintPropertiesChanged(e)
            Console.WriteLine("OnPaintPropertiesChanged is called")
         End Sub

         Protected Overrides Sub OnScroll(ByVal e As EventArgs)
            MyBase.OnScroll(e)
            Console.WriteLine("OnScroll is called")
         End Sub

         Protected Overrides Sub OnScrollStyleChanged(ByVal e As EventArgs)
            MyBase.OnScrollStyleChanged(e)
            Console.WriteLine("OnScrollStyleChanged is called")
         End Sub

         Protected Overrides Sub OnSelectedIndexChanged(ByVal e As EventArgs)
            MyBase.OnSelectedIndexChanged(e)
            Console.WriteLine("OnSelectedIndexChanged is called")
         End Sub

         Protected Overrides Sub OnSelectionModeChanged(ByVal e As EventArgs)
            MyBase.OnSelectionModeChanged(e)
            Console.WriteLine("OnSelectionModeChanged is called")
         End Sub

         Protected Overrides Sub OnSelectUserImageChanged(ByVal e As EventArgs)
            MyBase.OnSelectUserImageChanged(e)
            Console.WriteLine("OnSelectUserImageChanged is called")
         End Sub

         Protected Overrides Sub OnShowItemTextChanged(ByVal e As EventArgs)
            MyBase.OnShowItemTextChanged(e)
            Console.WriteLine("OnShowItemTextChanged is called")
         End Sub

         Protected Overrides Sub OnSizeChanged(ByVal e As EventArgs)
            MyBase.OnSizeChanged(e)
            Console.WriteLine("OnSizeChanged is called")
         End Sub

         Protected Overrides Sub OnSorterChanged(ByVal e As EventArgs)
            MyBase.OnSorterChanged(e)
            Console.WriteLine("OnSorterChanged is called")
         End Sub

         Protected Overrides Sub OnSortingChanged(ByVal e As EventArgs)
            MyBase.OnSortingChanged(e)
            Console.WriteLine("OnSortingChanged is called")
         End Sub

         Protected Overrides Sub OnViewStyleChanged(ByVal e As EventArgs)
            MyBase.OnViewStyleChanged(e)
            Console.WriteLine("OnViewStyleChanged is called")
         End Sub
      End Class</code>
        <code lang="CS">      public class MyRasterImageList : RasterImageList
      {
         //.
         //.
         //.
         protected override void OnAutoDeselectItemsChanged(EventArgs e)
         {
            base.OnAutoDeselectItemsChanged(e);
            Console.WriteLine("OnAutoDeselectItemsChanged is called");
         }

         protected override void OnAutoDisposeImagesChanged(EventArgs e)
         {
            base.OnAutoDisposeImagesChanged(e);
            Console.WriteLine("OnAutoDisposeImagesChanged is called");
         }

         protected override void OnBorderStyleChanged(EventArgs e)
         {
            base.OnBorderStyleChanged(e);
            Console.WriteLine("OnBorderStyleChanged is called");
         }

         protected override void OnDoubleBufferChanged(EventArgs e)
         {
            base.OnDoubleBufferChanged(e);
            Console.WriteLine("OnDoubleBufferChanged is called");
         }

         protected override void OnDrawItem(RasterImageListDrawItemEventArgs e)
         {
            base.OnDrawItem(e);
            Console.WriteLine("OnDrawItem is called");
         }

         protected override void OnEnableKeyboardChanged(EventArgs e)
         {
            base.OnEnableKeyboardChanged(e);
            Console.WriteLine("OnEnableKeyboardChanged is called");
         }

         protected override void OnEnableRubberBandSelectionChanged(EventArgs e)
         {
            base.OnEnableRubberBandSelectionChanged(e);
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called");
         }

         protected override void OnItemBackColorChanged(EventArgs e)
         {
            base.OnItemBackColorChanged(e);
            Console.WriteLine("OnItemBackColorChanged is called");
         }

         protected override void OnItemBorderStyleChanged(EventArgs e)
         {
            base.OnItemBorderStyleChanged(e);
            Console.WriteLine("OnItemBorderStyleChanged is called");
         }

         protected override void OnItemForeColorChanged(EventArgs e)
         {
            base.OnItemForeColorChanged(e);
            Console.WriteLine("OnItemForeColorChanged is called");
         }

         protected override void OnItemImageBorderStyleChanged(EventArgs e)
         {
            base.OnItemImageBorderStyleChanged(e);
            Console.WriteLine("OnItemImageBorderStyleChanged is called");
         }

         protected override void OnItemImageSizeChanged(EventArgs e)
         {
            base.OnItemImageSizeChanged(e);
            Console.WriteLine("OnItemImageSizeChanged is called");
         }

         protected override void OnItemSelectedBackColorChanged(EventArgs e)
         {
            base.OnItemSelectedBackColorChanged(e);
            Console.WriteLine("OnItemSelectedBackColorChanged is called");
         }

         protected override void OnItemSelectedForeColorChanged(EventArgs e)
         {
            base.OnItemSelectedForeColorChanged(e);
            Console.WriteLine("OnItemSelectedForeColorChanged is called");
         }

         protected override void OnItemSizeChanged(EventArgs e)
         {
            base.OnItemSizeChanged(e);
            Console.WriteLine("OnItemSizeChanged is called");
         }

         protected override void OnItemSpacingSizeChanged(EventArgs e)
         {
            base.OnItemSpacingSizeChanged(e);
            Console.WriteLine("OnItemSpacingSizeChanged is called");
         }

         protected override void OnKeyDown(KeyEventArgs e)
         {
            base.OnKeyDown(e);
            Console.WriteLine("OnKeyDown is called");
         }

         protected override void OnLostFocus(EventArgs e)
         {
            base.OnLostFocus(e);
            Console.WriteLine("OnLostFocus is called");
         }

         protected override void OnMouseDown(MouseEventArgs e)
         {
            base.OnMouseDown(e);
            Console.WriteLine("OnMouseDown is called");
         }

         protected override void OnMouseMove(MouseEventArgs e)
         {
            base.OnMouseMove(e);
            Console.WriteLine("OnMouseMove is called");
         }

         protected override void OnMouseUp(MouseEventArgs e)
         {
            base.OnMouseUp(e);
            Console.WriteLine("OnMouseUp is called");
         }

         protected override void OnPaint(PaintEventArgs e)
         {
            base.OnPaint(e);
            Console.WriteLine("OnPaint is called");
         }

         protected override void OnPaintPropertiesChanged(EventArgs e)
         {
            base.OnPaintPropertiesChanged(e);
            Console.WriteLine("OnPaintPropertiesChanged is called");
         }

         protected override void OnScroll(EventArgs e)
         {
            base.OnScroll(e);
            Console.WriteLine("OnScroll is called");
         }

         protected override void OnScrollStyleChanged(EventArgs e)
         {
            base.OnScrollStyleChanged(e);
            Console.WriteLine("OnScrollStyleChanged is called");
         }

         protected override void OnSelectedIndexChanged(EventArgs e)
         {
            base.OnSelectedIndexChanged(e);
            Console.WriteLine("OnSelectedIndexChanged is called");
         }

         protected override void OnSelectionModeChanged(EventArgs e)
         {
            base.OnSelectionModeChanged(e);
            Console.WriteLine("OnSelectionModeChanged is called");
         }

         protected override void OnSelectUserImageChanged(EventArgs e)
         {
            base.OnSelectUserImageChanged(e);
            Console.WriteLine("OnSelectUserImageChanged is called");
         }

         protected override void OnShowItemTextChanged(EventArgs e)
         {
            base.OnShowItemTextChanged(e);
            Console.WriteLine("OnShowItemTextChanged is called");
         }

         protected override void OnSizeChanged(EventArgs e)
         {
            base.OnSizeChanged(e);
            Console.WriteLine("OnSizeChanged is called");
         }

         protected override void OnSorterChanged(EventArgs e)
         {
            base.OnSorterChanged(e);
            Console.WriteLine("OnSorterChanged is called");
         }

         protected override void OnSortingChanged(EventArgs e)
         {
            base.OnSortingChanged(e);
            Console.WriteLine("OnSortingChanged is called");
         }

         protected override void OnViewStyleChanged(EventArgs e)
         {
            base.OnViewStyleChanged(e);
            Console.WriteLine("OnViewStyleChanged is called");
         }
      }</code>
        <!--RasterImageList.OnBorderStyleChanged-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageList.IsInputKey(System.Windows.Forms.Keys)">
      <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)">Control.IsInputKey</see>.
            </summary>
      <param name="keyData">One of the <see cref="T:System.Windows.Forms.Keys" /> values.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageList.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
      <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)">Control.OnKeyDown</see>.
            </summary>
      <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that contains the event data</param>
      <remarks>
        <para>Raising an event invokes the event handler through a delegate.</para>
        <para>The <b>OnKeyDown</b> method also allows derived classes to handle the event without attaching a delegate.
            This is the preferred technique for handling the event in a derived class.</para>
        <para>
          <b>Notes to Inheritors</b> When overriding <b>OnKeyDown</b> in a derived class, be sure to call the base class's <b>OnKeyDown</b> method so that registered delegates receive the event.</para>
      </remarks>
      <example>
        <code lang="VB">      Public Class MyRasterImageList
         Inherits RasterImageList
         '.
         '.
         '.
         Protected Overrides Sub OnAutoDeselectItemsChanged(ByVal e As EventArgs)
            MyBase.OnAutoDeselectItemsChanged(e)
            Console.WriteLine("OnAutoDeselectItemsChanged is called")
         End Sub

         Protected Overrides Sub OnAutoDisposeImagesChanged(ByVal e As EventArgs)
            MyBase.OnAutoDisposeImagesChanged(e)
            Console.WriteLine("OnAutoDisposeImagesChanged is called")
         End Sub

         Protected Overrides Sub OnBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnBorderStyleChanged(e)
            Console.WriteLine("OnBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnDoubleBufferChanged(ByVal e As EventArgs)
            MyBase.OnDoubleBufferChanged(e)
            Console.WriteLine("OnDoubleBufferChanged is called")
         End Sub

         Protected Overrides Sub OnDrawItem(ByVal e As RasterImageListDrawItemEventArgs)
            MyBase.OnDrawItem(e)
            Console.WriteLine("OnDrawItem is called")
         End Sub

         Protected Overrides Sub OnEnableKeyboardChanged(ByVal e As EventArgs)
            MyBase.OnEnableKeyboardChanged(e)
            Console.WriteLine("OnEnableKeyboardChanged is called")
         End Sub

         Protected Overrides Sub OnEnableRubberBandSelectionChanged(ByVal e As EventArgs)
            MyBase.OnEnableRubberBandSelectionChanged(e)
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called")
         End Sub

         Protected Overrides Sub OnItemBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemBackColorChanged(e)
            Console.WriteLine("OnItemBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemBorderStyleChanged(e)
            Console.WriteLine("OnItemBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemForeColorChanged(e)
            Console.WriteLine("OnItemForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemImageBorderStyleChanged(e)
            Console.WriteLine("OnItemImageBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemImageSizeChanged(e)
            Console.WriteLine("OnItemImageSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedBackColorChanged(e)
            Console.WriteLine("OnItemSelectedBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedForeColorChanged(e)
            Console.WriteLine("OnItemSelectedForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSizeChanged(e)
            Console.WriteLine("OnItemSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSpacingSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSpacingSizeChanged(e)
            Console.WriteLine("OnItemSpacingSizeChanged is called")
         End Sub

         Protected Overrides Sub OnKeyDown(ByVal e As KeyEventArgs)
            MyBase.OnKeyDown(e)
            Console.WriteLine("OnKeyDown is called")
         End Sub

         Protected Overrides Sub OnLostFocus(ByVal e As EventArgs)
            MyBase.OnLostFocus(e)
            Console.WriteLine("OnLostFocus is called")
         End Sub

         Protected Overrides Sub OnMouseDown(ByVal e As MouseEventArgs)
            MyBase.OnMouseDown(e)
            Console.WriteLine("OnMouseDown is called")
         End Sub

         Protected Overrides Sub OnMouseMove(ByVal e As MouseEventArgs)
            MyBase.OnMouseMove(e)
            Console.WriteLine("OnMouseMove is called")
         End Sub

         Protected Overrides Sub OnMouseUp(ByVal e As MouseEventArgs)
            MyBase.OnMouseUp(e)
            Console.WriteLine("OnMouseUp is called")
         End Sub

         Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            MyBase.OnPaint(e)
            Console.WriteLine("OnPaint is called")
         End Sub

         Protected Overrides Sub OnPaintPropertiesChanged(ByVal e As EventArgs)
            MyBase.OnPaintPropertiesChanged(e)
            Console.WriteLine("OnPaintPropertiesChanged is called")
         End Sub

         Protected Overrides Sub OnScroll(ByVal e As EventArgs)
            MyBase.OnScroll(e)
            Console.WriteLine("OnScroll is called")
         End Sub

         Protected Overrides Sub OnScrollStyleChanged(ByVal e As EventArgs)
            MyBase.OnScrollStyleChanged(e)
            Console.WriteLine("OnScrollStyleChanged is called")
         End Sub

         Protected Overrides Sub OnSelectedIndexChanged(ByVal e As EventArgs)
            MyBase.OnSelectedIndexChanged(e)
            Console.WriteLine("OnSelectedIndexChanged is called")
         End Sub

         Protected Overrides Sub OnSelectionModeChanged(ByVal e As EventArgs)
            MyBase.OnSelectionModeChanged(e)
            Console.WriteLine("OnSelectionModeChanged is called")
         End Sub

         Protected Overrides Sub OnSelectUserImageChanged(ByVal e As EventArgs)
            MyBase.OnSelectUserImageChanged(e)
            Console.WriteLine("OnSelectUserImageChanged is called")
         End Sub

         Protected Overrides Sub OnShowItemTextChanged(ByVal e As EventArgs)
            MyBase.OnShowItemTextChanged(e)
            Console.WriteLine("OnShowItemTextChanged is called")
         End Sub

         Protected Overrides Sub OnSizeChanged(ByVal e As EventArgs)
            MyBase.OnSizeChanged(e)
            Console.WriteLine("OnSizeChanged is called")
         End Sub

         Protected Overrides Sub OnSorterChanged(ByVal e As EventArgs)
            MyBase.OnSorterChanged(e)
            Console.WriteLine("OnSorterChanged is called")
         End Sub

         Protected Overrides Sub OnSortingChanged(ByVal e As EventArgs)
            MyBase.OnSortingChanged(e)
            Console.WriteLine("OnSortingChanged is called")
         End Sub

         Protected Overrides Sub OnViewStyleChanged(ByVal e As EventArgs)
            MyBase.OnViewStyleChanged(e)
            Console.WriteLine("OnViewStyleChanged is called")
         End Sub
      End Class</code>
        <code lang="CS">      public class MyRasterImageList : RasterImageList
      {
         //.
         //.
         //.
         protected override void OnAutoDeselectItemsChanged(EventArgs e)
         {
            base.OnAutoDeselectItemsChanged(e);
            Console.WriteLine("OnAutoDeselectItemsChanged is called");
         }

         protected override void OnAutoDisposeImagesChanged(EventArgs e)
         {
            base.OnAutoDisposeImagesChanged(e);
            Console.WriteLine("OnAutoDisposeImagesChanged is called");
         }

         protected override void OnBorderStyleChanged(EventArgs e)
         {
            base.OnBorderStyleChanged(e);
            Console.WriteLine("OnBorderStyleChanged is called");
         }

         protected override void OnDoubleBufferChanged(EventArgs e)
         {
            base.OnDoubleBufferChanged(e);
            Console.WriteLine("OnDoubleBufferChanged is called");
         }

         protected override void OnDrawItem(RasterImageListDrawItemEventArgs e)
         {
            base.OnDrawItem(e);
            Console.WriteLine("OnDrawItem is called");
         }

         protected override void OnEnableKeyboardChanged(EventArgs e)
         {
            base.OnEnableKeyboardChanged(e);
            Console.WriteLine("OnEnableKeyboardChanged is called");
         }

         protected override void OnEnableRubberBandSelectionChanged(EventArgs e)
         {
            base.OnEnableRubberBandSelectionChanged(e);
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called");
         }

         protected override void OnItemBackColorChanged(EventArgs e)
         {
            base.OnItemBackColorChanged(e);
            Console.WriteLine("OnItemBackColorChanged is called");
         }

         protected override void OnItemBorderStyleChanged(EventArgs e)
         {
            base.OnItemBorderStyleChanged(e);
            Console.WriteLine("OnItemBorderStyleChanged is called");
         }

         protected override void OnItemForeColorChanged(EventArgs e)
         {
            base.OnItemForeColorChanged(e);
            Console.WriteLine("OnItemForeColorChanged is called");
         }

         protected override void OnItemImageBorderStyleChanged(EventArgs e)
         {
            base.OnItemImageBorderStyleChanged(e);
            Console.WriteLine("OnItemImageBorderStyleChanged is called");
         }

         protected override void OnItemImageSizeChanged(EventArgs e)
         {
            base.OnItemImageSizeChanged(e);
            Console.WriteLine("OnItemImageSizeChanged is called");
         }

         protected override void OnItemSelectedBackColorChanged(EventArgs e)
         {
            base.OnItemSelectedBackColorChanged(e);
            Console.WriteLine("OnItemSelectedBackColorChanged is called");
         }

         protected override void OnItemSelectedForeColorChanged(EventArgs e)
         {
            base.OnItemSelectedForeColorChanged(e);
            Console.WriteLine("OnItemSelectedForeColorChanged is called");
         }

         protected override void OnItemSizeChanged(EventArgs e)
         {
            base.OnItemSizeChanged(e);
            Console.WriteLine("OnItemSizeChanged is called");
         }

         protected override void OnItemSpacingSizeChanged(EventArgs e)
         {
            base.OnItemSpacingSizeChanged(e);
            Console.WriteLine("OnItemSpacingSizeChanged is called");
         }

         protected override void OnKeyDown(KeyEventArgs e)
         {
            base.OnKeyDown(e);
            Console.WriteLine("OnKeyDown is called");
         }

         protected override void OnLostFocus(EventArgs e)
         {
            base.OnLostFocus(e);
            Console.WriteLine("OnLostFocus is called");
         }

         protected override void OnMouseDown(MouseEventArgs e)
         {
            base.OnMouseDown(e);
            Console.WriteLine("OnMouseDown is called");
         }

         protected override void OnMouseMove(MouseEventArgs e)
         {
            base.OnMouseMove(e);
            Console.WriteLine("OnMouseMove is called");
         }

         protected override void OnMouseUp(MouseEventArgs e)
         {
            base.OnMouseUp(e);
            Console.WriteLine("OnMouseUp is called");
         }

         protected override void OnPaint(PaintEventArgs e)
         {
            base.OnPaint(e);
            Console.WriteLine("OnPaint is called");
         }

         protected override void OnPaintPropertiesChanged(EventArgs e)
         {
            base.OnPaintPropertiesChanged(e);
            Console.WriteLine("OnPaintPropertiesChanged is called");
         }

         protected override void OnScroll(EventArgs e)
         {
            base.OnScroll(e);
            Console.WriteLine("OnScroll is called");
         }

         protected override void OnScrollStyleChanged(EventArgs e)
         {
            base.OnScrollStyleChanged(e);
            Console.WriteLine("OnScrollStyleChanged is called");
         }

         protected override void OnSelectedIndexChanged(EventArgs e)
         {
            base.OnSelectedIndexChanged(e);
            Console.WriteLine("OnSelectedIndexChanged is called");
         }

         protected override void OnSelectionModeChanged(EventArgs e)
         {
            base.OnSelectionModeChanged(e);
            Console.WriteLine("OnSelectionModeChanged is called");
         }

         protected override void OnSelectUserImageChanged(EventArgs e)
         {
            base.OnSelectUserImageChanged(e);
            Console.WriteLine("OnSelectUserImageChanged is called");
         }

         protected override void OnShowItemTextChanged(EventArgs e)
         {
            base.OnShowItemTextChanged(e);
            Console.WriteLine("OnShowItemTextChanged is called");
         }

         protected override void OnSizeChanged(EventArgs e)
         {
            base.OnSizeChanged(e);
            Console.WriteLine("OnSizeChanged is called");
         }

         protected override void OnSorterChanged(EventArgs e)
         {
            base.OnSorterChanged(e);
            Console.WriteLine("OnSorterChanged is called");
         }

         protected override void OnSortingChanged(EventArgs e)
         {
            base.OnSortingChanged(e);
            Console.WriteLine("OnSortingChanged is called");
         }

         protected override void OnViewStyleChanged(EventArgs e)
         {
            base.OnViewStyleChanged(e);
            Console.WriteLine("OnViewStyleChanged is called");
         }
      }</code>
        <!--RasterImageList.OnBorderStyleChanged-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageList.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
      <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)">Control.OnMouseDown</see>.
            </summary>
      <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
      <remarks>
        <para>Raising an event invokes the event handler through a delegate.</para>
        <para>The <b>OnMouseDown</b> method also allows derived classes to handle the event without attaching a delegate.
            This is the preferred technique for handling the event in a derived class.</para>
        <para>
          <b>Notes to Inheritors</b> When overriding <b>OnMouseDown</b> in a derived class, be sure to call the base class's <b>OnMouseDown</b> method so that registered delegates receive the event.</para>
      </remarks>
      <example>
        <code lang="VB">      Public Class MyRasterImageList
         Inherits RasterImageList
         '.
         '.
         '.
         Protected Overrides Sub OnAutoDeselectItemsChanged(ByVal e As EventArgs)
            MyBase.OnAutoDeselectItemsChanged(e)
            Console.WriteLine("OnAutoDeselectItemsChanged is called")
         End Sub

         Protected Overrides Sub OnAutoDisposeImagesChanged(ByVal e As EventArgs)
            MyBase.OnAutoDisposeImagesChanged(e)
            Console.WriteLine("OnAutoDisposeImagesChanged is called")
         End Sub

         Protected Overrides Sub OnBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnBorderStyleChanged(e)
            Console.WriteLine("OnBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnDoubleBufferChanged(ByVal e As EventArgs)
            MyBase.OnDoubleBufferChanged(e)
            Console.WriteLine("OnDoubleBufferChanged is called")
         End Sub

         Protected Overrides Sub OnDrawItem(ByVal e As RasterImageListDrawItemEventArgs)
            MyBase.OnDrawItem(e)
            Console.WriteLine("OnDrawItem is called")
         End Sub

         Protected Overrides Sub OnEnableKeyboardChanged(ByVal e As EventArgs)
            MyBase.OnEnableKeyboardChanged(e)
            Console.WriteLine("OnEnableKeyboardChanged is called")
         End Sub

         Protected Overrides Sub OnEnableRubberBandSelectionChanged(ByVal e As EventArgs)
            MyBase.OnEnableRubberBandSelectionChanged(e)
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called")
         End Sub

         Protected Overrides Sub OnItemBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemBackColorChanged(e)
            Console.WriteLine("OnItemBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemBorderStyleChanged(e)
            Console.WriteLine("OnItemBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemForeColorChanged(e)
            Console.WriteLine("OnItemForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemImageBorderStyleChanged(e)
            Console.WriteLine("OnItemImageBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemImageSizeChanged(e)
            Console.WriteLine("OnItemImageSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedBackColorChanged(e)
            Console.WriteLine("OnItemSelectedBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedForeColorChanged(e)
            Console.WriteLine("OnItemSelectedForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSizeChanged(e)
            Console.WriteLine("OnItemSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSpacingSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSpacingSizeChanged(e)
            Console.WriteLine("OnItemSpacingSizeChanged is called")
         End Sub

         Protected Overrides Sub OnKeyDown(ByVal e As KeyEventArgs)
            MyBase.OnKeyDown(e)
            Console.WriteLine("OnKeyDown is called")
         End Sub

         Protected Overrides Sub OnLostFocus(ByVal e As EventArgs)
            MyBase.OnLostFocus(e)
            Console.WriteLine("OnLostFocus is called")
         End Sub

         Protected Overrides Sub OnMouseDown(ByVal e As MouseEventArgs)
            MyBase.OnMouseDown(e)
            Console.WriteLine("OnMouseDown is called")
         End Sub

         Protected Overrides Sub OnMouseMove(ByVal e As MouseEventArgs)
            MyBase.OnMouseMove(e)
            Console.WriteLine("OnMouseMove is called")
         End Sub

         Protected Overrides Sub OnMouseUp(ByVal e As MouseEventArgs)
            MyBase.OnMouseUp(e)
            Console.WriteLine("OnMouseUp is called")
         End Sub

         Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            MyBase.OnPaint(e)
            Console.WriteLine("OnPaint is called")
         End Sub

         Protected Overrides Sub OnPaintPropertiesChanged(ByVal e As EventArgs)
            MyBase.OnPaintPropertiesChanged(e)
            Console.WriteLine("OnPaintPropertiesChanged is called")
         End Sub

         Protected Overrides Sub OnScroll(ByVal e As EventArgs)
            MyBase.OnScroll(e)
            Console.WriteLine("OnScroll is called")
         End Sub

         Protected Overrides Sub OnScrollStyleChanged(ByVal e As EventArgs)
            MyBase.OnScrollStyleChanged(e)
            Console.WriteLine("OnScrollStyleChanged is called")
         End Sub

         Protected Overrides Sub OnSelectedIndexChanged(ByVal e As EventArgs)
            MyBase.OnSelectedIndexChanged(e)
            Console.WriteLine("OnSelectedIndexChanged is called")
         End Sub

         Protected Overrides Sub OnSelectionModeChanged(ByVal e As EventArgs)
            MyBase.OnSelectionModeChanged(e)
            Console.WriteLine("OnSelectionModeChanged is called")
         End Sub

         Protected Overrides Sub OnSelectUserImageChanged(ByVal e As EventArgs)
            MyBase.OnSelectUserImageChanged(e)
            Console.WriteLine("OnSelectUserImageChanged is called")
         End Sub

         Protected Overrides Sub OnShowItemTextChanged(ByVal e As EventArgs)
            MyBase.OnShowItemTextChanged(e)
            Console.WriteLine("OnShowItemTextChanged is called")
         End Sub

         Protected Overrides Sub OnSizeChanged(ByVal e As EventArgs)
            MyBase.OnSizeChanged(e)
            Console.WriteLine("OnSizeChanged is called")
         End Sub

         Protected Overrides Sub OnSorterChanged(ByVal e As EventArgs)
            MyBase.OnSorterChanged(e)
            Console.WriteLine("OnSorterChanged is called")
         End Sub

         Protected Overrides Sub OnSortingChanged(ByVal e As EventArgs)
            MyBase.OnSortingChanged(e)
            Console.WriteLine("OnSortingChanged is called")
         End Sub

         Protected Overrides Sub OnViewStyleChanged(ByVal e As EventArgs)
            MyBase.OnViewStyleChanged(e)
            Console.WriteLine("OnViewStyleChanged is called")
         End Sub
      End Class</code>
        <code lang="CS">      public class MyRasterImageList : RasterImageList
      {
         //.
         //.
         //.
         protected override void OnAutoDeselectItemsChanged(EventArgs e)
         {
            base.OnAutoDeselectItemsChanged(e);
            Console.WriteLine("OnAutoDeselectItemsChanged is called");
         }

         protected override void OnAutoDisposeImagesChanged(EventArgs e)
         {
            base.OnAutoDisposeImagesChanged(e);
            Console.WriteLine("OnAutoDisposeImagesChanged is called");
         }

         protected override void OnBorderStyleChanged(EventArgs e)
         {
            base.OnBorderStyleChanged(e);
            Console.WriteLine("OnBorderStyleChanged is called");
         }

         protected override void OnDoubleBufferChanged(EventArgs e)
         {
            base.OnDoubleBufferChanged(e);
            Console.WriteLine("OnDoubleBufferChanged is called");
         }

         protected override void OnDrawItem(RasterImageListDrawItemEventArgs e)
         {
            base.OnDrawItem(e);
            Console.WriteLine("OnDrawItem is called");
         }

         protected override void OnEnableKeyboardChanged(EventArgs e)
         {
            base.OnEnableKeyboardChanged(e);
            Console.WriteLine("OnEnableKeyboardChanged is called");
         }

         protected override void OnEnableRubberBandSelectionChanged(EventArgs e)
         {
            base.OnEnableRubberBandSelectionChanged(e);
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called");
         }

         protected override void OnItemBackColorChanged(EventArgs e)
         {
            base.OnItemBackColorChanged(e);
            Console.WriteLine("OnItemBackColorChanged is called");
         }

         protected override void OnItemBorderStyleChanged(EventArgs e)
         {
            base.OnItemBorderStyleChanged(e);
            Console.WriteLine("OnItemBorderStyleChanged is called");
         }

         protected override void OnItemForeColorChanged(EventArgs e)
         {
            base.OnItemForeColorChanged(e);
            Console.WriteLine("OnItemForeColorChanged is called");
         }

         protected override void OnItemImageBorderStyleChanged(EventArgs e)
         {
            base.OnItemImageBorderStyleChanged(e);
            Console.WriteLine("OnItemImageBorderStyleChanged is called");
         }

         protected override void OnItemImageSizeChanged(EventArgs e)
         {
            base.OnItemImageSizeChanged(e);
            Console.WriteLine("OnItemImageSizeChanged is called");
         }

         protected override void OnItemSelectedBackColorChanged(EventArgs e)
         {
            base.OnItemSelectedBackColorChanged(e);
            Console.WriteLine("OnItemSelectedBackColorChanged is called");
         }

         protected override void OnItemSelectedForeColorChanged(EventArgs e)
         {
            base.OnItemSelectedForeColorChanged(e);
            Console.WriteLine("OnItemSelectedForeColorChanged is called");
         }

         protected override void OnItemSizeChanged(EventArgs e)
         {
            base.OnItemSizeChanged(e);
            Console.WriteLine("OnItemSizeChanged is called");
         }

         protected override void OnItemSpacingSizeChanged(EventArgs e)
         {
            base.OnItemSpacingSizeChanged(e);
            Console.WriteLine("OnItemSpacingSizeChanged is called");
         }

         protected override void OnKeyDown(KeyEventArgs e)
         {
            base.OnKeyDown(e);
            Console.WriteLine("OnKeyDown is called");
         }

         protected override void OnLostFocus(EventArgs e)
         {
            base.OnLostFocus(e);
            Console.WriteLine("OnLostFocus is called");
         }

         protected override void OnMouseDown(MouseEventArgs e)
         {
            base.OnMouseDown(e);
            Console.WriteLine("OnMouseDown is called");
         }

         protected override void OnMouseMove(MouseEventArgs e)
         {
            base.OnMouseMove(e);
            Console.WriteLine("OnMouseMove is called");
         }

         protected override void OnMouseUp(MouseEventArgs e)
         {
            base.OnMouseUp(e);
            Console.WriteLine("OnMouseUp is called");
         }

         protected override void OnPaint(PaintEventArgs e)
         {
            base.OnPaint(e);
            Console.WriteLine("OnPaint is called");
         }

         protected override void OnPaintPropertiesChanged(EventArgs e)
         {
            base.OnPaintPropertiesChanged(e);
            Console.WriteLine("OnPaintPropertiesChanged is called");
         }

         protected override void OnScroll(EventArgs e)
         {
            base.OnScroll(e);
            Console.WriteLine("OnScroll is called");
         }

         protected override void OnScrollStyleChanged(EventArgs e)
         {
            base.OnScrollStyleChanged(e);
            Console.WriteLine("OnScrollStyleChanged is called");
         }

         protected override void OnSelectedIndexChanged(EventArgs e)
         {
            base.OnSelectedIndexChanged(e);
            Console.WriteLine("OnSelectedIndexChanged is called");
         }

         protected override void OnSelectionModeChanged(EventArgs e)
         {
            base.OnSelectionModeChanged(e);
            Console.WriteLine("OnSelectionModeChanged is called");
         }

         protected override void OnSelectUserImageChanged(EventArgs e)
         {
            base.OnSelectUserImageChanged(e);
            Console.WriteLine("OnSelectUserImageChanged is called");
         }

         protected override void OnShowItemTextChanged(EventArgs e)
         {
            base.OnShowItemTextChanged(e);
            Console.WriteLine("OnShowItemTextChanged is called");
         }

         protected override void OnSizeChanged(EventArgs e)
         {
            base.OnSizeChanged(e);
            Console.WriteLine("OnSizeChanged is called");
         }

         protected override void OnSorterChanged(EventArgs e)
         {
            base.OnSorterChanged(e);
            Console.WriteLine("OnSorterChanged is called");
         }

         protected override void OnSortingChanged(EventArgs e)
         {
            base.OnSortingChanged(e);
            Console.WriteLine("OnSortingChanged is called");
         }

         protected override void OnViewStyleChanged(EventArgs e)
         {
            base.OnViewStyleChanged(e);
            Console.WriteLine("OnViewStyleChanged is called");
         }
      }</code>
        <!--RasterImageList.OnBorderStyleChanged-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageList.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
      <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)">Control.OnMouseMove</see>.
            </summary>
      <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
      <remarks>
        <para>Raising an event invokes the event handler through a delegate.</para>
        <para>The <b>OnMouseMove</b> method also allows derived classes to handle the event without attaching a delegate.
            This is the preferred technique for handling the event in a derived class.</para>
        <para>
          <b>Notes to Inheritors</b> When overriding <b>OnMouseMove</b> in a derived class, be sure to call the base class's <b>OnMouseMove</b> method so that registered delegates receive the event.</para>
      </remarks>
      <example>
        <code lang="VB">      Public Class MyRasterImageList
         Inherits RasterImageList
         '.
         '.
         '.
         Protected Overrides Sub OnAutoDeselectItemsChanged(ByVal e As EventArgs)
            MyBase.OnAutoDeselectItemsChanged(e)
            Console.WriteLine("OnAutoDeselectItemsChanged is called")
         End Sub

         Protected Overrides Sub OnAutoDisposeImagesChanged(ByVal e As EventArgs)
            MyBase.OnAutoDisposeImagesChanged(e)
            Console.WriteLine("OnAutoDisposeImagesChanged is called")
         End Sub

         Protected Overrides Sub OnBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnBorderStyleChanged(e)
            Console.WriteLine("OnBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnDoubleBufferChanged(ByVal e As EventArgs)
            MyBase.OnDoubleBufferChanged(e)
            Console.WriteLine("OnDoubleBufferChanged is called")
         End Sub

         Protected Overrides Sub OnDrawItem(ByVal e As RasterImageListDrawItemEventArgs)
            MyBase.OnDrawItem(e)
            Console.WriteLine("OnDrawItem is called")
         End Sub

         Protected Overrides Sub OnEnableKeyboardChanged(ByVal e As EventArgs)
            MyBase.OnEnableKeyboardChanged(e)
            Console.WriteLine("OnEnableKeyboardChanged is called")
         End Sub

         Protected Overrides Sub OnEnableRubberBandSelectionChanged(ByVal e As EventArgs)
            MyBase.OnEnableRubberBandSelectionChanged(e)
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called")
         End Sub

         Protected Overrides Sub OnItemBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemBackColorChanged(e)
            Console.WriteLine("OnItemBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemBorderStyleChanged(e)
            Console.WriteLine("OnItemBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemForeColorChanged(e)
            Console.WriteLine("OnItemForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemImageBorderStyleChanged(e)
            Console.WriteLine("OnItemImageBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemImageSizeChanged(e)
            Console.WriteLine("OnItemImageSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedBackColorChanged(e)
            Console.WriteLine("OnItemSelectedBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedForeColorChanged(e)
            Console.WriteLine("OnItemSelectedForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSizeChanged(e)
            Console.WriteLine("OnItemSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSpacingSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSpacingSizeChanged(e)
            Console.WriteLine("OnItemSpacingSizeChanged is called")
         End Sub

         Protected Overrides Sub OnKeyDown(ByVal e As KeyEventArgs)
            MyBase.OnKeyDown(e)
            Console.WriteLine("OnKeyDown is called")
         End Sub

         Protected Overrides Sub OnLostFocus(ByVal e As EventArgs)
            MyBase.OnLostFocus(e)
            Console.WriteLine("OnLostFocus is called")
         End Sub

         Protected Overrides Sub OnMouseDown(ByVal e As MouseEventArgs)
            MyBase.OnMouseDown(e)
            Console.WriteLine("OnMouseDown is called")
         End Sub

         Protected Overrides Sub OnMouseMove(ByVal e As MouseEventArgs)
            MyBase.OnMouseMove(e)
            Console.WriteLine("OnMouseMove is called")
         End Sub

         Protected Overrides Sub OnMouseUp(ByVal e As MouseEventArgs)
            MyBase.OnMouseUp(e)
            Console.WriteLine("OnMouseUp is called")
         End Sub

         Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            MyBase.OnPaint(e)
            Console.WriteLine("OnPaint is called")
         End Sub

         Protected Overrides Sub OnPaintPropertiesChanged(ByVal e As EventArgs)
            MyBase.OnPaintPropertiesChanged(e)
            Console.WriteLine("OnPaintPropertiesChanged is called")
         End Sub

         Protected Overrides Sub OnScroll(ByVal e As EventArgs)
            MyBase.OnScroll(e)
            Console.WriteLine("OnScroll is called")
         End Sub

         Protected Overrides Sub OnScrollStyleChanged(ByVal e As EventArgs)
            MyBase.OnScrollStyleChanged(e)
            Console.WriteLine("OnScrollStyleChanged is called")
         End Sub

         Protected Overrides Sub OnSelectedIndexChanged(ByVal e As EventArgs)
            MyBase.OnSelectedIndexChanged(e)
            Console.WriteLine("OnSelectedIndexChanged is called")
         End Sub

         Protected Overrides Sub OnSelectionModeChanged(ByVal e As EventArgs)
            MyBase.OnSelectionModeChanged(e)
            Console.WriteLine("OnSelectionModeChanged is called")
         End Sub

         Protected Overrides Sub OnSelectUserImageChanged(ByVal e As EventArgs)
            MyBase.OnSelectUserImageChanged(e)
            Console.WriteLine("OnSelectUserImageChanged is called")
         End Sub

         Protected Overrides Sub OnShowItemTextChanged(ByVal e As EventArgs)
            MyBase.OnShowItemTextChanged(e)
            Console.WriteLine("OnShowItemTextChanged is called")
         End Sub

         Protected Overrides Sub OnSizeChanged(ByVal e As EventArgs)
            MyBase.OnSizeChanged(e)
            Console.WriteLine("OnSizeChanged is called")
         End Sub

         Protected Overrides Sub OnSorterChanged(ByVal e As EventArgs)
            MyBase.OnSorterChanged(e)
            Console.WriteLine("OnSorterChanged is called")
         End Sub

         Protected Overrides Sub OnSortingChanged(ByVal e As EventArgs)
            MyBase.OnSortingChanged(e)
            Console.WriteLine("OnSortingChanged is called")
         End Sub

         Protected Overrides Sub OnViewStyleChanged(ByVal e As EventArgs)
            MyBase.OnViewStyleChanged(e)
            Console.WriteLine("OnViewStyleChanged is called")
         End Sub
      End Class</code>
        <code lang="CS">      public class MyRasterImageList : RasterImageList
      {
         //.
         //.
         //.
         protected override void OnAutoDeselectItemsChanged(EventArgs e)
         {
            base.OnAutoDeselectItemsChanged(e);
            Console.WriteLine("OnAutoDeselectItemsChanged is called");
         }

         protected override void OnAutoDisposeImagesChanged(EventArgs e)
         {
            base.OnAutoDisposeImagesChanged(e);
            Console.WriteLine("OnAutoDisposeImagesChanged is called");
         }

         protected override void OnBorderStyleChanged(EventArgs e)
         {
            base.OnBorderStyleChanged(e);
            Console.WriteLine("OnBorderStyleChanged is called");
         }

         protected override void OnDoubleBufferChanged(EventArgs e)
         {
            base.OnDoubleBufferChanged(e);
            Console.WriteLine("OnDoubleBufferChanged is called");
         }

         protected override void OnDrawItem(RasterImageListDrawItemEventArgs e)
         {
            base.OnDrawItem(e);
            Console.WriteLine("OnDrawItem is called");
         }

         protected override void OnEnableKeyboardChanged(EventArgs e)
         {
            base.OnEnableKeyboardChanged(e);
            Console.WriteLine("OnEnableKeyboardChanged is called");
         }

         protected override void OnEnableRubberBandSelectionChanged(EventArgs e)
         {
            base.OnEnableRubberBandSelectionChanged(e);
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called");
         }

         protected override void OnItemBackColorChanged(EventArgs e)
         {
            base.OnItemBackColorChanged(e);
            Console.WriteLine("OnItemBackColorChanged is called");
         }

         protected override void OnItemBorderStyleChanged(EventArgs e)
         {
            base.OnItemBorderStyleChanged(e);
            Console.WriteLine("OnItemBorderStyleChanged is called");
         }

         protected override void OnItemForeColorChanged(EventArgs e)
         {
            base.OnItemForeColorChanged(e);
            Console.WriteLine("OnItemForeColorChanged is called");
         }

         protected override void OnItemImageBorderStyleChanged(EventArgs e)
         {
            base.OnItemImageBorderStyleChanged(e);
            Console.WriteLine("OnItemImageBorderStyleChanged is called");
         }

         protected override void OnItemImageSizeChanged(EventArgs e)
         {
            base.OnItemImageSizeChanged(e);
            Console.WriteLine("OnItemImageSizeChanged is called");
         }

         protected override void OnItemSelectedBackColorChanged(EventArgs e)
         {
            base.OnItemSelectedBackColorChanged(e);
            Console.WriteLine("OnItemSelectedBackColorChanged is called");
         }

         protected override void OnItemSelectedForeColorChanged(EventArgs e)
         {
            base.OnItemSelectedForeColorChanged(e);
            Console.WriteLine("OnItemSelectedForeColorChanged is called");
         }

         protected override void OnItemSizeChanged(EventArgs e)
         {
            base.OnItemSizeChanged(e);
            Console.WriteLine("OnItemSizeChanged is called");
         }

         protected override void OnItemSpacingSizeChanged(EventArgs e)
         {
            base.OnItemSpacingSizeChanged(e);
            Console.WriteLine("OnItemSpacingSizeChanged is called");
         }

         protected override void OnKeyDown(KeyEventArgs e)
         {
            base.OnKeyDown(e);
            Console.WriteLine("OnKeyDown is called");
         }

         protected override void OnLostFocus(EventArgs e)
         {
            base.OnLostFocus(e);
            Console.WriteLine("OnLostFocus is called");
         }

         protected override void OnMouseDown(MouseEventArgs e)
         {
            base.OnMouseDown(e);
            Console.WriteLine("OnMouseDown is called");
         }

         protected override void OnMouseMove(MouseEventArgs e)
         {
            base.OnMouseMove(e);
            Console.WriteLine("OnMouseMove is called");
         }

         protected override void OnMouseUp(MouseEventArgs e)
         {
            base.OnMouseUp(e);
            Console.WriteLine("OnMouseUp is called");
         }

         protected override void OnPaint(PaintEventArgs e)
         {
            base.OnPaint(e);
            Console.WriteLine("OnPaint is called");
         }

         protected override void OnPaintPropertiesChanged(EventArgs e)
         {
            base.OnPaintPropertiesChanged(e);
            Console.WriteLine("OnPaintPropertiesChanged is called");
         }

         protected override void OnScroll(EventArgs e)
         {
            base.OnScroll(e);
            Console.WriteLine("OnScroll is called");
         }

         protected override void OnScrollStyleChanged(EventArgs e)
         {
            base.OnScrollStyleChanged(e);
            Console.WriteLine("OnScrollStyleChanged is called");
         }

         protected override void OnSelectedIndexChanged(EventArgs e)
         {
            base.OnSelectedIndexChanged(e);
            Console.WriteLine("OnSelectedIndexChanged is called");
         }

         protected override void OnSelectionModeChanged(EventArgs e)
         {
            base.OnSelectionModeChanged(e);
            Console.WriteLine("OnSelectionModeChanged is called");
         }

         protected override void OnSelectUserImageChanged(EventArgs e)
         {
            base.OnSelectUserImageChanged(e);
            Console.WriteLine("OnSelectUserImageChanged is called");
         }

         protected override void OnShowItemTextChanged(EventArgs e)
         {
            base.OnShowItemTextChanged(e);
            Console.WriteLine("OnShowItemTextChanged is called");
         }

         protected override void OnSizeChanged(EventArgs e)
         {
            base.OnSizeChanged(e);
            Console.WriteLine("OnSizeChanged is called");
         }

         protected override void OnSorterChanged(EventArgs e)
         {
            base.OnSorterChanged(e);
            Console.WriteLine("OnSorterChanged is called");
         }

         protected override void OnSortingChanged(EventArgs e)
         {
            base.OnSortingChanged(e);
            Console.WriteLine("OnSortingChanged is called");
         }

         protected override void OnViewStyleChanged(EventArgs e)
         {
            base.OnViewStyleChanged(e);
            Console.WriteLine("OnViewStyleChanged is called");
         }
      }</code>
        <!--RasterImageList.OnBorderStyleChanged-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageList.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
      <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)">Control.OnMouseUp</see>.
            </summary>
      <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
      <remarks>
        <para>Raising an event invokes the event handler through a delegate.</para>
        <para>The <b>OnMouseUp</b> method also allows derived classes to handle the event without attaching a delegate.
            This is the preferred technique for handling the event in a derived class.</para>
        <para>
          <b>Notes to Inheritors</b> When overriding <b>OnMouseUp</b> in a derived class, be sure to call the base class's <b>OnMouseUp</b> method so that registered delegates receive the event.</para>
      </remarks>
      <example>
        <code lang="VB">      Public Class MyRasterImageList
         Inherits RasterImageList
         '.
         '.
         '.
         Protected Overrides Sub OnAutoDeselectItemsChanged(ByVal e As EventArgs)
            MyBase.OnAutoDeselectItemsChanged(e)
            Console.WriteLine("OnAutoDeselectItemsChanged is called")
         End Sub

         Protected Overrides Sub OnAutoDisposeImagesChanged(ByVal e As EventArgs)
            MyBase.OnAutoDisposeImagesChanged(e)
            Console.WriteLine("OnAutoDisposeImagesChanged is called")
         End Sub

         Protected Overrides Sub OnBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnBorderStyleChanged(e)
            Console.WriteLine("OnBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnDoubleBufferChanged(ByVal e As EventArgs)
            MyBase.OnDoubleBufferChanged(e)
            Console.WriteLine("OnDoubleBufferChanged is called")
         End Sub

         Protected Overrides Sub OnDrawItem(ByVal e As RasterImageListDrawItemEventArgs)
            MyBase.OnDrawItem(e)
            Console.WriteLine("OnDrawItem is called")
         End Sub

         Protected Overrides Sub OnEnableKeyboardChanged(ByVal e As EventArgs)
            MyBase.OnEnableKeyboardChanged(e)
            Console.WriteLine("OnEnableKeyboardChanged is called")
         End Sub

         Protected Overrides Sub OnEnableRubberBandSelectionChanged(ByVal e As EventArgs)
            MyBase.OnEnableRubberBandSelectionChanged(e)
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called")
         End Sub

         Protected Overrides Sub OnItemBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemBackColorChanged(e)
            Console.WriteLine("OnItemBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemBorderStyleChanged(e)
            Console.WriteLine("OnItemBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemForeColorChanged(e)
            Console.WriteLine("OnItemForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemImageBorderStyleChanged(e)
            Console.WriteLine("OnItemImageBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemImageSizeChanged(e)
            Console.WriteLine("OnItemImageSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedBackColorChanged(e)
            Console.WriteLine("OnItemSelectedBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedForeColorChanged(e)
            Console.WriteLine("OnItemSelectedForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSizeChanged(e)
            Console.WriteLine("OnItemSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSpacingSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSpacingSizeChanged(e)
            Console.WriteLine("OnItemSpacingSizeChanged is called")
         End Sub

         Protected Overrides Sub OnKeyDown(ByVal e As KeyEventArgs)
            MyBase.OnKeyDown(e)
            Console.WriteLine("OnKeyDown is called")
         End Sub

         Protected Overrides Sub OnLostFocus(ByVal e As EventArgs)
            MyBase.OnLostFocus(e)
            Console.WriteLine("OnLostFocus is called")
         End Sub

         Protected Overrides Sub OnMouseDown(ByVal e As MouseEventArgs)
            MyBase.OnMouseDown(e)
            Console.WriteLine("OnMouseDown is called")
         End Sub

         Protected Overrides Sub OnMouseMove(ByVal e As MouseEventArgs)
            MyBase.OnMouseMove(e)
            Console.WriteLine("OnMouseMove is called")
         End Sub

         Protected Overrides Sub OnMouseUp(ByVal e As MouseEventArgs)
            MyBase.OnMouseUp(e)
            Console.WriteLine("OnMouseUp is called")
         End Sub

         Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            MyBase.OnPaint(e)
            Console.WriteLine("OnPaint is called")
         End Sub

         Protected Overrides Sub OnPaintPropertiesChanged(ByVal e As EventArgs)
            MyBase.OnPaintPropertiesChanged(e)
            Console.WriteLine("OnPaintPropertiesChanged is called")
         End Sub

         Protected Overrides Sub OnScroll(ByVal e As EventArgs)
            MyBase.OnScroll(e)
            Console.WriteLine("OnScroll is called")
         End Sub

         Protected Overrides Sub OnScrollStyleChanged(ByVal e As EventArgs)
            MyBase.OnScrollStyleChanged(e)
            Console.WriteLine("OnScrollStyleChanged is called")
         End Sub

         Protected Overrides Sub OnSelectedIndexChanged(ByVal e As EventArgs)
            MyBase.OnSelectedIndexChanged(e)
            Console.WriteLine("OnSelectedIndexChanged is called")
         End Sub

         Protected Overrides Sub OnSelectionModeChanged(ByVal e As EventArgs)
            MyBase.OnSelectionModeChanged(e)
            Console.WriteLine("OnSelectionModeChanged is called")
         End Sub

         Protected Overrides Sub OnSelectUserImageChanged(ByVal e As EventArgs)
            MyBase.OnSelectUserImageChanged(e)
            Console.WriteLine("OnSelectUserImageChanged is called")
         End Sub

         Protected Overrides Sub OnShowItemTextChanged(ByVal e As EventArgs)
            MyBase.OnShowItemTextChanged(e)
            Console.WriteLine("OnShowItemTextChanged is called")
         End Sub

         Protected Overrides Sub OnSizeChanged(ByVal e As EventArgs)
            MyBase.OnSizeChanged(e)
            Console.WriteLine("OnSizeChanged is called")
         End Sub

         Protected Overrides Sub OnSorterChanged(ByVal e As EventArgs)
            MyBase.OnSorterChanged(e)
            Console.WriteLine("OnSorterChanged is called")
         End Sub

         Protected Overrides Sub OnSortingChanged(ByVal e As EventArgs)
            MyBase.OnSortingChanged(e)
            Console.WriteLine("OnSortingChanged is called")
         End Sub

         Protected Overrides Sub OnViewStyleChanged(ByVal e As EventArgs)
            MyBase.OnViewStyleChanged(e)
            Console.WriteLine("OnViewStyleChanged is called")
         End Sub
      End Class</code>
        <code lang="CS">      public class MyRasterImageList : RasterImageList
      {
         //.
         //.
         //.
         protected override void OnAutoDeselectItemsChanged(EventArgs e)
         {
            base.OnAutoDeselectItemsChanged(e);
            Console.WriteLine("OnAutoDeselectItemsChanged is called");
         }

         protected override void OnAutoDisposeImagesChanged(EventArgs e)
         {
            base.OnAutoDisposeImagesChanged(e);
            Console.WriteLine("OnAutoDisposeImagesChanged is called");
         }

         protected override void OnBorderStyleChanged(EventArgs e)
         {
            base.OnBorderStyleChanged(e);
            Console.WriteLine("OnBorderStyleChanged is called");
         }

         protected override void OnDoubleBufferChanged(EventArgs e)
         {
            base.OnDoubleBufferChanged(e);
            Console.WriteLine("OnDoubleBufferChanged is called");
         }

         protected override void OnDrawItem(RasterImageListDrawItemEventArgs e)
         {
            base.OnDrawItem(e);
            Console.WriteLine("OnDrawItem is called");
         }

         protected override void OnEnableKeyboardChanged(EventArgs e)
         {
            base.OnEnableKeyboardChanged(e);
            Console.WriteLine("OnEnableKeyboardChanged is called");
         }

         protected override void OnEnableRubberBandSelectionChanged(EventArgs e)
         {
            base.OnEnableRubberBandSelectionChanged(e);
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called");
         }

         protected override void OnItemBackColorChanged(EventArgs e)
         {
            base.OnItemBackColorChanged(e);
            Console.WriteLine("OnItemBackColorChanged is called");
         }

         protected override void OnItemBorderStyleChanged(EventArgs e)
         {
            base.OnItemBorderStyleChanged(e);
            Console.WriteLine("OnItemBorderStyleChanged is called");
         }

         protected override void OnItemForeColorChanged(EventArgs e)
         {
            base.OnItemForeColorChanged(e);
            Console.WriteLine("OnItemForeColorChanged is called");
         }

         protected override void OnItemImageBorderStyleChanged(EventArgs e)
         {
            base.OnItemImageBorderStyleChanged(e);
            Console.WriteLine("OnItemImageBorderStyleChanged is called");
         }

         protected override void OnItemImageSizeChanged(EventArgs e)
         {
            base.OnItemImageSizeChanged(e);
            Console.WriteLine("OnItemImageSizeChanged is called");
         }

         protected override void OnItemSelectedBackColorChanged(EventArgs e)
         {
            base.OnItemSelectedBackColorChanged(e);
            Console.WriteLine("OnItemSelectedBackColorChanged is called");
         }

         protected override void OnItemSelectedForeColorChanged(EventArgs e)
         {
            base.OnItemSelectedForeColorChanged(e);
            Console.WriteLine("OnItemSelectedForeColorChanged is called");
         }

         protected override void OnItemSizeChanged(EventArgs e)
         {
            base.OnItemSizeChanged(e);
            Console.WriteLine("OnItemSizeChanged is called");
         }

         protected override void OnItemSpacingSizeChanged(EventArgs e)
         {
            base.OnItemSpacingSizeChanged(e);
            Console.WriteLine("OnItemSpacingSizeChanged is called");
         }

         protected override void OnKeyDown(KeyEventArgs e)
         {
            base.OnKeyDown(e);
            Console.WriteLine("OnKeyDown is called");
         }

         protected override void OnLostFocus(EventArgs e)
         {
            base.OnLostFocus(e);
            Console.WriteLine("OnLostFocus is called");
         }

         protected override void OnMouseDown(MouseEventArgs e)
         {
            base.OnMouseDown(e);
            Console.WriteLine("OnMouseDown is called");
         }

         protected override void OnMouseMove(MouseEventArgs e)
         {
            base.OnMouseMove(e);
            Console.WriteLine("OnMouseMove is called");
         }

         protected override void OnMouseUp(MouseEventArgs e)
         {
            base.OnMouseUp(e);
            Console.WriteLine("OnMouseUp is called");
         }

         protected override void OnPaint(PaintEventArgs e)
         {
            base.OnPaint(e);
            Console.WriteLine("OnPaint is called");
         }

         protected override void OnPaintPropertiesChanged(EventArgs e)
         {
            base.OnPaintPropertiesChanged(e);
            Console.WriteLine("OnPaintPropertiesChanged is called");
         }

         protected override void OnScroll(EventArgs e)
         {
            base.OnScroll(e);
            Console.WriteLine("OnScroll is called");
         }

         protected override void OnScrollStyleChanged(EventArgs e)
         {
            base.OnScrollStyleChanged(e);
            Console.WriteLine("OnScrollStyleChanged is called");
         }

         protected override void OnSelectedIndexChanged(EventArgs e)
         {
            base.OnSelectedIndexChanged(e);
            Console.WriteLine("OnSelectedIndexChanged is called");
         }

         protected override void OnSelectionModeChanged(EventArgs e)
         {
            base.OnSelectionModeChanged(e);
            Console.WriteLine("OnSelectionModeChanged is called");
         }

         protected override void OnSelectUserImageChanged(EventArgs e)
         {
            base.OnSelectUserImageChanged(e);
            Console.WriteLine("OnSelectUserImageChanged is called");
         }

         protected override void OnShowItemTextChanged(EventArgs e)
         {
            base.OnShowItemTextChanged(e);
            Console.WriteLine("OnShowItemTextChanged is called");
         }

         protected override void OnSizeChanged(EventArgs e)
         {
            base.OnSizeChanged(e);
            Console.WriteLine("OnSizeChanged is called");
         }

         protected override void OnSorterChanged(EventArgs e)
         {
            base.OnSorterChanged(e);
            Console.WriteLine("OnSorterChanged is called");
         }

         protected override void OnSortingChanged(EventArgs e)
         {
            base.OnSortingChanged(e);
            Console.WriteLine("OnSortingChanged is called");
         }

         protected override void OnViewStyleChanged(EventArgs e)
         {
            base.OnViewStyleChanged(e);
            Console.WriteLine("OnViewStyleChanged is called");
         }
      }</code>
        <!--RasterImageList.OnBorderStyleChanged-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageList.OnLostFocus(System.EventArgs)">
      <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)">Control.OnLostFocus</see>.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
        <para>Raising an event invokes the event handler through a delegate.</para>
        <para>The <b>OnLostFocus</b> method also allows derived classes to handle the event without attaching a delegate.
            This is the preferred technique for handling the event in a derived class.</para>
        <para>
          <b>Notes to Inheritors</b> When overriding <b>OnLostFocus</b> in a derived class, be sure to call the base class's <b>OnLostFocus</b> method so that registered delegates receive the event.</para>
      </remarks>
      <example>
        <code lang="VB">      Public Class MyRasterImageList
         Inherits RasterImageList
         '.
         '.
         '.
         Protected Overrides Sub OnAutoDeselectItemsChanged(ByVal e As EventArgs)
            MyBase.OnAutoDeselectItemsChanged(e)
            Console.WriteLine("OnAutoDeselectItemsChanged is called")
         End Sub

         Protected Overrides Sub OnAutoDisposeImagesChanged(ByVal e As EventArgs)
            MyBase.OnAutoDisposeImagesChanged(e)
            Console.WriteLine("OnAutoDisposeImagesChanged is called")
         End Sub

         Protected Overrides Sub OnBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnBorderStyleChanged(e)
            Console.WriteLine("OnBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnDoubleBufferChanged(ByVal e As EventArgs)
            MyBase.OnDoubleBufferChanged(e)
            Console.WriteLine("OnDoubleBufferChanged is called")
         End Sub

         Protected Overrides Sub OnDrawItem(ByVal e As RasterImageListDrawItemEventArgs)
            MyBase.OnDrawItem(e)
            Console.WriteLine("OnDrawItem is called")
         End Sub

         Protected Overrides Sub OnEnableKeyboardChanged(ByVal e As EventArgs)
            MyBase.OnEnableKeyboardChanged(e)
            Console.WriteLine("OnEnableKeyboardChanged is called")
         End Sub

         Protected Overrides Sub OnEnableRubberBandSelectionChanged(ByVal e As EventArgs)
            MyBase.OnEnableRubberBandSelectionChanged(e)
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called")
         End Sub

         Protected Overrides Sub OnItemBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemBackColorChanged(e)
            Console.WriteLine("OnItemBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemBorderStyleChanged(e)
            Console.WriteLine("OnItemBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemForeColorChanged(e)
            Console.WriteLine("OnItemForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemImageBorderStyleChanged(e)
            Console.WriteLine("OnItemImageBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemImageSizeChanged(e)
            Console.WriteLine("OnItemImageSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedBackColorChanged(e)
            Console.WriteLine("OnItemSelectedBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedForeColorChanged(e)
            Console.WriteLine("OnItemSelectedForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSizeChanged(e)
            Console.WriteLine("OnItemSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSpacingSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSpacingSizeChanged(e)
            Console.WriteLine("OnItemSpacingSizeChanged is called")
         End Sub

         Protected Overrides Sub OnKeyDown(ByVal e As KeyEventArgs)
            MyBase.OnKeyDown(e)
            Console.WriteLine("OnKeyDown is called")
         End Sub

         Protected Overrides Sub OnLostFocus(ByVal e As EventArgs)
            MyBase.OnLostFocus(e)
            Console.WriteLine("OnLostFocus is called")
         End Sub

         Protected Overrides Sub OnMouseDown(ByVal e As MouseEventArgs)
            MyBase.OnMouseDown(e)
            Console.WriteLine("OnMouseDown is called")
         End Sub

         Protected Overrides Sub OnMouseMove(ByVal e As MouseEventArgs)
            MyBase.OnMouseMove(e)
            Console.WriteLine("OnMouseMove is called")
         End Sub

         Protected Overrides Sub OnMouseUp(ByVal e As MouseEventArgs)
            MyBase.OnMouseUp(e)
            Console.WriteLine("OnMouseUp is called")
         End Sub

         Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            MyBase.OnPaint(e)
            Console.WriteLine("OnPaint is called")
         End Sub

         Protected Overrides Sub OnPaintPropertiesChanged(ByVal e As EventArgs)
            MyBase.OnPaintPropertiesChanged(e)
            Console.WriteLine("OnPaintPropertiesChanged is called")
         End Sub

         Protected Overrides Sub OnScroll(ByVal e As EventArgs)
            MyBase.OnScroll(e)
            Console.WriteLine("OnScroll is called")
         End Sub

         Protected Overrides Sub OnScrollStyleChanged(ByVal e As EventArgs)
            MyBase.OnScrollStyleChanged(e)
            Console.WriteLine("OnScrollStyleChanged is called")
         End Sub

         Protected Overrides Sub OnSelectedIndexChanged(ByVal e As EventArgs)
            MyBase.OnSelectedIndexChanged(e)
            Console.WriteLine("OnSelectedIndexChanged is called")
         End Sub

         Protected Overrides Sub OnSelectionModeChanged(ByVal e As EventArgs)
            MyBase.OnSelectionModeChanged(e)
            Console.WriteLine("OnSelectionModeChanged is called")
         End Sub

         Protected Overrides Sub OnSelectUserImageChanged(ByVal e As EventArgs)
            MyBase.OnSelectUserImageChanged(e)
            Console.WriteLine("OnSelectUserImageChanged is called")
         End Sub

         Protected Overrides Sub OnShowItemTextChanged(ByVal e As EventArgs)
            MyBase.OnShowItemTextChanged(e)
            Console.WriteLine("OnShowItemTextChanged is called")
         End Sub

         Protected Overrides Sub OnSizeChanged(ByVal e As EventArgs)
            MyBase.OnSizeChanged(e)
            Console.WriteLine("OnSizeChanged is called")
         End Sub

         Protected Overrides Sub OnSorterChanged(ByVal e As EventArgs)
            MyBase.OnSorterChanged(e)
            Console.WriteLine("OnSorterChanged is called")
         End Sub

         Protected Overrides Sub OnSortingChanged(ByVal e As EventArgs)
            MyBase.OnSortingChanged(e)
            Console.WriteLine("OnSortingChanged is called")
         End Sub

         Protected Overrides Sub OnViewStyleChanged(ByVal e As EventArgs)
            MyBase.OnViewStyleChanged(e)
            Console.WriteLine("OnViewStyleChanged is called")
         End Sub
      End Class</code>
        <code lang="CS">      public class MyRasterImageList : RasterImageList
      {
         //.
         //.
         //.
         protected override void OnAutoDeselectItemsChanged(EventArgs e)
         {
            base.OnAutoDeselectItemsChanged(e);
            Console.WriteLine("OnAutoDeselectItemsChanged is called");
         }

         protected override void OnAutoDisposeImagesChanged(EventArgs e)
         {
            base.OnAutoDisposeImagesChanged(e);
            Console.WriteLine("OnAutoDisposeImagesChanged is called");
         }

         protected override void OnBorderStyleChanged(EventArgs e)
         {
            base.OnBorderStyleChanged(e);
            Console.WriteLine("OnBorderStyleChanged is called");
         }

         protected override void OnDoubleBufferChanged(EventArgs e)
         {
            base.OnDoubleBufferChanged(e);
            Console.WriteLine("OnDoubleBufferChanged is called");
         }

         protected override void OnDrawItem(RasterImageListDrawItemEventArgs e)
         {
            base.OnDrawItem(e);
            Console.WriteLine("OnDrawItem is called");
         }

         protected override void OnEnableKeyboardChanged(EventArgs e)
         {
            base.OnEnableKeyboardChanged(e);
            Console.WriteLine("OnEnableKeyboardChanged is called");
         }

         protected override void OnEnableRubberBandSelectionChanged(EventArgs e)
         {
            base.OnEnableRubberBandSelectionChanged(e);
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called");
         }

         protected override void OnItemBackColorChanged(EventArgs e)
         {
            base.OnItemBackColorChanged(e);
            Console.WriteLine("OnItemBackColorChanged is called");
         }

         protected override void OnItemBorderStyleChanged(EventArgs e)
         {
            base.OnItemBorderStyleChanged(e);
            Console.WriteLine("OnItemBorderStyleChanged is called");
         }

         protected override void OnItemForeColorChanged(EventArgs e)
         {
            base.OnItemForeColorChanged(e);
            Console.WriteLine("OnItemForeColorChanged is called");
         }

         protected override void OnItemImageBorderStyleChanged(EventArgs e)
         {
            base.OnItemImageBorderStyleChanged(e);
            Console.WriteLine("OnItemImageBorderStyleChanged is called");
         }

         protected override void OnItemImageSizeChanged(EventArgs e)
         {
            base.OnItemImageSizeChanged(e);
            Console.WriteLine("OnItemImageSizeChanged is called");
         }

         protected override void OnItemSelectedBackColorChanged(EventArgs e)
         {
            base.OnItemSelectedBackColorChanged(e);
            Console.WriteLine("OnItemSelectedBackColorChanged is called");
         }

         protected override void OnItemSelectedForeColorChanged(EventArgs e)
         {
            base.OnItemSelectedForeColorChanged(e);
            Console.WriteLine("OnItemSelectedForeColorChanged is called");
         }

         protected override void OnItemSizeChanged(EventArgs e)
         {
            base.OnItemSizeChanged(e);
            Console.WriteLine("OnItemSizeChanged is called");
         }

         protected override void OnItemSpacingSizeChanged(EventArgs e)
         {
            base.OnItemSpacingSizeChanged(e);
            Console.WriteLine("OnItemSpacingSizeChanged is called");
         }

         protected override void OnKeyDown(KeyEventArgs e)
         {
            base.OnKeyDown(e);
            Console.WriteLine("OnKeyDown is called");
         }

         protected override void OnLostFocus(EventArgs e)
         {
            base.OnLostFocus(e);
            Console.WriteLine("OnLostFocus is called");
         }

         protected override void OnMouseDown(MouseEventArgs e)
         {
            base.OnMouseDown(e);
            Console.WriteLine("OnMouseDown is called");
         }

         protected override void OnMouseMove(MouseEventArgs e)
         {
            base.OnMouseMove(e);
            Console.WriteLine("OnMouseMove is called");
         }

         protected override void OnMouseUp(MouseEventArgs e)
         {
            base.OnMouseUp(e);
            Console.WriteLine("OnMouseUp is called");
         }

         protected override void OnPaint(PaintEventArgs e)
         {
            base.OnPaint(e);
            Console.WriteLine("OnPaint is called");
         }

         protected override void OnPaintPropertiesChanged(EventArgs e)
         {
            base.OnPaintPropertiesChanged(e);
            Console.WriteLine("OnPaintPropertiesChanged is called");
         }

         protected override void OnScroll(EventArgs e)
         {
            base.OnScroll(e);
            Console.WriteLine("OnScroll is called");
         }

         protected override void OnScrollStyleChanged(EventArgs e)
         {
            base.OnScrollStyleChanged(e);
            Console.WriteLine("OnScrollStyleChanged is called");
         }

         protected override void OnSelectedIndexChanged(EventArgs e)
         {
            base.OnSelectedIndexChanged(e);
            Console.WriteLine("OnSelectedIndexChanged is called");
         }

         protected override void OnSelectionModeChanged(EventArgs e)
         {
            base.OnSelectionModeChanged(e);
            Console.WriteLine("OnSelectionModeChanged is called");
         }

         protected override void OnSelectUserImageChanged(EventArgs e)
         {
            base.OnSelectUserImageChanged(e);
            Console.WriteLine("OnSelectUserImageChanged is called");
         }

         protected override void OnShowItemTextChanged(EventArgs e)
         {
            base.OnShowItemTextChanged(e);
            Console.WriteLine("OnShowItemTextChanged is called");
         }

         protected override void OnSizeChanged(EventArgs e)
         {
            base.OnSizeChanged(e);
            Console.WriteLine("OnSizeChanged is called");
         }

         protected override void OnSorterChanged(EventArgs e)
         {
            base.OnSorterChanged(e);
            Console.WriteLine("OnSorterChanged is called");
         }

         protected override void OnSortingChanged(EventArgs e)
         {
            base.OnSortingChanged(e);
            Console.WriteLine("OnSortingChanged is called");
         }

         protected override void OnViewStyleChanged(EventArgs e)
         {
            base.OnViewStyleChanged(e);
            Console.WriteLine("OnViewStyleChanged is called");
         }
      }</code>
        <!--RasterImageList.OnBorderStyleChanged-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageList.OnSorterChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageList.SorterChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
        <p>Raising an event invokes the event handler through a delegate.</p>
        <p>The <b>OnSorterChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
        <p>
          <b>Notes to Inheritors:</b> When overriding <b>OnSorterChanged</b> in a derived class, be sure to call
            the base class's <b>OnSorterChanged</b> method so that registered delegates receive the event.</p>
      </remarks>
      <example>
        <code lang="VB">      Public Class MyRasterImageList
         Inherits RasterImageList
         '.
         '.
         '.
         Protected Overrides Sub OnAutoDeselectItemsChanged(ByVal e As EventArgs)
            MyBase.OnAutoDeselectItemsChanged(e)
            Console.WriteLine("OnAutoDeselectItemsChanged is called")
         End Sub

         Protected Overrides Sub OnAutoDisposeImagesChanged(ByVal e As EventArgs)
            MyBase.OnAutoDisposeImagesChanged(e)
            Console.WriteLine("OnAutoDisposeImagesChanged is called")
         End Sub

         Protected Overrides Sub OnBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnBorderStyleChanged(e)
            Console.WriteLine("OnBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnDoubleBufferChanged(ByVal e As EventArgs)
            MyBase.OnDoubleBufferChanged(e)
            Console.WriteLine("OnDoubleBufferChanged is called")
         End Sub

         Protected Overrides Sub OnDrawItem(ByVal e As RasterImageListDrawItemEventArgs)
            MyBase.OnDrawItem(e)
            Console.WriteLine("OnDrawItem is called")
         End Sub

         Protected Overrides Sub OnEnableKeyboardChanged(ByVal e As EventArgs)
            MyBase.OnEnableKeyboardChanged(e)
            Console.WriteLine("OnEnableKeyboardChanged is called")
         End Sub

         Protected Overrides Sub OnEnableRubberBandSelectionChanged(ByVal e As EventArgs)
            MyBase.OnEnableRubberBandSelectionChanged(e)
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called")
         End Sub

         Protected Overrides Sub OnItemBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemBackColorChanged(e)
            Console.WriteLine("OnItemBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemBorderStyleChanged(e)
            Console.WriteLine("OnItemBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemForeColorChanged(e)
            Console.WriteLine("OnItemForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemImageBorderStyleChanged(e)
            Console.WriteLine("OnItemImageBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemImageSizeChanged(e)
            Console.WriteLine("OnItemImageSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedBackColorChanged(e)
            Console.WriteLine("OnItemSelectedBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedForeColorChanged(e)
            Console.WriteLine("OnItemSelectedForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSizeChanged(e)
            Console.WriteLine("OnItemSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSpacingSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSpacingSizeChanged(e)
            Console.WriteLine("OnItemSpacingSizeChanged is called")
         End Sub

         Protected Overrides Sub OnKeyDown(ByVal e As KeyEventArgs)
            MyBase.OnKeyDown(e)
            Console.WriteLine("OnKeyDown is called")
         End Sub

         Protected Overrides Sub OnLostFocus(ByVal e As EventArgs)
            MyBase.OnLostFocus(e)
            Console.WriteLine("OnLostFocus is called")
         End Sub

         Protected Overrides Sub OnMouseDown(ByVal e As MouseEventArgs)
            MyBase.OnMouseDown(e)
            Console.WriteLine("OnMouseDown is called")
         End Sub

         Protected Overrides Sub OnMouseMove(ByVal e As MouseEventArgs)
            MyBase.OnMouseMove(e)
            Console.WriteLine("OnMouseMove is called")
         End Sub

         Protected Overrides Sub OnMouseUp(ByVal e As MouseEventArgs)
            MyBase.OnMouseUp(e)
            Console.WriteLine("OnMouseUp is called")
         End Sub

         Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            MyBase.OnPaint(e)
            Console.WriteLine("OnPaint is called")
         End Sub

         Protected Overrides Sub OnPaintPropertiesChanged(ByVal e As EventArgs)
            MyBase.OnPaintPropertiesChanged(e)
            Console.WriteLine("OnPaintPropertiesChanged is called")
         End Sub

         Protected Overrides Sub OnScroll(ByVal e As EventArgs)
            MyBase.OnScroll(e)
            Console.WriteLine("OnScroll is called")
         End Sub

         Protected Overrides Sub OnScrollStyleChanged(ByVal e As EventArgs)
            MyBase.OnScrollStyleChanged(e)
            Console.WriteLine("OnScrollStyleChanged is called")
         End Sub

         Protected Overrides Sub OnSelectedIndexChanged(ByVal e As EventArgs)
            MyBase.OnSelectedIndexChanged(e)
            Console.WriteLine("OnSelectedIndexChanged is called")
         End Sub

         Protected Overrides Sub OnSelectionModeChanged(ByVal e As EventArgs)
            MyBase.OnSelectionModeChanged(e)
            Console.WriteLine("OnSelectionModeChanged is called")
         End Sub

         Protected Overrides Sub OnSelectUserImageChanged(ByVal e As EventArgs)
            MyBase.OnSelectUserImageChanged(e)
            Console.WriteLine("OnSelectUserImageChanged is called")
         End Sub

         Protected Overrides Sub OnShowItemTextChanged(ByVal e As EventArgs)
            MyBase.OnShowItemTextChanged(e)
            Console.WriteLine("OnShowItemTextChanged is called")
         End Sub

         Protected Overrides Sub OnSizeChanged(ByVal e As EventArgs)
            MyBase.OnSizeChanged(e)
            Console.WriteLine("OnSizeChanged is called")
         End Sub

         Protected Overrides Sub OnSorterChanged(ByVal e As EventArgs)
            MyBase.OnSorterChanged(e)
            Console.WriteLine("OnSorterChanged is called")
         End Sub

         Protected Overrides Sub OnSortingChanged(ByVal e As EventArgs)
            MyBase.OnSortingChanged(e)
            Console.WriteLine("OnSortingChanged is called")
         End Sub

         Protected Overrides Sub OnViewStyleChanged(ByVal e As EventArgs)
            MyBase.OnViewStyleChanged(e)
            Console.WriteLine("OnViewStyleChanged is called")
         End Sub
      End Class</code>
        <code lang="CS">      public class MyRasterImageList : RasterImageList
      {
         //.
         //.
         //.
         protected override void OnAutoDeselectItemsChanged(EventArgs e)
         {
            base.OnAutoDeselectItemsChanged(e);
            Console.WriteLine("OnAutoDeselectItemsChanged is called");
         }

         protected override void OnAutoDisposeImagesChanged(EventArgs e)
         {
            base.OnAutoDisposeImagesChanged(e);
            Console.WriteLine("OnAutoDisposeImagesChanged is called");
         }

         protected override void OnBorderStyleChanged(EventArgs e)
         {
            base.OnBorderStyleChanged(e);
            Console.WriteLine("OnBorderStyleChanged is called");
         }

         protected override void OnDoubleBufferChanged(EventArgs e)
         {
            base.OnDoubleBufferChanged(e);
            Console.WriteLine("OnDoubleBufferChanged is called");
         }

         protected override void OnDrawItem(RasterImageListDrawItemEventArgs e)
         {
            base.OnDrawItem(e);
            Console.WriteLine("OnDrawItem is called");
         }

         protected override void OnEnableKeyboardChanged(EventArgs e)
         {
            base.OnEnableKeyboardChanged(e);
            Console.WriteLine("OnEnableKeyboardChanged is called");
         }

         protected override void OnEnableRubberBandSelectionChanged(EventArgs e)
         {
            base.OnEnableRubberBandSelectionChanged(e);
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called");
         }

         protected override void OnItemBackColorChanged(EventArgs e)
         {
            base.OnItemBackColorChanged(e);
            Console.WriteLine("OnItemBackColorChanged is called");
         }

         protected override void OnItemBorderStyleChanged(EventArgs e)
         {
            base.OnItemBorderStyleChanged(e);
            Console.WriteLine("OnItemBorderStyleChanged is called");
         }

         protected override void OnItemForeColorChanged(EventArgs e)
         {
            base.OnItemForeColorChanged(e);
            Console.WriteLine("OnItemForeColorChanged is called");
         }

         protected override void OnItemImageBorderStyleChanged(EventArgs e)
         {
            base.OnItemImageBorderStyleChanged(e);
            Console.WriteLine("OnItemImageBorderStyleChanged is called");
         }

         protected override void OnItemImageSizeChanged(EventArgs e)
         {
            base.OnItemImageSizeChanged(e);
            Console.WriteLine("OnItemImageSizeChanged is called");
         }

         protected override void OnItemSelectedBackColorChanged(EventArgs e)
         {
            base.OnItemSelectedBackColorChanged(e);
            Console.WriteLine("OnItemSelectedBackColorChanged is called");
         }

         protected override void OnItemSelectedForeColorChanged(EventArgs e)
         {
            base.OnItemSelectedForeColorChanged(e);
            Console.WriteLine("OnItemSelectedForeColorChanged is called");
         }

         protected override void OnItemSizeChanged(EventArgs e)
         {
            base.OnItemSizeChanged(e);
            Console.WriteLine("OnItemSizeChanged is called");
         }

         protected override void OnItemSpacingSizeChanged(EventArgs e)
         {
            base.OnItemSpacingSizeChanged(e);
            Console.WriteLine("OnItemSpacingSizeChanged is called");
         }

         protected override void OnKeyDown(KeyEventArgs e)
         {
            base.OnKeyDown(e);
            Console.WriteLine("OnKeyDown is called");
         }

         protected override void OnLostFocus(EventArgs e)
         {
            base.OnLostFocus(e);
            Console.WriteLine("OnLostFocus is called");
         }

         protected override void OnMouseDown(MouseEventArgs e)
         {
            base.OnMouseDown(e);
            Console.WriteLine("OnMouseDown is called");
         }

         protected override void OnMouseMove(MouseEventArgs e)
         {
            base.OnMouseMove(e);
            Console.WriteLine("OnMouseMove is called");
         }

         protected override void OnMouseUp(MouseEventArgs e)
         {
            base.OnMouseUp(e);
            Console.WriteLine("OnMouseUp is called");
         }

         protected override void OnPaint(PaintEventArgs e)
         {
            base.OnPaint(e);
            Console.WriteLine("OnPaint is called");
         }

         protected override void OnPaintPropertiesChanged(EventArgs e)
         {
            base.OnPaintPropertiesChanged(e);
            Console.WriteLine("OnPaintPropertiesChanged is called");
         }

         protected override void OnScroll(EventArgs e)
         {
            base.OnScroll(e);
            Console.WriteLine("OnScroll is called");
         }

         protected override void OnScrollStyleChanged(EventArgs e)
         {
            base.OnScrollStyleChanged(e);
            Console.WriteLine("OnScrollStyleChanged is called");
         }

         protected override void OnSelectedIndexChanged(EventArgs e)
         {
            base.OnSelectedIndexChanged(e);
            Console.WriteLine("OnSelectedIndexChanged is called");
         }

         protected override void OnSelectionModeChanged(EventArgs e)
         {
            base.OnSelectionModeChanged(e);
            Console.WriteLine("OnSelectionModeChanged is called");
         }

         protected override void OnSelectUserImageChanged(EventArgs e)
         {
            base.OnSelectUserImageChanged(e);
            Console.WriteLine("OnSelectUserImageChanged is called");
         }

         protected override void OnShowItemTextChanged(EventArgs e)
         {
            base.OnShowItemTextChanged(e);
            Console.WriteLine("OnShowItemTextChanged is called");
         }

         protected override void OnSizeChanged(EventArgs e)
         {
            base.OnSizeChanged(e);
            Console.WriteLine("OnSizeChanged is called");
         }

         protected override void OnSorterChanged(EventArgs e)
         {
            base.OnSorterChanged(e);
            Console.WriteLine("OnSorterChanged is called");
         }

         protected override void OnSortingChanged(EventArgs e)
         {
            base.OnSortingChanged(e);
            Console.WriteLine("OnSortingChanged is called");
         }

         protected override void OnViewStyleChanged(EventArgs e)
         {
            base.OnViewStyleChanged(e);
            Console.WriteLine("OnViewStyleChanged is called");
         }
      }</code>
        <!--RasterImageList.OnBorderStyleChanged-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageList.OnSortingChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageList.SortingChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
        <p>Raising an event invokes the event handler through a delegate.</p>
        <p>The <b>OnSortingChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
        <p>
          <b>Notes to Inheritors:</b> When overriding <b>OnSortingChanged</b> in a derived class, be sure to call
            the base class's <b>OnSortingChanged</b> method so that registered delegates receive the event.</p>
      </remarks>
      <example>
        <code lang="VB">      Public Class MyRasterImageList
         Inherits RasterImageList
         '.
         '.
         '.
         Protected Overrides Sub OnAutoDeselectItemsChanged(ByVal e As EventArgs)
            MyBase.OnAutoDeselectItemsChanged(e)
            Console.WriteLine("OnAutoDeselectItemsChanged is called")
         End Sub

         Protected Overrides Sub OnAutoDisposeImagesChanged(ByVal e As EventArgs)
            MyBase.OnAutoDisposeImagesChanged(e)
            Console.WriteLine("OnAutoDisposeImagesChanged is called")
         End Sub

         Protected Overrides Sub OnBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnBorderStyleChanged(e)
            Console.WriteLine("OnBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnDoubleBufferChanged(ByVal e As EventArgs)
            MyBase.OnDoubleBufferChanged(e)
            Console.WriteLine("OnDoubleBufferChanged is called")
         End Sub

         Protected Overrides Sub OnDrawItem(ByVal e As RasterImageListDrawItemEventArgs)
            MyBase.OnDrawItem(e)
            Console.WriteLine("OnDrawItem is called")
         End Sub

         Protected Overrides Sub OnEnableKeyboardChanged(ByVal e As EventArgs)
            MyBase.OnEnableKeyboardChanged(e)
            Console.WriteLine("OnEnableKeyboardChanged is called")
         End Sub

         Protected Overrides Sub OnEnableRubberBandSelectionChanged(ByVal e As EventArgs)
            MyBase.OnEnableRubberBandSelectionChanged(e)
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called")
         End Sub

         Protected Overrides Sub OnItemBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemBackColorChanged(e)
            Console.WriteLine("OnItemBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemBorderStyleChanged(e)
            Console.WriteLine("OnItemBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemForeColorChanged(e)
            Console.WriteLine("OnItemForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageBorderStyleChanged(ByVal e As EventArgs)
            MyBase.OnItemImageBorderStyleChanged(e)
            Console.WriteLine("OnItemImageBorderStyleChanged is called")
         End Sub

         Protected Overrides Sub OnItemImageSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemImageSizeChanged(e)
            Console.WriteLine("OnItemImageSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedBackColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedBackColorChanged(e)
            Console.WriteLine("OnItemSelectedBackColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSelectedForeColorChanged(ByVal e As EventArgs)
            MyBase.OnItemSelectedForeColorChanged(e)
            Console.WriteLine("OnItemSelectedForeColorChanged is called")
         End Sub

         Protected Overrides Sub OnItemSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSizeChanged(e)
            Console.WriteLine("OnItemSizeChanged is called")
         End Sub

         Protected Overrides Sub OnItemSpacingSizeChanged(ByVal e As EventArgs)
            MyBase.OnItemSpacingSizeChanged(e)
            Console.WriteLine("OnItemSpacingSizeChanged is called")
         End Sub

         Protected Overrides Sub OnKeyDown(ByVal e As KeyEventArgs)
            MyBase.OnKeyDown(e)
            Console.WriteLine("OnKeyDown is called")
         End Sub

         Protected Overrides Sub OnLostFocus(ByVal e As EventArgs)
            MyBase.OnLostFocus(e)
            Console.WriteLine("OnLostFocus is called")
         End Sub

         Protected Overrides Sub OnMouseDown(ByVal e As MouseEventArgs)
            MyBase.OnMouseDown(e)
            Console.WriteLine("OnMouseDown is called")
         End Sub

         Protected Overrides Sub OnMouseMove(ByVal e As MouseEventArgs)
            MyBase.OnMouseMove(e)
            Console.WriteLine("OnMouseMove is called")
         End Sub

         Protected Overrides Sub OnMouseUp(ByVal e As MouseEventArgs)
            MyBase.OnMouseUp(e)
            Console.WriteLine("OnMouseUp is called")
         End Sub

         Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)
            MyBase.OnPaint(e)
            Console.WriteLine("OnPaint is called")
         End Sub

         Protected Overrides Sub OnPaintPropertiesChanged(ByVal e As EventArgs)
            MyBase.OnPaintPropertiesChanged(e)
            Console.WriteLine("OnPaintPropertiesChanged is called")
         End Sub

         Protected Overrides Sub OnScroll(ByVal e As EventArgs)
            MyBase.OnScroll(e)
            Console.WriteLine("OnScroll is called")
         End Sub

         Protected Overrides Sub OnScrollStyleChanged(ByVal e As EventArgs)
            MyBase.OnScrollStyleChanged(e)
            Console.WriteLine("OnScrollStyleChanged is called")
         End Sub

         Protected Overrides Sub OnSelectedIndexChanged(ByVal e As EventArgs)
            MyBase.OnSelectedIndexChanged(e)
            Console.WriteLine("OnSelectedIndexChanged is called")
         End Sub

         Protected Overrides Sub OnSelectionModeChanged(ByVal e As EventArgs)
            MyBase.OnSelectionModeChanged(e)
            Console.WriteLine("OnSelectionModeChanged is called")
         End Sub

         Protected Overrides Sub OnSelectUserImageChanged(ByVal e As EventArgs)
            MyBase.OnSelectUserImageChanged(e)
            Console.WriteLine("OnSelectUserImageChanged is called")
         End Sub

         Protected Overrides Sub OnShowItemTextChanged(ByVal e As EventArgs)
            MyBase.OnShowItemTextChanged(e)
            Console.WriteLine("OnShowItemTextChanged is called")
         End Sub

         Protected Overrides Sub OnSizeChanged(ByVal e As EventArgs)
            MyBase.OnSizeChanged(e)
            Console.WriteLine("OnSizeChanged is called")
         End Sub

         Protected Overrides Sub OnSorterChanged(ByVal e As EventArgs)
            MyBase.OnSorterChanged(e)
            Console.WriteLine("OnSorterChanged is called")
         End Sub

         Protected Overrides Sub OnSortingChanged(ByVal e As EventArgs)
            MyBase.OnSortingChanged(e)
            Console.WriteLine("OnSortingChanged is called")
         End Sub

         Protected Overrides Sub OnViewStyleChanged(ByVal e As EventArgs)
            MyBase.OnViewStyleChanged(e)
            Console.WriteLine("OnViewStyleChanged is called")
         End Sub
      End Class</code>
        <code lang="CS">      public class MyRasterImageList : RasterImageList
      {
         //.
         //.
         //.
         protected override void OnAutoDeselectItemsChanged(EventArgs e)
         {
            base.OnAutoDeselectItemsChanged(e);
            Console.WriteLine("OnAutoDeselectItemsChanged is called");
         }

         protected override void OnAutoDisposeImagesChanged(EventArgs e)
         {
            base.OnAutoDisposeImagesChanged(e);
            Console.WriteLine("OnAutoDisposeImagesChanged is called");
         }

         protected override void OnBorderStyleChanged(EventArgs e)
         {
            base.OnBorderStyleChanged(e);
            Console.WriteLine("OnBorderStyleChanged is called");
         }

         protected override void OnDoubleBufferChanged(EventArgs e)
         {
            base.OnDoubleBufferChanged(e);
            Console.WriteLine("OnDoubleBufferChanged is called");
         }

         protected override void OnDrawItem(RasterImageListDrawItemEventArgs e)
         {
            base.OnDrawItem(e);
            Console.WriteLine("OnDrawItem is called");
         }

         protected override void OnEnableKeyboardChanged(EventArgs e)
         {
            base.OnEnableKeyboardChanged(e);
            Console.WriteLine("OnEnableKeyboardChanged is called");
         }

         protected override void OnEnableRubberBandSelectionChanged(EventArgs e)
         {
            base.OnEnableRubberBandSelectionChanged(e);
            Console.WriteLine("OnEnableRubberBandSelectionChanged is called");
         }

         protected override void OnItemBackColorChanged(EventArgs e)
         {
            base.OnItemBackColorChanged(e);
            Console.WriteLine("OnItemBackColorChanged is called");
         }

         protected override void OnItemBorderStyleChanged(EventArgs e)
         {
            base.OnItemBorderStyleChanged(e);
            Console.WriteLine("OnItemBorderStyleChanged is called");
         }

         protected override void OnItemForeColorChanged(EventArgs e)
         {
            base.OnItemForeColorChanged(e);
            Console.WriteLine("OnItemForeColorChanged is called");
         }

         protected override void OnItemImageBorderStyleChanged(EventArgs e)
         {
            base.OnItemImageBorderStyleChanged(e);
            Console.WriteLine("OnItemImageBorderStyleChanged is called");
         }

         protected override void OnItemImageSizeChanged(EventArgs e)
         {
            base.OnItemImageSizeChanged(e);
            Console.WriteLine("OnItemImageSizeChanged is called");
         }

         protected override void OnItemSelectedBackColorChanged(EventArgs e)
         {
            base.OnItemSelectedBackColorChanged(e);
            Console.WriteLine("OnItemSelectedBackColorChanged is called");
         }

         protected override void OnItemSelectedForeColorChanged(EventArgs e)
         {
            base.OnItemSelectedForeColorChanged(e);
            Console.WriteLine("OnItemSelectedForeColorChanged is called");
         }

         protected override void OnItemSizeChanged(EventArgs e)
         {
            base.OnItemSizeChanged(e);
            Console.WriteLine("OnItemSizeChanged is called");
         }

         protected override void OnItemSpacingSizeChanged(EventArgs e)
         {
            base.OnItemSpacingSizeChanged(e);
            Console.WriteLine("OnItemSpacingSizeChanged is called");
         }

         protected override void OnKeyDown(KeyEventArgs e)
         {
            base.OnKeyDown(e);
            Console.WriteLine("OnKeyDown is called");
         }

         protected override void OnLostFocus(EventArgs e)
         {
            base.OnLostFocus(e);
            Console.WriteLine("OnLostFocus is called");
         }

         protected override void OnMouseDown(MouseEventArgs e)
         {
            base.OnMouseDown(e);
            Console.WriteLine("OnMouseDown is called");
         }

         protected override void OnMouseMove(MouseEventArgs e)
         {
            base.OnMouseMove(e);
            Console.WriteLine("OnMouseMove is called");
         }

         protected override void OnMouseUp(MouseEventArgs e)
         {
            base.OnMouseUp(e);
            Console.WriteLine("OnMouseUp is called");
         }

         protected override void OnPaint(PaintEventArgs e)
         {
            base.OnPaint(e);
            Console.WriteLine("OnPaint is called");
         }

         protected override void OnPaintPropertiesChanged(EventArgs e)
         {
            base.OnPaintPropertiesChanged(e);
            Console.WriteLine("OnPaintPropertiesChanged is called");
         }

         protected override void OnScroll(EventArgs e)
         {
            base.OnScroll(e);
            Console.WriteLine("OnScroll is called");
         }

         protected override void OnScrollStyleChanged(EventArgs e)
         {
            base.OnScrollStyleChanged(e);
            Console.WriteLine("OnScrollStyleChanged is called");
         }

         protected override void OnSelectedIndexChanged(EventArgs e)
         {
            base.OnSelectedIndexChanged(e);
            Console.WriteLine("OnSelectedIndexChanged is called");
         }

         protected override void OnSelectionModeChanged(EventArgs e)
         {
            base.OnSelectionModeChanged(e);
            Console.WriteLine("OnSelectionModeChanged is called");
         }

         protected override void OnSelectUserImageChanged(EventArgs e)
         {
            base.OnSelectUserImageChanged(e);
            Console.WriteLine("OnSelectUserImageChanged is called");
         }

         protected override void OnShowItemTextChanged(EventArgs e)
         {
            base.OnShowItemTextChanged(e);
            Console.WriteLine("OnShowItemTextChanged is called");
         }

         protected override void OnSizeChanged(EventArgs e)
         {
            base.OnSizeChanged(e);
            Console.WriteLine("OnSizeChanged is called");
         }

         protected override void OnSorterChanged(EventArgs e)
         {
            base.OnSorterChanged(e);
            Console.WriteLine("OnSorterChanged is called");
         }

         protected override void OnSortingChanged(EventArgs e)
         {
            base.OnSortingChanged(e);
            Console.WriteLine("OnSortingChanged is called");
         }

         protected override void OnViewStyleChanged(EventArgs e)
         {
            base.OnViewStyleChanged(e);
            Console.WriteLine("OnViewStyleChanged is called");
         }
      }</code>
        <!--RasterImageList.OnBorderStyleChanged-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageList.Sort">
      <summary>
            Sorts the items of the <see cref="T:Leadtools.WinForms.RasterImageList" /> control.
            </summary>
      <remarks>
            Call this method to sort the items inside the <see cref="T:Leadtools.WinForms.RasterImageList" /> control.  The order of sorting
            depends on the <see cref="P:Leadtools.WinForms.RasterImageList.Sorting" /> property.  The sorting method depends on the <see cref="P:Leadtools.WinForms.RasterImageList.Sorter" />
            property.
            </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.WinForms.RasterImageList.Sort" />.
            </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageList.OnUseDpiChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageList.UseDpiChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
        <p>Raising an event invokes the event handler through a delegate.</p>
        <p>The <b>OnUseDpiChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
        <p>
          <b>Notes to Inheritors:</b> When overriding <b>OnUseDpiChanged</b> in a derived class, be sure to call
            the base class's <b>OnUseDpiChanged</b> method so that registered delegates receive the event.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageList.Site">
      <summary>
            This member overrides the <see cref="P:System.Windows.Forms.Control.Site">Control.Site</see> property.
            </summary>
      <value>
            This member overrides the <see cref="P:System.Windows.Forms.Control.Site">Control.Site</see> property.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageList.BorderStyle">
      <summary>
            Gets or sets the border style of the control.
            </summary>
      <value>
            One of the <see cref="P:Leadtools.WinForms.RasterImageList.BorderStyle" /> values. The default is <see cref="P:Leadtools.WinForms.RasterImageList.BorderStyle">BorderStyle.Fixed3D</see>.</value>
      <remarks>
            You can use the <b>BorderStyle</b> property to change the border style of the <see cref="T:Leadtools.WinForms.RasterImageList" />
            control to match the border style settings of other controls on the form. For example, if none of the other
            controls on your form displays a border, you can set the <b>BorderStyle</b> property of the
            <see cref="T:Leadtools.WinForms.RasterImageList" /> control to <b>BorderStyle.None</b> to match the other controls.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterImageList" />.
            </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageList.BorderStyleChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageList.BorderStyle" /> property changes.
            </summary>
      <remarks>
        <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageList.BorderStyle" /> property is changed by either a programmatic
            modification or user interaction.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageList.CreateParams">
      <summary>
            This member overrides <see cref="P:System.Windows.Forms.Control.CreateParams">Control.CreateParams</see>.
            </summary>
      <value>
            This member overrides <see cref="P:System.Windows.Forms.Control.CreateParams">Control.CreateParams</see>.
            </value>
      <remarks>For more information refer to <see cref="P:System.Windows.Forms.Control.CreateParams">Control.CreateParams</see>.</remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageList.DoubleBuffer">
      <summary>
            Enables or disables double buffer painting, which eliminates flicker.
            </summary>
      <value>
        <b>true</b> to enable double buffer painting; false otherwise.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterImageList" />.
            </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageList.DoubleBufferChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageList.DoubleBuffer" /> property changes.
            </summary>
      <remarks>
        <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageList.DoubleBuffer" /> property is changed by either a programmatic modification
            or user interaction.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageList.PaintProperties">
      <summary>
            Gets or sets the <see cref="T:Leadtools.Drawing.RasterPaintProperties" /> which controls the painting of item images in this control.
            </summary>
      <value>An <see cref="T:Leadtools.Drawing.RasterPaintProperties" /> structure which controls the painting of item images in
            this control.</value>
      <keywords>RasterPaintEngine property|GDI|GDI+|Keeping 16-bit images at 16-bits when loaded in the viewer|Converting|Converting 16-bit images to 24 bits</keywords>
      <remarks>
        <p>If the item image has a transparent color
            (<see cref="P:Leadtools.RasterImage.Transparent">RasterImage.Transparent</see> is set to <b>true</b>) then the
            <see cref="T:Leadtools.WinForms.RasterImageList" /> control will automatically revert to the GDI+ paint engine.  It will
            temporarily set the
            <see cref="P:Leadtools.Drawing.RasterPaintProperties.PaintEngine">RasterPaintProperties.PaintEngine</see> value of the
            <b>PaintProperties</b> property to <b>RasterPaintEngine.GdiPlus</b> when drawing this item.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterImageList" />.
            </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageList.PaintPropertiesChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageList.PaintProperties" /> property changes.
            </summary>
      <remarks>
        <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageList.PaintProperties" /> property is changed by either a programmatic
            modification or user interaction.</p>
      </remarks>
      <noexample />
    </member>
    <member name="E:Leadtools.WinForms.RasterImageList.PaintBackground">
      <summary>
            Occurs when the background of the control is redrawn.
            </summary>
      <remarks>
        <p>This event is fired from within the <see cref="E:System.Windows.Forms.Control.Paint" /> event of this control.</p>
        <p>The event handler receives an argument of type <see cref="T:System.Windows.Forms.PaintEventArgs" /> containing data related to this
            event. The following <see cref="T:System.Windows.Forms.PaintEventArgs" /> properties provide information specific to this event.
            <list type="table"><listheader><term>Property</term><description>Description</description></listheader><item><term><see cref="P:System.Windows.Forms.PaintEventArgs.ClipRectangle" /></term><description>Gets the rectangle in which to paint.</description></item><item><term><see cref="P:System.Windows.Forms.PaintEventArgs.Graphics" /></term><description>Gets the graphics used to paint.</description></item></list></p>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterImageList" />.
            </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageList.DrawItem">
      <summary>
            Occurs when a request is made to draw an item in an owner-drawn <see cref="T:Leadtools.WinForms.RasterImageList" />.
            </summary>
      <remarks>
        <p>When you set the <see cref="P:Leadtools.WinForms.RasterImageList.ViewStyle" /> property to <see cref="T:Leadtools.WinForms.RasterImageListViewStyle">RasterImageListViewStyle.OwnerDraw</see>, the
            <see cref="T:Leadtools.WinForms.RasterImageList" /> control will fire the <b>DrawItem</b> event for each event that needs to be
            drawn.  The <see cref="T:Leadtools.WinForms.RasterImageListDrawItemEventArgs" /> argument passed to a <b>DrawItem</b> event handler provides a
            <see cref="T:System.Drawing.Graphics" /> object that enables you to perform drawing and other graphical operations on the surface
            of the <see cref="T:Leadtools.WinForms.RasterImageList" /> along with the <see cref="T:Leadtools.WinForms.RasterImageListItem" /> object that needs to be
            drawn.</p>
      </remarks>
      <example>
        <code lang="VB">      Private Class MyForm3 : Inherits Form
         Private imageList As RasterImageList
         Private codecs As RasterCodecs
         Public Sub New(ByVal title As String)
            Text = title
            ' Set the size of the form
            Size = New Size(400, 200)

            ' Create a new RasterImageList control
            imageList = New RasterImageList()
            imageList.Dock = DockStyle.Fill
            imageList.SelectionMode = RasterImageListSelectionMode.Single
            imageList.Size = Size
            Controls.Add(imageList)
            imageList.BringToFront()

            codecs = New RasterCodecs()

            ' Create three items
            Dim imagesPath As String = LEAD_VARS.ImagesDir

            For i As Integer = 0 To 2
               ' Load the image
               Dim index As Integer = i + 1
               Dim imageFileName As String = Path.Combine(imagesPath, "ImageProcessingDemo\Image" &amp; index.ToString() &amp; ".cmp")
               Dim image As RasterImage = codecs.Load(imageFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1)
               Dim item As RasterImageListItem = New RasterImageListItem(image, 1, "Item" &amp; index.ToString())

               ' Select the first item
               If i = 0 Then
                  item.Selected = True
               End If

               ' Add the item to the image list
               imageList.Items.Add(item)
            Next i

            ' Change the item size
            imageList.ItemSize = New Size(200, 200)

            ' Change the item image size
            imageList.ItemImageSize = New Size(120, 120)

            ' We are going to draw the items ourselves
            imageList.ViewStyle = RasterImageListViewStyle.OwnerDraw

            ' Add a handler to the DrawItem event
            AddHandler imageList.DrawItem, AddressOf rasterImageList_DrawItem

            ' Add the RasterImageList to the control collection.
            Controls.Add(imageList)
         End Sub

         Private Sub rasterImageList_DrawItem(ByVal sender As Object, ByVal e As RasterImageListDrawItemEventArgs)
            Dim item As RasterImageListItem = e.Item
            Dim imageList As RasterImageList = item.ImageList
            Dim g As Graphics = e.Graphics

            ' get the item rectangle
            Dim rc As Rectangle = imageList.GetItemRectangle(item)

            ' sanity check
            If rc.IsEmpty Then
               Return
            End If

            ' we want to draw a 1 pixel black rectangle around the item
            ' then we fill the inside of the rectangle with white if the item
            ' is not selected or lightgray if it is

            g.DrawRectangle(Pens.Black, rc.Left, rc.Top, rc.Width - 1, rc.Height - 1)

            ' we used up 1 pixel
            rc.Inflate(-1, -1)

            Dim b As Brush
            If item.Selected Then
               b = Brushes.LightGray
            Else
               b = Brushes.White
            End If
            g.FillRectangle(b, rc)

            ' calculate the rectangles for image and text
            If imageList.ShowItemText Then
               ' text is visible
               ' draw the text at the bottom of the item
               Dim textHeight As Integer = CInt(g.MeasureString("WWW", imageList.Font).Height + 4)
               Dim textRect As Rectangle = Rectangle.FromLTRB(rc.Left, rc.Bottom - textHeight, rc.Right, rc.Bottom)

               If (Not textRect.IsEmpty) Then
                  Dim sf As StringFormat = New StringFormat()
                  sf.Alignment = StringAlignment.Center
                  sf.LineAlignment = StringAlignment.Center
                  sf.Trimming = StringTrimming.EllipsisPath
                  sf.FormatFlags = StringFormatFlags.NoWrap

                  g.DrawString(item.Text, imageList.Font, Brushes.Black, textRect, sf)
                  sf.Dispose()

                  ' we need to update the item rectangle for the space
                  ' we used up to draw the text
                  rc.Height -= textRect.Height
               End If
            End If

            ' rc is the image rectangle
            If (Not rc.IsEmpty) Then
               ' now rc holds the rectangle to draw the image into

               ' first, set the correct page
               Dim savePage As Integer = -1
               If item.Image.Page &lt;&gt; item.Page Then
                  ' the page is different

                  ' save current image page so we can set it back when we are done
                  savePage = item.Image.Page

                  ' disable the image events, we are going to set the page back,
                  ' so we do not want anybody subscribing to this image Changed
                  ' event to know we changed it.
                  item.Image.DisableEvents()

                  ' set new page
                  item.Image.Page = item.Page
               End If

               Try
                  ' we want to center the image into whatever left of rc
                  Dim itemImageSize As Size = imageList.ItemImageSize
                  Dim imageRect As Rectangle = New Rectangle(rc.Left + (rc.Width - itemImageSize.Width) \ 2, rc.Top + (rc.Height - itemImageSize.Height) \ 2, _
                                                             itemImageSize.Width, itemImageSize.Height)

                  ' we want to keep the aspect ratio
                  imageRect = RasterImageList.GetFixedAspectRatioImageRectangle(item.Image.ImageWidth, item.Image.ImageHeight, imageRect)

                  ' draw the image
                  Dim lRect As LeadRect = New LeadRect(imageRect.Left, imageRect.Top, imageRect.Width, imageRect.Height)
                  RasterImagePainter.Paint(item.Image, e.Graphics, lRect, imageList.PaintProperties)

                  ' finally, draw a black rectangle around the image
                  imageRect.Inflate(1, 1)
                  g.DrawRectangle(Pens.Black, imageRect.Left, imageRect.Top, imageRect.Width - 1, imageRect.Height - 1)
               Finally
                  ' reset the old page
                  If savePage &lt;&gt; -1 Then
                     item.Image.Page = savePage

                     ' re-enable the events
                     item.Image.EnableEvents()
                  End If
               End Try
            End If
         End Sub
      End Class

      Public Sub RasterImageList_DrawItem(ByVal title As String)
         Dim form As MyForm3 = New MyForm3(title)
         form.ShowDialog()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MyForm3 : Form
      {
         RasterImageList imageList;
         RasterCodecs codecs;
         public MyForm3(string title)
         {
            Text = title;
            // Set the size of the form
            Size = new Size(400, 200);

            // Create a new RasterImageList control
            imageList = new RasterImageList();
            imageList.Dock = DockStyle.Fill;
            imageList.SelectionMode = RasterImageListSelectionMode.Single;
            imageList.Size = Size;
            Controls.Add(imageList);
            imageList.BringToFront();

            codecs = new RasterCodecs();

            // Create three items
            string imagesPath = LEAD_VARS.ImagesDir;

            for(int i = 0; i &lt; 3; i++)
            {
               // Load the image
               int index = i + 1;
               string imageFileName = Path.Combine(imagesPath, @"ImageProcessingDemo\Image" + index.ToString() + ".cmp");
               RasterImage image = codecs.Load(imageFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1);
               RasterImageListItem item = new RasterImageListItem(image, 1, "Item" + index.ToString());

               // Select the first item
               if(i == 0)
                  item.Selected = true;

               // Add the item to the image list
               imageList.Items.Add(item);
            }

            // Change the item size
            imageList.ItemSize = new Size(200, 200);

            // Change the item image size
            imageList.ItemImageSize = new Size(120, 120);

            // We are going to draw the items ourselves
            imageList.ViewStyle = RasterImageListViewStyle.OwnerDraw;

            // Add a handler to the DrawItem event
            imageList.DrawItem += new EventHandler&lt;RasterImageListDrawItemEventArgs&gt;(rasterImageList_DrawItem);

            // Add the RasterImageList to the control collection.
            Controls.Add(imageList);
         }

         private void rasterImageList_DrawItem(object sender, RasterImageListDrawItemEventArgs e)
         {
            RasterImageListItem item = e.Item;
            RasterImageList imageList = item.ImageList;
            Graphics g = e.Graphics;

            // get the item rectangle
            Rectangle rc = imageList.GetItemRectangle(item);

            // sanity check
            if(rc.IsEmpty)
               return;

            // we want to draw a 1 pixel black rectangle around the item
            // then we fill the inside of the rectangle with white if the item
            // is not selected or lightgray if it is

            g.DrawRectangle(Pens.Black, rc.Left, rc.Top, rc.Width - 1, rc.Height - 1);

            // we used up 1 pixel
            rc.Inflate(-1, -1);

            Brush b;
            if(item.Selected)
               b = Brushes.LightGray;
            else
               b = Brushes.White;
            g.FillRectangle(b, rc);

            // calculate the rectangles for image and text
            if(imageList.ShowItemText)
            {
               // text is visible
               // draw the text at the bottom of the item
               int textHeight = (int)(g.MeasureString("WWW", imageList.Font).Height + 4);
               Rectangle textRect = Rectangle.FromLTRB(
                  rc.Left,
                  rc.Bottom - textHeight,
                  rc.Right,
                  rc.Bottom);

               if(!textRect.IsEmpty)
               {
                  StringFormat sf = new StringFormat();
                  sf.Alignment = StringAlignment.Center;
                  sf.LineAlignment = StringAlignment.Center;
                  sf.Trimming = StringTrimming.EllipsisPath;
                  sf.FormatFlags = StringFormatFlags.NoWrap;

                  g.DrawString(
                     item.Text,
                     imageList.Font,
                     Brushes.Black,
                     textRect,
                     sf);
                  sf.Dispose();

                  // we need to update the item rectangle for the space
                  // we used up to draw the text
                  rc.Height -= textRect.Height;
               }
            }

            // rc is the image rectangle
            if(!rc.IsEmpty)
            {
               // now rc holds the rectangle to draw the image into

               // first, set the correct page
               int savePage = -1;
               if(item.Image.Page != item.Page)
               {
                  // the page is different

                  // save current image page so we can set it back when we are done
                  savePage = item.Image.Page;

                  // disable the image events, we are going to set the page back,
                  // so we do not want anybody subscribing to this image Changed
                  // event to know we changed it.
                  item.Image.DisableEvents();

                  // set new page
                  item.Image.Page = item.Page;
               }

               try
               {
                  // we want to center the image into whatever left of rc
                  Size itemImageSize = imageList.ItemImageSize;
                  Rectangle imageRect = new Rectangle(
                     rc.Left + (rc.Width - itemImageSize.Width) / 2,
                     rc.Top + (rc.Height - itemImageSize.Height) / 2,
                     itemImageSize.Width,
                     itemImageSize.Height);

                  // we want to keep the aspect ratio
                  imageRect = RasterImageList.GetFixedAspectRatioImageRectangle(
                     item.Image.ImageWidth,
                     item.Image.ImageHeight,
                     imageRect);

                  // draw the image
                  LeadRect lRect = new LeadRect(imageRect.Left, imageRect.Top, imageRect.Width, imageRect.Height);
                  RasterImagePainter.Paint(item.Image, e.Graphics, lRect, imageList.PaintProperties);

                  // finally, draw a black rectangle around the image
                  imageRect.Inflate(1, 1);
                  g.DrawRectangle(
                     Pens.Black,
                     imageRect.Left,
                     imageRect.Top,
                     imageRect.Width - 1,
                     imageRect.Height - 1);
               }
               finally
               {
                  // reset the old page
                  if(savePage != -1)
                  {
                     item.Image.Page = savePage;

                     // re-enable the events
                     item.Image.EnableEvents();
                  }
               }
            }
         }
      }

      public void RasterImageList_DrawItem(string title)
      {
         MyForm3 form = new MyForm3(title);
         form.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--RasterImageList.DrawItem-->
      </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImageList.Items">
      <summary>
            Gets a collection containing all items in the control.
            </summary>
      <value>A <see cref="T:Leadtools.WinForms.RasterImageListItemCollection" /> that contains all the items in this
            <see cref="T:Leadtools.WinForms.RasterImageList" /> control.</value>
      <remarks>
            Using the <see cref="T:Leadtools.WinForms.RasterImageListItemCollection" /> returned by this property, you can add items, remove items,
            and obtain a count of items. For more information on the tasks that can be performed with the items in the
            collection, refer to <see cref="T:Leadtools.WinForms.RasterImageListItemCollection" />.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterImageList" />.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImageList.SelectedItems">
      <summary>
            Gets the items that are selected in the control.
            </summary>
      <value>A <see cref="T:Leadtools.WinForms.RasterImageListItemCollection" /> that contains the items that are selected in the control.
            If no items are currently selected, an empty <see cref="T:Leadtools.WinForms.RasterImageListItemCollection" /> is returned.</value>
      <remarks>
        <p>When the <see cref="P:Leadtools.WinForms.RasterImageList.SelectionMode" /> property is set to <see cref="T:Leadtools.WinForms.RasterImageListSelectionMode">RasterImageListSelectionMode.Multi</see>, this property
            returns a collection containing the items that are selected in the <see cref="T:Leadtools.WinForms.RasterImageList" />. For a
            single-selection <see cref="T:Leadtools.WinForms.RasterImageList" />, this property returns a collection containing the only
            selected item in the <see cref="T:Leadtools.WinForms.RasterImageList" />. For more information on the tasks that can be performed
            with the items in the collection, see <see cref="T:Leadtools.WinForms.RasterImageListItemCollection" />.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageListItem.Image" />.
            </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageList.SelectedIndexChanged">
      <summary>
            Occurs when the index of the selected item in the <see cref="T:Leadtools.WinForms.RasterImageList" /> control changes.
            </summary>
      <remarks>
        <p>For single selection <see cref="T:Leadtools.WinForms.RasterImageList" /> controls (i.e. when <see cref="P:Leadtools.WinForms.RasterImageList.SelectionMode" /> is set to
            <see cref="T:Leadtools.WinForms.RasterImageListSelectionMode">RasterImageListSelectionMode.Single</see>), this event occurs whenever there is a change to the index position of the selected
            item.</p>
        <p>In a multiple selection <see cref="T:Leadtools.WinForms.RasterImageList" /> control (i.e. when <see cref="P:Leadtools.WinForms.RasterImageList.SelectionMode" /> is set to
            <see cref="T:Leadtools.WinForms.RasterImageListSelectionMode">RasterImageListSelectionMode.Multi</see>), this event occurs whenever an item is removed or added to the list
            of selected items.</p>
        <p>To determine which items are selected in the <see cref="T:Leadtools.WinForms.RasterImageList" /> control, use the
            <see cref="P:Leadtools.WinForms.RasterImageList.SelectedItems" /> property to access the <see cref="T:Leadtools.WinForms.RasterImageListItemCollection" />.</p>
        <p>You can also determine which items are selected in the control by enumerating all the <see cref="P:Leadtools.WinForms.RasterImageList.Items" /> and
            checking the <see cref="P:Leadtools.WinForms.RasterImageListItem.Selected">RasterImageListItem.Selected</see> property.</p>
        <p>You can create an event handler for this event to perform tasks whenever there is a change to the selected
            items in the <see cref="T:Leadtools.WinForms.RasterImageList" /> control.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageListItem.Image" />.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImageList.ItemSize">
      <summary>
            Gets or sets the size of each <see cref="T:Leadtools.WinForms.RasterImageListItem" /> in the control.
            </summary>
      <value>A <see cref="T:System.Drawing.Size" /> structure that specifies the size of each <see cref="T:Leadtools.WinForms.RasterImageListItem" /> in
            this <see cref="T:Leadtools.WinForms.RasterImageList" /> in pixels.</value>
      <remarks>
        <p>The <b>ItemSize</b> specifies the overall size of each item in the <see cref="T:Leadtools.WinForms.RasterImageList" /> control.</p>
        <p>When changing any of the item sizes or styles, you should pay special attention to the values you specify,
            in general, you should setup <b>ItemSize</b> to be large enough to accommodate <see cref="P:Leadtools.WinForms.RasterImageList.ItemImageSize" /> plus
            room for <see cref="P:Leadtools.WinForms.RasterImageList.ItemBorderStyle" /> and <see cref="P:Leadtools.WinForms.RasterImageList.ItemImageBorderStyle" />.  If you set the
            <see cref="P:Leadtools.WinForms.RasterImageList.ShowItemText" /> property to <b>true</b>, then you should also accommodate room for the item text
            in your calculations.</p>
        <p>For more information about item appearance, refer to <see cref="T:Leadtools.Topics.RasterImageListAppearance">RasterImageList Appearance</see>.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="E:Leadtools.WinForms.RasterImageList.DrawItem" /> event.
            </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageList.ItemSizeChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageList.ItemSize" /> property changes.
            </summary>
      <remarks>
        <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageList.ItemSize" /> property is changed by either a programmatic
            modification or user interaction.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageList.ItemImageSize">
      <summary>
            Gets or sets the maximum size of the image of each <see cref="T:Leadtools.WinForms.RasterImageListItem" /> in the control.
            </summary>
      <value>A <see cref="T:System.Drawing.Size" /> structure that specifies the maximum size of the image of each
            <see cref="T:Leadtools.WinForms.RasterImageListItem" /> in this <see cref="T:Leadtools.WinForms.RasterImageList" /> in pixels.</value>
      <remarks>
        <p>The <b>ItemImageSize</b> specifies the maximum size of the image of each item in the
            <see cref="T:Leadtools.WinForms.RasterImageList" /> control.  The <see cref="P:Leadtools.WinForms.RasterImageListItem.Image">RasterImageListItem.Image</see>
            of each image is drawn into the item surface using the maximum size possible of <b>ItemImageSize</b> while
            maintaining the aspect ratio of the image.  If the
            <see cref="P:Leadtools.WinForms.RasterImageListItem.Image">RasterImageListItem.Image</see> of an item is smaller than
            <b>ItemImageSize</b>, then no re-sizing is done when the image is drawn.  In other words, the
            <see cref="T:Leadtools.WinForms.RasterImageList" /> control implements a "Fit if larger" drawing algorithm when the item images are
            painted.</p>
        <p>When changing any of the item sizes or styles, you should pay special attention to the values you specify,
            in general, you should setup <see cref="P:Leadtools.WinForms.RasterImageList.ItemSize" /> to be large enough to accommodate <b>ItemImageSize</b> plus
            room for <see cref="P:Leadtools.WinForms.RasterImageList.ItemBorderStyle" /> and <see cref="P:Leadtools.WinForms.RasterImageList.ItemImageBorderStyle" />.  If you set the
            <see cref="P:Leadtools.WinForms.RasterImageList.ShowItemText" /> property to <b>true</b>, then you should also accommodate room for the item text
            in your calculations.</p>
        <p>For more information about item appearance, refer to <see cref="T:Leadtools.Topics.RasterImageListAppearance">RasterImageList Appearance</see>.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="E:Leadtools.WinForms.RasterImageList.DrawItem" /> event.
            </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageList.ItemImageSizeChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageList.ItemImageSize" /> property changes.
            </summary>
      <remarks>
        <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageList.ItemImageSize" /> property is changed by either a programmatic
            modification or user interaction.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageList.ItemImageBorderStyle">
      <summary>
            Gets or sets the border style to draw around the image of an <see cref="T:Leadtools.WinForms.RasterImageListItem" /> in the control.
            </summary>
      <value>A <see cref="P:Leadtools.WinForms.RasterImageList.BorderStyle" /> enumeration that specifies the border to draw around the image of an
            <see cref="T:Leadtools.WinForms.RasterImageListItem" /> in the control.</value>
      <remarks>
        <p>The <b>ItemImageBorderStyle</b> property is only supported when the value of the
            <see cref="P:Leadtools.WinForms.RasterImageList.ViewStyle" /> is set to <see cref="T:Leadtools.WinForms.RasterImageListViewStyle">RasterImageListViewStyle.Normal</see></p>
        <p>When changing any of the item sizes or styles, you should pay special attention to the values you specify,
            in general, you should setup <see cref="P:Leadtools.WinForms.RasterImageList.ItemSize" /> to be large enough to accommodate
            <see cref="P:Leadtools.WinForms.RasterImageList.ItemImageSize" /> plus room for <see cref="P:Leadtools.WinForms.RasterImageList.ItemBorderStyle" /> and <b>ItemImageBorderStyle</b>.  If
            you set the <see cref="P:Leadtools.WinForms.RasterImageList.ShowItemText" /> property to <b>true</b>, then you should also accommodate room for the
            item text in your calculations.</p>
        <p>For more information about item appearance, refer to <see cref="T:Leadtools.Topics.RasterImageListAppearance">RasterImageList Appearance</see>.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageList.ItemBorderStyle" /></example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageList.ItemImageBorderStyleChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageList.ItemImageBorderStyle" /> property changes.
            </summary>
      <remarks>
        <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageList.ItemImageBorderStyle" /> property is changed by either a programmatic
            modification or user interaction.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageList.ItemBorderStyle">
      <summary>
            Gets or sets the border style to draw around the <see cref="T:Leadtools.WinForms.RasterImageListItem" /> in the control.
            </summary>
      <value>A <see cref="P:Leadtools.WinForms.RasterImageList.BorderStyle" /> enumeration that specifies the border to draw around the
            <see cref="T:Leadtools.WinForms.RasterImageListItem" /> in the control.</value>
      <remarks>
        <p>The <b>ItemBorderStyle</b> property is only supported when the value of the
            <see cref="P:Leadtools.WinForms.RasterImageList.ViewStyle" /> is set to <see cref="T:Leadtools.WinForms.RasterImageListViewStyle">RasterImageListViewStyle.Normal</see></p>
        <p>When changing any of the item sizes or styles, you should pay special attention to the values you specify,
            in general, you should setup <see cref="P:Leadtools.WinForms.RasterImageList.ItemSize" /> to be large enough to accommodate
            <see cref="P:Leadtools.WinForms.RasterImageList.ItemImageSize" /> plus room for <b>ItemBorderStyle</b> and <see cref="P:Leadtools.WinForms.RasterImageList.ItemImageBorderStyle" />.  If
            you set the <see cref="P:Leadtools.WinForms.RasterImageList.ShowItemText" /> property to <b>true</b>, then you should also accommodate room for the
            item text in your calculations.</p>
        <p>For more information about item appearance, refer to <see cref="T:Leadtools.Topics.RasterImageListAppearance">RasterImageList Appearance</see>.</p>
      </remarks>
      <example>
        <code lang="VB">      Public Sub RasterImageList_ItemBorderStyle(ByVal imageList As RasterImageList)
         ' Apply our custom item styles
         imageList.BeginUpdate()

         ' Make sure we are using Normal style
         imageList.ViewStyle = RasterImageListViewStyle.Normal

         ' Draw a border around the item
         imageList.ItemBorderStyle = BorderStyle.FixedSingle

         ' Draw a border around the image inside each item
         imageList.ItemImageBorderStyle = BorderStyle.FixedSingle

         ' Leave 10 pixels between each adjucent items
         imageList.ItemSpacingSize = New Size(10, 10)

         ' Apply a dark cyan/white color scheme
         imageList.ItemForeColor = Color.DarkCyan
         imageList.ItemSelectedForeColor = Color.White
         imageList.ItemBackColor = Color.White
         imageList.ItemSelectedBackColor = Color.DarkCyan

         imageList.EndUpdate()
      End Sub</code>
        <code lang="CS">      public void RasterImageList_ItemBorderStyle(RasterImageList imageList)
      {
         // Apply our custom item styles
         imageList.BeginUpdate();

         // Make sure we are using Normal style
         imageList.ViewStyle = RasterImageListViewStyle.Normal;

         // Draw a border around the item
         imageList.ItemBorderStyle = BorderStyle.FixedSingle;

         // Draw a border around the image inside each item
         imageList.ItemImageBorderStyle = BorderStyle.FixedSingle;

         // Leave 10 pixels between each adjucent items
         imageList.ItemSpacingSize = new Size(10, 10);

         // Apply a dark cyan/white color scheme
         imageList.ItemForeColor = Color.DarkCyan;
         imageList.ItemSelectedForeColor = Color.White;
         imageList.ItemBackColor = Color.White;
         imageList.ItemSelectedBackColor = Color.DarkCyan;

         imageList.EndUpdate();
      }</code>
        <!--RasterImageList.ItemBorderStyle-->
      </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageList.ItemBorderStyleChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageList.ItemBorderStyle" /> property changes.
            </summary>
      <remarks>
        <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageList.ItemBorderStyle" /> property is changed by either a programmatic
            modification or user interaction.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageList.ItemSpacingSize">
      <summary>
            Gets or sets the amount of space between adjacent items in the control.
            </summary>
      <value>A <see cref="T:System.Drawing.Size" /> structure that contains the amount of space between adjacent items in this
            <see cref="T:Leadtools.WinForms.RasterImageList" /> control in pixels.</value>
      <remarks>
        <p>For more information about item appearance, refer to <see cref="T:Leadtools.Topics.RasterImageListAppearance">RasterImageList Appearance</see>.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageList.ItemBorderStyle" /></example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageList.ItemSpacingSizeChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageList.ItemSpacingSize" /> property changes.
            </summary>
      <remarks>
        <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageList.ItemSpacingSize" /> property is changed by either a programmatic
            modification or user interaction.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageList.ItemForeColor">
      <summary>
            Gets or sets the foreground color of the un-selected items in this <see cref="T:Leadtools.WinForms.RasterImageList" /></summary>
      <value>The foreground color of the un-selected items in this <see cref="T:Leadtools.WinForms.RasterImageList" /></value>
      <remarks>
        <p>How the <see cref="P:Leadtools.WinForms.RasterImageList.ItemForeColor" /> value is used to draw the items depends on the current <see cref="P:Leadtools.WinForms.RasterImageList.ViewStyle" />.  The
            following table lists all the cases:
            <list type="table"><listheader><term>ViewStyle</term><description>Description</description></listheader><item><term><see cref="T:Leadtools.WinForms.RasterImageListViewStyle">RasterImageListViewStyle.Normal</see></term><description>Draw the text of un-selected items.</description></item><item><term><see cref="T:Leadtools.WinForms.RasterImageListViewStyle">RasterImageListViewStyle.Explorer</see></term><description>Draw the text of un-selected items.</description></item><item><term><see cref="T:Leadtools.WinForms.RasterImageListViewStyle">RasterImageListViewStyle.Button</see></term><description>Draw the text of all items.</description></item></list></p>
        <p>For more information about item appearance, refer to <see cref="T:Leadtools.Topics.RasterImageListAppearance">RasterImageList Appearance</see>.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageList.ItemBorderStyle" /></example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageList.ItemForeColorChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageList.ItemForeColor" /> property changes.
            </summary>
      <remarks>
        <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageList.ItemForeColor" /> property is changed by either a programmatic
            modification or user interaction.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageList.ItemSelectedForeColor">
      <summary>
            Gets or sets the foreground color of the selected items in this <see cref="T:Leadtools.WinForms.RasterImageList" />.
            </summary>
      <value>The foreground color of the selected items in this <see cref="T:Leadtools.WinForms.RasterImageList" /></value>.
            <remarks><p>How the <b>ItemSelectedForeColor</b> value is used to draw the items depends on the current <see cref="P:Leadtools.WinForms.RasterImageList.ViewStyle" />.  The
            following table lists all the cases:
            <list type="table"><listheader><term>ViewStyle</term><description>Description</description></listheader><item><term><see cref="T:Leadtools.WinForms.RasterImageListViewStyle">RasterImageListViewStyle.Normal</see></term><description>Fills the background of selected items.</description></item><item><term><see cref="T:Leadtools.WinForms.RasterImageListViewStyle">RasterImageListViewStyle.Explorer</see></term><description>Draw the text of selected items as well as a rectangle around the image of selected items.</description></item><item><term><see cref="T:Leadtools.WinForms.RasterImageListViewStyle">RasterImageListViewStyle.Button</see></term><description>Not used.</description></item></list></p><p>For more information about item appearance, refer to <see cref="T:Leadtools.Topics.RasterImageListAppearance">RasterImageList Appearance</see>.</p></remarks><example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageList.ItemBorderStyle" /></example></member>
    <member name="E:Leadtools.WinForms.RasterImageList.ItemSelectedForeColorChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageList.ItemSelectedForeColor" /> property changes.
            </summary>
      <remarks>
        <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageList.ItemSelectedForeColor" /> property is changed by either a programmatic
            modification or user interaction.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageList.ItemBackColor">
      <summary>
            Gets or sets the item background color of the un-selected items in this <see cref="T:Leadtools.WinForms.RasterImageList" /></summary>
      <value>The item background color of the un-selected items in this <see cref="T:Leadtools.WinForms.RasterImageList" /></value>
      <remarks>
        <p>How the <b>ItemBackColor</b> value is used to draw the items depends on the current <see cref="P:Leadtools.WinForms.RasterImageList.ViewStyle" />.  The
            following table lists all the cases:
            <list type="table"><listheader><term>ViewStyle</term><description>Description</description></listheader><item><term><see cref="T:Leadtools.WinForms.RasterImageListViewStyle">RasterImageListViewStyle.Normal</see></term><description>Fills the background of un-selected items.</description></item><item><term><see cref="T:Leadtools.WinForms.RasterImageListViewStyle">RasterImageListViewStyle.Explorer</see></term><description>Not used.</description></item><item><term><see cref="T:Leadtools.WinForms.RasterImageListViewStyle">RasterImageListViewStyle.Button</see></term><description>Not used.</description></item></list></p>
        <p>For more information about item appearance, refer to <see cref="T:Leadtools.Topics.RasterImageListAppearance">RasterImageList Appearance</see>.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageList.ItemBorderStyle" /></example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageList.ItemBackColorChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageList.ItemBackColor" /> property changes.
            </summary>
      <remarks>
        <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageList.ItemBackColor" /> property is changed by either a programmatic
            modification or user interaction.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageList.ItemSelectedBackColor">
      <summary>
            Gets or sets the item background color of the selected items in this <see cref="T:Leadtools.WinForms.RasterImageList" />.
            </summary>
      <value>The item background color of the selected items in this <see cref="T:Leadtools.WinForms.RasterImageList" /></value>.
            <remarks><p>How the <b>ItemSelectedBackColor</b> value is used to draw the items depends on the current <see cref="P:Leadtools.WinForms.RasterImageList.ViewStyle" />.  The
            following table lists all the cases:
            <list type="table"><listheader><term>ViewStyle</term><description>Description</description></listheader><item><term><see cref="T:Leadtools.WinForms.RasterImageListViewStyle">RasterImageListViewStyle.Normal</see></term><description>Fills the background of selected items.</description></item><item><term><see cref="T:Leadtools.WinForms.RasterImageListViewStyle">RasterImageListViewStyle.Explorer</see></term><description>When an item is selected, this color is used to fill the background behind the text
                 of the item and to draw a rectangle around the image.</description></item><item><term><see cref="T:Leadtools.WinForms.RasterImageListViewStyle">RasterImageListViewStyle.Button</see></term><description>Not used.</description></item></list></p><p>For more information about item appearance, refer to <see cref="T:Leadtools.Topics.RasterImageListAppearance">RasterImageList Appearance</see>.</p></remarks><example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageList.ItemBorderStyle" /></example></member>
    <member name="E:Leadtools.WinForms.RasterImageList.ItemSelectedBackColorChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageList.ItemSelectedBackColor" /> property changes.
            </summary>
      <remarks>
        <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageList.ItemSelectedBackColor" /> property is changed by either a programmatic
            modification or user interaction.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageList.SelectUserImage">
      <summary>
            Gets or sets a user-defined image to use as the selection marker.
            </summary>
      <value>A user-defined <see cref="T:Leadtools.RasterImage" /> to use as the selection marker.
            Default value is null (Nothing in Visual Basic).</value>
      <remarks>
        <p>The user defined image selection marker is used only when <see cref="P:Leadtools.WinForms.RasterImageList.ViewStyle" /> is set
            to <see cref="T:Leadtools.WinForms.RasterImageListViewStyle">RasterImageListViewStyle.Normal</see>.  It is ignored in all other styles.</p>
        <p>When you set an image into the <b>SelectUserImage</b>, the specified image will be displayed around
            each selected item.</p>
        <p>Normally, you would want to set a transparent color into this image using the
            <see cref="P:Leadtools.RasterImage.Transparent">RasterImage.Transparent</see> and
            <see cref="P:Leadtools.RasterImage.TransparentColor">RasterImage.TransparentColor</see> properties of the
            <see cref="T:Leadtools.RasterImage" /> class.</p>
      </remarks>
      <example>
        <code lang="VB">      ''' This example will use a user-defined image as the selection marker for a &lt;see cref="RasterImageList"/&gt; control.
      Public Sub RasterImageList_SelectUserImage(ByVal imageList As RasterImageList)
         imageList.ViewStyle = RasterImageListViewStyle.Normal
         ' Create the user-defined image to use as the selection marker (an ellipse)
         Dim palette As RasterColor() = New RasterColor() {}
         Dim selectImage As RasterImage = New RasterImage(RasterMemoryFlags.Conventional, imageList.ItemSize.Width, imageList.ItemSize.Height, 24, _
                                                          RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, palette, IntPtr.Zero, 0)

         ' Draw the ellipse
         Dim hdc As IntPtr = RasterImagePainter.CreateLeadDC(selectImage)
         Dim g As Graphics = Graphics.FromHdc(hdc)

         Dim rc As Rectangle = New Rectangle(0, 0, selectImage.ImageWidth, selectImage.ImageHeight)
         g.FillRectangle(Brushes.Black, rc)
         For i As Integer = 0 To 3
            g.DrawEllipse(Pens.Red, rc.Left, rc.Top, rc.Width - 1, rc.Height - 1)
            rc.Inflate(-1, -1)
         Next i

         g.Dispose()
         RasterImagePainter.DeleteLeadDC(hdc)

         ' Set the transparent color
         selectImage.Transparent = True
         selectImage.TransparentColor = RasterColor.FromKnownColor(RasterKnownColor.Black)

         ' Set this image as the selection marker
         imageList.SelectUserImage = selectImage
      End Sub</code>
        <code lang="CS">      /// This example will use a user-defined image as the selection marker of an &lt;see cref="RasterImageList"/&gt; control.
      public void RasterImageList_SelectUserImage(RasterImageList imageList)
      { // Use "Normal" view style
         imageList.ViewStyle = RasterImageListViewStyle.Normal;
         // Create the user-defined image to use as the selection marker (an ellipse)
         RasterColor[] palette = new RasterColor[0];
         RasterImage selectImage = new RasterImage(
            RasterMemoryFlags.Conventional,
            imageList.ItemSize.Width,
            imageList.ItemSize.Height,
            24,
            RasterByteOrder.Bgr,
            RasterViewPerspective.TopLeft,
            palette,
            IntPtr.Zero,
            0);

         // Draw the ellipse
         IntPtr hdc = RasterImagePainter.CreateLeadDC(selectImage);
         Graphics g = Graphics.FromHdc(hdc);

         Rectangle rc = new Rectangle(0, 0, selectImage.ImageWidth, selectImage.ImageHeight);
         g.FillRectangle(Brushes.Black, rc);
         for(int i = 0; i &lt; 4; i++)
         {
            g.DrawEllipse(Pens.Red, rc.Left, rc.Top, rc.Width - 1, rc.Height - 1);
            rc.Inflate(-1, -1);
         }

         g.Dispose();
         RasterImagePainter.DeleteLeadDC(hdc);

         // Set the transparent color
         selectImage.Transparent = true;
         selectImage.TransparentColor = RasterColor.FromKnownColor(RasterKnownColor.Black);

         // Set this image as the selection marker
         imageList.SelectUserImage = selectImage;
      }</code>
        <!--RasterImageList.SelectUserImage-->
      </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageList.SelectUserImageChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageList.SelectUserImage" /> property changes.
            </summary>
      <remarks>
        <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageList.SelectUserImage" /> property is changed by either a programmatic
            modification or user interaction.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageList.SelectionMode">
      <summary>
            Gets or sets whether automatic item selection is allowed.
            </summary>
      <value>An <see cref="T:Leadtools.WinForms.RasterImageListSelectionMode" /> enumeration that indicates whether automatic item
            selection is allowed.  Default value is <see cref="T:Leadtools.WinForms.RasterImageListSelectionMode">RasterImageListSelectionMode.Single</see>.</value>
      <remarks>
        <p>If automatic item selection is enabled, items are automatically selected and de-selected when the user
            clicks on them using the mouse or when moving the current selected item using the keyboard.</p>
        <p>For more information, refer to the <see cref="T:Leadtools.WinForms.RasterImageListSelectionMode" /> enumeration.</p>
      </remarks>
      <example>
        <code lang="VB">      Private Class MyForm5 : Inherits Form
         Private imageList As RasterImageList
         Private codecs As RasterCodecs
         Public Sub New(ByVal title As String)
            Text = title

            ' Set the size of the form
            Size = New Size(400, 200)

            ' Create a new RasterImageList control
            imageList = New RasterImageList()
            imageList.Dock = DockStyle.Fill
            imageList.SelectionMode = RasterImageListSelectionMode.Single
            imageList.Size = Size
            Controls.Add(imageList)
            imageList.BringToFront()

            codecs = New RasterCodecs()

            ' Create three items
            Dim imagesPath As String = LEAD_VARS.ImagesDir

            For i As Integer = 0 To 2
               ' Load the image
               Dim index As Integer = i + 1
               Dim imageFileName As String = Path.Combine(imagesPath, "ImageProcessingDemo\Image" &amp; index.ToString() &amp; ".cmp")
               Dim image As RasterImage = codecs.Load(imageFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1)
               Dim item As RasterImageListItem = New RasterImageListItem(image, 1, "Item" &amp; index.ToString())

               ' Select the first item
               If i = 0 Then
                  item.Selected = True
               End If

               ' Add the item to the image list
               imageList.Items.Add(item)
            Next i


            ' Use manual selection
            imageList.SelectionMode = RasterImageListSelectionMode.None

            ' Add a handler to the MouseDown event
            AddHandler imageList.MouseDown, AddressOf rasterImageList_MouseDown

            ' Add the RasterImageList to the control collection.
            Controls.Add(imageList)
         End Sub

         Private Sub rasterImageList_MouseDown(ByVal sender As Object, ByVal e As MouseEventArgs)
            Dim imageList As RasterImageList = CType(IIf(TypeOf sender Is RasterImageList, sender, Nothing), RasterImageList)

            ' Check if we are in manual selection mode and if this is a left button click
            If imageList.SelectionMode = RasterImageListSelectionMode.None AndAlso e.Button = Windows.Forms.MouseButtons.Left Then
               ' Yes, get the item under the cursor position
               Dim item As RasterImageListItem = imageList.HitTest(e.X, e.Y)

               ' If not already selected, select this item
               If Not item Is Nothing AndAlso (Not item.Selected) Then
                  imageList.BeginUpdate()

                  ' First, de-select any items
                  imageList.SelectAll(False)

                  ' Now select this item
                  item.Selected = True

                  imageList.EndUpdate()

                  item.Invalidate()
               End If
            End If
         End Sub
      End Class

      Public Sub RasterImageList_SelectionMode(ByVal title As String)
         Dim form As MyForm5 = New MyForm5(title)
         form.ShowDialog()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MyForm5 : Form
      {
         RasterImageList imageList;
         RasterCodecs codecs;
         public MyForm5(string title)
         {
            Text = title;

            // Set the size of the form
            Size = new Size(400, 200);

            // Create a new RasterImageList control
            imageList = new RasterImageList();
            imageList.Dock = DockStyle.Fill;
            imageList.SelectionMode = RasterImageListSelectionMode.Single;
            imageList.Size = Size;
            Controls.Add(imageList);
            imageList.BringToFront();

            codecs = new RasterCodecs();

            // Create three items
            string imagesPath = LEAD_VARS.ImagesDir;

            for(int i = 0; i &lt; 3; i++)
            {
               // Load the image
               int index = i + 1;
               string imageFileName = Path.Combine(imagesPath, @"ImageProcessingDemo\Image" + index.ToString() + ".cmp");
               RasterImage image = codecs.Load(imageFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1);
               RasterImageListItem item = new RasterImageListItem(image, 1, "Item" + index.ToString());

               // Select the first item
               if(i == 0)
                  item.Selected = true;

               // Add the item to the image list
               imageList.Items.Add(item);
            }


            // Use manual selection
            imageList.SelectionMode = RasterImageListSelectionMode.None;

            // Add a handler to the MouseDown event
            imageList.MouseDown += new MouseEventHandler(rasterImageList_MouseDown);

            // Add the RasterImageList to the control collection.
            Controls.Add(imageList);
         }

         private void rasterImageList_MouseDown(object sender, MouseEventArgs e)
         {
            RasterImageList imageList = sender as RasterImageList;

            // Check if we are in manual selection mode and if this is a left button click
            if(imageList.SelectionMode == RasterImageListSelectionMode.None &amp;&amp;
               e.Button == MouseButtons.Left)
            {
               // Yes, get the item under the cursor position
               RasterImageListItem item = imageList.HitTest(e.X, e.Y);

               // If not already selected, select this item
               if(item != null &amp;&amp; !item.Selected)
               {
                  imageList.BeginUpdate();

                  // First, de-select any items
                  imageList.SelectAll(false);

                  // Now select this item
                  item.Selected = true;

                  imageList.EndUpdate();

                  item.Invalidate();
               }
            }
         }
      }

      public void RasterImageList_SelectionMode(string title)
      {
         MyForm5 form = new MyForm5(title);
         form.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--RasterImageList.SelectionMode-->
      </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageList.SelectionModeChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageList.SelectionMode" /> property changes.
            </summary>
      <remarks>
        <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageList.SelectionMode" /> property is changed by either a programmatic
            modification or user interaction.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageList.EnableRubberBandSelection">
      <summary>
            Enables or disables rubber band selection in the <see cref="T:Leadtools.WinForms.RasterImageList" />.
            </summary>
      <value>
        <b>true</b> to enable rubber band selection; false otherwise.</value>
      <remarks>
            This property is used only if <see cref="P:Leadtools.WinForms.RasterImageList.SelectionMode" /> is set to
            <see cref="T:Leadtools.WinForms.RasterImageListSelectionMode">RasterImageListSelectionMode.Multi</see>.
            </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageList.AutoDeselectItems" />.
            </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageList.EnableRubberBandSelectionChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageList.EnableRubberBandSelection" /> property changes.
            </summary>
      <remarks>
        <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageList.EnableRubberBandSelection" /> property is changed by either a programmatic
            modification or user interaction.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageList.AutoDeselectItems">
      <summary>
            Enables or disables de-selecting items when mouse button is clicked.
            </summary>
      <value>
        <b>true</b> to enable de-selecting; false otherwise.</value>
      <remarks>
            This property is used only if <see cref="P:Leadtools.WinForms.RasterImageList.SelectionMode" /> is set to
            <see cref="T:Leadtools.WinForms.RasterImageListSelectionMode">RasterImageListSelectionMode.Multi</see>.
            </remarks>
      <example>
        <code lang="VB">      Private Class MyForm6 : Inherits Form
         Public imageList As RasterImageList
         Private codecs As RasterCodecs
         Public Sub New()
            ' Set the size of the form
            Size = New Size(500, 200)

            ' Create a new RasterImageList control
            imageList = New RasterImageList()
            imageList.Dock = DockStyle.Fill
            imageList.SelectionMode = RasterImageListSelectionMode.Single
            imageList.Size = Size
            Controls.Add(imageList)
            imageList.BringToFront()

            codecs = New RasterCodecs()

            ' Create three items
            Dim imagesPath As String = LEAD_VARS.ImagesDir

            For i As Integer = 0 To 2
               ' Load the image
               Dim index As Integer = i + 1
               Dim imageFileName As String = Path.Combine(imagesPath, "ImageProcessingDemo\Image" &amp; index.ToString() &amp; ".cmp")
               Dim image As RasterImage = codecs.Load(imageFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1)
               Dim item As RasterImageListItem = New RasterImageListItem(image, 1, "Item" &amp; index.ToString())

               ' Select the first item
               If i = 0 Then
                  item.Selected = True
               End If

               ' Add the item to the image list
               imageList.Items.Add(item)
            Next i


            ' Add the RasterImageList to the control collection.
            Controls.Add(imageList)
         End Sub
      End Class

      Public Sub RasterImageList_AutoDeselectItems()
         Dim form As MyForm6 = New MyForm6()

         ' Enable rubber band multi select
         form.imageList.EnableRubberBandSelection = True

         ' Enable the AutoDeselectItems
         form.imageList.AutoDeselectItems = True
         form.imageList.SelectionMode = RasterImageListSelectionMode.Multi

         form.Text = "Drag mouse to select two images.  Then single-click to de-select."

         form.ShowDialog()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MyForm6 : Form
      {
         public RasterImageList imageList;
         RasterCodecs codecs;
         public MyForm6()
         {
            // Set the size of the form
            Size = new Size(500, 200);

            // Create a new RasterImageList control
            imageList = new RasterImageList();
            imageList.Dock = DockStyle.Fill;
            imageList.SelectionMode = RasterImageListSelectionMode.Single;
            imageList.Size = Size;
            Controls.Add(imageList);
            imageList.BringToFront();

            codecs = new RasterCodecs();

            // Create three items
            string imagesPath = LEAD_VARS.ImagesDir;

            for(int i = 0; i &lt; 3; i++)
            {
               // Load the image
               int index = i + 1;
               string imageFileName = Path.Combine(imagesPath, @"ImageProcessingDemo\Image" + index.ToString() + ".cmp");
               RasterImage image = codecs.Load(imageFileName, 0, CodecsLoadByteOrder.BgrOrGray, 1, 1);
               RasterImageListItem item = new RasterImageListItem(image, 1, "Item" + index.ToString());

               // Select the first item
               if(i == 0)
                  item.Selected = true;

               // Add the item to the image list
               imageList.Items.Add(item);
            }


            // Add the RasterImageList to the control collection.
            Controls.Add(imageList);
         }
      }

      public void RasterImageList_AutoDeselectItems()
      {
         MyForm6 form = new MyForm6();

         // Enable rubber band multi select
         form.imageList.EnableRubberBandSelection = true;

         // Enable the AutoDeselectItems
         form.imageList.AutoDeselectItems = true;
         form.imageList.SelectionMode = RasterImageListSelectionMode.Multi;

         form.Text = "Drag mouse to select two images.  Then single-click to de-select.";

         form.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--RasterImageList.AutoDeselectItems-->
      </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageList.AutoDeselectItemsChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageList.AutoDeselectItems" /> property changes.
            </summary>
      <remarks>
        <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageList.AutoDeselectItems" /> property is changed by either a programmatic
            modification or user interaction.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageList.ViewStyle">
      <summary>
            Gets or sets how items are displayed in the control.
            </summary>
      <value>A <see cref="T:Leadtools.WinForms.RasterImageListViewStyle" /> enumeration that specifies how the items
            are displayed in the control.</value>
      <remarks>
            For more information, refer to the <see cref="T:Leadtools.WinForms.RasterImageListViewStyle" /> enumeration.
            </remarks>
      <example>
        <code lang="VB">      ''' This example will show the different view styles of a &lt;see cref="RasterImageList"/&gt; control.
      Public Sub RasterImageList_ViewStyle(ByVal imageList As RasterImageList)
         ' Save the current view style
         Dim currentStyle As RasterImageListViewStyle = imageList.ViewStyle
         ' Show all the different styles available
         Dim a As Array = System.Enum.GetValues(GetType(RasterImageListViewStyle))
         For Each style As RasterImageListViewStyle In a
            imageList.ViewStyle = style
            MessageBox.Show("ViewStyle = " &amp; style.ToString())
         Next style

         ' Restore original view style
         imageList.ViewStyle = currentStyle
      End Sub</code>
        <code lang="CS">      /// This example will show the different view styles of a &lt;see cref="RasterImageList"/&gt; control.
      public void RasterImageList_ViewStyle(RasterImageList imageList)
      {
         // Save the current view style
         RasterImageListViewStyle currentStyle = imageList.ViewStyle;
         // Show all the different styles available
         Array a = Enum.GetValues(typeof(RasterImageListViewStyle));
         foreach(RasterImageListViewStyle style in a)
         {
            imageList.ViewStyle = style;
            MessageBox.Show("ViewStyle = " + style.ToString());
         }

         // Restore original view style
         imageList.ViewStyle = currentStyle;
      }</code>
        <!--RasterImageList.ViewStyle-->
      </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageList.ViewStyleChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageList.ViewStyle" /> property changes.
            </summary>
      <remarks>
        <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageList.ViewStyle" /> property is changed by either a programmatic
            modification or user interaction.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageList.ShowItemText">
      <summary>
            Indicates whether the item text is shown in the control.
            </summary>
      <value>
        <b>true</b> if the item text is shown in the control; otherwise, <b>false</b>.  Default is <b>true</b></value>
      <remarks>
            When the value of the <b>ShowItemText</b> property is set to <b>true</b>, the item
            <see cref="P:Leadtools.WinForms.RasterImageListItem.Text">RasterImageListItem.Text</see> value is shown in the item.
            </remarks>
      <example>
        <code lang="VB">      ''' This example will display a &lt;see cref="RasterImageList"/&gt; control with the item text and then without the text.
      Public Sub RasterImageList_ShowItemText(ByVal imageList As RasterImageList)
         ' Show the item text
         imageList.ShowItemText = True
         MessageBox.Show("Item text is visible")
         ' Hide the item text
         imageList.ShowItemText = False
         MessageBox.Show("Item text is not visible")

         ' Show the item text again
         imageList.ShowItemText = True
         MessageBox.Show("Item text is visible again")
      End Sub</code>
        <code lang="CS">      /// This example will show a &lt;see cref="RasterImageList"/&gt; control with the item text and then without the text.
      public void RasterImageList_ShowItemText(RasterImageList imageList)
      {
         // Show the item text
         imageList.ShowItemText = true;
         MessageBox.Show("Item text is visible");
         // Hide the item text
         imageList.ShowItemText = false;
         MessageBox.Show("Item text is not visible");

         // Show the item text again
         imageList.ShowItemText = true;
         MessageBox.Show("Item text is visible again");
      }</code>
        <!--RasterImageList.ShowItemText-->
      </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageList.ShowItemTextChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageList.ShowItemText" /> property changes.
            </summary>
      <remarks>
        <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageList.ShowItemText" /> property is changed by either a programmatic
            modification or user interaction.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageList.ScrollStyle">
      <summary>
            Specifies the direction the <see cref="T:Leadtools.WinForms.RasterImageList" /> Control scrolls the displayed items.
            </summary>
      <value>A <see cref="T:Leadtools.WinForms.RasterImageListScrollStyle" /> enumeration that specifies the direction the
            <see cref="T:Leadtools.WinForms.RasterImageList" /> Control scrolls the displayed items.  Default value is 
            <see cref="T:Leadtools.WinForms.RasterImageListScrollStyle">RasterImageListScrollStyle.Vertical</see>.</value>
      <noremarks />
      <example>
        <code lang="VB">      Public Sub RasterImageList_ScrollStyle(ByVal imageList As RasterImageList)
         ' Clear out any items in the image list
         imageList.Items.Clear()
         ' Create 20 items
         For i As Integer = 0 To 19
            ' Load the image
            Dim index As Integer = i + 1
            Dim item As RasterImageListItem = New RasterImageListItem(Nothing, 1, "Item" &amp; index.ToString())

            ' Select every otehr item
            If (i Mod 2) = 0 Then
               item.Selected = True
            End If

            ' Add the item to the image list
            imageList.Items.Add(item)
         Next i

         ' Set vertical scrolling style
         imageList.ScrollStyle = RasterImageListScrollStyle.Vertical

         ' Scroll a couple of lines down
         imageList.ScrollItems(2)

         ' Show the scroll parameters of the control
         ShowScrollParameters(imageList)

         ' Switch to horizontal scrolling style
         imageList.ScrollStyle = RasterImageListScrollStyle.Horizontal

         ' Show the scroll parameters of the control
         ShowScrollParameters(imageList)
      End Sub


      Private Sub ShowScrollParameters(ByVal imageList As RasterImageList)
         Dim sb As StringBuilder = New StringBuilder()
         sb.AppendFormat("Full Visible Rows: {0}{1}", imageList.FullVisibleRows, Environment.NewLine)
         sb.AppendFormat("Visible Rows: {0}{1}", imageList.VisibleRows, Environment.NewLine)
         sb.AppendFormat("Full Visible Columns: {0}{1}", imageList.FullVisibleColumns, Environment.NewLine)
         sb.AppendFormat("Visible Columns:{0}{1}", imageList.VisibleColumns, Environment.NewLine)
         sb.AppendFormat("TotalRows: {0}{1}", imageList.TotalRows, Environment.NewLine)
         sb.AppendFormat("TotalColumns: {0}{1}", imageList.TotalColumns, Environment.NewLine)
         sb.AppendFormat("TopIndex: {0}{1}", imageList.TopIndex, Environment.NewLine)
         MessageBox.Show(sb.ToString())
      End Sub</code>
        <code lang="CS">      public void RasterImageList_ScrollStyle(RasterImageList imageList)
      {
         // Clear out any items in the image list
         imageList.Items.Clear();
         // Create 20 items
         for(int i = 0; i &lt; 20; i++)
         {
            // Load the image
            int index = i + 1;
            RasterImageListItem item = new RasterImageListItem(null, 1, "Item" + index.ToString());

            // Select every otehr item
            if((i % 2) == 0)
               item.Selected = true;

            // Add the item to the image list
            imageList.Items.Add(item);
         }

         // Set vertical scrolling style
         imageList.ScrollStyle = RasterImageListScrollStyle.Vertical;

         // Scroll a couple of lines down
         imageList.ScrollItems(2);

         // Show the scroll parameters of the control
         ShowScrollParameters(imageList);

         // Switch to horizontal scrolling style
         imageList.ScrollStyle = RasterImageListScrollStyle.Horizontal;

         // Show the scroll parameters of the control
         ShowScrollParameters(imageList);
      }


      private void ShowScrollParameters(RasterImageList imageList)
      {
         StringBuilder sb = new StringBuilder();
         sb.AppendFormat("Full Visible Rows: {0}{1}", imageList.FullVisibleRows, Environment.NewLine);
         sb.AppendFormat("Visible Rows: {0}{1}", imageList.VisibleRows, Environment.NewLine);
         sb.AppendFormat("Full Visible Columns: {0}{1}", imageList.FullVisibleColumns, Environment.NewLine);
         sb.AppendFormat("Visible Columns:{0}{1}", imageList.VisibleColumns, Environment.NewLine);
         sb.AppendFormat("TotalRows: {0}{1}", imageList.TotalRows, Environment.NewLine);
         sb.AppendFormat("TotalColumns: {0}{1}", imageList.TotalColumns, Environment.NewLine);
         sb.AppendFormat("TopIndex: {0}{1}", imageList.TopIndex, Environment.NewLine);
         MessageBox.Show(sb.ToString());
      }</code>
        <!--RasterImageList.ScrollStyle-->
      </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageList.ScrollStyleChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageList.ScrollStyle" /> property changes.
            </summary>
      <remarks>
        <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageList.ScrollStyle" /> property is changed by either a programmatic
            modification or user interaction.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageList.AutoDisposeImages">
      <summary>
            Gets or sets a value indicating whether to automatically dispose item images.
            </summary>
      <value>
        <b>true</b> to automatically dispose item images; false, otherwise.  Default value is <b>true</b>.</value>
      <remarks>
        <p>When the value of the <b>AutoDisposeImages</b> is set to true, the <see cref="T:Leadtools.WinForms.RasterImageList" /> control will
            automatically call the <see cref="M:Leadtools.RasterImage.Dispose">RasterImage.Dispose</see> method on an item's
            <see cref="P:Leadtools.WinForms.RasterImageListItem.Image">RasterImageListItem.Image</see> when the item is removed from the 
            <see cref="P:Leadtools.WinForms.RasterImageList.Items" /> collection or when the control itself is disposed.</p>
        <p>The control will check if an image is used with multiple items (for example, if multiple items are using
            the same image but to show different pages).  In this case, the control will correctly dispose the image only once.</p>
        <p>If you setup the items with images that you do not want to dispose of and are going to re-use somewhere else,
            you need to set the value of the <b>AutoDisposeImages</b> property of the <see cref="T:Leadtools.WinForms.RasterImageList" /> control to
            <b>false</b>.</p>
        <p>You can also temporarily change the value of the <b>AutoDisposeImages</b> property if you want to save the
            item image before you dispose it.  For example, set the <b>AutoDisposeImages</b> property to <b>false</b>, call
            <see cref="M:Leadtools.RasterCollection`1.Remove(`0)" /> on the <see cref="P:Leadtools.WinForms.RasterImageList.Items" /> collection to remove the item, then
            re-set the <b>AutoDisposeImages</b> property back to <b>true</b>.</p>
        <p>Note that if you set the <b>AutoDisposeImages</b> value to <b>false</b> and you do not dispose the item images
            yourself, the .NET garbage collector will eventually detect that these images are not used anymore and will
            dispose them for you when the control and any other reference to these images are no longer used in your
            application.</p>
      </remarks>
      <example>
        <code lang="VB">      Public Sub RasterImageList_AutoDisposeImages(ByVal imageList As RasterImageList)
         ' Make sure the AutoDisposeImages property is set to true
         imageList.AutoDisposeImages = True
         MessageBox.Show("Removing an item then accessing its image with AutoDisposeImages set to true")

         ' Remove the first item
         Dim item As RasterImageListItem = imageList.Items(0)
         imageList.Items.RemoveAt(0)

         ' Try to save this item's image into a disk file
         ' This will throw an exception since the item image has been disposed of
         ' as a result of having the AutoDisposeImages false set to true
         Dim codecs As RasterCodecs = New RasterCodecs()
         Try
            codecs.Save(item.Image, Path.Combine(LEAD_VARS.ImagesDir, "Test.jpg"), RasterImageFormat.Jpeg, 24)
            MessageBox.Show("Image saved correctly")
         Catch ex As Exception
            MessageBox.Show(ex.Message)
         End Try

         MessageBox.Show("Removing an item then accessing its image with AutoDisposeImages set to false")

         ' Now remove the next item, this time make sure to set the
         ' AutoDisposeImages property to false before you remove the item
         ' from the control collection
         item = imageList.Items(0)

         imageList.AutoDisposeImages = False
         imageList.Items.RemoveAt(0)
         imageList.AutoDisposeImages = True

         ' Try to save this item's image into a disk file
         ' This time, this should work correcly since the control did not dispose
         ' the item image.
         Try
            codecs.Save(item.Image, Path.Combine(LEAD_VARS.ImagesDir, "Test.jpg"), RasterImageFormat.Jpeg, 24)
            MessageBox.Show("Image saved correctly")
         Catch ex As Exception
            MessageBox.Show(ex.Message)
         End Try
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void RasterImageList_AutoDisposeImages(RasterImageList imageList)
      {
         // Make sure the AutoDisposeImages property is set to true
         imageList.AutoDisposeImages = true;
         MessageBox.Show("Removing an item then accessing its image with AutoDisposeImages set to true");

         // Remove the first item
         RasterImageListItem item = imageList.Items[0];
         imageList.Items.RemoveAt(0);

         // Try to save this item's image into a disk file
         // This will throw an exception since the item image has been dispose
         // as a result of having the AutoDisposeImages false set to true
         RasterCodecs codecs = new RasterCodecs();
         try
         {
            codecs.Save(item.Image,Path.Combine(LEAD_VARS.ImagesDir,  "Test.jpg"), RasterImageFormat.Jpeg, 24);
            MessageBox.Show("Image saved correctly");
         }
         catch(Exception ex)
         {
            MessageBox.Show(ex.Message);
         }

         MessageBox.Show("Removing an item then accessing its image with AutoDisposeImages set to false");

         // Now remove the next item, this time make sure to set the
         // AutoDisposeImages property to false before you remove the item
         // from the control collection
         item = imageList.Items[0];

         imageList.AutoDisposeImages = false;
         imageList.Items.RemoveAt(0);
         imageList.AutoDisposeImages = true;

         // Try to save this item's image into a disk file
         // This time, this should work correcly since the control did not dispose
         // the item image.
         try
         {
            codecs.Save(item.Image, Path.Combine(LEAD_VARS.ImagesDir, "Test.jpg"), RasterImageFormat.Jpeg, 24);
            MessageBox.Show("Image saved correctly");
         }
         catch(Exception ex)
         {
            MessageBox.Show(ex.Message);
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--RasterImageList.AutoDisposeImages-->
      </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageList.AutoDisposeImagesChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageList.AutoDisposeImages" /> property changes.
            </summary>
      <remarks>
        <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageList.AutoDisposeImages" /> property is changed by either a programmatic
            modification or user interaction.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageList.FullVisibleRows">
      <summary>
            Gets the number of currently full-visible item rows in the control.
            </summary>
      <value>The total number of currently full-visible item rows in the control.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageList.ScrollStyle" />.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImageList.FullVisibleColumns">
      <summary>
            Gets the number of currently full-visible item columns in the control.
            </summary>
      <value>The total number of currently full-visible item columns in the control.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageList.ScrollStyle" />.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImageList.VisibleRows">
      <summary>
            Gets the number of currently full or partial -visible item rows in the control.
            </summary>
      <value>The total number of currently full or partial -visible item rows in the control.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageList.ScrollStyle" />.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImageList.VisibleColumns">
      <summary>
            Gets the number of currently full or partial -visible item columns in the control.
            </summary>
      <value>The total number of currently full or partial -visible item columns in the control.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageList.ScrollStyle" />.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImageList.TotalRows">
      <summary>
            Gets the number of total item rows in the control.
            </summary>
      <value>The number of total item rows in the control.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageList.ScrollStyle" />.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImageList.TotalColumns">
      <summary>
            Gets the number of total item columns in the control.
            </summary>
      <value>The number of total item columns in the control.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageList.ScrollStyle" />.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImageList.TopIndex">
      <summary>
            Gets or sets the index of the first visible item in the control.
            </summary>
      <value>The index of the first visible item in the control.</value>
      <remarks>
            Initially, the item with the index position of zero (0) is at the top of the <see cref="T:Leadtools.WinForms.RasterImageList" />
            control. If the <see cref="T:Leadtools.WinForms.RasterImageList" /> control contents are scrolled, a different item can be at the top
            of the control. You can use this property to determine which item is visible at the top of the
            <see cref="T:Leadtools.WinForms.RasterImageList" /> control. To position a specific item in the visible region of the control, set its
            index to the <b>TopIndex</b> property.
            </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageList.ScrollStyle" /></example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageList.Scroll">
      <summary>
            Occurs when the content of control is scrolled.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageList.EnableKeyboard">
      <summary>
            Gets or sets a value indicating whether the control automatically processes the keyboard.
            </summary>
      <value>
        <b>true</b> if the control automatically processes the keyboard; otherwise, false.
            Default value is <b>true</b>.</value>
      <remarks>
        <p>When automatic keyboard processing is enabled, the <see cref="T:Leadtools.WinForms.RasterImageList" /> Control will process the
            following keys:
            <list type="table"><listheader><term>Key</term><description>Event</description></listheader><item><term>PageUp, Up Arrow, Left Arrow</term><description>Scroll up/left one item (depends on <see cref="P:Leadtools.WinForms.RasterImageList.ScrollStyle" />)</description></item><item><term>PageDown, Down Arrow, Right Arrow</term><description>Scroll down/right one item (depends on <see cref="P:Leadtools.WinForms.RasterImageList.ScrollStyle" />)</description></item><item><term>Ctrl + PageUp, Ctrl + Up, Ctlr + Left, Home</term><description>Scroll to beginning of list (depends on <see cref="P:Leadtools.WinForms.RasterImageList.ScrollStyle" />)</description></item><item><term>Ctrl + PageDown, Ctrl + Down, Ctlr + Right, End</term><description>Scroll to end of list (depends on <see cref="P:Leadtools.WinForms.RasterImageList.ScrollStyle" />)</description></item></list></p>
        <p>If the setting for <see cref="P:Leadtools.WinForms.RasterImageList.SelectionMode" /> is not <see cref="T:Leadtools.WinForms.RasterImageListSelectionMode">RasterImageListSelectionMode.None</see>, then
            the selected item will move up, down, left, or right, depending on the key(s) being processed.
            If <see cref="P:Leadtools.WinForms.RasterImageList.SelectionMode" /> is set to <see cref="T:Leadtools.WinForms.RasterImageListSelectionMode">RasterImageListSelectionMode.Multi</see>,
            multiple items can be selected using the CTRL and/or SHIFT keys in conjunction with the keys listed above.
            </p>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterImageList" />.
            </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageList.EnableKeyboardChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageList.EnableKeyboard" /> property changes.
            </summary>
      <remarks>
        <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageList.EnableKeyboard" /> property is changed by either a programmatic
            modification or user interaction.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageList.Sorter">
      <summary>
            Gets or sets the sorting comparer for the control.
            </summary>
      <value>An IComparer that represents the sorting comparer for the control.</value>
      <remarks>
        <p>The <b>Sorter</b> property allows you to specify the object that performs the sorting of items in the
            <see cref="T:Leadtools.WinForms.RasterImageList" />. You can use the <b>Sorter</b> property in combination with the <see cref="M:Leadtools.WinForms.RasterImageList.Sort" />
            method to perform custom sorting. For example, you could create a class (that implements the
            <see cref="T:System.Collections.IComparer" /> interface) to support custom sorting in the <see cref="T:Leadtools.WinForms.RasterImageList" /> control.</p>
        <p>To control the sort order, use the <see cref="P:Leadtools.WinForms.RasterImageList.Sorting" /> property.</p>
        <para>By default the <see cref="P:Leadtools.WinForms.RasterImageList.Sorting" /> algorithm sorts items alphabetically based on the Text property of each list item. </para>
        <p>Set the <b>Sorter</b> property to null (Nothing in Visual Basic) to fall back to the default sorter.</p>
        <p>
          <b>Note:</b> Setting the value of the <b>Sorter</b> property causes the <see cref="M:Leadtools.WinForms.RasterImageList.Sort" /> method to be called
            automatically.</p>
      </remarks>
      <example>
        <code lang="VB">      Public Sub RasterImageList_Sorter(ByVal imageList As RasterImageList)
         imageList.Bounds = New Rectangle(New Point(10, 10), New Size(400, 400))
         ' Sort the items in the list in ascending order.
         imageList.Sorting = SortOrder.Ascending

         ' Use normal view style
         imageList.ViewStyle = RasterImageListViewStyle.Normal

         ' Suspend painting the RasterImageList
         imageList.BeginUpdate()

         ' Clear the image list
         imageList.Items.Clear()

         ' Add 20 items
         For i As Integer = 0 To 19
            ' Use the item index as its text
            Dim item As RasterImageListItem = New RasterImageListItem(Nothing, i, i.ToString())
            imageList.Items.Add(item)
         Next i

         ' Resume painting
         imageList.EndUpdate()

         ' Sort using the default sorter
         imageList.Sort()

         MessageBox.Show("Default sort (0, 1, 10, 11, etc...)")

         ' Setup custom sorting
         imageList.Sorter = New MyRasterImageListItemComparer()

         MessageBox.Show("Custom sort (0, 1, 2, 3, etc... ")

      End Sub

      &lt;DllImport("SHLWAPI.DLL", EntryPoint:="StrCmpLogicalW", SetLastError:=True, CharSet:=CharSet.Unicode, ExactSpelling:=True, _
         CallingConvention:=CallingConvention.StdCall)&gt; _
      Public Shared Function StrCmpLogicalW(ByVal psz1 As String, ByVal psz2 As String) As Integer
      End Function

      Private Class MyRasterImageListItemComparer : Implements IComparer
         Public Sub New()
         End Sub

         Public Function Compare(ByVal x As Object, ByVal y As Object) As Integer Implements IComparer.Compare
            Dim itemX As RasterImageListItem = CType(IIf(TypeOf x Is RasterImageListItem, x, Nothing), RasterImageListItem)
            Dim itemY As RasterImageListItem = CType(IIf(TypeOf y Is RasterImageListItem, y, Nothing), RasterImageListItem)
            Return StrCmpLogicalW(itemX.Text, itemY.Text)
         End Function
      End Class</code>
        <code lang="CS">      public void RasterImageList_Sorter(RasterImageList imageList)
      {
         imageList.Bounds = new Rectangle(new Point(10, 10), new Size(400, 400));
         // Sort the items in the list in ascending order.
         imageList.Sorting = SortOrder.Ascending;

         // Use normal view style
         imageList.ViewStyle = RasterImageListViewStyle.Normal;

         // Suspend painting the RasterImageList
         imageList.BeginUpdate();

         // Clear the image list
         imageList.Items.Clear();

         // Add 20 items
         for(int i = 0; i &lt; 20; i++)
         {
            // Use the item index as its text
            RasterImageListItem item = new RasterImageListItem(null, i, i.ToString());
            imageList.Items.Add(item);
         }

         // Resume painting
         imageList.EndUpdate();

         // Sort using the default sorter
         imageList.Sort();

         MessageBox.Show("Default sort (0, 1, 10, 11, etc...)");

         // Setup custom sorting
         imageList.Sorter = new MyRasterImageListItemComparer();

         MessageBox.Show("Custom sort (0, 1, 2, 3, etc... ");

      }

      [DllImport("SHLWAPI.DLL", EntryPoint = "StrCmpLogicalW", SetLastError = true, CharSet = CharSet.Unicode, ExactSpelling = true, CallingConvention = CallingConvention.StdCall)]
      public static extern int StrCmpLogicalW(string psz1, string psz2);

      class MyRasterImageListItemComparer : IComparer
      {
         public MyRasterImageListItemComparer()
         {
         }

         public int Compare(object x, object y)
         {
            RasterImageListItem itemX = x as RasterImageListItem;
            RasterImageListItem itemY = y as RasterImageListItem;
            return StrCmpLogicalW(itemX.Text, itemY.Text);
         }
      }</code>
        <!--RasterImageList.Sorter-->
      </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageList.SorterChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageList.Sorter" /> property changes.
            </summary>
      <remarks>
        <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageList.Sorter" /> property is changed by either a programmatic
            modification or user interaction.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageList.Sorting">
      <summary>
            Gets or sets the sort order for items in the control.
            </summary>
      <value>One of the SortOrder values. The default is <b>SortOrder.None</b>.</value>
      <remarks>
        <p>The Sorting property allows you to specify whether or not items are sorted in the
            <see cref="T:Leadtools.WinForms.RasterImageList" /> control. By default, no sorting is performed. When the <b>Sorting</b> property
            is set to <b>SortOrder.Ascending</b> or <b>SortOrder.Descending</b>, the items in the
            <see cref="T:Leadtools.WinForms.RasterImageList" /> are sorted automatically in ascending alphabetical order (when the property is
            set to <b>SortOrder.Ascending</b>) or descending alphabetical order (when the property is set to
            <b>SortOrder.Descending</b>). You can use this property to automatically sort items that are displayed in your
            <see cref="T:Leadtools.WinForms.RasterImageList" /> control to make it easier for users to find items when a large number of items
            are available. By default items are sorted alphabetically according to the Text property of each item.</p>
        <p>After you change the <b>Sorting</b> property, call the <see cref="M:Leadtools.WinForms.RasterImageList.Sort" /> method to re-sort the items in
            the control.</p>
        <para>The <b>Sorting</b> property is dependent on the value of the <see cref="P:Leadtools.WinForms.RasterImageList.Sorter" /> property.</para>
        <p>You can setup your own sorting by providing a custom <see cref="T:System.Collections.IComparer" /> object using the
            <see cref="P:Leadtools.WinForms.RasterImageList.Sorter" /> property.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="M:Leadtools.WinForms.RasterImageList.Sort" />.
            </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageList.SortingChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageList.Sorting" /> property changes.
            </summary>
      <remarks>
        <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageList.Sorting" /> property is changed by either a programmatic
            modification or user interaction.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageList.IsSorting">
      <summary>
            Gets a value indicating whether this <see cref="T:Leadtools.WinForms.RasterImageList" /> is currently sorting.
            </summary>
      <value>
        <b>true</b> if this <see cref="T:Leadtools.WinForms.RasterImageList" /> is currently sorting; otherwise <b>false</b></value>
      <remarks>
        <para>This <see cref="T:Leadtools.WinForms.RasterImageList" /> will set the value of this property to true internally when 
            the <see cref="M:Leadtools.WinForms.RasterImageList.Sort" /> method begins.  When the <see cref="M:Leadtools.WinForms.RasterImageList.Sort" /> is completed, <see cref="P:Leadtools.WinForms.RasterImageList.IsSorting" /> is set back to false.</para>
        <para>The <see cref="M:Leadtools.WinForms.RasterImageList.Sort" /> method involves removing and then re-adding items from the <see cref="P:Leadtools.WinForms.RasterImageList.Items" /> collection.
            Upon removal, the <see cref="T:Leadtools.WinForms.RasterImageList" /> control usually disposes the image associated with the item.
            By using the <see cref="P:Leadtools.WinForms.RasterImageList.IsSorting" /> property, the control knows not to dispose of the image.</para>
      </remarks>
      <noexample />
    </member>
    <member name="E:Leadtools.WinForms.RasterImageList.UseDpiChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageList.UseDpi" /> property changes.
            </summary>
      <remarks>
        <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageList.UseDpi" /> property is changed by either a programmatic modification
            or user interaction.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageList.UseDpi">
      <summary>
            Gets or sets a value that indicates whether LEAD's automated scaling properties are used to account for the physical resolution of the bitmap.
            </summary>
      <value>
        <b>true</b> Account for the physical resolution.
            Default value is <b>false</b>.</value>
      <remarks>
            The physical resolution of an image is measured in dots per inch (DPI). 
            When you load an image, the <see cref="P:Leadtools.RasterImage.XResolution" /> and <see cref="P:Leadtools.RasterImage.YResolution" /> properties are updated 
            with the DPI values for the horizontal and vertical resolution. Some images have different horizontal and vertical resolutions.
            For example, the horizontal resolution of a fax image is typically twice its vertical resolution (for example 200 by 100).
            In such cases, the displayed images will appear elongated if you do not account for the resolution.
            If the values of the <see cref="P:Leadtools.RasterImage.XResolution" /> property and the <see cref="P:Leadtools.RasterImage.YResolution" /> property are not equal, 
            set the <see cref="P:Leadtools.WinForms.RasterImageList.UseDpi" /> property to true to have LEAD's 
            automated scaling properties account for the physical resolution of the image when <see cref="P:Leadtools.WinForms.RasterImageList.Items" /> are painted by <see cref="M:Leadtools.WinForms.RasterImageList.OnPaint(System.Windows.Forms.PaintEventArgs)" /></remarks>
      <example>
            Refer to <see cref="T:Leadtools.WinForms.RasterImageList" />.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImageList.CausesValidation">
      <exclude />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageList.ForeColor">
      <exclude />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageList.ImeMode">
      <exclude />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageList.RightToLeft">
      <exclude />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageList.Text">
      <exclude />
    </member>
    <member name="E:Leadtools.WinForms.RasterImageList.ChangeUICues">
      <exclude />
    </member>
    <member name="E:Leadtools.WinForms.RasterImageList.ControlAdded">
      <exclude />
    </member>
    <member name="E:Leadtools.WinForms.RasterImageList.ControlRemoved">
      <exclude />
    </member>
    <member name="E:Leadtools.WinForms.RasterImageList.ImeModeChanged">
      <exclude />
    </member>
    <member name="E:Leadtools.WinForms.RasterImageList.ForeColorChanged">
      <exclude />
    </member>
    <member name="E:Leadtools.WinForms.RasterImageList.RightToLeftChanged">
      <exclude />
    </member>
    <member name="E:Leadtools.WinForms.RasterImageList.TextChanged">
      <exclude />
    </member>
    <member name="T:Leadtools.WinForms.RasterViewerPointsEventArgs">
      <summary>
            Provides data for various RasterImageViewer user interaction events.
            </summary>
      <remarks>
            Use this class when handling the following events:
            <list><item><description><see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveRegionFreehand" /></description></item></list></remarks>
      <example>Refer to <see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveRegionFreehand" />.</example>
    </member>
    <member name="M:Leadtools.WinForms.RasterViewerPointsEventArgs.#ctor">
      <summary>
            Initializes a new RasterViewerPointsEventArgs with default values.
            </summary>
      <noremarks />
      <example>Refer to <see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveRegionFreehand" />.</example>
    </member>
    <member name="M:Leadtools.WinForms.RasterViewerPointsEventArgs.#ctor(Leadtools.WinForms.RasterViewerInteractiveStatus,Leadtools.RasterCollection{System.Drawing.Point})">
      <summary>
            Initializes a new RasterViewerPointsEventArgs with specified values.
            </summary>
      <param name="status">The status of the interactive mode.</param>
      <param name="points">Interactive mode points.</param>
      <noremarks />
      <example>Refer to <see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveRegionFreehand" />.</example>
    </member>
    <member name="P:Leadtools.WinForms.RasterViewerPointsEventArgs.Points">
      <summary>
            Returns the current interactive mode points.
            </summary>
      <value>
            The current interactive mode points.
            </value>
      <noremarks />
      <example>Refer to <see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveRegionFreehand" />.</example>
    </member>
    <member name="T:Leadtools.WinForms.RasterImageListDrawItemEventArgs">
      <summary>
            Provides data for the <see cref="E:Leadtools.WinForms.RasterImageList.DrawItem">RasterImageList.DrawItem</see> event.
            </summary>
      <remarks>
            The <see cref="E:Leadtools.WinForms.RasterImageList.DrawItem">RasterImageList.DrawItem</see> event is raised when the
            <see cref="P:Leadtools.WinForms.RasterImageList.ViewStyle">RasterImageList.ViewStyle</see> value is set to
            <see cref="T:Leadtools.WinForms.RasterImageListViewStyle">RasterImageListViewStyle.OwnerDraw</see>.  The <see cref="T:Leadtools.WinForms.RasterImageListDrawItemEventArgs" /> provides the data
            necessary for you to draw the items manually.
            </remarks>
      <example>
            For an example, refer to <see cref="E:Leadtools.WinForms.RasterImageList.DrawItem">RasterImageList.DrawItem</see>.
            </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageListDrawItemEventArgs.#ctor(System.Drawing.Graphics,Leadtools.WinForms.RasterImageListItem)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.WinForms.RasterImageListDrawItemEventArgs" /> class with the given values.
            </summary>
      <param name="graphics">The <see cref="P:Leadtools.WinForms.RasterImageListDrawItemEventArgs.Graphics" /> object into which the item should be drawn.</param>
      <param name="item">The <see cref="T:Leadtools.WinForms.RasterImageListItem" /> to draw.</param>
      <noremarks />
      <example>
            For an example, refer to <see cref="E:Leadtools.WinForms.RasterImageList.DrawItem">RasterImageList.DrawItem</see>.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImageListDrawItemEventArgs.Graphics">
      <summary>
            The <see cref="P:Leadtools.WinForms.RasterImageListDrawItemEventArgs.Graphics" /> object into which the item should be drawn.
            </summary>
      <value>
            The <see cref="P:Leadtools.WinForms.RasterImageListDrawItemEventArgs.Graphics" /> object into which the item should be drawn.
            </value>
      <noremarks />
      <example>
            For an example, refer to <see cref="E:Leadtools.WinForms.RasterImageList.DrawItem">RasterImageList.DrawItem</see>.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImageListDrawItemEventArgs.Item">
      <summary>
            The <see cref="T:Leadtools.WinForms.RasterImageListItem" /> to draw.
            </summary>
      <value>
            The <see cref="T:Leadtools.WinForms.RasterImageListItem" /> to draw.
            </value>
      <noremarks />
      <example>
            For an example, refer to <see cref="E:Leadtools.WinForms.RasterImageList.DrawItem">RasterImageList.DrawItem</see>.
            </example>
    </member>
    <member name="T:Leadtools.WinForms.RasterImageViewerDesigner">
      <exclude />
    </member>
    <member name="T:Leadtools.WinForms.RasterViewerPointEventArgs">
      <summary>
            Provides data for various RasterImageViewer user interaction events.
            </summary>
      <remarks>
            Use this class when handling the following events:
            <list><item><description><see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveCenterAt" /></description></item></list></remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterViewerPointEventArgs.#ctor">
      <summary>
            Initializes a new RasterViewerPointEventArgs with default values.
            </summary>
      <noremarks />
      <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterPosition" />.</example>
    </member>
    <member name="M:Leadtools.WinForms.RasterViewerPointEventArgs.#ctor(Leadtools.WinForms.RasterViewerInteractiveStatus,System.Drawing.Point)">
      <summary>
            Initializes a new RasterViewerPointEventArgs with specified values.
            </summary>
      <param name="status">The status of the interactive mode.</param>
      <param name="pt">The event data.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterViewerPointEventArgs.Point">
      <summary>
            Gets the interactive mode event data.
            </summary>
      <value>The interactive mode event data.</value>
      <noremarks />
      <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterPosition" />.</example>
    </member>
    <member name="T:Leadtools.WinForms.RasterImageListDesigner">
      <exclude />
    </member>
    <member name="T:Leadtools.WinForms.RasterImagePrinter">
      <summary>
            Supports printing of an <see cref="T:Leadtools.RasterImage" /></summary>
      <remarks>
        <para>The <strong>RasterImagePrinter</strong> provides properties and method to make the process of printing an <see cref="T:Leadtools.RasterImage" /> easier.</para>
        <para>Printing using the .NET framework involves adding a handler to the <see cref="E:System.Drawing.Printing.PrintDocument.PrintPage" /> event.  In that event handler, you setup a new instance of the <strong>RasterImagePrinter</strong> class, setup its properties as desired then call the <see cref="M:Leadtools.WinForms.RasterImagePrinter.Print(Leadtools.RasterImage,System.Int32,System.Drawing.Printing.PrintPageEventArgs)" /> method passing it the <see cref="T:Leadtools.RasterImage" /> to print, the page number to print and the <see cref="T:System.Drawing.Printing.PrintPageEventArgs" /> object obtained through your <see cref="T:System.Drawing.Printing.PrintPageEventHandler" />.</para>
        <para>Note: The RasterViewerCenterMode type has been renamed in version 15. Use the <see cref="T:Leadtools.RasterPaintAlignMode">RasterPaintAlignMode</see> enumeration instead.</para>
      </remarks>
      <example>
        <code lang="VB">      ' The image we are printing
      Private myImage As RasterImage = Nothing
      ' The current page number being printed
      Private currentPrintPageNumber As Integer
      Public Sub RasterImagePrinterExample()
         ' Check if there are printers installed on this machine
         If (PrinterSettings.InstalledPrinters Is Nothing) OrElse (PrinterSettings.InstalledPrinters.Count &lt; 1) Then
            MessageBox.Show("There are no printers installed on this machine")
            Return
         End If

         ' Load the image
         Using codecs As New RasterCodecs()
            Me.myImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif"))
         End Using

         ' Create the print document object
         Using document As New PrintDocument()
            ' Setup the document pages
            document.PrinterSettings.MinimumPage = 1
            document.PrinterSettings.MaximumPage = Me.myImage.PageCount
            document.PrinterSettings.FromPage = 1
            document.PrinterSettings.ToPage = Me.myImage.PageCount

            Dim result As DialogResult = DialogResult.OK

            ' Select the printer
            Using printDlg As New PrintDialog()
               printDlg.Document = document

               printDlg.AllowSomePages = True

               result = printDlg.ShowDialog()
            End Using

            ' Setup the page
            If result = DialogResult.OK Then
               Using pageSetupDlg As New PageSetupDialog()
                  pageSetupDlg.Document = document
                  pageSetupDlg.ShowDialog()
               End Using
            End If

            If result = DialogResult.OK Then
               ' Add handlers for Begin/Print and End print events
               AddHandler document.BeginPrint, AddressOf document_BeginPrint
               AddHandler document.PrintPage, AddressOf document_PrintPage
               AddHandler document.EndPrint, AddressOf document_EndPrint

               ' Use the .NET print preview dialog
               Using printPreviewDlg As New PrintPreviewDialog()
                  printPreviewDlg.Document = document
                  printPreviewDlg.WindowState = FormWindowState.Maximized
                  result = printPreviewDlg.ShowDialog()
               End Using
            End If
         End Using

         ' Clean up
         Me.myImage.Dispose()
      End Sub

      Private Sub document_BeginPrint(ByVal sender As Object, ByVal e As PrintEventArgs)
         ' Reset the current page number
         ' Since we are using the print preview dialog, this event will be called twice (once
         ' to generate the print preview and once for actual printing). So, we must set this back
         ' to the first print page
         Dim document As PrintDocument = DirectCast(sender, PrintDocument)
         Me.currentPrintPageNumber = document.PrinterSettings.FromPage
      End Sub

      Private Sub document_EndPrint(ByVal sender As Object, ByVal e As PrintEventArgs)
         ' Nothing to do here
      End Sub

      Private Sub document_PrintPage(ByVal sender As Object, ByVal e As PrintPageEventArgs)
         ' Get the print document object
         Dim document As PrintDocument = DirectCast(sender, PrintDocument)

         ' Create an new LEADTOOLS image printer class
         Dim printer As New RasterImagePrinter()

         ' Set the document object so page calculations can be performed
         printer.PrintDocument = document

         ' We want to fit and center the image into the maximum print area
         printer.SizeMode = RasterPaintSizeMode.FitAlways
         printer.HorizontalAlignMode = RasterPaintAlignMode.Center
         printer.VerticalAlignMode = RasterPaintAlignMode.Center

         ' Account for FAX images that may have different horizontal and vertical resolution
         printer.UseDpi = True

         ' Print the whole image
         printer.ImageRectangle = Rectangle.Empty

         ' Use maximum page dimension ignoring the margins, this will be equivalant of printing
         ' using Windows Photo Gallery
         printer.PageRectangle = RectangleF.Empty
         printer.UseMargins = False

         ' Print the current page
         printer.Print(Me.myImage, Me.currentPrintPageNumber, e)

         ' Go to the next page
         Me.currentPrintPageNumber = Me.currentPrintPageNumber + 1

         ' Inform the printer whether we have more pages to print
         If Me.currentPrintPageNumber &lt;= document.PrinterSettings.ToPage Then
            e.HasMorePages = True
         Else
            e.HasMorePages = False
         End If

         ' De-couple our PrintDocument from the RasterImagePrinter
         printer.PrintDocument = Nothing
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      // The image we are printing
      private RasterImage myImage = null;
      // The current page number being printed
      private int currentPrintPageNumber;
      public void RasterImagePrinterExample()
      {
         // Check if there are printers installed on this machine
         if(PrinterSettings.InstalledPrinters == null || PrinterSettings.InstalledPrinters.Count &lt; 1)
         {
            MessageBox.Show("There are no printers installed on this machine");
            return;
         }

         // Load the image
         using(RasterCodecs codecs = new RasterCodecs())
         {
            this.myImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"Ocr1.tif"));
         }

         // Create the print document object
         using(PrintDocument document = new PrintDocument())
         {
            // Setup the document pages
            document.PrinterSettings.MinimumPage = 1;
            document.PrinterSettings.MaximumPage = this.myImage.PageCount;
            document.PrinterSettings.FromPage = 1;
            document.PrinterSettings.ToPage = this.myImage.PageCount;

            DialogResult result = DialogResult.OK;

            // Select the printer
            using(PrintDialog printDlg = new PrintDialog())
            {
               printDlg.Document = document;

               printDlg.AllowSomePages = true;

               result = printDlg.ShowDialog();
            }

            // Setup the page
            if(result == DialogResult.OK)
            {
               using(PageSetupDialog pageSetupDlg = new PageSetupDialog())
               {
                  pageSetupDlg.Document = document;
                  pageSetupDlg.ShowDialog();
               }
            }

            if(result == DialogResult.OK)
            {
               // Add handlers for Begin/Print and End print events
               document.BeginPrint += new PrintEventHandler(document_BeginPrint);
               document.PrintPage += new PrintPageEventHandler(document_PrintPage);
               document.EndPrint += new PrintEventHandler(document_EndPrint);

               // Use the .NET print preview dialog
               using(PrintPreviewDialog printPreviewDlg = new PrintPreviewDialog())
               {
                  printPreviewDlg.Document = document;
                  printPreviewDlg.WindowState = FormWindowState.Maximized;
                  result = printPreviewDlg.ShowDialog();
               }
            }
         }

         // Clean up
         this.myImage.Dispose();
      }

      private void document_BeginPrint(object sender, PrintEventArgs e)
      {
         // Reset the current page number
         // Since we are using the print preview dialog, this event will be called twice (once
         // to generate the print preview and once for actual printing). So, we must set this back
         // to the first print page
         PrintDocument document = sender as PrintDocument;
         this.currentPrintPageNumber = document.PrinterSettings.FromPage;
      }

      private void document_EndPrint(object sender, PrintEventArgs e)
      {
         // Nothing to do here
      }

      private void document_PrintPage(object sender, PrintPageEventArgs e)
      {
         // Get the print document object
         PrintDocument document = sender as PrintDocument;

         // Create an new LEADTOOLS image printer class
         RasterImagePrinter printer = new RasterImagePrinter();

         // Set the document object so page calculations can be performed
         printer.PrintDocument = document;

         // We want to fit and center the image into the maximum print area
         printer.SizeMode = RasterPaintSizeMode.FitAlways;
         printer.HorizontalAlignMode = RasterPaintAlignMode.Center;
         printer.VerticalAlignMode = RasterPaintAlignMode.Center;

         // Account for FAX images that may have different horizontal and vertical resolution
         printer.UseDpi = true;

         // Print the whole image
         printer.ImageRectangle = Rectangle.Empty;

         // Use maximum page dimension ignoring the margins, this will be equivalant of printing
         // using Windows Photo Gallery
         printer.PageRectangle = RectangleF.Empty;
         printer.UseMargins = false;

         // Print the current page
         printer.Print(this.myImage, this.currentPrintPageNumber, e);

         // Go to the next page
         this.currentPrintPageNumber++;

         // Inform the printer whether we have more pages to print
         if(this.currentPrintPageNumber &lt;= document.PrinterSettings.ToPage)
            e.HasMorePages = true;
         else
            e.HasMorePages = false;

         // De-couple our PrintDocument from the RasterImagePrinter
         printer.PrintDocument = null;
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--RasterImagePrinter.RasterImagePrinter-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImagePrinter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.WinForms.RasterImagePrinter" /> class.
            </summary>
      <remarks>
        <para>Note: The RasterViewerCenterMode type has been renamed in version 15. Use the <see cref="T:Leadtools.RasterPaintAlignMode">RasterPaintAlignMode</see> enumeration instead.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterImagePrinter" /> and <see cref="P:Leadtools.WinForms.RasterImagePrinter.ImageRectangle" />.
            </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImagePrinter.OnSizeModeChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImagePrinter.SizeModeChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <strong>OnSizeModeChanged</strong> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <strong>Notes to Inheritors:</strong> When overriding <strong>OnSizeModeChanged</strong> in a derived class, be sure to call the base class's <strong>OnSizeModeChanged</strong> method so that registered delegates receive the event.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterImagePrinter" /> and <see cref="P:Leadtools.WinForms.RasterImagePrinter.ImageRectangle" />.
            </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImagePrinter.OnHorizontalAlignModeChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImagePrinter.HorizontalAlignModeChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <strong>OnHorizontalAlignModeChanged</strong> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <strong>Notes to Inheritors:</strong> When overriding <strong>OnHorizontalAlignModeChanged</strong> in a derived class, be sure to call the base class's <strong>OnHorizontalAlignModeChanged</strong> method so that registered delegates receive the event.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterImagePrinter" /> and <see cref="P:Leadtools.WinForms.RasterImagePrinter.ImageRectangle" />.
            </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImagePrinter.OnVerticalAlignModeChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImagePrinter.VerticalAlignModeChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <strong>OnVerticalAlignModeChanged</strong> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <strong>Notes to Inheritors:</strong> When overriding <strong>OnVerticalAlignModeChanged</strong> in a derived class, be sure to call the base class's <strong>OnVerticalAlignModeChanged</strong> method so that registered delegates receive the event.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterImagePrinter" /> and <see cref="P:Leadtools.WinForms.RasterImagePrinter.ImageRectangle" />.
            </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImagePrinter.OnImageRectangleChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImagePrinter.ImageRectangleChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <strong>OnImageRectangleChanged</strong> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <strong>Notes to Inheritors:</strong> When overriding <strong>OnImageRectangleChanged</strong> in a derived class, be sure to call the base class's <strong>OnImageRectangleChanged</strong> method so that registered delegates receive the event.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterImagePrinter" /> and <see cref="P:Leadtools.WinForms.RasterImagePrinter.ImageRectangle" />.
            </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImagePrinter.OnPageRectangleChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImagePrinter.PageRectangleChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <strong>OnPageRectangleChanged</strong> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <strong>Notes to Inheritors:</strong> When overriding <strong>OnPageRectangleChanged</strong> in a derived class, be sure to call the base class's <strong>OnPageRectangleChanged</strong> method so that registered delegates receive the event.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterImagePrinter" /> and <see cref="P:Leadtools.WinForms.RasterImagePrinter.ImageRectangle" />.
            </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImagePrinter.OnPaintPropertiesChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImagePrinter.PaintPropertiesChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <strong>OnPaintPropertiesChanged</strong> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <strong>Notes to Inheritors:</strong> When overriding <strong>OnPaintPropertiesChanged</strong> in a derived class, be sure to call the base class's <strong>OnPaintPropertiesChanged</strong> method so that registered delegates receive the event.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterImagePrinter" /> and <see cref="P:Leadtools.WinForms.RasterImagePrinter.ImageRectangle" />.
            </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImagePrinter.Print(Leadtools.RasterImage,System.Int32,System.Drawing.Printing.PrintPageEventArgs)">
      <summary>
            Prints the specified <see cref="T:Leadtools.RasterImage" />.
            </summary>
      <param name="image">The <see cref="T:Leadtools.RasterImage" /> to print.</param>
      <param name="page">The page number to print.</param>
      <param name="e">An <see cref="T:System.Drawing.Printing.PrintPageEventArgs" /> object that contains print data.</param>
      <remarks>
        <para>
          <i>page</i> is 1-based.</para>
        <para>You usually call this method from your <see cref="E:System.Drawing.Printing.PrintDocument.PrintPage" /> event handler of
            a <see cref="T:System.Drawing.Printing.PrintDocument" /> object.  You must pass the <see cref="T:System.Drawing.Printing.PrintPageEventArgs" /> obtained in
            the <see cref="E:System.Drawing.Printing.PrintDocument.PrintPage" /> event handler to this method as the <i>e</i> parameter.</para>
      </remarks>
      <seealso cref="T:Leadtools.Topics.PrintingAnImage">Printing An Image</seealso>
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterImagePrinter" /> and <see cref="P:Leadtools.WinForms.RasterImagePrinter.ImageRectangle" />.
            </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImagePrinter.Prepare(System.Int32,System.Int32,System.Single,System.Single,System.Drawing.Printing.PrintPageEventArgs)">
      <summary>
            Prepares this <see cref="T:Leadtools.WinForms.RasterImagePrinter" /> object state for printing.
            </summary>
      <param name="width">Width of the image to print.</param>
      <param name="height">Height of the image to print.</param>
      <param name="dpiX">Horizontal DPI value of the image to print.</param>
      <param name="dpiY">Vertical DPI value of the image to print.</param>
      <param name="e">An <see cref="T:System.Drawing.Printing.PrintPageEventArgs" /> object that contains print data.</param>
      <remarks>
            Derive classes should call this method from <see cref="M:Leadtools.WinForms.RasterImagePrinter.Print(Leadtools.RasterImage,System.Int32,System.Drawing.Printing.PrintPageEventArgs)" /> to prepare the <see cref="P:Leadtools.WinForms.RasterImagePrinter.SourceRectangle" />, <see cref="P:Leadtools.WinForms.RasterImagePrinter.DestinationRectangle" /> and <see cref="P:Leadtools.WinForms.RasterImagePrinter.DestinationClipRectangle" /> properties.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterImagePrinter" /> and <see cref="P:Leadtools.WinForms.RasterImagePrinter.ImageRectangle" />.
            </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImagePrinter.OnUseDpiChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImagePrinter.UseDpiChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <strong>OnUseDpiChanged</strong> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <strong>Notes to Inheritors:</strong> When overriding <strong>OnUseDpiChanged</strong> in a derived class, be sure to call the base class's <strong>OnUseDpiChanged</strong> method so that registered delegates receive the event.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterImagePrinter" /> and <see cref="P:Leadtools.WinForms.RasterImagePrinter.ImageRectangle" />.
            </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImagePrinter.OnUseMarginsChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImagePrinter.UseMarginsChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <strong>OnUseMarginsChanged</strong> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <strong>Notes to Inheritors:</strong> When overriding <strong>OnUseMarginsChanged</strong> in a derived class, be sure to call the base class's <strong>OnUseMarginsChanged</strong> method so that registered delegates receive the event.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterImagePrinter" /> and <see cref="P:Leadtools.WinForms.RasterImagePrinter.ImageRectangle" />.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImagePrinter.SizeMode">
      <summary>
            Gets or sets the size mode of this <see cref="T:Leadtools.WinForms.RasterImagePrinter" /></summary>
      <value>An <see cref="T:Leadtools.RasterPaintSizeMode" /> enumeration value that determine how the class prints the image and the automatic adjustments of the display rectangles.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterImagePrinter" /> and <see cref="P:Leadtools.WinForms.RasterImagePrinter.ImageRectangle" />.
            </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImagePrinter.SizeModeChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImagePrinter.SizeMode" /> property changes.
            </summary>
      <event>The event handler receives an argument of type <see cref="T:System.EventArgs" />.</event>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImagePrinter.SizeMode" /> property is changed.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterImagePrinter" /> and <see cref="P:Leadtools.WinForms.RasterImagePrinter.ImageRectangle" />.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImagePrinter.HorizontalAlignMode">
      <summary>
            Gets or sets a value to determine how to center the image horizontally in the print page.
            </summary>
      <value>An <see cref="T:Leadtools.RasterPaintAlignMode" /> enumeration value that determine how to center the image horizontally in the print page.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterImagePrinter" /> and <see cref="P:Leadtools.WinForms.RasterImagePrinter.ImageRectangle" />.
            </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImagePrinter.HorizontalAlignModeChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImagePrinter.HorizontalAlignMode" /> property changes.
            </summary>
      <event>The event handler receives an argument of type <see cref="T:System.EventArgs" />.</event>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImagePrinter.HorizontalAlignMode" /> property is changed.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterImagePrinter" /> and <see cref="P:Leadtools.WinForms.RasterImagePrinter.ImageRectangle" />.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImagePrinter.VerticalAlignMode">
      <summary>
            Gets or sets a value to determine how to center the image vertically in the print page.
            </summary>
      <value>An <see cref="T:Leadtools.RasterPaintAlignMode" /> enumeration value that determine how to center the image vertically in the print page.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterImagePrinter" /> and <see cref="P:Leadtools.WinForms.RasterImagePrinter.ImageRectangle" />.
            </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImagePrinter.VerticalAlignModeChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImagePrinter.VerticalAlignMode" /> property changes.
            </summary>
      <event>The event handler receives an argument of type <see cref="T:System.EventArgs" />.</event>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImagePrinter.VerticalAlignMode" /> property is changed.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterImagePrinter" /> and <see cref="P:Leadtools.WinForms.RasterImagePrinter.ImageRectangle" />.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImagePrinter.ImageRectangle">
      <summary>
            Gets or sets the rectangle that specifies the portion of the image to print.
            </summary>
      <value>A <see cref="T:System.Drawing.Rectangle" /> that specifies the portion of the image to print.</value>
      <remarks>
        <para>This rectangle must be in image coordinates.  To convert between image and device coordinates refer to <see cref="M:Leadtools.RasterImage.RectangleFromImage(Leadtools.RasterViewPerspective,Leadtools.LeadRect)" /> and <see cref="M:Leadtools.RasterImage.RectangleToImage(Leadtools.RasterViewPerspective,Leadtools.LeadRect)" /></para>
        <para>You can also pass <strong>Rectangle.Empty</strong> to use the whole image.</para>
      </remarks>
      <example>
        <code lang="VB">      ' The image we are printing
      Private myRasterImage As RasterImage = Nothing
      Public Sub RasterImagePrinterExample2()
         ' Check if there are printers installed on this machine
         If (PrinterSettings.InstalledPrinters Is Nothing) OrElse (PrinterSettings.InstalledPrinters.Count &lt; 1) Then
            MessageBox.Show("There are no printers installed on this machine")
            Return
         End If

         ' Load the image
         Using codecs As New RasterCodecs()
            Me.myRasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Ocr1.tif"))
         End Using

         ' Create the print document object
         Using document As New PrintDocument()
            ' We will use the default printer with default settings

            ' Add handlers for Begin/Print and End print events
            AddHandler document.BeginPrint, AddressOf printDocument_BeginPrint
            AddHandler document.PrintPage, AddressOf printDocument_PrintPage
            AddHandler document.EndPrint, AddressOf printDocument_EndPrint

            ' Use the .NET print preview dialog
            Using printPreviewDlg As New PrintPreviewDialog()
               printPreviewDlg.Document = document
               printPreviewDlg.WindowState = FormWindowState.Maximized
               printPreviewDlg.ShowDialog()
            End Using
         End Using

         ' Clean up
         Me.myRasterImage.Dispose()
      End Sub

      Private Sub printDocument_BeginPrint(ByVal sender As Object, ByVal e As PrintEventArgs)
         ' Reset the current page number
         ' Since we are using the print preview dialog, this event will be called twice (once
         ' to generate the print preview and once for actual printing). So, we must set this back
         ' to the first print page if we are going to print more than one page
      End Sub

      Private Sub printDocument_EndPrint(ByVal sender As Object, ByVal e As PrintEventArgs)
         ' Nothing to do here
      End Sub

      Private Sub printDocument_PrintPage(ByVal sender As Object, ByVal e As PrintPageEventArgs)
         ' Get the print document object
         Dim document As PrintDocument = DirectCast(sender, PrintDocument)

         ' Create an new LEADTOOLS image printer class
         Dim printer As New RasterImagePrinter()

         ' Set the document object so page calculations can be performed
         printer.PrintDocument = document

         ' We are going to stretch the top-left corner of the image into the bottom-right corner of
         ' the page (using the page margins)

         printer.SizeMode = RasterPaintSizeMode.Stretch

         ' Align mode will not have an effect if size mode is "Stretch"
         printer.HorizontalAlignMode = RasterPaintAlignMode.Near
         printer.VerticalAlignMode = RasterPaintAlignMode.Near

         ' Account for FAX images that may have different horizontal and vertical resolution
         printer.UseDpi = True

         ' Print the top-left corner of the image
         printer.ImageRectangle = New Rectangle( _
            0, _
            0, _
            Me.myRasterImage.ImageWidth \ 2, _
            Me.myRasterImage.ImageHeight \ 2)

         ' Use the margins
         printer.UseMargins = True

         ' Calculate the real margins
         Dim xMargin As Single = e.MarginBounds.X
         Dim yMargin As Single = e.MarginBounds.Y

         If Not (document.PrintController.IsPreview) Then
            ' Real printing (Not inside a .NET PrintPreview control), get the printer hard margins
            xMargin = xMargin - document.DefaultPageSettings.HardMarginX
            yMargin = yMargin - document.DefaultPageSettings.HardMarginY

            ' If you want to use the page bounds instead of the margins, use this to calculate it
            ' Dim pageBounds as RectangleF = e.PageBounds
            ' pageBounds.Width = pageBounds.Width - document.DefaultPageSettings.HardMarginX * 2
            ' pageBounds.Height = pageBounds.Height - document.DefaultPageSettings.HardMarginY * 2
         Else
            ' If you want to use the page bounds instead of the margins, use this to calculate it
            ' Dim pageBounds as RectangleF = e.PageBounds
         End If

         ' Print to the bottom right corner of the page including the margins
         Dim destWidth As Single = e.MarginBounds.Width \ 2
         Dim destHeight As Single = e.MarginBounds.Height \ 2
         Dim marginBounds As New RectangleF(xMargin + destWidth, yMargin + destHeight, destWidth, destHeight)

         printer.PageRectangle = marginBounds

         ' Print the first current page
         printer.Print(Me.myRasterImage, 1, e)

         ' No more pages to print
         e.HasMorePages = False

         ' De-couple our PrintDocument from the RasterImagePrinter
         printer.PrintDocument = Nothing
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      // The image we are printing
      private RasterImage myRasterImage = null;
      public void RasterImagePrinterExample2()
      {
         // Check if there are printers installed on this machine
         if(PrinterSettings.InstalledPrinters == null || PrinterSettings.InstalledPrinters.Count &lt; 1)
         {
            MessageBox.Show("There are no printers installed on this machine");
            return;
         }

         // Load the image
         using(RasterCodecs codecs = new RasterCodecs())
         {
            this.myRasterImage = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir,"Ocr1.tif"));
         }

         // Create the print document object
         using(PrintDocument document = new PrintDocument())
         {
            // We will use the default printer with default settings

            // Add handlers for Begin/Print and End print events
            document.BeginPrint += new PrintEventHandler(printDocument_BeginPrint);
            document.PrintPage += new PrintPageEventHandler(printDocument_PrintPage);
            document.EndPrint += new PrintEventHandler(printDocument_EndPrint);

            // Use the .NET print preview dialog
            using(PrintPreviewDialog printPreviewDlg = new PrintPreviewDialog())
            {
               printPreviewDlg.Document = document;
               printPreviewDlg.WindowState = FormWindowState.Maximized;
               printPreviewDlg.ShowDialog();
            }
         }

         // Clean up
         this.myRasterImage.Dispose();
      }

      private void printDocument_BeginPrint(object sender, PrintEventArgs e)
      {
         // Reset the current page number
         // Since we are using the print preview dialog, this event will be called twice (once
         // to generate the print preview and once for actual printing). So, we must set this back
         // to the first print page if we are going to print more than one page
      }

      private void printDocument_EndPrint(object sender, PrintEventArgs e)
      {
         // Nothing to do here
      }

      private void printDocument_PrintPage(object sender, PrintPageEventArgs e)
      {
         // Get the print document object
         PrintDocument document = sender as PrintDocument;

         // Create an new LEADTOOLS image printer class
         RasterImagePrinter printer = new RasterImagePrinter();

         // Set the document object so page calculations can be performed
         printer.PrintDocument = document;

         // We are going to stretch the top-left corner of the image into the bottom-right corner of
         // the page (using the page margins)

         printer.SizeMode = RasterPaintSizeMode.Stretch;

         // Align mode will not have an effect if size mode is "Stretch"
         printer.HorizontalAlignMode = RasterPaintAlignMode.Near;
         printer.VerticalAlignMode = RasterPaintAlignMode.Near;

         // Account for FAX images that may have different horizontal and vertical resolution
         printer.UseDpi = true;

         // Print the top-left corner of the image
         printer.ImageRectangle = new Rectangle(
            0,
            0,
            this.myRasterImage.ImageWidth / 2,
            this.myRasterImage.ImageHeight / 2);

         // Use the margins
         printer.UseMargins = true;

         // Calculate the real margins
         float xMargin = e.MarginBounds.X;
         float yMargin = e.MarginBounds.Y;

         if(!document.PrintController.IsPreview)
         {
            // Real printing (Not inside a .NET PrintPreview control), get the printer hard margins
            xMargin -= document.DefaultPageSettings.HardMarginX;
            yMargin -= document.DefaultPageSettings.HardMarginY;

            // If you want to use the page bounds instead of the margins, use this to calculate it
            // RectangleF pageBounds = e.PageBounds;
            // pageBounds.Width -= document.DefaultPageSettings.HardMarginX * 2;
            // pageBounds.Height -= document.DefaultPageSettings.HardMarginY * 2;
         }
         else
         {
            // If you want to use the page bounds instead of the margins, use this to calculate it
            // RectangleF pageBounds = e.PageBounds;
         }

         // Print to the bottom right corner of the page including the margins
         float destWidth = e.MarginBounds.Width / 2;
         float destHeight = e.MarginBounds.Height / 2;
         RectangleF marginBounds = new RectangleF(xMargin + destWidth, yMargin + destHeight, destWidth, destHeight);

         printer.PageRectangle = marginBounds;

         // Print the first current page
         printer.Print(this.myRasterImage, 1, e);

         // No more pages to print
         e.HasMorePages = false;

         // De-couple our PrintDocument from the RasterImagePrinter
         printer.PrintDocument = null;
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--RasterImagePrinter.ImageRectangle-->
      </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImagePrinter.ImageRectangleChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImagePrinter.ImageRectangle" /> property changes.
            </summary>
      <event>The event handler receives an argument of type <see cref="T:System.EventArgs" />.</event>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImagePrinter.ImageRectangle" /> property is changed.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterImagePrinter" /> and <see cref="P:Leadtools.WinForms.RasterImagePrinter.ImageRectangle" />.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImagePrinter.PageRectangle">
      <summary>
            Gets or sets the rectangular area that represents the total area of the page.
            </summary>
      <value>A <see cref="T:System.Drawing.Rectangle" /> represents the total area of the page.</value>
      <remarks>
        <para>This specifies the destination rectangle on the page to where the image is to be printed.  Normally, you obtain the page rectangle through the <see cref="P:System.Drawing.Printing.PrintPageEventArgs.MarginBounds" /> or the <see cref="T:System.Drawing.Printing.PrintPageEventArgs" /> object passed to your <see cref="T:System.Drawing.Printing.PrintPageEventHandler" />.</para>
        <para>You can also pass <strong>RectangleF.Empty</strong> to use the whole print area. The print area will then be calculated using
            the <see cref="P:Leadtools.WinForms.RasterImagePrinter.UseMargins" /> property value and the page and margins bounds values passed through <see cref="T:System.Drawing.Printing.PrintPageEventArgs" />.</para>
        <para>Important: the <see cref="P:Leadtools.WinForms.RasterImagePrinter.UseMargins" /> property is only used to calculate the printing area when the value of both
            <see cref="P:Leadtools.WinForms.RasterImagePrinter.PageRectangle" /> is left to the empty default value. If you set the <see cref="P:Leadtools.WinForms.RasterImagePrinter.PageRectangle" /> value to anything else, it is assumed
            that you are responsible for calculating the print area and <see cref="P:Leadtools.WinForms.RasterImagePrinter.UseMargins" /> will be ignored.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterImagePrinter" /> and <see cref="P:Leadtools.WinForms.RasterImagePrinter.ImageRectangle" />.
            </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImagePrinter.PageRectangleChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImagePrinter.PageRectangle" /> property changes.
            </summary>
      <event>The event handler receives an argument of type <see cref="T:System.EventArgs" />.</event>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImagePrinter.PageRectangle" /> property is changed.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterImagePrinter" /> and <see cref="P:Leadtools.WinForms.RasterImagePrinter.ImageRectangle" />.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImagePrinter.PaintProperties">
      <summary>
            Gets or sets the <see cref="T:Leadtools.Drawing.RasterPaintProperties" /> which control the print properties of this <see cref="T:Leadtools.WinForms.RasterImagePrinter" />.
            </summary>
      <value>The <see cref="T:Leadtools.Drawing.RasterPaintProperties" /> which control the print properties of this <see cref="T:Leadtools.WinForms.RasterImagePrinter" />.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterImagePrinter" /> and <see cref="P:Leadtools.WinForms.RasterImagePrinter.ImageRectangle" />.
            </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImagePrinter.PaintPropertiesChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImagePrinter.PaintProperties" /> property changes.
            </summary>
      <event>The event handler receives an argument of type <see cref="T:System.EventArgs" />.</event>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImagePrinter.PaintProperties" /> property is changed.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterImagePrinter" /> and <see cref="P:Leadtools.WinForms.RasterImagePrinter.ImageRectangle" />.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImagePrinter.PrintDocument">
      <summary>
            Gets or sets the <see cref="T:System.Drawing.Printing.PrintDocument" /> object associated with this print job
            </summary>
      <value>The <see cref="T:System.Drawing.Printing.PrintDocument" /> object associated with this print job.</value>
      <remarks>
        <para>You must set the <see cref="P:Leadtools.WinForms.RasterImagePrinter.PrintDocument" /> property to the <see cref="T:System.Drawing.Printing.PrintDocument" /> object you are
            using for this print job. The <see cref="T:Leadtools.WinForms.RasterImagePrinter" /> class requires this object to determine whether the printing operation is inside
            in preview mode (for example, using the print view dialog control) and calculates the real page margins accordingly.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterImagePrinter" /> and <see cref="P:Leadtools.WinForms.RasterImagePrinter.ImageRectangle" />.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImagePrinter.SourceRectangle">
      <summary>
            Gets the actual source rectangle to print.
            </summary>
      <value>A <see cref="T:System.Drawing.Rectangle" /> structure that specifies the actual source rectangle to use when printing.</value>
      <remarks>
            The value of this property is updated after you call <see cref="M:Leadtools.WinForms.RasterImagePrinter.Prepare(System.Int32,System.Int32,System.Single,System.Single,System.Drawing.Printing.PrintPageEventArgs)" />.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterImagePrinter" /> and <see cref="P:Leadtools.WinForms.RasterImagePrinter.ImageRectangle" />.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImagePrinter.DestinationRectangle">
      <summary>
            Gets the actual destination rectangle to print.
            </summary>
      <value>A <see cref="T:System.Drawing.Rectangle" /> structure that specifies the actual destination rectangle to use when printing.</value>
      <remarks>
            The value of this property is updated after you call <see cref="M:Leadtools.WinForms.RasterImagePrinter.Prepare(System.Int32,System.Int32,System.Single,System.Single,System.Drawing.Printing.PrintPageEventArgs)" />.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterImagePrinter" /> and <see cref="P:Leadtools.WinForms.RasterImagePrinter.ImageRectangle" />.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImagePrinter.DestinationClipRectangle">
      <summary>
            Gets the actual destination clip rectangle to print.
            </summary>
      <value>A <see cref="T:System.Drawing.Rectangle" /> structure that specifies the actual destination clip rectangle to use when printing.</value>
      <remarks>
            The value of this property is updated after you call <see cref="M:Leadtools.WinForms.RasterImagePrinter.Prepare(System.Int32,System.Int32,System.Single,System.Single,System.Drawing.Printing.PrintPageEventArgs)" />.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterImagePrinter" /> and <see cref="P:Leadtools.WinForms.RasterImagePrinter.ImageRectangle" />.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImagePrinter.UseDpi">
      <summary>
            Gets or sets a value that indicates whether LEAD's automated scaling properties are used to account for the physical resolution of the image when printing FAX images.
            </summary>
      <value>
        <strong>true</strong> Account for the physical resolution.
            Default value is <strong>true</strong>.</value>
      <remarks>
        <para>The physical resolution of an image is measured in dots per inch (DPI). When you load an image, the
            <see cref="P:Leadtools.RasterImage.XResolution" /> and <see cref="P:Leadtools.RasterImage.YResolution" /> properties are updated with the DPI values for the horizontal
            and vertical resolution. Some images have different horizontal and vertical resolutions. For example, the horizontal resolution of a fax image
            is typically twice its vertical resolution (for example 200 by 100). In such cases, the displayed images will appear elongated if you do not
            account for the resolution.</para>
        <para>If the values of the <see cref="P:Leadtools.RasterImage.XResolution" /> property and the <see cref="P:Leadtools.RasterImage.YResolution" /> property are not equal,
            set the <see cref="P:Leadtools.WinForms.RasterImagePrinter.UseDpi" /> property to true to have LEAD's automated scaling properties account for the physical
            resolution of the <see cref="T:Leadtools.RasterImage" /> when printed using <see cref="M:Leadtools.WinForms.RasterImagePrinter.Print(Leadtools.RasterImage,System.Int32,System.Drawing.Printing.PrintPageEventArgs)" /></para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterImagePrinter" /> and <see cref="P:Leadtools.WinForms.RasterImagePrinter.ImageRectangle" />.
            </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImagePrinter.UseDpiChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImagePrinter.UseDpi" /> property changes.
            </summary>
      <event>The event handler receives an argument of type <see cref="T:System.EventArgs" />.</event>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImagePrinter.UseDpi" /> property is changed.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterImagePrinter" /> and <see cref="P:Leadtools.WinForms.RasterImagePrinter.ImageRectangle" />.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImagePrinter.UseMargins">
      <summary>
            Gets or sets a value that indicates whether to use the page margins when printing.
            </summary>
      <value>
        <strong>true</strong> to use the page margins when printing, otherwise; <strong>false</strong>. Default value is <strong>true</strong>.</value>
      <remarks>
        <para>When the value of the <see cref="P:Leadtools.WinForms.RasterImagePrinter.UseMargins" /> property is set to <strong>true</strong>, the maximum page area used for printing will be the
            <see cref="P:System.Drawing.Printing.PrintPageEventArgs.MarginBounds">PrintPageEventArgs.MarginBounds</see> value.</para>
        <para>When the value of the <see cref="P:Leadtools.WinForms.RasterImagePrinter.UseMargins" /> property is set to <strong>false</strong>, the maximum page area used for printing will be the
            <see cref="P:System.Drawing.Printing.PrintPageEventArgs.PageBounds">PrintPageEventArgs.PageBounds</see> value.</para>
        <para>For more information on the bounds and how to change them, refer to <see cref="T:System.Drawing.Printing.PrintDocument" />,
            <see cref="T:System.Drawing.Printing.PrinterSettings" /> and <see cref="T:System.Drawing.Printing.PrintPageEventArgs" /> in MSDN.</para>
        <para>Important: the <see cref="P:Leadtools.WinForms.RasterImagePrinter.UseMargins" /> property is only used to calculate the printing area when the value of both
            <see cref="P:Leadtools.WinForms.RasterImagePrinter.PageRectangle" /> is left to the empty default value. If you set the <see cref="P:Leadtools.WinForms.RasterImagePrinter.PageRectangle" /> value to anything else, it is assumed
            that you are responsible for calculating the print area and <see cref="P:Leadtools.WinForms.RasterImagePrinter.UseMargins" /> will be ignored.</para>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterImagePrinter" /> and <see cref="P:Leadtools.WinForms.RasterImagePrinter.ImageRectangle" />.
            </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImagePrinter.UseMarginsChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImagePrinter.UseMargins" /> property changes.
            </summary>
      <event>The event handler receives an argument of type <see cref="T:System.EventArgs" />.</event>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImagePrinter.UseMargins" /> property is changed.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterImagePrinter" /> and <see cref="P:Leadtools.WinForms.RasterImagePrinter.ImageRectangle" />.
            </example>
    </member>
    <member name="T:Leadtools.WinForms.RasterPictureBoxSizeMode">
      <summary>
            Values which determine how the control displays the image and whether it automatically adjusts the display rectangles.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.WinForms.RasterPictureBoxSizeMode.Normal">
      <summary>
            Normal, no sizing
            </summary>
    </member>
    <member name="F:Leadtools.WinForms.RasterPictureBoxSizeMode.StretchImage">
      <summary>
            Fit the image to fill the destination rectangle.  The aspect ratio might not be maintained.
            </summary>
    </member>
    <member name="F:Leadtools.WinForms.RasterPictureBoxSizeMode.AutoSize">
      <summary>
            Perform automatic sizing.
            </summary>
    </member>
    <member name="F:Leadtools.WinForms.RasterPictureBoxSizeMode.CenterImage">
      <summary>
            Center the image in the middle of the destination rectangle.
            </summary>
    </member>
    <member name="F:Leadtools.WinForms.RasterPictureBoxSizeMode.Fit">
      <summary>
            Fit and Center the image in the middle of the destination rectangle.
            </summary>
    </member>
    <member name="T:Leadtools.WinForms.RasterThumbnailBrowser">
      <summary>
            Derives from the <see cref="T:Leadtools.WinForms.RasterImageList" /> control to provide functionality to automatically generate thumbnails
            for images in a disk folder.
            </summary>
      <remarks>
        <p>The <b>RasterThumbnailBrowser</b> lets you quickly and easily create thumbnails for images that reside on any
            file folder in the system.  Since the <b>RasterThumbnailBrowser</b> derives from the <see cref="T:Leadtools.WinForms.RasterImageList" />
            control, you get all the visual styles available to the image list (different view styles, control the item size,
            color, etc.) as well as the same interface to manually add/remove/edit items.</p>
        <p>You call the <see cref="M:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnails(System.String,System.String,Leadtools.WinForms.RasterThumbnailBrowserLoadFlags)" /> method passing it the path of the folder for
            which you want to create thumbnails, a search pattern and a boolean value indicating whether you want the control
            to block until all thumbnails are created or to return immediately and continue loading the thumbnails in a 
            background thread.</p>
        <p>The control will first read the folder and create the items you need.  These items will initially have a default
            "loading" thumbnail set in their <see cref="P:Leadtools.WinForms.RasterImageListItem.Image">RasterImageListItem.Image</see> that you can
            access and change through the <see cref="P:Leadtools.WinForms.RasterThumbnailBrowser.LoadingThumbnail" /> property.  Once the item image
            file is loaded and its thumbnail extracted, the control will replace the item <see cref="P:Leadtools.WinForms.RasterImageListItem.Image" />
            property with the correct thumbnail.  This gives the user a visual feedback on which items are loaded and which are
            yet to be loaded.  If the control cannot load a certain file (for example, if the file is not a valid image format
            file), an "error" thumbnail will be used in the item.  You can access and change this thumbnail image through the
            <see cref="P:Leadtools.WinForms.RasterThumbnailBrowser.ErrorThumbnail" /> property.</p>
        <p>During the loading operation, you can check the <see cref="P:Leadtools.WinForms.RasterThumbnailBrowser.IsLoadingThumbnails" />
            property to determine if the control is still loading thumbnails in the background.  The
            <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.FinishedLoadingThumbnails" /> event will fire when the loading operation is done.
            You can subscribe to the <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnail" /> event to get feedback about the item
            currently being loaded.  You use this event also to update a progress bar on your application and to cancel
            the load process if needed.  The <see cref="M:Leadtools.WinForms.RasterThumbnailBrowser.CancelLoadingThumbnails" /> method lets you
            cancel the load operation at any time.</p>
        <p>The <see cref="P:Leadtools.WinForms.RasterThumbnailBrowser.ThumbnailSizeFlags" /> property lets you control the quality of the
            thumbnail images created by the <b>RasterThumbnailBrowser</b> control.</p>
      </remarks>
      <seealso cref="T:L.Topics.ThumbnailBrowser">Thumbnail Browser</seealso>
      <example>
        <code lang="VB">      Private Class MyForm : Inherits Form
         Public theBrowser As RasterThumbnailBrowser
         Public cancelOperation As Boolean ' Informs us if the user canceled the operation
         Public buttonCancel As Button ' Cancel browse loading
         Public buttonBrowse As Button ' Diplays the browse control
         Public progressBar As ProgressBar ' shows progress of loading browse images
         Private Sub buttonBrowse_Click(ByVal sender As Object, ByVal e As EventArgs)
            ' If we are already loading thumbails, cancel
            ' this operation
            If theBrowser.IsLoadingThumbnails Then
               theBrowser.CancelLoadingThumbnails()
            End If

            ' Clean all the items
            theBrowser.Items.Clear()

            ' Update the application state
            buttonCancel.Enabled = True
            progressBar.Value = 0

            ' And load the new thumbnails
            cancelOperation = False

            Dim folderPath As String = LEAD_VARS.ImagesDir
            theBrowser.LoadThumbnails(folderPath, "*.*", RasterThumbnailBrowserLoadFlags.Block)

            theBrowser.Refresh()

            theBrowser.EnableBroswerWatcher = True
         End Sub

         Private Sub thumbnailBrowser_LoadThumbnail(ByVal sender As Object, ByVal e As RasterThumbnailBrowserLoadThumbnailEventArgs)
            ' If this is the first iteration, update the progress bar minimum and maximum values
            If e.Index = 0 Then
               progressBar.Minimum = 0
               progressBar.Maximum = e.Total - 1
            End If

            ' Update where we are in the loading operation
            progressBar.Value = e.Index

            ' Check if we need to cancel (due to the user clicking the Cancel button)
            If cancelOperation Then
               e.Cancel = True
            End If
         End Sub

         Private Sub thumbnailBrowser_AddFile(ByVal sender As Object, ByVal e As RasterThumbnailBrowserAddFileEventArgs)
            Console.WriteLine("AddFile: {0}    Add: {1}", e.FileName, e.Add)
         End Sub

         Private Sub thumbnailBrowser_FinishedLoadingThumbnails(ByVal sender As Object, ByVal e As EventArgs)
            buttonCancel.Enabled = False
         End Sub

         Private Sub buttonCancel_Click(ByVal sender As Object, ByVal e As EventArgs)
            ' The user has clicked the cancel button
            Me.cancelOperation = True
         End Sub

         ' Create  custom images to use as the "error" and "loading" thumbnails.
         Private Sub CreateErrorThumbnail()
            ' Get the image size
            Dim imageSize As Size = theBrowser.ItemImageSize

            ' No "loading" thumbnail
            theBrowser.LoadingThumbnail = Nothing

            ' For the "error" thumbnail, create a red X image
            Dim palette As RasterColor() = New RasterColor() {}
            Dim image As RasterImage = New RasterImage(RasterMemoryFlags.Conventional, imageSize.Width, imageSize.Height, 24, RasterByteOrder.Bgr, _
                                                       RasterViewPerspective.TopLeft, palette, IntPtr.Zero, 0)

            Dim hdc As IntPtr = RasterImagePainter.CreateLeadDC(image)
            Dim g As Graphics = Graphics.FromHdc(hdc)

            g.FillRectangle(Brushes.Magenta, 0, 0, imageSize.Width, imageSize.Height)

            g.DrawLine(Pens.Red, 0, 0, imageSize.Width, imageSize.Height)
            g.DrawLine(Pens.Red, imageSize.Width, 0, 0, imageSize.Height)

            g.Dispose()
            RasterImagePainter.DeleteLeadDC(hdc)

            ' Make this image transparent
            image.Transparent = True
            image.TransparentColor = RasterColor.FromKnownColor(RasterKnownColor.Magenta)

            theBrowser.ErrorThumbnail = image
         End Sub

         Public Sub Cleanup()
            RemoveHandler buttonBrowse.Click, AddressOf buttonBrowse_Click
            RemoveHandler buttonCancel.Click, AddressOf buttonCancel_Click
            RemoveHandler theBrowser.LoadThumbnail, AddressOf thumbnailBrowser_LoadThumbnail
            RemoveHandler theBrowser.FinishedLoadingThumbnails, AddressOf thumbnailBrowser_FinishedLoadingThumbnails
         End Sub

         Public Sub New()
            Size = New Size(300, 200)

            ' create the browser
            theBrowser = New RasterThumbnailBrowser()
            theBrowser.Codecs = New RasterCodecs()
            theBrowser.Dock = DockStyle.Fill
            theBrowser.ItemSpacingSize = New Size(10, 10)
            theBrowser.ThumbnailSizeFlags = RasterSizeFlags.Bicubic
            AddHandler theBrowser.LoadThumbnail, AddressOf thumbnailBrowser_LoadThumbnail
            AddHandler theBrowser.FinishedLoadingThumbnails, AddressOf thumbnailBrowser_FinishedLoadingThumbnails
            AddHandler theBrowser.AddFile, AddressOf thumbnailBrowser_AddFile

            ' Create a thumbnail image to be displayed on error
            CreateErrorThumbnail()

            ' add a panel
            Dim panel As Panel = New Panel()
            panel.Dock = DockStyle.Left
            panel.Width = 100
            Controls.Add(panel)
            panel.BringToFront()

            ' add a "browse" button
            buttonBrowse = New Button()
            buttonBrowse.Text = "Browse"
            buttonBrowse.Dock = DockStyle.Top
            panel.Controls.Add(buttonBrowse)
            AddHandler buttonBrowse.Click, AddressOf buttonBrowse_Click

            ' add a "cancel" button
            buttonCancel = New Button()
            buttonCancel.Text = "Cancel"
            buttonBrowse.Dock = DockStyle.Bottom
            panel.Controls.Add(buttonCancel)
            AddHandler buttonCancel.Click, AddressOf buttonCancel_Click

            ' add a progress bar
            progressBar = New ProgressBar()
            progressBar.Dock = DockStyle.Bottom
            Controls.Add(progressBar)

            Controls.Add(theBrowser)
            theBrowser.BringToFront()
         End Sub

         Private Sub InitializeComponent()
            Me.SuspendLayout()
            ' 
            ' MyForm
            ' 
            Me.ClientSize = New System.Drawing.Size(315, 273)
            Me.Name = "MyForm"
            Me.ResumeLayout(False)

         End Sub
      End Class
      Public Sub RasterThumbnailBrowser_LoadThumbnails2()
         Dim form As MyForm = New MyForm()
         form.ShowDialog()
         form.Cleanup()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MyForm : Form
      {
         public RasterThumbnailBrowser theBrowser;
         public bool cancelOperation;        // Informs us if the user canceled the operation
         public Button buttonCancel;         // Cancel browse loading
         public Button buttonBrowse;         // Diplays the browse control
         public ProgressBar progressBar;     // shows progress of loading browse images
         void buttonBrowse_Click(object sender, EventArgs e)
         {
            // If we are already loading thumbails, cancel
            // this operation
            if(theBrowser.IsLoadingThumbnails)
               theBrowser.CancelLoadingThumbnails();

            // Clean all the items
            theBrowser.Items.Clear();

            // Update the application state
            buttonCancel.Enabled = true;
            progressBar.Value = 0;

            // And load the new thumbnails
            cancelOperation = false;

            string folderPath = LEAD_VARS.ImagesDir;
            theBrowser.LoadThumbnails(folderPath, "*.*", RasterThumbnailBrowserLoadFlags.Block);

            theBrowser.Refresh();

            theBrowser.EnableBroswerWatcher = true;
         }

         private void thumbnailBrowser_LoadThumbnail(object sender, RasterThumbnailBrowserLoadThumbnailEventArgs e)
         {
            // If this is the first iteration, update the progress bar minimum and maximum values
            if(e.Index == 0)
            {
               progressBar.Minimum = 0;
               progressBar.Maximum = e.Total - 1;
            }

            // Update where we are in the loading operation
            progressBar.Value = e.Index;

            // Check if we need to cancel (due to the user clicking the Cancel button)
            if(cancelOperation)
               e.Cancel = true;
         }

         private void thumbnailBrowser_AddFile(object sender, RasterThumbnailBrowserAddFileEventArgs e)
         {
            Console.WriteLine("AddFile: {0}    Add: {1}", e.FileName, e.Add);
         }

         private void thumbnailBrowser_FinishedLoadingThumbnails(object sender, EventArgs e)
         {
            buttonCancel.Enabled = false;
         }

         private void buttonCancel_Click(object sender, EventArgs e)
         {
            // The user has clicked the cancel button
            this.cancelOperation = true;
         }

         // Create  custom images to use as the "error" and "loading" thumbnails.
         void CreateErrorThumbnail()
         {
            // Get the image size
            Size imageSize = theBrowser.ItemImageSize;

            // No "loading" thumbnail
            theBrowser.LoadingThumbnail = null;

            // For the "error" thumbnail, create a red X image
            RasterColor[] palette = new RasterColor[0];
            RasterImage image = new RasterImage(
               RasterMemoryFlags.Conventional,
               imageSize.Width,
               imageSize.Height,
               24,
               RasterByteOrder.Bgr,
               RasterViewPerspective.TopLeft,
            palette,
            IntPtr.Zero,
            0
            );

            IntPtr hdc = RasterImagePainter.CreateLeadDC(image);
            Graphics g = Graphics.FromHdc(hdc);

            g.FillRectangle(Brushes.Magenta, 0, 0, imageSize.Width, imageSize.Height);

            g.DrawLine(Pens.Red, 0, 0, imageSize.Width, imageSize.Height);
            g.DrawLine(Pens.Red, imageSize.Width, 0, 0, imageSize.Height);

            g.Dispose();
            RasterImagePainter.DeleteLeadDC(hdc);

            // Make this image transparent
            image.Transparent = true;
            image.TransparentColor = RasterColor.FromKnownColor(RasterKnownColor.Magenta);

            theBrowser.ErrorThumbnail = image;
         }

         public void Cleanup()
         {
            buttonBrowse.Click -= new EventHandler(buttonBrowse_Click);
            buttonCancel.Click -= new EventHandler(buttonCancel_Click);
            theBrowser.LoadThumbnail -= new EventHandler&lt;RasterThumbnailBrowserLoadThumbnailEventArgs&gt;(thumbnailBrowser_LoadThumbnail);
            theBrowser.FinishedLoadingThumbnails -= new EventHandler(thumbnailBrowser_FinishedLoadingThumbnails);
         }

         public MyForm()
         {
            Size = new Size(300, 200);

            // create the browser
            theBrowser = new RasterThumbnailBrowser();
            theBrowser.Codecs = new RasterCodecs();
            theBrowser.Dock = DockStyle.Fill;
            theBrowser.ItemSpacingSize = new Size(10, 10);
            theBrowser.ThumbnailSizeFlags = RasterSizeFlags.Bicubic;
            theBrowser.LoadThumbnail += new EventHandler&lt;RasterThumbnailBrowserLoadThumbnailEventArgs&gt;(thumbnailBrowser_LoadThumbnail);
            theBrowser.FinishedLoadingThumbnails += new EventHandler(thumbnailBrowser_FinishedLoadingThumbnails);
            theBrowser.AddFile += new EventHandler&lt;RasterThumbnailBrowserAddFileEventArgs&gt;(thumbnailBrowser_AddFile);

            // Create a thumbnail image to be displayed on error
            CreateErrorThumbnail();

            // add a panel
            Panel panel = new Panel();
            panel.Dock = DockStyle.Left;
            panel.Width = 100;
            Controls.Add(panel);
            panel.BringToFront();

            // add a "browse" button
            buttonBrowse = new Button();
            buttonBrowse.Text = "Browse";
            buttonBrowse.Dock = DockStyle.Top;
            panel.Controls.Add(buttonBrowse);
            buttonBrowse.Click += new EventHandler(buttonBrowse_Click);

            // add a "cancel" button
            buttonCancel = new Button();
            buttonCancel.Text = "Cancel";
            buttonBrowse.Dock = DockStyle.Bottom;
            panel.Controls.Add(buttonCancel);
            buttonCancel.Click += new EventHandler(buttonCancel_Click);

            // add a progress bar
            progressBar = new ProgressBar();
            progressBar.Dock = DockStyle.Bottom;
            Controls.Add(progressBar);

            Controls.Add(theBrowser);
            theBrowser.BringToFront();
         }

         private void InitializeComponent()
         {
            this.SuspendLayout();
            // 
            // MyForm
            // 
            this.ClientSize = new System.Drawing.Size(315, 273);
            this.Name = "MyForm";
            this.ResumeLayout(false);

         }
      } 
      public void RasterThumbnailBrowser_RasterThumbnailBrowser()
      {
         MyForm form = new MyForm();
         form.ShowDialog();
         form.Cleanup();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--RasterThumbnailBrowser.RasterThumbnailBrowser-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterThumbnailBrowser.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser" /> class.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser" />.
            </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterThumbnailBrowser.Dispose(System.Boolean)">
      <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.Dispose(System.Boolean)">Control.Dispose</see>.
            </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterThumbnailBrowser.OnCodecsChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.CodecsChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
        <p>Raising an event invokes the event handler through a delegate.</p>
        <p>The <b>OnCodecsChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
        <p>
          <b>Notes to Inheritors:</b> When overriding <b>OnCodecsChanged</b> in a derived class, be sure to call
            the base class's <b>OnCodecsChanged</b> method so that registered delegates receive the event.</p>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterThumbnailBrowser.OnErrorThumbnailChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.ErrorThumbnailChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
        <p>Raising an event invokes the event handler through a delegate.</p>
        <p>The <b>OnErrorThumbnailChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
        <p>
          <b>Notes to Inheritors:</b> When overriding <b>OnErrorThumbnailChanged</b> in a derived class, be sure to call
            the base class's <b>OnErrorThumbnailChanged</b> method so that registered delegates receive the event.</p>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterThumbnailBrowser.OnLoadingThumbnailChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.LoadingThumbnailChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
        <p>Raising an event invokes the event handler through a delegate.</p>
        <p>The <b>OnLoadingThumbnailChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
        <p>
          <b>Notes to Inheritors:</b> When overriding <b>OnLoadingThumbnailChanged</b> in a derived class, be sure to call
            the base class's <b>OnLoadingThumbnailChanged</b> method so that registered delegates receive the event.</p>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterThumbnailBrowser.OnThumbnailSizeFlagsChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.ThumbnailSizeFlagsChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
        <p>Raising an event invokes the event handler through a delegate.</p>
        <p>The <b>OnThumbnailSizeFlagsChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
        <p>
          <b>Notes to Inheritors:</b> When overriding <b>OnThumbnailSizeFlagsChanged</b> in a derived class, be sure to call
            the base class's <b>OnThumbnailSizeFlagsChanged</b> method so that registered delegates receive the event.</p>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterThumbnailBrowser.OnLoadThumbnail(Leadtools.WinForms.RasterThumbnailBrowserLoadThumbnailEventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnail" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
        <p>Raising an event invokes the event handler through a delegate.</p>
        <p>The <b>OnLoadThumbnail</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
        <p>
          <b>Notes to Inheritors:</b> When overriding <b>OnLoadThumbnail</b> in a derived class, be sure to call
            the base class's <b>OnLoadThumbnail</b> method so that registered delegates receive the event.</p>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterThumbnailBrowser.CancelLoadingThumbnails">
      <summary>
            Cancels the load operation at any time.
            </summary>
      <remarks>
            You can call this method at any time to abort loading remaining thumbnails (if any).  Thumbnails are
            loaded with the <see cref="M:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnails(System.String,System.String,Leadtools.WinForms.RasterThumbnailBrowserLoadFlags)" /> method.  At any time, you can check if the control has any 
            items that are yet to be loaded with the <see cref="P:Leadtools.WinForms.RasterThumbnailBrowser.IsLoadingThumbnails" /> property.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser" />.
            </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnails(System.String,System.String,Leadtools.WinForms.RasterThumbnailBrowserLoadFlags)">
      <summary>
            Browses the specified directory for supported images, and generates thumbnails for each image file that is found.
            </summary>
      <param name="path">The directory to browse.</param>
      <param name="searchPattern">The search string to match against the names of files in <i>path</i>. The parameter cannot
            end in two periods ("..") or contain two periods ("..") followed by <see cref="F:System.IO.Path.DirectorySeparatorChar" /> or
            <see cref="F:System.IO.Path.AltDirectorySeparatorChar" />, nor can it contain any of the characters in
            <see cref="F:System.IO.Path.InvalidPathChars" />.</param>
      <param name="flags">An <see cref="T:Leadtools.WinForms.RasterThumbnailBrowserLoadFlags" /> enumeration that can be a combination of
            the following:
            <list type="table"><listheader><term>Value</term><description>Description</description></listheader><item><term><see cref="T:Leadtools.WinForms.RasterThumbnailBrowserLoadFlags">RasterThumbnailBrowserLoadFlags.None</see></term><description>Default mode, the method will return immediatly and the thumbnails are loaded in a
                 background thread.</description></item><item><term><see cref="T:Leadtools.WinForms.RasterThumbnailBrowserLoadFlags">RasterThumbnailBrowserLoadFlags.Block</see></term><description>The method will not return until all thumbnails are loaded.</description></item><item><term><see cref="T:Leadtools.WinForms.RasterThumbnailBrowserLoadFlags">RasterThumbnailBrowserLoadFlags.OnlyValidImageFiles</see></term><description>Only valid image files are loaded.  Any file that contains data not recognized by the 
                 <see cref="P:Leadtools.WinForms.RasterThumbnailBrowser.Codecs" /> object as a valid image file will not be loaded.</description></item></list></param>
      <remarks>
        <p>Use the <see cref="M:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnails(System.String,System.String,Leadtools.WinForms.RasterThumbnailBrowserLoadFlags)" /> method to populate the <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser" /> control
            with the thumbnails of image files found in the directory specified by <i>path</i>.  The control will load the
            images in the following manner:
            <list type="bullet"><item><description>
              All items already in control are cleared.
              </description></item><item><description>
              The control will create an item for each file that matches <i>searchPattern</i>.
              </description></item><item><description>
              If <see cref="T:Leadtools.WinForms.RasterThumbnailBrowserLoadFlags">RasterThumbnailBrowserLoadFlags.OnlyValidImageFiles</see> is specified in
              <i>flags</i>, the control will use the <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformation(System.Uri,System.Boolean,System.Int32)" /> method of the
              <see cref="P:Leadtools.WinForms.RasterThumbnailBrowser.Codecs" /> object to check if the given file contains a valid image or not.  If it does not, no item
              will be created for this file.</description></item><item><description>The control fills the <see cref="P:Leadtools.WinForms.RasterImageListItem.FileName" /> property of the item with
              the name of the file found, <see cref="P:Leadtools.WinForms.RasterImageListItem.Page" /> will be set to 1,
              <see cref="P:Leadtools.WinForms.RasterImageListItem.Text" /> with file name and extension of the specified file and
              <see cref="P:Leadtools.WinForms.RasterImageListItem.Image" /> with <see cref="P:Leadtools.WinForms.RasterThumbnailBrowser.LoadingThumbnail" />.
              If <see cref="T:Leadtools.WinForms.RasterThumbnailBrowserLoadFlags">RasterThumbnailBrowserLoadFlags.Block</see> is specified in <i>flags</i>, the
              control will then continue to load the thumbnails for all items before returning.  If
              <see cref="T:Leadtools.WinForms.RasterThumbnailBrowserLoadFlags">RasterThumbnailBrowserLoadFlags.Block</see> is not specified, the control will create a background
              thread to load the thumbnails for all the items and return control to the caller at this stage.
              </description></item><item><description>
              The control will raise the <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnail" /> event for each item before it creates the thumbnail
              for it.  You can use this event to update a progress bar, cancel the operation or load the thumbnail yourself.
              </description></item><item><description>
              If the non-blocking loading operation is specified, you can check the <see cref="P:Leadtools.WinForms.RasterThumbnailBrowser.IsLoadingThumbnails" /> at 
              any time to determine whether the control has more items to load.
              </description></item><item><description>
              The <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.FinishedLoadingThumbnails" /> event is raised by the control when the thumbnails of all items
              have been created.
              </description></item><item><description>
              The <see cref="M:Leadtools.WinForms.RasterThumbnailBrowser.CancelLoadingThumbnails" /> method can be called at any time to abort creating the thumbnails of all
              items.
              </description></item></list></p>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser" />.
            </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterThumbnailBrowser.OnAddFile(Leadtools.WinForms.RasterThumbnailBrowserAddFileEventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.AddFile" /> event.
            </summary>
      <param name="e">An <see cref="T:Leadtools.WinForms.RasterThumbnailBrowserAddFileEventArgs" /> that contains the event data.</param>
      <remarks>
        <p>Raising an event invokes the event handler through a delegate.</p>
        <p>The <b>OnAddFile</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
        <p>
          <b>Notes to Inheritors:</b> When overriding <b>OnAddFile</b> in a derived class, be sure to call
            the base class's <b>OnFinishedLoadingThumbnails</b> method so that registered delegates receive the event.</p>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterThumbnailBrowser.OnFinishedLoadingThumbnails(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.FinishedLoadingThumbnails" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
        <p>Raising an event invokes the event handler through a delegate.</p>
        <p>The <b>OnFinishedLoadingThumbnails</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
        <p>
          <b>Notes to Inheritors:</b> When overriding <b>OnFinishedLoadingThumbnails</b> in a derived class, be sure to call
            the base class's <b>OnFinishedLoadingThumbnails</b> method so that registered delegates receive the event.</p>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnails(System.Collections.Generic.IEnumerable{System.String},System.String,Leadtools.WinForms.RasterThumbnailBrowserLoadFlags)">
      <summary>
            Browses the specified paths for supported images, and generates thumbnails for each image file that is found.
            </summary>
      <param name="paths">The paths to browse. This can be a directories and files.</param>
      <param name="searchPattern">The search string to match against the names of files in <i>path</i>. The parameter cannot
            end in two periods ("..") or contain two periods ("..") followed by <see cref="F:System.IO.Path.DirectorySeparatorChar" /> or
            <see cref="F:System.IO.Path.AltDirectorySeparatorChar" />, nor can it contain any of the characters in
            <see cref="F:System.IO.Path.InvalidPathChars" />.</param>
      <param name="flags">An <see cref="T:Leadtools.WinForms.RasterThumbnailBrowserLoadFlags" /> enumeration that can be a combination of
            the following:
            <list type="table"><listheader><term>Value</term><description>Description</description></listheader><item><term><see cref="T:Leadtools.WinForms.RasterThumbnailBrowserLoadFlags">RasterThumbnailBrowserLoadFlags.None</see></term><description>Default mode, the method will return immediatly and the thumbnails are loaded in a
                 background thread.</description></item><item><term><see cref="T:Leadtools.WinForms.RasterThumbnailBrowserLoadFlags">RasterThumbnailBrowserLoadFlags.Block</see></term><description>The method will not return until all thumbnails are loaded.</description></item><item><term><see cref="T:Leadtools.WinForms.RasterThumbnailBrowserLoadFlags">RasterThumbnailBrowserLoadFlags.OnlyValidImageFiles</see></term><description>Only valid image files are loaded.  Any file that contains data not recognized by the 
                 <see cref="P:Leadtools.WinForms.RasterThumbnailBrowser.Codecs" /> object as a valid image file will not be loaded.</description></item></list></param>
      <remarks>
        <p>Use the <see cref="M:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnails(System.String,System.String,Leadtools.WinForms.RasterThumbnailBrowserLoadFlags)" /> method to populate the <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser" /> control
            with the thumbnails of image files found in the directory specified by <i>path</i>. The control will load the
            images in the following manner:
            <list type="bullet"><item><description>
              All items already in control are cleared.
              </description></item><item><description>
              The control will create an item for each file that matches <i>searchPattern</i>.
              </description></item><item><description>
              If <see cref="T:Leadtools.WinForms.RasterThumbnailBrowserLoadFlags">RasterThumbnailBrowserLoadFlags.OnlyValidImageFiles</see> is specified in
              <i>flags</i>, the control will use the <see cref="M:Leadtools.Codecs.RasterCodecs.GetInformation(System.Uri,System.Boolean,System.Int32)" /> method of the
              <see cref="P:Leadtools.WinForms.RasterThumbnailBrowser.Codecs" /> object to check if the given file contains a valid image or not.  If it does not, no item
              will be created for this file.</description></item><item><description>The control fills the <see cref="P:Leadtools.WinForms.RasterImageListItem.FileName" /> property of the item with
              the name of the file found, <see cref="P:Leadtools.WinForms.RasterImageListItem.Page" /> will be set to 1,
              <see cref="P:Leadtools.WinForms.RasterImageListItem.Text" /> with file name and extension of the specified file and
              <see cref="P:Leadtools.WinForms.RasterImageListItem.Image" /> with <see cref="P:Leadtools.WinForms.RasterThumbnailBrowser.LoadingThumbnail" />.
              If <see cref="T:Leadtools.WinForms.RasterThumbnailBrowserLoadFlags">RasterThumbnailBrowserLoadFlags.Block</see> is specified in <i>flags</i>, the
              control will then continue to load the thumbnails for all items before returning.  If
              <see cref="T:Leadtools.WinForms.RasterThumbnailBrowserLoadFlags">RasterThumbnailBrowserLoadFlags.Block</see> is not specified, the control will create a background
              thread to load the thumbnails for all the items and return control to the caller at this stage.
              </description></item><item><description>
              The control will raise the <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnail" /> event for each item before it creates the thumbnail
              for it.  You can use this event to update a progress bar, cancel the operation or load the thumbnail yourself.
              </description></item><item><description>
              If the non-blocking loading operation is specified, you can check the <see cref="P:Leadtools.WinForms.RasterThumbnailBrowser.IsLoadingThumbnails" /> at 
              any time to determine whether the control has more items to load.
              </description></item><item><description>
              The <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.FinishedLoadingThumbnails" /> event is raised by the control when the thumbnails of all items
              have been created.
              </description></item><item><description>
              The <see cref="M:Leadtools.WinForms.RasterThumbnailBrowser.CancelLoadingThumbnails" /> method can be called at any time to abort creating the thumbnails of all
              items.
              </description></item></list></p>
      </remarks>
      <example>
        <code lang="VB">      Private Class MyForm2 : Inherits Form
         Public theBrowser As RasterThumbnailBrowser
         Public cancelOperation As Boolean ' Informs us if the user canceled the operation
         Public buttonCancel As Button ' Cancel browse loading
         Public buttonBrowse As Button ' Diplays the browse control
         Public progressBar As ProgressBar ' shows progress of loading browse images
         Private Sub buttonBrowse_Click(ByVal sender As Object, ByVal e As EventArgs)
            ' If we are already loading thumbails, cancel
            ' this operation
            If theBrowser.IsLoadingThumbnails Then
               theBrowser.CancelLoadingThumbnails()
            End If

            ' Clean all the items
            theBrowser.Items.Clear()

            ' Update the application state
            buttonCancel.Enabled = True
            progressBar.Value = 0

            ' And load the new thumbnails
            cancelOperation = False

            Dim folderPath As String = LEAD_VARS.ImagesDir
            Dim files As String() = New String(1) {Path.Combine(folderPath, "\image1.jpx"), folderPath}
            theBrowser.LoadThumbnails(files, "*.jpg", RasterThumbnailBrowserLoadFlags.Block Or RasterThumbnailBrowserLoadFlags.ExpandMultiPageFile)
         End Sub

         Private Sub thumbnailBrowser_LoadThumbnail(ByVal sender As Object, ByVal e As RasterThumbnailBrowserLoadThumbnailEventArgs)
            ' If this is the first iteration, update the progress bar minimum and maximum values
            If e.Index = 0 Then
               progressBar.Minimum = 0
               progressBar.Maximum = e.Total - 1
            End If

            ' Update where we are in the loading operation
            progressBar.Value = e.Index

            ' Check if we need to cancel (due to the user clicking the Cancel button)
            If cancelOperation Then
               e.Cancel = True
            End If
         End Sub

         Private Sub thumbnailBrowser_AddFile(ByVal sender As Object, ByVal e As RasterThumbnailBrowserAddFileEventArgs)
            Console.WriteLine("AddFile: {0}    Add: {1} Total Pages: {2} Page:{3}", e.FileName, e.Add, e.TotalPages, e.Page)
         End Sub

         Private Sub thumbnailBrowser_FinishedLoadingThumbnails(ByVal sender As Object, ByVal e As EventArgs)
            buttonCancel.Enabled = False
         End Sub

         Private Sub buttonCancel_Click(ByVal sender As Object, ByVal e As EventArgs)
            ' The user has clicked the cancel button
            Me.cancelOperation = True
         End Sub

         ' Create  custom images to use as the "error" and "loading" thumbnails.
         Private Sub CreateErrorThumbnail()
            ' Get the image size
            Dim imageSize As Size = theBrowser.ItemImageSize

            ' No "loading" thumbnail
            theBrowser.LoadingThumbnail = Nothing

            ' For the "error" thumbnail, create a red X image
            Dim palette As RasterColor() = New RasterColor() {}
            Dim image As RasterImage = New RasterImage(RasterMemoryFlags.Conventional, imageSize.Width, imageSize.Height, 24, RasterByteOrder.Bgr, _
                                                       RasterViewPerspective.TopLeft, palette, IntPtr.Zero, 0)

            Dim hdc As IntPtr = RasterImagePainter.CreateLeadDC(image)
            Dim g As Graphics = Graphics.FromHdc(hdc)

            g.FillRectangle(Brushes.Magenta, 0, 0, imageSize.Width, imageSize.Height)

            g.DrawLine(Pens.Red, 0, 0, imageSize.Width, imageSize.Height)
            g.DrawLine(Pens.Red, imageSize.Width, 0, 0, imageSize.Height)

            g.Dispose()
            RasterImagePainter.DeleteLeadDC(hdc)

            ' Make this image transparent
            image.Transparent = True
            image.TransparentColor = RasterColor.FromKnownColor(RasterKnownColor.Magenta)

            theBrowser.ErrorThumbnail = image
         End Sub

         Public Sub Cleanup()
            RemoveHandler buttonBrowse.Click, AddressOf buttonBrowse_Click
            RemoveHandler buttonCancel.Click, AddressOf buttonCancel_Click
            RemoveHandler theBrowser.LoadThumbnail, AddressOf thumbnailBrowser_LoadThumbnail
            RemoveHandler theBrowser.FinishedLoadingThumbnails, AddressOf thumbnailBrowser_FinishedLoadingThumbnails
         End Sub

         Public Sub New()
            Size = New Size(300, 200)

            ' create the browser
            theBrowser = New RasterThumbnailBrowser()
            theBrowser.Codecs = New RasterCodecs()
            theBrowser.Dock = DockStyle.Fill
            theBrowser.ItemSpacingSize = New Size(10, 10)
            theBrowser.ThumbnailSizeFlags = RasterSizeFlags.Bicubic
            AddHandler theBrowser.LoadThumbnail, AddressOf thumbnailBrowser_LoadThumbnail
            AddHandler theBrowser.FinishedLoadingThumbnails, AddressOf thumbnailBrowser_FinishedLoadingThumbnails
            AddHandler theBrowser.AddFile, AddressOf thumbnailBrowser_AddFile

            ' Create a thumbnail image to be displayed on error
            CreateErrorThumbnail()

            ' add a panel
            Dim panel As Panel = New Panel()
            panel.Dock = DockStyle.Left
            panel.Width = 100
            Controls.Add(panel)
            panel.BringToFront()

            ' add a "browse" button
            buttonBrowse = New Button()
            buttonBrowse.Text = "Browse"
            buttonBrowse.Dock = DockStyle.Top
            panel.Controls.Add(buttonBrowse)
            AddHandler buttonBrowse.Click, AddressOf buttonBrowse_Click

            ' add a "cancel" button
            buttonCancel = New Button()
            buttonCancel.Text = "Cancel"
            buttonBrowse.Dock = DockStyle.Bottom
            panel.Controls.Add(buttonCancel)
            AddHandler buttonCancel.Click, AddressOf buttonCancel_Click

            ' add a progress bar
            progressBar = New ProgressBar()
            progressBar.Dock = DockStyle.Bottom
            Controls.Add(progressBar)

            Controls.Add(theBrowser)
            theBrowser.BringToFront()
         End Sub

         Private Sub InitializeComponent()
            Me.SuspendLayout()
            ' 
            ' MyForm
            ' 
            Me.ClientSize = New System.Drawing.Size(315, 273)
            Me.Name = "MyForm"
            Me.ResumeLayout(False)

         End Sub
      End Class
      Public Sub RasterThumbnailBrowser_RasterThumbnailBrowser()
         Dim form As MyForm = New MyForm()
         form.ShowDialog()
         form.Cleanup()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MyForm2 : Form
      {
         public RasterThumbnailBrowser theBrowser;
         public bool cancelOperation;        // Informs us if the user canceled the operation
         public Button buttonCancel;         // Cancel browse loading
         public Button buttonBrowse;         // Diplays the browse control
         public ProgressBar progressBar;     // shows progress of loading browse images
         void buttonBrowse_Click(object sender, EventArgs e)
         {
            // If we are already loading thumbails, cancel
            // this operation
            if (theBrowser.IsLoadingThumbnails)
               theBrowser.CancelLoadingThumbnails();

            // Clean all the items
            theBrowser.Items.Clear();

            // Update the application state
            buttonCancel.Enabled = true;
            progressBar.Value = 0;

            // And load the new thumbnails
            cancelOperation = false;

            string folderPath = LEAD_VARS.ImagesDir;
            string[] files = new string[2] { Path.Combine(folderPath , "\\image1.jpx"), folderPath };
            theBrowser.LoadThumbnails(files, "*.jpg", RasterThumbnailBrowserLoadFlags.Block | RasterThumbnailBrowserLoadFlags.ExpandMultiPageFile);
         }

         private void thumbnailBrowser_LoadThumbnail(object sender, RasterThumbnailBrowserLoadThumbnailEventArgs e)
         {
            // If this is the first iteration, update the progress bar minimum and maximum values
            if (e.Index == 0)
            {
               progressBar.Minimum = 0;
               progressBar.Maximum = e.Total - 1;
            }

            // Update where we are in the loading operation
            progressBar.Value = e.Index;

            // Check if we need to cancel (due to the user clicking the Cancel button)
            if (cancelOperation)
               e.Cancel = true;
         }

         private void thumbnailBrowser_AddFile(object sender, RasterThumbnailBrowserAddFileEventArgs e)
         {
            Console.WriteLine("AddFile: {0}    Add: {1} Total Pages : {2} Page : {3}", e.FileName, e.Add, e.TotalPages, e.Page);
         }

         private void thumbnailBrowser_FinishedLoadingThumbnails(object sender, EventArgs e)
         {
            buttonCancel.Enabled = false;
         }

         private void buttonCancel_Click(object sender, EventArgs e)
         {
            // The user has clicked the cancel button
            this.cancelOperation = true;
         }

         // Create  custom images to use as the "error" and "loading" thumbnails.
         void CreateErrorThumbnail()
         {
            // Get the image size
            Size imageSize = theBrowser.ItemImageSize;

            // No "loading" thumbnail
            theBrowser.LoadingThumbnail = null;

            // For the "error" thumbnail, create a red X image
            RasterColor[] palette = new RasterColor[0];
            RasterImage image = new RasterImage(
               RasterMemoryFlags.Conventional,
               imageSize.Width,
               imageSize.Height,
               24,
               RasterByteOrder.Bgr,
               RasterViewPerspective.TopLeft,
            palette,
            IntPtr.Zero,
            0
            );

            IntPtr hdc = RasterImagePainter.CreateLeadDC(image);
            Graphics g = Graphics.FromHdc(hdc);

            g.FillRectangle(Brushes.Magenta, 0, 0, imageSize.Width, imageSize.Height);

            g.DrawLine(Pens.Red, 0, 0, imageSize.Width, imageSize.Height);
            g.DrawLine(Pens.Red, imageSize.Width, 0, 0, imageSize.Height);

            g.Dispose();
            RasterImagePainter.DeleteLeadDC(hdc);

            // Make this image transparent
            image.Transparent = true;
            image.TransparentColor = RasterColor.FromKnownColor(RasterKnownColor.Magenta);

            theBrowser.ErrorThumbnail = image;
         }

         public void Cleanup()
         {
            buttonBrowse.Click -= new EventHandler(buttonBrowse_Click);
            buttonCancel.Click -= new EventHandler(buttonCancel_Click);
            theBrowser.LoadThumbnail -= new EventHandler&lt;RasterThumbnailBrowserLoadThumbnailEventArgs&gt;(thumbnailBrowser_LoadThumbnail);
            theBrowser.FinishedLoadingThumbnails -= new EventHandler(thumbnailBrowser_FinishedLoadingThumbnails);
         }

         public MyForm2()
         {
            Size = new Size(300, 200);

            // create the browser
            theBrowser = new RasterThumbnailBrowser();
            theBrowser.Codecs = new RasterCodecs();
            theBrowser.Dock = DockStyle.Fill;
            theBrowser.ItemSpacingSize = new Size(10, 10);
            theBrowser.ThumbnailSizeFlags = RasterSizeFlags.Bicubic;
            theBrowser.LoadThumbnail += new EventHandler&lt;RasterThumbnailBrowserLoadThumbnailEventArgs&gt;(thumbnailBrowser_LoadThumbnail);
            theBrowser.FinishedLoadingThumbnails += new EventHandler(thumbnailBrowser_FinishedLoadingThumbnails);
            theBrowser.AddFile += new EventHandler&lt;RasterThumbnailBrowserAddFileEventArgs&gt;(thumbnailBrowser_AddFile);

            // Create a thumbnail image to be displayed on error
            CreateErrorThumbnail();

            // add a panel
            Panel panel = new Panel();
            panel.Dock = DockStyle.Left;
            panel.Width = 100;
            Controls.Add(panel);
            panel.BringToFront();

            // add a "browse" button
            buttonBrowse = new Button();
            buttonBrowse.Text = "Browse";
            buttonBrowse.Dock = DockStyle.Top;
            panel.Controls.Add(buttonBrowse);
            buttonBrowse.Click += new EventHandler(buttonBrowse_Click);

            // add a "cancel" button
            buttonCancel = new Button();
            buttonCancel.Text = "Cancel";
            buttonBrowse.Dock = DockStyle.Bottom;
            panel.Controls.Add(buttonCancel);
            buttonCancel.Click += new EventHandler(buttonCancel_Click);

            // add a progress bar
            progressBar = new ProgressBar();
            progressBar.Dock = DockStyle.Bottom;
            Controls.Add(progressBar);

            Controls.Add(theBrowser);
            theBrowser.BringToFront();
         }

         private void InitializeComponent()
         {
            this.SuspendLayout();
            // 
            // MyForm
            // 
            this.ClientSize = new System.Drawing.Size(315, 273);
            this.Name = "MyForm";
            this.ResumeLayout(false);

         }
      }

      public void RasterThumbnailBrowser_LoadThumbnails2()
      {
         MyForm form = new MyForm();
         form.ShowDialog();
         form.Cleanup();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--RasterThumbnailBrowser.LoadThumbnails(IEnumerable<string> , string, RasterThumbnailBrowserLoadFlags)-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterThumbnailBrowser.Refresh">
      <summary>
            Refresh loading thumbnails and generates new thumbnails for new files and remove thumbnails for deleted files
            </summary>
      <remarks>
            This method will refresh loading thumbnails for the paths that specified in <see cref="M:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnails(System.String,System.String,Leadtools.WinForms.RasterThumbnailBrowserLoadFlags)" /> method, 
            this method will generate new thumbnails and remove thumbnails for deleted files.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser" />.
            </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterThumbnailBrowser.OnRenamed(System.Object,System.IO.RenamedEventArgs)">
      <summary>
            Fire the <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.WatcherRenamed" /> event
            </summary>
      <param name="sender">The sender</param>
      <param name="e">A RenamedEventArgs that contains the event data</param>
      <remarks>
            OnRenamed is called when a file or directory within the directory being monitored is renamed.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterThumbnailBrowser.OnChanged(System.Object,System.IO.FileSystemEventArgs)">
      <summary>
            Fire the <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.WatcherChanged" /> event
            </summary>
      <param name="sender">The sender</param>
      <param name="e">A FileSystemEventArgs that contains the event data</param>
      <remarks>
            OnChanged is called when changes are made to the size, system attributes, last write time, last access time, or security permissions of a file or directory in the directory being monitored.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterThumbnailBrowser.OnRefreshStatus(System.Object,System.IO.FileSystemEventArgs)">
      <summary>
            Fire the <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.RefreshStatus" /> event
            </summary>
      <param name="sender">The sender</param>
      <param name="e">A FileSystemEventArgs that contains the event data</param>
      <remarks>
            OnRefreshStatus is called when <see cref="M:Leadtools.WinForms.RasterThumbnailBrowser.Refresh" /> method called, Refresh method will add new thumbnail, update or delete, so for each operation that will be done using Refresh method, then OnRefreshStatus will be called to fire RefreshStatus event.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterThumbnailBrowser.Codecs">
      <summary>
            Gets or sets the <see cref="T:Leadtools.Codecs.RasterCodecs" /> object used to load the thumbnail images.
            </summary>
      <value>A <see cref="T:Leadtools.Codecs.RasterCodecs" /> object used to load the thumbnail images.  Default value is
            a null reference (Nothing in Visual Basic).</value>
      <remarks>
            The <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser" /> control automatically loads and creates thumbnails for the images found
            on the disk folder when the <see cref="M:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnails(System.String,System.String,Leadtools.WinForms.RasterThumbnailBrowserLoadFlags)" /> method is called.  You need to set the <b>Codecs</b>
            property with an instance of the <see cref="T:Leadtools.Codecs.RasterCodecs" /> class to be used to load these images.  You can
            re-use the <see cref="T:Leadtools.Codecs.RasterCodecs" /> object that you are using in your main application.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser" />.
            </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterThumbnailBrowser.CodecsChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterThumbnailBrowser.Codecs" /> property changes.
            </summary>
      <remarks>
        <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterThumbnailBrowser.Codecs" /> property is changed by either a programmatic
            modification or user interaction.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterThumbnailBrowser.ErrorThumbnail">
      <summary>
            Gets or sets the image used to display items that could not be loaded.
            </summary>
      <keywords>ErrorThumbnail</keywords>
      <value>An <see cref="T:Leadtools.RasterImage" /> used to display items that could not be loaded.</value>
      <remarks>
        <p>During the loading operation as a result of calling the <see cref="M:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnails(System.String,System.String,Leadtools.WinForms.RasterThumbnailBrowserLoadFlags)" /> method, some of the files
            found in the folder may not be image files or are corrupted.  The <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser" /> control
            will assign the image set in the <b>ErrorThumbnail</b> property into the items that cannot be loaded.</p>
        <p>Initially, the value of the <b>ErrorThumbnail</b> property is initialized with an image loaded
            from the DLL resource.  You can however change the value of this property to your own custom image.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser" />.
            </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterThumbnailBrowser.ErrorThumbnailChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterThumbnailBrowser.ErrorThumbnail" /> property changes.
            </summary>
      <remarks>
        <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterThumbnailBrowser.ErrorThumbnail" /> property is changed by either a programmatic
            modification or user interaction.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterThumbnailBrowser.LoadingThumbnail">
      <summary>
            Gets or sets the image used to display items that have not yet been loaded.
            </summary>
      <value>An <see cref="T:Leadtools.RasterImage" /> used to display items that have not yet been loaded.</value>
      <remarks>
        <p>During the loading operation as a result of calling the <see cref="M:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnails(System.String,System.String,Leadtools.WinForms.RasterThumbnailBrowserLoadFlags)" /> method, the 
            <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser" /> control will create all the items and assign to them the image stored
            in the <b>LoadingThumbnail</b> property first before actually loading any thumbnails.  This will give a visual
            feedback to the user of which items have been loaded and which are not.</p>
        <p>Initially, the value of the <b>LoadingThumbnail</b> property is initialized with an image loaded
            from the DLL resource.  You can however change the value of this property to your own custom image.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterThumbnailBrowser.ErrorThumbnail" />.
            </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterThumbnailBrowser.LoadingThumbnailChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterThumbnailBrowser.LoadingThumbnail" /> property changes.
            </summary>
      <remarks>
        <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterThumbnailBrowser.LoadingThumbnail" /> property is changed by either a programmatic
            modification or user interaction.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterThumbnailBrowser.ThumbnailSizeFlags">
      <summary>
            Controls the quality of the thumbnail images created by the control.
            </summary>
      <value>A <see cref="T:Leadtools.RasterSizeFlags" /> enumeration that controls quality of the thumbnail images
            created by the control.</value>
      <remarks>
        <p>The <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser" /> control creates thumbnail for the images found as a result of
            calling the <see cref="M:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnails(System.String,System.String,Leadtools.WinForms.RasterThumbnailBrowserLoadFlags)" /> method. Some of these images might be larger than the
            <see cref="P:Leadtools.WinForms.RasterImageList.ItemImageSize" /> value, so the control will create a thumbnail of these images.
            You can control the speed and quality of the thumbnail creation operation by changing the
            <see cref="P:Leadtools.WinForms.RasterThumbnailBrowser.ThumbnailSizeFlags" /> property.  For example,
            <see cref="T:Leadtools.RasterSizeFlags">RasterSizeFlags.Normal</see> will result in the fastest thumbnail creation
            operation but with lower quality. <see cref="T:Leadtools.RasterSizeFlags">RasterSizeFlags.Bicubic</see> will result in very high quality
            thumbnails, but the process of creating these thumbnails is much slower.  Several other options are
            available, for more information, refer to the <see cref="T:Leadtools.RasterSizeFlags" /> enumeration.</p>
        <p>Important note: <see cref="T:Leadtools.RasterSizeFlags">RasterSizeFlags.FavorBlack</see> is not supported in loading
            image thumbnails.  If this flag is set, the <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser" /> control will use
            <see cref="T:Leadtools.RasterSizeFlags">RasterSizeFlags.Bicubic</see> instead.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser" />.
            </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterThumbnailBrowser.ThumbnailSizeFlagsChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterThumbnailBrowser.ThumbnailSizeFlags" /> property changes.
            </summary>
      <remarks>
        <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterThumbnailBrowser.ThumbnailSizeFlags" /> property is changed by either a programmatic
            modification or user interaction.</p>
      </remarks>
      <noexample />
    </member>
    <member name="E:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnail">
      <summary>
            Occurs when the control loads the thumbnail of an item.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser" />.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterThumbnailBrowser.IsLoadingThumbnails">
      <summary>
            Determines if the control is still loading thumbnails in the background.
            </summary>
      <value>
        <b>true</b> if the control is still loading thumbnails in the background; otherwise, false.</value>
      <remarks>
            When the <see cref="M:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnails(System.String,System.String,Leadtools.WinForms.RasterThumbnailBrowserLoadFlags)" /> method is called in a non-blocking manner, the thumbnails for the items
            will be created in a background thread.  You can check the <see cref="P:Leadtools.WinForms.RasterThumbnailBrowser.IsLoadingThumbnails" /> property at any
            time to determine whether the control is still loading thumbnails or not.  You can also use the
            <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.FinishedLoadingThumbnails" /> event to receive notification from the control when the loading
            operation is complete.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser" />.
            </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterThumbnailBrowser.AddFile">
      <summary>
            Occurs once for each image file loaded into the <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser" />.
            </summary>
      <remarks>
            This event is raised for each image file loaded.  Loading images is initiated by calling the <see cref="M:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnails(System.String,System.String,Leadtools.WinForms.RasterThumbnailBrowserLoadFlags)" /> method.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser" />.
            </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterThumbnailBrowser.FinishedLoadingThumbnails">
      <summary>
            Occurs when the loading operation finishes.
            </summary>
      <remarks>
        <p>This event is raised if when the loading operation (initiated by calling the <see cref="M:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnails(System.String,System.String,Leadtools.WinForms.RasterThumbnailBrowserLoadFlags)" /> method)
            is finished either due to all items being completely loaded or due to the user canceling the load operation.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser" />.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterThumbnailBrowser.EnableBroswerWatcher">
      <summary>
            Enable system watcher for the paths that specified when call <see cref="M:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnails(System.String,System.String,Leadtools.WinForms.RasterThumbnailBrowserLoadFlags)" /> method
            </summary>
      <value>true: enable system watcher, false: disable system watcher</value>
      <remarks>
            Enable this property will enable the system watcher and for any added/changed/deleted file in the specified path, 
            then a <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.WatcherChanged" /> event will be raised, for renaming current file in the specified path, 
            then then a <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.WatcherRenamed" /> event will be raised
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser" />.
            </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterThumbnailBrowser.WatcherRenamed">
      <summary>
            Occurs when a file or directory in the specified Path is renamed.
            </summary>
      <remarks>
            Renaming the directory you are watching will not raise a notification. Notifications are only raised for entries inside the directory you are watching.
            </remarks>
      <noexample />
    </member>
    <member name="E:Leadtools.WinForms.RasterThumbnailBrowser.WatcherChanged">
      <summary>
            Occurs when a file in the specified Path is changed or added
            </summary>
      <remarks>
            The Changed event is raised when changes are made to the size, system attributes, last write time, last access time, or security permissions of a file or directory in the directory being monitored.
            </remarks>
      <noexample />
    </member>
    <member name="E:Leadtools.WinForms.RasterThumbnailBrowser.RefreshStatus">
      <summary>
            Occurs when a file in the specified Path is changed or added
            </summary>
      <remarks>
            This event will be fired when call <see cref="M:Leadtools.WinForms.RasterThumbnailBrowser.Refresh" /> method, so for each new added file, changed file or deleted file then the event will be fired.
            </remarks>
      <noexample />
    </member>
    <member name="T:Leadtools.WinForms.RasterThumbnailBrowserAddFileEventArgs">
      <summary>
            Provides data for the <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.AddFile" /> event.
            </summary>
      <remarks>
            Use this class when handling the <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.AddFile" /> event.
            </remarks>
      <example>Refer to <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser" />.</example>
    </member>
    <member name="M:Leadtools.WinForms.RasterThumbnailBrowserAddFileEventArgs.#ctor(System.String)">
      <summary>
            Initializes a new RasterThumbnailBrowserAddFileEventArgs with default values.
            </summary>
      <param name="fileName">A <see cref="T:System.String" /> containing the file name of the item added.</param>
      <noremarks />
      <example>Refer to <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser" />.</example>
    </member>
    <member name="M:Leadtools.WinForms.RasterThumbnailBrowserAddFileEventArgs.#ctor(System.String,System.Int32,System.Int32)">
      <summary>
            Initializes a new RasterThumbnailBrowserAddFileEventArgs with explicit values.
            </summary>
      <param name="fileName">A <see cref="T:System.String" /> containing the file name of the item added.</param>
      <param name="totalPages">An <see cref="T:System.Int32" /> value that contains the total number of pages in the file that was just added.</param>
      <param name="page">An <see cref="T:System.Int32" /> value that contains the page number in the file that was just added.</param>
      <noremarks />
      <example>Refer to <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser" />.</example>
    </member>
    <member name="P:Leadtools.WinForms.RasterThumbnailBrowserAddFileEventArgs.FileName">
      <summary>
            Returns the file name that was just added to the <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser" />.
            </summary>
      <value>
            The file name that was just added to the <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser" />.
            </value>
      <noremarks />
      <example>Refer to <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser" />.</example>
    </member>
    <member name="P:Leadtools.WinForms.RasterThumbnailBrowserAddFileEventArgs.Add">
      <summary>
            Returns <b>true</b> if the file was successfully added to the <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser" />; false otherwise.
            </summary>
      <value>
        <b>true</b> if the file was successfully added to the <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser" />; false otherwise.
            </value>
      <noremarks />
      <example>Refer to <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser" />.</example>
    </member>
    <member name="P:Leadtools.WinForms.RasterThumbnailBrowserAddFileEventArgs.TotalPages">
      <summary>
            Return the total number of pages for the file that was just added to the <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser" />.
            </summary>
      <value>An <see cref="T:System.Int32" /> value that contains the total number of pages in the file that was just added.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnails(System.Collections.Generic.IEnumerable{System.String},System.String,Leadtools.WinForms.RasterThumbnailBrowserLoadFlags)"></see>.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterThumbnailBrowserAddFileEventArgs.Page">
      <summary>
            Return the page number for the file that was just added to the <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser" />.
            </summary>
      <value>An <see cref="T:System.Int32" /> value that contains the page number in the file that was just added.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="M:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnails(System.Collections.Generic.IEnumerable{System.String},System.String,Leadtools.WinForms.RasterThumbnailBrowserLoadFlags)"></see>.
            </example>
    </member>
    <member name="T:Leadtools.WinForms.RasterThumbnailBrowserLoadThumbnailEventArgs">
      <summary>
            Provides data for the
            <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnail">RasterThumbnailBrowser.LoadThumbnail</see> event.
            </summary>
      <remarks>
        <para>
                    The
                    <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnail">RasterThumbnailBrowser.LoadThumbnail</see>
                    event is raised for each item found as a result of calling the
                    <see cref="M:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnails(System.String,System.String,Leadtools.WinForms.RasterThumbnailBrowserLoadFlags)">RasterThumbnailBrowser.LoadThumbnails</see>
                    method.
                </para>
        <para>
          <b>RasterThumbnailBrowserLoadThumbnailEventArgs</b> contains the
                    <see cref="P:Leadtools.WinForms.RasterThumbnailBrowserLoadThumbnailEventArgs.FileName" />
                    property that will hold the physical path to the item being loaded. Use this
                    property to manually load the image. Set it using the
                    <see cref="P:Leadtools.WinForms.RasterThumbnailBrowserLoadThumbnailEventArgs.Image" /> property.
                </para>
        <para>
                    The <see cref="P:Leadtools.WinForms.RasterThumbnailBrowserLoadThumbnailEventArgs.Index" /> and
                    <see cref="P:Leadtools.WinForms.RasterThumbnailBrowserLoadThumbnailEventArgs.Total" />
                    properties gives you an indication of how far the loading process has
                    progressed. Use this information to update a progress bar for the user.
                </para>
        <para>
                    The <see cref="P:Leadtools.WinForms.RasterThumbnailBrowserLoadThumbnailEventArgs.Cancel" />
                    property lets you abort the loading process at anytime (for example, due to the
                    user clicking the cancel button.)
                </para>
      </remarks>
      <example>
            For an example, refer to <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnail">RasterThumbnailBrowser.LoadThumbnail</see>.
            </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterThumbnailBrowserLoadThumbnailEventArgs.#ctor(Leadtools.WinForms.RasterImageListItem,System.String,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.WinForms.RasterThumbnailBrowserLoadThumbnailEventArgs" /> class with the
            given values.
            </summary>
      <param name="item">The item to load.</param>
      <param name="fileName">The physical path to the file to load.</param>
      <param name="index">A zero-based integer that specifies the current position in number of items to load.</param>
      <param name="total">An integer value that represents the total number of items to load.</param>
      <remarks>
            This constructor is meant to be called internally from the LEADTOOLS for .NET framework.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterThumbnailBrowserLoadThumbnailEventArgs.#ctor(Leadtools.WinForms.RasterImageListItem,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.WinForms.RasterThumbnailBrowserLoadThumbnailEventArgs" /> class with the
            given values.
            </summary>
      <param name="item">The item to load.</param>
      <param name="fileName">The physical path to the file to load.</param>
      <param name="index">A zero-based integer that specifies the current position in number of items to load.</param>
      <param name="total">An integer value that represents the total number of items to load.</param>
      <param name="page">An integer value that contains the page number in the file to load.</param>
      <param name="totalPages">An integer value that contains the total number of pages in the file to load.</param>
      <remarks>
            This constructor is meant to be called internally from the LEADTOOLS for .NET framework.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterThumbnailBrowserLoadThumbnailEventArgs.FileName">
      <summary>
            The physical path to the file to load.
            </summary>
      <value>A <see cref="T:System.String" /> that contains the physical path to the file to load.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnail">RasterThumbnailBrowser.LoadThumbnail</see>.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterThumbnailBrowserLoadThumbnailEventArgs.Index">
      <summary>
            A zero-based integer that specifies the current position in number of items to load.
            </summary>
      <value>The zero-based integer that specifies the current position in number of items to load.</value>
      <remarks>
            You can use the <b>Index</b> and the <see cref="P:Leadtools.WinForms.RasterThumbnailBrowserLoadThumbnailEventArgs.Total" /> properties to update a progress bar for the load 
            process.  You need to set up the progress bar with the following:
            <list type="table"><listheader><term>Property</term><description>Value</description></listheader><item><term><see cref="P:System.Windows.Forms.ProgressBar.Minimum">ProgressBar.Minimum</see></term><description>0 - You only need to set this the first time.</description></item><item><term><see cref="P:System.Windows.Forms.ProgressBar.Maximum">ProgressBar.Maximum</see></term><description><see cref="P:Leadtools.WinForms.RasterThumbnailBrowserLoadThumbnailEventArgs.Total" /> - You only need to set this the first time.</description></item><item><term><see cref="P:System.Windows.Forms.ProgressBar.Value">ProgressBar.Value</see></term><description><b>Index</b></description></item></list></remarks>
      <example>
            For an example, refer to <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnail">RasterThumbnailBrowser.LoadThumbnail</see>.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterThumbnailBrowserLoadThumbnailEventArgs.Total">
      <summary>
            An integer value that represents the total number of items to load.
            </summary>
      <value>The total number of items to load.</value>
      <remarks>
            You can use the <see cref="P:Leadtools.WinForms.RasterThumbnailBrowserLoadThumbnailEventArgs.Index" /> and the <b>Total</b> properties to update a progress bar for the load 
            process.  You need to setup the progress bar with the following:
            <list type="table"><listheader><term>Property</term><description>Value</description></listheader><item><term><see cref="P:System.Windows.Forms.ProgressBar.Minimum">ProgressBar.Minimum</see></term><description>0 - You only need to set this the first time</description></item><item><term><see cref="P:System.Windows.Forms.ProgressBar.Maximum">ProgressBar.Maximum</see></term><description><b>Total</b> - You only need to set this the first time</description></item><item><term><see cref="P:System.Windows.Forms.ProgressBar.Value">ProgressBar.Value</see></term><description><see cref="P:Leadtools.WinForms.RasterThumbnailBrowserLoadThumbnailEventArgs.Index" /></description></item></list></remarks>
      <example>
            For an example, refer to <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnail">RasterThumbnailBrowser.LoadThumbnail</see>.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterThumbnailBrowserLoadThumbnailEventArgs.Image">
      <summary>
            The image thumbnail to load.
            </summary>
      <value>An <see cref="T:Leadtools.RasterImage" /> object of the item.</value>
      <remarks>
            The <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser" /> object fires the
            <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnail">RasterThumbnailBrowser.LoadThumbnail</see> once for each file
            found. Initially, the <b>Image</b> value of the <see cref="T:Leadtools.WinForms.RasterThumbnailBrowserLoadThumbnailEventArgs" /> event
            data will be set to a null reference (Nothing in Visual Basic).  If you decide to manually load the image
            yourself, you can set the object that you load in the <b>Image</b> property. 
            The <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser" /> object will check if the <b>Image</b> if still a null reference
            (Nothing in Visual Basic), and will only load the image if it is not.
            </remarks>
      <example>
            For an example, refer to <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnail">RasterThumbnailBrowser.LoadThumbnail</see>.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterThumbnailBrowserLoadThumbnailEventArgs.Cancel">
      <summary>
            Gets or sets a value indicating whether the loading event should be canceled.
            </summary>
      <value>
        <b>true</b> if the loading event should be canceled; otherwise, <b>false</b>.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="E:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnail">RasterThumbnailBrowser.LoadThumbnail</see>.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterThumbnailBrowserLoadThumbnailEventArgs.TotalPages">
      <summary>
            The total number of pages in the file to load.
            </summary>
      <value>An <see cref="T:System.String" /> value that contains the total number of pages in the file to load.</value>
      <noremarks />
      <example>
            For an example, refer to 
            <see cref="M:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnails(System.String,System.String,Leadtools.WinForms.RasterThumbnailBrowserLoadFlags)"></see>.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterThumbnailBrowserLoadThumbnailEventArgs.Page">
      <summary>
            The page number in the file to load.
            </summary>
      <value>An <see cref="T:System.Int32" /> value that contains the page number in the file to load.</value>
      <noremarks />
      <example>
            For an example, refer to 
            <see cref="M:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnails(System.String,System.String,Leadtools.WinForms.RasterThumbnailBrowserLoadFlags)"></see>.
            </example>
    </member>
    <member name="T:Leadtools.WinForms.RasterPictureBoxAnimationMode">
      <summary>
            Values for the <see cref="P:Leadtools.WinForms.RasterPictureBox.AnimationMode" /> property.
            </summary>
      <remarks>
            The <see cref="P:Leadtools.WinForms.RasterPictureBox.AnimationMode" /> property controls user interaction with the control's display.
            </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.WinForms.RasterPictureBoxAnimationMode.UseImageGlobalLoop">
      <summary>
            Use the
            <a href="ms-xhelp:///?id=Leadtools~Leadtools.RasterImage~AnimationGlobalLoop">
            Leadtools.RasterImage.AnimationGlobalLoop</a> property when playing GIF files. The
            AnimationGlobalLoop property specifies whether the animation should not loop (no
            animation), loop continuously, or loop for N times.
            </summary>
    </member>
    <member name="F:Leadtools.WinForms.RasterPictureBoxAnimationMode.Infinite">
      <summary>
            Play GIF files in a continuous loop.
            </summary>
    </member>
    <member name="T:Leadtools.WinForms.ViewerBorderPadding">
      <summary>
            Determines the border padding for Leadtools ImageViewer controls.
            </summary>
      <noremarks />
      <example>
        <code lang="VB">      Public Sub ViewerBorderPaddingExample(ByVal viewer As RasterImageViewer)
         If (viewer.IsImageAvailable) Then
            AddHandler viewer.BorderPadding.Changed, AddressOf BorderPadding_Changed
            viewer.BorderPadding.All = 0
            Dim viewerWidth As Integer = viewer.Right - viewer.Left
            Dim viewerHeight As Integer = viewer.Bottom - viewer.Top
            Dim imageWidth As Integer = viewer.Image.Width
            Dim imageHeight As Integer = viewer.Image.Height

            If (imageWidth &lt; viewerWidth) Then
               viewer.BorderPadding.Left = (viewerWidth - imageWidth) \ 2
               viewer.BorderPadding.Right = 0
            End If

            If (imageHeight &lt; viewerHeight) Then
               viewer.BorderPadding.Top = (viewerHeight - imageHeight) \ 2
               viewer.BorderPadding.Bottom = 0
            End If
            RemoveHandler viewer.BorderPadding.Changed, AddressOf BorderPadding_Changed
         End If
      End Sub

      Private Sub BorderPadding_Changed(ByVal sender As Object, ByVal e As EventArgs)
         Console.WriteLine("BorderPadding Changed")
      End Sub</code>
        <code lang="CS">      public void ViewerBorderPaddingExample(RasterImageViewer viewer)
      {
         if(viewer.IsImageAvailable)
         {
            viewer.BorderPadding.Changed += new EventHandler(BorderPadding_Changed);
            viewer.BorderPadding.All = 0;
            int viewerWidth = viewer.Right - viewer.Left;
            int viewerHeight = viewer.Bottom - viewer.Top;
            int imageWidth = viewer.Image.Width;
            int imageHeight = viewer.Image.Height;

            if(imageWidth &lt; viewerWidth)
            {
               viewer.BorderPadding.Left = (viewerWidth - imageWidth) / 2;
               viewer.BorderPadding.Right = 0;
            }

            if(imageHeight &lt; viewerHeight)
            {
               viewer.BorderPadding.Top = (viewerHeight - imageHeight) / 2;
               viewer.BorderPadding.Bottom = 0;
            }

            viewer.BorderPadding.Changed -= new EventHandler(BorderPadding_Changed);
         }
      }

      private void BorderPadding_Changed(System.Object sender, EventArgs e)
      {
         Console.WriteLine("BorderPadding Changed");
      }</code>
        <!--ViewerBorderPadding.ViewerBorderPadding-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.ViewerBorderPadding.#ctor">
      <summary>
            Initializes a new ViewerBorderPadding with default parameters.
            </summary>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.WinForms.ViewerBorderPadding" />.</example>
    </member>
    <member name="M:Leadtools.WinForms.ViewerBorderPadding.Clone">
      <summary>
            Creates another object that contains the same state as the current one.<br /></summary>
      <returns>The new object.</returns>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.WinForms.ViewerBorderPadding" />.</example>
    </member>
    <member name="E:Leadtools.WinForms.ViewerBorderPadding.Changed">
      <summary>
            Occurs when the viewer border padding changes.
            </summary>
      <event>The event handler receives an argument of type EventArgs.</event>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.WinForms.ViewerBorderPadding" />.</example>
    </member>
    <member name="P:Leadtools.WinForms.ViewerBorderPadding.Left">
      <summary>
            Gets or sets the padding width for the left edge of a viewer control.
            </summary>
      <value>The padding width in pixels.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.WinForms.ViewerBorderPadding" />.</example>
    </member>
    <member name="P:Leadtools.WinForms.ViewerBorderPadding.Top">
      <summary>
            Gets or sets the padding width for the top edge of a viewer control.
            </summary>
      <value>The padding width in pixels.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.WinForms.ViewerBorderPadding" />.</example>
    </member>
    <member name="P:Leadtools.WinForms.ViewerBorderPadding.Right">
      <summary>
            Gets or sets the padding width for the right edge of a viewer control.
            </summary>
      <value>The padding width in pixels.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.WinForms.ViewerBorderPadding" />.</example>
    </member>
    <member name="P:Leadtools.WinForms.ViewerBorderPadding.Bottom">
      <summary>
            Gets or sets the padding width for the bottom edge of a viewer control.
            </summary>
      <value>The padding width in pixels.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.WinForms.ViewerBorderPadding" />.</example>
    </member>
    <member name="P:Leadtools.WinForms.ViewerBorderPadding.All">
      <summary>
            Gets or sets the padding width for all edges of a viewer control.
            </summary>
      <value>The padding width in pixels.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.WinForms.ViewerBorderPadding" />.</example>
    </member>
    <member name="T:Leadtools.WinForms.RasterMagnifyGlassCrosshair">
      <summary>
            Represents the type of the crosshair.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.WinForms.RasterMagnifyGlassCrosshair.None">
      <summary>
            No Crosshair.
            </summary>
    </member>
    <member name="F:Leadtools.WinForms.RasterMagnifyGlassCrosshair.Fine">
      <summary>
            The crosshair shows with with lines, the width of which are specified by
             <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.CrosshairWidth" /> property, and the color of
             which are specified by <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.CrosshairColor" /> property.
            </summary>
    </member>
    <member name="T:Leadtools.WinForms.RasterMagnifyGlassShape">
      <summary>
            Represents the shape of the Magnifying Glass.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.WinForms.RasterMagnifyGlassShape.None">
      <summary>
            None
            </summary>
    </member>
    <member name="F:Leadtools.WinForms.RasterMagnifyGlassShape.Border3D">
      <summary>
            The rectangular Magnifying Glass appears with a 3D border. The border style is specified in the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Border3DStyle" /> property.
            </summary>
    </member>
    <member name="F:Leadtools.WinForms.RasterMagnifyGlassShape.Rectangle">
      <summary>
            The Magnifying Glass is a Rectangle. The border color, and the border width of this rectangle are specified by the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.BorderColor" />, and <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.BorderWidth" /> properties respectively.
            </summary>
    </member>
    <member name="F:Leadtools.WinForms.RasterMagnifyGlassShape.RoundRectangle">
      <summary>
            The Magnifying Glass is a Round Rectangle. The border color, the border width, and the arc size of the rounded corners of this round rectangle region are specified by the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.BorderColor" />, <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.BorderWidth" />, and <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.RoundRectangleEllipseSize" /> properties respectively.
            </summary>
    </member>
    <member name="F:Leadtools.WinForms.RasterMagnifyGlassShape.Ellipse">
      <summary>
            The Magnifying Glass is an Ellipse. The border color, and the border width of this ellipse region are specified by the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.BorderColor" />, and <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.BorderWidth" /> properties respectively.
            </summary>
    </member>
    <member name="T:Leadtools.WinForms.RasterMagnifyGlass">
      <summary>
            Represents a Leadtools MagnifyGlass control for "zooming in" a portion of an image.
            </summary>
      <remarks>
            The <b>RasterMagnifyGlass</b> is used to "zoom in" a portion of an image displayed in <see cref="T:Leadtools.WinForms.RasterImageViewer" /> control.
            When a user clicks inside the <see cref="T:Leadtools.WinForms.RasterImageViewer" /> control associated with the <b>RasterMagnifyGlass</b> control, 
            the portion
            of the image around the mouse cursor will be zoomed in. When a user clicks inside the <see cref="T:Leadtools.WinForms.RasterImageViewer" /> control 
            and moves the mouse, while holding down the button, the zoomed in portion will change according to the
            mouse 
            pointer position on the bitmap.
            </remarks>
      <example>
        <code lang="VB">      Private Sub magnifyGlass_CrosshairChanged(ByVal sender As Object, ByVal e As EventArgs)
         Dim magnifyGlass As RasterMagnifyGlass = CType(IIf(TypeOf sender Is RasterMagnifyGlass, sender, Nothing), RasterMagnifyGlass)
         Console.WriteLine("Crosshair Changed to " &amp; magnifyGlass.Crosshair.ToString())
      End Sub
      Private Sub magnifyGlass_CrosshairColorChanged(ByVal sender As Object, ByVal e As EventArgs)
         Dim magnifyGlass As RasterMagnifyGlass = CType(IIf(TypeOf sender Is RasterMagnifyGlass, sender, Nothing), RasterMagnifyGlass)
         Console.WriteLine("CrosshairColor Changed to " &amp; magnifyGlass.CrosshairColor.ToString())
      End Sub

      Private Sub magnifyGlass_CrosshairWidthChanged(ByVal sender As Object, ByVal e As EventArgs)
         Dim magnifyGlass As RasterMagnifyGlass = CType(IIf(TypeOf sender Is RasterMagnifyGlass, sender, Nothing), RasterMagnifyGlass)
         Console.WriteLine("CrosshairWidth Changed to " &amp; magnifyGlass.CrosshairWidth.ToString())
      End Sub

      Private Sub magnifyGlass_Border3DStyleChanged(ByVal sender As Object, ByVal e As EventArgs)
         Dim magnifyGlass As RasterMagnifyGlass = CType(IIf(TypeOf sender Is RasterMagnifyGlass, sender, Nothing), RasterMagnifyGlass)
         Console.WriteLine("Border3DStyle Changed to " &amp; magnifyGlass.Border3DStyle.ToString())
      End Sub

      Private Sub magnifyGlass_BorderColorChanged(ByVal sender As Object, ByVal e As EventArgs)
         Dim magnifyGlass As RasterMagnifyGlass = CType(IIf(TypeOf sender Is RasterMagnifyGlass, sender, Nothing), RasterMagnifyGlass)
         Console.WriteLine("BorderColor Changed to " &amp; magnifyGlass.BorderColor.ToString())
      End Sub

      Private Sub magnifyGlass_BorderWidthChanged(ByVal sender As Object, ByVal e As EventArgs)
         Dim magnifyGlass As RasterMagnifyGlass = CType(IIf(TypeOf sender Is RasterMagnifyGlass, sender, Nothing), RasterMagnifyGlass)
         Console.WriteLine("BorderWidth Changed to " &amp; magnifyGlass.BorderWidth.ToString())
      End Sub

      Private Sub magnifyGlass_ShapeChanged(ByVal sender As Object, ByVal e As EventArgs)
         Dim magnifyGlass As RasterMagnifyGlass = CType(IIf(TypeOf sender Is RasterMagnifyGlass, sender, Nothing), RasterMagnifyGlass)
         Console.WriteLine("Shape Changed to " &amp; magnifyGlass.Shape.ToString())
      End Sub

      Private Sub magnifyGlass_SizeChanged(ByVal sender As Object, ByVal e As EventArgs)
         Dim magnifyGlass As RasterMagnifyGlass = CType(IIf(TypeOf sender Is RasterMagnifyGlass, sender, Nothing), RasterMagnifyGlass)
         Console.WriteLine("Size Changed to " &amp; magnifyGlass.Size.ToString())
      End Sub

      Private Sub magnifyGlass_ScaleFactorChanged(ByVal sender As Object, ByVal e As EventArgs)
         Dim magnifyGlass As RasterMagnifyGlass = CType(IIf(TypeOf sender Is RasterMagnifyGlass, sender, Nothing), RasterMagnifyGlass)
         Console.WriteLine("Scale Factor Changed to " &amp; magnifyGlass.ScaleFactor.ToString())
      End Sub

      Private Sub magnifyGlass_RoundRectangleEllipseSizeChanged(ByVal sender As Object, ByVal e As EventArgs)
         Dim magnifyGlass As RasterMagnifyGlass = CType(IIf(TypeOf sender Is RasterMagnifyGlass, sender, Nothing), RasterMagnifyGlass)
         Console.WriteLine("RoundRectangleEllipseSize Changed to " &amp; magnifyGlass.RoundRectangleEllipseSize.ToString())
      End Sub

      Public Sub RasterMagnifyGlass_Border3DStyle(ByVal viewer As RasterImageViewer)
         viewer.InteractiveMode = RasterViewerInteractiveMode.MagnifyGlass
         AddHandler viewer.MagnifyGlass.CrosshairChanged, AddressOf magnifyGlass_CrosshairChanged
         AddHandler viewer.MagnifyGlass.CrosshairColorChanged, AddressOf magnifyGlass_CrosshairColorChanged
         AddHandler viewer.MagnifyGlass.CrosshairWidthChanged, AddressOf magnifyGlass_CrosshairWidthChanged
         AddHandler viewer.MagnifyGlass.Border3DStyleChanged, AddressOf magnifyGlass_Border3DStyleChanged
         AddHandler viewer.MagnifyGlass.BorderColorChanged, AddressOf magnifyGlass_BorderColorChanged
         AddHandler viewer.MagnifyGlass.BorderWidthChanged, AddressOf magnifyGlass_BorderWidthChanged
         AddHandler viewer.MagnifyGlass.ShapeChanged, AddressOf magnifyGlass_ShapeChanged
         AddHandler viewer.MagnifyGlass.SizeChanged, AddressOf magnifyGlass_SizeChanged
         AddHandler viewer.MagnifyGlass.ScaleFactorChanged, AddressOf magnifyGlass_ScaleFactorChanged
         AddHandler viewer.MagnifyGlass.RoundRectangleEllipseSizeChanged, AddressOf magnifyGlass_RoundRectangleEllipseSizeChanged

         If viewer.MagnifyGlass.Shape &lt;&gt; RasterMagnifyGlassShape.Border3D Then
            ' Set the crosshair style
            viewer.MagnifyGlass.Shape = RasterMagnifyGlassShape.Border3D
            viewer.MagnifyGlass.Border3DStyle = Border3DStyle.Sunken

            ' Now change to a different shape
            viewer.MagnifyGlass.Shape = RasterMagnifyGlassShape.RoundRectangle
            viewer.MagnifyGlass.RoundRectangleEllipseSize = New Size(15, 15)
            viewer.MagnifyGlass.BorderColor = Color.DarkBlue
            viewer.MagnifyGlass.BorderWidth = 10
            viewer.MagnifyGlass.Crosshair = RasterMagnifyGlassCrosshair.Fine
            viewer.MagnifyGlass.CrosshairColor = Color.Red
            viewer.MagnifyGlass.CrosshairWidth = 5
            viewer.MagnifyGlass.Size = New Size(200, 100)
            viewer.MagnifyGlass.ScaleFactor = 1.5F
         End If

         RemoveHandler viewer.MagnifyGlass.CrosshairChanged, AddressOf magnifyGlass_CrosshairChanged
         RemoveHandler viewer.MagnifyGlass.CrosshairColorChanged, AddressOf magnifyGlass_CrosshairColorChanged
         RemoveHandler viewer.MagnifyGlass.CrosshairWidthChanged, AddressOf magnifyGlass_CrosshairWidthChanged
         RemoveHandler viewer.MagnifyGlass.Border3DStyleChanged, AddressOf magnifyGlass_Border3DStyleChanged
         RemoveHandler viewer.MagnifyGlass.BorderColorChanged, AddressOf magnifyGlass_BorderColorChanged
         RemoveHandler viewer.MagnifyGlass.BorderWidthChanged, AddressOf magnifyGlass_BorderWidthChanged
         RemoveHandler viewer.MagnifyGlass.ShapeChanged, AddressOf magnifyGlass_ShapeChanged
         RemoveHandler viewer.MagnifyGlass.SizeChanged, AddressOf magnifyGlass_SizeChanged
         RemoveHandler viewer.MagnifyGlass.ScaleFactorChanged, AddressOf magnifyGlass_ScaleFactorChanged
         RemoveHandler viewer.MagnifyGlass.RoundRectangleEllipseSizeChanged, AddressOf magnifyGlass_RoundRectangleEllipseSizeChanged

      End Sub</code>
        <code lang="CS">      private void magnifyGlass_CrosshairChanged(object sender, EventArgs e)
      {
         RasterMagnifyGlass magnifyGlass = sender as RasterMagnifyGlass;
         Console.WriteLine("Crosshair Changed to " + magnifyGlass.Crosshair.ToString());
      }
      private void magnifyGlass_CrosshairColorChanged(object sender, EventArgs e)
      {
         RasterMagnifyGlass magnifyGlass = sender as RasterMagnifyGlass;
         Console.WriteLine("CrosshairColor Changed to " + magnifyGlass.CrosshairColor.ToString());
      }

      private void magnifyGlass_CrosshairWidthChanged(object sender, EventArgs e)
      {
         RasterMagnifyGlass magnifyGlass = sender as RasterMagnifyGlass;
         Console.WriteLine("CrosshairWidth Changed to " + magnifyGlass.CrosshairWidth.ToString());
      }

      private void magnifyGlass_Border3DStyleChanged(object sender, EventArgs e)
      {
         RasterMagnifyGlass magnifyGlass = sender as RasterMagnifyGlass;
         Console.WriteLine("Border3DStyle Changed to " + magnifyGlass.Border3DStyle.ToString());
      }

      private void magnifyGlass_BorderColorChanged(object sender, EventArgs e)
      {
         RasterMagnifyGlass magnifyGlass = sender as RasterMagnifyGlass;
         Console.WriteLine("BorderColor Changed to " + magnifyGlass.BorderColor.ToString());
      }

      private void magnifyGlass_BorderWidthChanged(object sender, EventArgs e)
      {
         RasterMagnifyGlass magnifyGlass = sender as RasterMagnifyGlass;
         Console.WriteLine("BorderWidth Changed to " + magnifyGlass.BorderWidth.ToString());
      }

      private void magnifyGlass_ShapeChanged(object sender, EventArgs e)
      {
         RasterMagnifyGlass magnifyGlass = sender as RasterMagnifyGlass;
         Console.WriteLine("Shape Changed to " + magnifyGlass.Shape.ToString());
      }

      private void magnifyGlass_SizeChanged(object sender, EventArgs e)
      {
         RasterMagnifyGlass magnifyGlass = sender as RasterMagnifyGlass;
         Console.WriteLine("Size Changed to " + magnifyGlass.Size.ToString());
      }

      private void magnifyGlass_ScaleFactorChanged(object sender, EventArgs e)
      {
         RasterMagnifyGlass magnifyGlass = sender as RasterMagnifyGlass;
         Console.WriteLine("Scale Factor Changed to " + magnifyGlass.ScaleFactor.ToString());
      }

      private void magnifyGlass_RoundRectangleEllipseSizeChanged(object sender, EventArgs e)
      {
         RasterMagnifyGlass magnifyGlass = sender as RasterMagnifyGlass;
         Console.WriteLine("RoundRectangleEllipseSize Changed to " + magnifyGlass.RoundRectangleEllipseSize.ToString());
      }

      public void RasterMagnifyGlass_Border3DStyle(RasterImageViewer viewer)
      {
         viewer.InteractiveMode = RasterViewerInteractiveMode.MagnifyGlass;
         viewer.MagnifyGlass.CrosshairChanged += new EventHandler(magnifyGlass_CrosshairChanged);
         viewer.MagnifyGlass.CrosshairColorChanged += new EventHandler(magnifyGlass_CrosshairColorChanged);
         viewer.MagnifyGlass.CrosshairWidthChanged += new EventHandler(magnifyGlass_CrosshairWidthChanged);
         viewer.MagnifyGlass.Border3DStyleChanged += new EventHandler(magnifyGlass_Border3DStyleChanged);
         viewer.MagnifyGlass.BorderColorChanged += new EventHandler(magnifyGlass_BorderColorChanged);
         viewer.MagnifyGlass.BorderWidthChanged += new EventHandler(magnifyGlass_BorderWidthChanged);
         viewer.MagnifyGlass.ShapeChanged += new EventHandler(magnifyGlass_ShapeChanged);
         viewer.MagnifyGlass.SizeChanged += new EventHandler(magnifyGlass_SizeChanged);
         viewer.MagnifyGlass.ScaleFactorChanged += new EventHandler(magnifyGlass_ScaleFactorChanged);
         viewer.MagnifyGlass.RoundRectangleEllipseSizeChanged += new EventHandler(magnifyGlass_RoundRectangleEllipseSizeChanged);

         if (viewer.MagnifyGlass.Shape != RasterMagnifyGlassShape.Border3D)
         {
            // Set the crosshair style
            viewer.MagnifyGlass.Shape = RasterMagnifyGlassShape.Border3D;
            viewer.MagnifyGlass.Border3DStyle = Border3DStyle.Sunken;

            // Now change to a different shape
            viewer.MagnifyGlass.Shape = RasterMagnifyGlassShape.RoundRectangle;
            viewer.MagnifyGlass.RoundRectangleEllipseSize = new Size(15, 15);
            viewer.MagnifyGlass.BorderColor = Color.DarkBlue;
            viewer.MagnifyGlass.BorderWidth = 10;
            viewer.MagnifyGlass.Crosshair = RasterMagnifyGlassCrosshair.Fine;
            viewer.MagnifyGlass.CrosshairColor = Color.Red;
            viewer.MagnifyGlass.CrosshairWidth = 5;
            viewer.MagnifyGlass.Size = new Size(200, 100);
            viewer.MagnifyGlass.ScaleFactor = 1.5f;
         }

         viewer.MagnifyGlass.CrosshairChanged -= new EventHandler(magnifyGlass_CrosshairChanged);
         viewer.MagnifyGlass.CrosshairColorChanged -= new EventHandler(magnifyGlass_CrosshairColorChanged);
         viewer.MagnifyGlass.CrosshairWidthChanged -= new EventHandler(magnifyGlass_CrosshairWidthChanged);
         viewer.MagnifyGlass.Border3DStyleChanged -= new EventHandler(magnifyGlass_Border3DStyleChanged);
         viewer.MagnifyGlass.BorderColorChanged -= new EventHandler(magnifyGlass_BorderColorChanged);
         viewer.MagnifyGlass.BorderWidthChanged -= new EventHandler(magnifyGlass_BorderWidthChanged);
         viewer.MagnifyGlass.ShapeChanged -= new EventHandler(magnifyGlass_ShapeChanged);
         viewer.MagnifyGlass.SizeChanged -= new EventHandler(magnifyGlass_SizeChanged);
         viewer.MagnifyGlass.ScaleFactorChanged -= new EventHandler(magnifyGlass_ScaleFactorChanged);
         viewer.MagnifyGlass.RoundRectangleEllipseSizeChanged -= new EventHandler(magnifyGlass_RoundRectangleEllipseSizeChanged);

      }</code>
        <!--RasterMagnifyGlass.Border3DStyle-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterMagnifyGlass.#ctor">
      <summary>
            Initializes a new instance of the <b>RasterMagnifyGlass</b> class.
            </summary>
      <noremarks />
      <example>
        <code lang="VB">         Dim magnifyGlass As RasterMagnifyGlass = New RasterMagnifyGlass()</code>
        <code lang="CS">         RasterMagnifyGlass magnifyGlass = new RasterMagnifyGlass();</code>
        <!--RasterMagnifyGlass.RasterMagnifyGlass-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterMagnifyGlass.OnViewerChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterMagnifyGlass.ViewerChanged" /> event.
            </summary>
      <param name="e">An EventArgs that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate. The <b>OnViewerChanged</b> method also allows 
            derived classes to handle the event without attaching a delegate. This is the preferred technique for 
            handling the event in a derived class. Notes to Inheritors: When overriding <b>OnViewerChanged</b> in a 
            derived class, be sure to call the base class's <b>OnViewerChanged</b> method so that registered delegates 
            receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterMagnifyGlass.OnSizeChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterMagnifyGlass.SizeChanged" /> event.
            </summary>
      <param name="e">An EventArgs that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate. The <b>OnSizeChanged</b> method also allows 
            derived classes to handle the event without attaching a delegate. This is the preferred technique for 
            handling the event in a derived class. Notes to Inheritors: When overriding <b>OnSizeChanged</b> in a 
            derived class, be sure to call the base class's <b>OnSizeChanged</b> method so that registered delegates 
            receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterMagnifyGlass.OnScaleFactorChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterMagnifyGlass.ScaleFactorChanged" /> event.
            </summary>
      <param name="e">An EventArgs that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate. The <b>OnScaleFactorChanged</b> method also allows 
            derived classes to handle the event without attaching a delegate. This is the preferred technique for 
            handling the event in a derived class. Notes to Inheritors: When overriding <b>OnScaleFactorChanged</b> in a 
            derived class, be sure to call the base class's <b>OnScaleFactorChanged</b> method so that registered delegates 
            receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterMagnifyGlass.OnShapeChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterMagnifyGlass.ShapeChanged" /> event.
            </summary>
      <param name="e">An EventArgs that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate. The <b>OnShapeChanged</b> method also allows 
            derived classes to handle the event without attaching a delegate. This is the preferred technique for 
            handling the event in a derived class. Notes to Inheritors: When overriding <b>OnShapeChanged</b> in a 
            derived class, be sure to call the base class's <b>OnShapeChanged</b> method so that registered delegates 
            receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterMagnifyGlass.OnBorder3DStyleChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterMagnifyGlass.Border3DStyleChanged" /> event.
            </summary>
      <param name="e">An EventArgs that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate. The <b>OnBorder3DStyleChanged</b> method also allows 
            derived classes to handle the event without attaching a delegate. This is the preferred technique for 
            handling the event in a derived class. Notes to Inheritors: When overriding <b>OnBorder3DStyleChanged</b> in a 
            derived class, be sure to call the base class's <b>OnBorder3DStyleChanged</b> method so that registered delegates 
            receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterMagnifyGlass.OnBorderColorChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterMagnifyGlass.BorderColorChanged" /> event.
            </summary>
      <param name="e">An EventArgs that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate. The <b>OnBorderColorChanged</b> method also allows 
            derived classes to handle the event without attaching a delegate. This is the preferred technique for 
            handling the event in a derived class. Notes to Inheritors: When overriding <b>OnBorderColorChanged</b> in a 
            derived class, be sure to call the base class's <b>OnBorderColorChanged</b> method so that registered delegates 
            receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterMagnifyGlass.OnBorderWidthChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterMagnifyGlass.BorderWidthChanged" /> event.
            </summary>
      <param name="e">An EventArgs that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate. The <b>OnBorderWidthChanged</b> method also allows 
            derived classes to handle the event without attaching a delegate. This is the preferred technique for 
            handling the event in a derived class. Notes to Inheritors: When overriding <b>OnBorderWidthChanged</b> in a 
            derived class, be sure to call the base class's <b>OnBorderWidthChanged</b> method so that registered delegates 
            receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterMagnifyGlass.OnCrosshairChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterMagnifyGlass.CrosshairChanged" /> event.
            </summary>
      <param name="e">An EventArgs that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate. The <b>OnCrosshairChanged</b> method also allows 
            derived classes to handle the event without attaching a delegate. This is the preferred technique for 
            handling the event in a derived class. Notes to Inheritors: When overriding <b>OnCrosshairChanged</b> in a 
            derived class, be sure to call the base class's <b>OnCrosshairChanged</b> method so that registered delegates 
            receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterMagnifyGlass.OnCrosshairColorChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterMagnifyGlass.CrosshairColorChanged" /> event.
            </summary>
      <param name="e">An EventArgs that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate. The <b>OnCrosshairColorChanged</b> method also allows 
            derived classes to handle the event without attaching a delegate. This is the preferred technique for 
            handling the event in a derived class. Notes to Inheritors: When overriding <b>OnCrosshairColorChanged</b> in a 
            derived class, be sure to call the base class's <b>OnCrosshairColorChanged</b> method so that registered delegates 
            receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterMagnifyGlass.OnCrosshairWidthChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterMagnifyGlass.CrosshairWidthChanged" /> event.
            </summary>
      <param name="e">An EventArgs that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate. The <b>OnCrosshairWidthChanged</b> method also allows 
            derived classes to handle the event without attaching a delegate. This is the preferred technique for 
            handling the event in a derived class. Notes to Inheritors: When overriding <b>OnCrosshairWidthChanged</b> in a 
            derived class, be sure to call the base class's <b>OnCrosshairWidthChanged</b> method so that registered delegates 
            receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterMagnifyGlass.OnRoundRectangleEllipseSizeChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterMagnifyGlass.RoundRectangleEllipseSizeChanged" /> event.
            </summary>
      <param name="e">An EventArgs that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate. The <b>OnRoundRectangleEllipseSizeChanged</b> method also allows 
            derived classes to handle the event without attaching a delegate. This is the preferred technique for 
            handling the event in a derived class. Notes to Inheritors: When overriding <b>OnRoundRectangleEllipseSizeChanged</b> in a 
            derived class, be sure to call the base class's <b>OnRoundRectangleEllipseSizeChanged</b> method so that registered delegates 
            receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterMagnifyGlass.OnPaintImage(System.Drawing.Graphics,System.Drawing.Point)">
      <summary>
            Occurs when the Image for the Magnifying Glass is redrawn.
            </summary>
      <remarks>
            You can override this method in order to perform your own painting for the Magnifying Glass.
            Call the base class implementation for the default behavior.
            </remarks>
      <param name="graphics">The Graphics object used to paint.</param>
      <param name="centerPoint">The center point of the Magnifying Glass rectangle</param>
      <example>
            Refer to the tutorial <see cref="T:Leadtools.Topics.AdvancedMagnifyingGlass">Advanced Magnifying Glass</see>.
            </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterMagnifyGlass.OnPaintCrosshair(System.Drawing.Graphics,System.Drawing.Point)">
      <summary>
            Occurs when the Magnifying Glass crosshair is redrawn.
            </summary>
      <remarks>
            You can override this method in order to paint your own crosshair for the Magnifying Glass.
            Call the base class implementation for the default behavior.
            </remarks>
      <param name="graphics">The Graphics object used to paint.</param>
      <param name="centerPoint">The center point of the Magnifying Glass rectangle</param>
      <example>
        <code lang="VB">      Private Class MyRasterMagnifyGlass : Inherits RasterMagnifyGlass
         Public Sub New()
            Shape = RasterMagnifyGlassShape.Border3D
         End Sub
         Protected Overrides Sub OnPaintBorder(ByVal graphics As Graphics, ByVal centerPoint As Point)
            Dim width As Integer = (Size.Width - 2) \ 2
            Dim height As Integer = (Size.Height - 2) \ 2

            Dim rc As Rectangle = New Rectangle(centerPoint.X - width, centerPoint.Y - height, 2 * width, 2 * height)
            graphics.DrawRectangle(Pens.Blue, rc)
         End Sub

         Protected Overrides Sub OnPaintCrosshair(ByVal graphics As Graphics, ByVal centerPoint As Point)
            Dim width As Integer = (Size.Width - 2) \ 2
            Dim height As Integer = (Size.Height - 2) \ 2
            Dim p1 As Point = New Point(centerPoint.X - width, centerPoint.Y - height)
            Dim p2 As Point = New Point(centerPoint.X + width, centerPoint.Y + height)
            graphics.DrawLine(Pens.Red, p1, p2)

            p1 = New Point(centerPoint.X + width, centerPoint.Y - height)
            p2 = New Point(centerPoint.X - width, centerPoint.Y + height)
            graphics.DrawLine(Pens.Red, p1, p2)
         End Sub
      End Class

      Private Sub viewer_MagnifyGlassChanged(ByVal sender As Object, ByVal e As EventArgs)
         MessageBox.Show("Custom Magnify Glass being used -- red X for crosshair, blue for border")
      End Sub

      Public Sub RasterImageViewer_MagnifyGlass(ByVal viewer As RasterImageViewer)
         AddHandler viewer.MagnifyGlassChanged, AddressOf viewer_MagnifyGlassChanged
         viewer.MagnifyGlass = New MyRasterMagnifyGlass()
         viewer.InteractiveMode = RasterViewerInteractiveMode.MagnifyGlass

         RemoveHandler viewer.MagnifyGlassChanged, AddressOf viewer_MagnifyGlassChanged
      End Sub</code>
        <code lang="CS">      class MyRasterMagnifyGlass : RasterMagnifyGlass
      {
         public MyRasterMagnifyGlass()
         {
            Shape = RasterMagnifyGlassShape.Border3D;
         }
         protected override void OnPaintBorder(Graphics graphics, Point centerPoint)
         {
            int width = (Size.Width - 2) / 2;
            int height = (Size.Height - 2) / 2;

            Rectangle rc = new Rectangle(centerPoint.X - width, centerPoint.Y - height, 2*width, 2*height);
            graphics.DrawRectangle(Pens.Blue, rc);
         }

         protected override void OnPaintCrosshair(Graphics graphics, Point centerPoint)
         {
            int width = (Size.Width - 2) / 2;
            int height = (Size.Height - 2) / 2;
            Point p1 = new Point(centerPoint.X - width, centerPoint.Y - height);
            Point p2 = new Point(centerPoint.X + width, centerPoint.Y + height);
            graphics.DrawLine(Pens.Red, p1, p2);

            p1 = new Point(centerPoint.X + width, centerPoint.Y - height);
            p2 = new Point(centerPoint.X - width, centerPoint.Y + height);
            graphics.DrawLine(Pens.Red, p1, p2);
         }
      }

      private void viewer_MagnifyGlassChanged(object sender, EventArgs e)
      {
         MessageBox.Show("Custom Magnify Glass being used -- red X for crosshair, blue for border");
      }

      public void RasterImageViewer_MagnifyGlass(RasterImageViewer viewer)
      {
         viewer.MagnifyGlassChanged+= new EventHandler(viewer_MagnifyGlassChanged);
         viewer.MagnifyGlass = new MyRasterMagnifyGlass();
         viewer.InteractiveMode = RasterViewerInteractiveMode.MagnifyGlass;

         viewer.MagnifyGlassChanged -= new EventHandler(viewer_MagnifyGlassChanged);
      }</code>
        <!--RasterImageViewer.MagnifyGlass-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterMagnifyGlass.OnPaintBorder(System.Drawing.Graphics,System.Drawing.Point)">
      <summary>
            Occurs when the Magnifying Glass border is redrawn.
            </summary>
      <remarks>
            You can override this method in order to paint your own border for the Magnifying Glass.
            Call the base class implementation for the default behavior.
            </remarks>
      <param name="graphics">The Graphics object used to paint.</param>
      <param name="centerPoint">The center point of the Magnifying Glass rectangle</param>
      <example>
            Refer to <see cref="M:Leadtools.WinForms.RasterMagnifyGlass.OnPaintCrosshair(System.Drawing.Graphics,System.Drawing.Point)" /> example.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterMagnifyGlass.Viewer">
      <summary>
            Gets the <see cref="T:Leadtools.WinForms.RasterImageViewer" /> currently assigned for magnifying process by the control.
            </summary>
      <value>
            The <see cref="T:Leadtools.WinForms.RasterImageViewer" /> object, which has an image to be magnify using the <b>RasterMagnifyGlass</b> control.
            </value>
      <remarks>
            This property contains the <see cref="T:Leadtools.WinForms.RasterImageViewer" /> object which 
            contains an image to be magnified using the <b>RasterMagnifyGlass</b> control.
            </remarks>
      <example>
            Refer to the tutorial <see cref="T:Leadtools.Topics.AdvancedMagnifyingGlass">Advanced Magnifying Glass</see>.
            </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterMagnifyGlass.ViewerChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Viewer" /> property changes. 
            </summary>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Viewer" /> property is changed 
            by either a programmatic modification or user interaction.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterMagnifyGlass.Size">
      <summary>
            Gets or sets the size of the Magnifying Glass.
            </summary>
      <value>
            The width and height of the Magnifying Glass.
            </value>
      <noremarks />
      <example>
            Refer to <see cref="T:Leadtools.WinForms.RasterMagnifyGlass" /> example.
            </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterMagnifyGlass.SizeChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Size" /> property changes.
            </summary>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Size" /> property is changed 
            by either a programmatic modification or user interaction.
            </remarks>
      <example>
            Refer to <see cref="T:Leadtools.WinForms.RasterMagnifyGlass" /> example.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterMagnifyGlass.ScaleFactor">
      <summary>
            Gets or sets the zoom factor used to display the magnified image.
            </summary>
      <value>
            The zoom factor used to display the magnified image.
            </value>
      <noremarks />
      <example>
            Refer to <see cref="T:Leadtools.WinForms.RasterMagnifyGlass" /> example.
            </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterMagnifyGlass.ScaleFactorChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.ScaleFactor" /> property changes.
            </summary>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.ScaleFactor" /> property is changed 
            by either a programmatic modification or user interaction.
            </remarks>
      <example>
            Refer to <see cref="T:Leadtools.WinForms.RasterMagnifyGlass" /> example.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterMagnifyGlass.Shape">
      <summary>
            Gets or sets the Shape of the Magnifying Glass.
            </summary>
      <value>
            The shape of the Magnifying Glass.
            </value>
      <remarks>
            Using the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Border3DStyle" />, the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.BorderWidth" />, 
            the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.BorderColor" />, and the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.RoundRectangleEllipseSize" />
            properties depends on the value of this property.
            <para>if it set to <see cref="T:Leadtools.WinForms.RasterMagnifyGlassShape">RasterMagnifyGlassShape.None</see> :
            none of the above will be used.</para><para>if it set to <see cref="T:Leadtools.WinForms.RasterMagnifyGlassShape">RasterMagnifyGlassShape.Border3D</see> :
            only the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Border3DStyle" /> property will be use.</para><para>if it set to <see cref="T:Leadtools.WinForms.RasterMagnifyGlassShape">RasterMagnifyGlassShape.Rectangle</see> or set to
            <see cref="T:Leadtools.WinForms.RasterMagnifyGlassShape">RasterMagnifyGlassShape.Ellipse</see>: only the
            <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.BorderWidth" />, and the
            <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.BorderColor" /> properties will be used.</para><para>if it set to <see cref="T:Leadtools.WinForms.RasterMagnifyGlassShape">RasterMagnifyGlassShape.RoundRectangle</see> :
            the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.BorderWidth" />, the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.BorderColor" />, and the
            <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.RoundRectangleEllipseSize" /> properties will be used.</para></remarks>
      <example>
            Refer to <see cref="T:Leadtools.WinForms.RasterMagnifyGlass" /> example.
            </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterMagnifyGlass.ShapeChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Shape" /> property changes.
            </summary>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Shape" /> property is changed 
            by either a programmatic modification or user interaction.
            </remarks>
      <example>
            Refer to <see cref="T:Leadtools.WinForms.RasterMagnifyGlass" /> example.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterMagnifyGlass.Border3DStyle">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Forms.Border3DStyle" /> of the Magnifying Glass border.
            </summary>
      <value>
            The <see cref="T:System.Windows.Forms.Border3DStyle" /> of the Magnifying Glass border.
            </value>
      <remarks>
            This values is used only if the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Shape" /> property is set <see cref="T:Leadtools.WinForms.RasterMagnifyGlassShape">RasterMagnifyGlassShape.Border3D</see>.
            </remarks>
      <example>
            Refer to <see cref="T:Leadtools.WinForms.RasterMagnifyGlass" /> example.
            </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterMagnifyGlass.Border3DStyleChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Border3DStyle" /> property changes.
            </summary>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Border3DStyle" /> property is changed 
            by either a programmatic modification or user interaction.
            </remarks>
      <example>
            Refer to <see cref="T:Leadtools.WinForms.RasterMagnifyGlass" /> example.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterMagnifyGlass.BorderColor">
      <summary>
            Gets or sets the Color of the Magnifying Glass border.
            </summary>
      <value>
            The color of the Magnifying Glass border.
            </value>
      <remarks>
            This values is used only if the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Shape" /> property is set to
            <see cref="T:Leadtools.WinForms.RasterMagnifyGlassShape">RasterMagnifyGlassShape.Rectangle</see>, to
            <see cref="T:Leadtools.WinForms.RasterMagnifyGlassShape">RasterMagnifyGlassShape.RoundRectangle</see>, or to
            <see cref="T:Leadtools.WinForms.RasterMagnifyGlassShape">RasterMagnifyGlassShape..Ellipse</see>.
            </remarks>
      <example>
            Refer to <see cref="T:Leadtools.WinForms.RasterMagnifyGlass" /> example.
            </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterMagnifyGlass.BorderColorChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.BorderColor" /> property changes.
            </summary>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.BorderColor" /> property is changed 
            by either a programmatic modification or user interaction.
            </remarks>
      <example>
            Refer to <see cref="T:Leadtools.WinForms.RasterMagnifyGlass" /> example.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterMagnifyGlass.BorderWidth">
      <summary>
            Gets or sets the size of the Magnifying Glass border in pixels.
            </summary>
      <value>
            The width of the Magnifying Glass border in pixels.
            </value>
      <remarks>
            This values is used only if the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Shape" /> property is set to
            <see cref="T:Leadtools.WinForms.RasterMagnifyGlassShape">RasterMagnifyGlassShape.Rectangle</see>, to
            <see cref="T:Leadtools.WinForms.RasterMagnifyGlassShape">RasterMagnifyGlassShape.RoundRectangle</see>, or to
            <see cref="T:Leadtools.WinForms.RasterMagnifyGlassShape">RasterMagnifyGlassShape.Ellipse</see>.
            </remarks>
      <example>
            Refer to <see cref="T:Leadtools.WinForms.RasterMagnifyGlass" /> example.
            </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterMagnifyGlass.BorderWidthChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.BorderWidth" /> property changes.
            </summary>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.BorderWidth" /> property is changed 
            by either a programmatic modification or user interaction.
            </remarks>
      <example>
            Refer to <see cref="T:Leadtools.WinForms.RasterMagnifyGlass" /> example.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterMagnifyGlass.Crosshair">
      <summary>
            Gets or sets the type of the crosshair.
            </summary>
      <value>
            The Crosshair type.
            </value>
      <remarks>
            Using the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.CrosshairWidth" /> and 
            <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.CrosshairColor" /> properties depends on the value of this property.
            <para>If it set to <see cref="T:Leadtools.WinForms.RasterMagnifyGlassCrosshair">RasterMagnifyGlassCrosshair.Fine</see> both of them will be used.</para><para>If it set to <see cref="T:Leadtools.WinForms.RasterMagnifyGlassCrosshair">RasterMagnifyGlassCrosshair.None</see> none of them will be used.</para></remarks>
      <example>
            Refer to <see cref="T:Leadtools.WinForms.RasterMagnifyGlass" /> example.
            </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterMagnifyGlass.CrosshairChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Crosshair" /> property changes.
            </summary>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Crosshair" /> property is changed 
            by either a programmatic modification or user interaction.
            </remarks>
      <example>
            Refer to <see cref="T:Leadtools.WinForms.RasterMagnifyGlass" /> example.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterMagnifyGlass.CrosshairColor">
      <summary>
            Gets or sets the color of the crosshair.
            </summary>
      <value>
            The Crosshair color.
            </value>
      <remarks>
            This property value is used only if <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Crosshair" /> property was set to <see cref="T:Leadtools.WinForms.RasterMagnifyGlassCrosshair">RasterMagnifyGlassCrosshair.Fine</see>.
            </remarks>
      <example>
            Refer to <see cref="T:Leadtools.WinForms.RasterMagnifyGlass" /> example.
            </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterMagnifyGlass.CrosshairColorChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.CrosshairColor" /> property changes.
            </summary>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.CrosshairColor" /> property is changed 
            by either a programmatic modification or user interaction.
            </remarks>
      <example>
            Refer to <see cref="T:Leadtools.WinForms.RasterMagnifyGlass" /> example.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterMagnifyGlass.CrosshairWidth">
      <summary>
            Gets or sets the width of the crosshair.
            </summary>
      <value>
            The Crosshair width.
            </value>
      <remarks>
            This property value is used only if <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Crosshair" /> property was set to <see cref="T:Leadtools.WinForms.RasterMagnifyGlassCrosshair">RasterMagnifyGlassCrosshair.Fine</see>.
            </remarks>
      <example>
            Refer to <see cref="T:Leadtools.WinForms.RasterMagnifyGlass" /> example.
            </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterMagnifyGlass.CrosshairWidthChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.CrosshairWidth" /> property changes.
            </summary>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.CrosshairWidth" /> property is changed 
            by either a programmatic modification or user interaction.
            </remarks>
      <example>
            Refer to <see cref="T:Leadtools.WinForms.RasterMagnifyGlass" /> example.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterMagnifyGlass.RoundRectangleEllipseSize">
      <summary>
            Gets or sets the width and height of the ellipse that describes the arc of the rounded corners.
            </summary>
      <value>
            The width and the height of the ellipse that describes the arc of the rounded corners of the Magnifying Glass shape.
            </value>
      <remarks>
            This property value is used only if <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.Shape" /> property was set to <see cref="T:Leadtools.WinForms.RasterMagnifyGlassShape">RasterMagnifyGlassShape.RoundRectangle</see>.
            </remarks>
      <example>
            Refer to <see cref="T:Leadtools.WinForms.RasterMagnifyGlass" /> example.
            </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterMagnifyGlass.RoundRectangleEllipseSizeChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.RoundRectangleEllipseSize" /> property changes.
            </summary>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterMagnifyGlass.RoundRectangleEllipseSize" /> property is changed 
            by either a programmatic modification or user interaction.
            </remarks>
      <example>
            Refer to <see cref="T:Leadtools.WinForms.RasterMagnifyGlass" /> example.
            </example>
    </member>
    <member name="T:Leadtools.WinForms.RasterImageListItemCollection">
      <summary>
            Represents the collection of items in a <see cref="T:Leadtools.WinForms.RasterImageList" /> control.
            </summary>
      <remarks>
        <p>A <b>RasterImageListItemCollection</b> stores the items displayed in the <see cref="T:Leadtools.WinForms.RasterImageList" /> control.</p>
        <p>There are a number of ways to add items to the collection. The <see cref="M:Leadtools.RasterCollection`1.Add(`0)" />
            method adds a single item to the collection. To add a number of items to the collection, you create an array of
            items and pass it to the <a href="ms-xhelp:///?id=Leadtools~Leadtools.RasterCollection`1~AddRange">AddRange</a>
            method. If you want to insert an item at a specific location in the collection, you can use the
            <see cref="M:Leadtools.RasterCollection`1.Insert(System.Int32,`0)" /> method. To remove items, you can use either the
            <see cref="M:Leadtools.RasterCollection`1.Remove(`0)" /> method or the <see cref="M:Leadtools.RasterCollection`1.RemoveAt(System.Int32)" /> method if you know where the
            item is located in the collection. The <see cref="M:Leadtools.RasterCollection`1.Clear" /> method enables you to remove all items from the
            collection instead of using the <see cref="M:Leadtools.RasterCollection`1.Remove(`0)" /> method to remove a single
            item at a time.</p>
        <p>In addition to methods and properties for adding and removing items, the
            <see cref="T:Leadtools.WinForms.RasterImageListItemCollection" /> also provides methods to find items in the collection. The
            <see cref="M:Leadtools.RasterCollection`1.Contains(`0)" /> method enables you to determine whether an item is a member
            of the collection. Once you know that the item is located in the collection, you can use the
            <see cref="M:Leadtools.RasterCollection`1.IndexOf(`0)" /> method to determine where the item is located in the
            collection.</p>
        <b>NOTE:</b> You cannot add an <see cref="T:Leadtools.WinForms.RasterImageListItem" /> to more than one <see cref="T:Leadtools.WinForms.RasterImageList" /> 
            control at the same time.  If you attempt to do this, an exception will be thrown.<br /></remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageListItemCollection.#ctor(Leadtools.WinForms.RasterImageList)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.WinForms.RasterImageListItemCollection" /> class.
            </summary>
      <param name="imageList">The <see cref="T:Leadtools.WinForms.RasterImageList" /> that owns the collection.</param>
      <remarks>
        <p>You cannot create an instance of this class without associating it with a <see cref="T:Leadtools.WinForms.RasterImageList" /> control.</p>
        <p>You normally do not need to create an instance of this class manually, <see cref="T:Leadtools.WinForms.RasterImageList" /> generates
            one automatically that you can access through the <see cref="P:Leadtools.WinForms.RasterImageList.Items" /> property.</p>
      </remarks>
      <noexample />
    </member>
    <member name="T:Leadtools.WinForms.RasterClipboardCopyFlags">
      <summary>
            Flags for <see cref="M:Leadtools.WinForms.RasterClipboard.Copy(System.Windows.Forms.IWin32Window,Leadtools.RasterImage,Leadtools.WinForms.RasterClipboardCopyFlags)" /></summary>
      <remarks>
            Indicates how image data is placed on the clipboard. You can use a bitwise OR ( | ) to pass more than one value.
            </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.WinForms.RasterClipboardCopyFlags.None">
      <summary>
            Default.
            </summary>
    </member>
    <member name="F:Leadtools.WinForms.RasterClipboardCopyFlags.Empty">
      <summary>
            Empty the clipboard before copying data to it.
            </summary>
    </member>
    <member name="F:Leadtools.WinForms.RasterClipboardCopyFlags.Dib">
      <summary>
            Copy DIB data to the clipboard.
            </summary>
    </member>
    <member name="F:Leadtools.WinForms.RasterClipboardCopyFlags.Bitmap">
      <summary>
            Copy DDB data data to the clipboard.
            </summary>
    </member>
    <member name="F:Leadtools.WinForms.RasterClipboardCopyFlags.Palette">
      <summary>
            Copy palette data to the clipboard.
            </summary>
    </member>
    <member name="F:Leadtools.WinForms.RasterClipboardCopyFlags.Region">
      <summary>
            Copy the image's region to the clipboard.
            </summary>
    </member>
    <member name="T:Leadtools.WinForms.RasterClipboard">
      <summary>
            The <see cref="T:Leadtools.WinForms.RasterClipboard" /> class provides methods for working with image data and the Windows clipboard.
            </summary>
      <keywords>Clipboard|Image Data|Regions</keywords>
      <remarks>
        <p>The <see cref="T:Leadtools.WinForms.RasterClipboard" /> class contains the <see cref="M:Leadtools.WinForms.RasterClipboard.Copy(System.Windows.Forms.IWin32Window,Leadtools.RasterImage,Leadtools.WinForms.RasterClipboardCopyFlags)" /> method that lets you copy
            the image data of an <see cref="T:Leadtools.RasterImage" /> to the clipboard.  The <see cref="M:Leadtools.WinForms.RasterClipboard.Copy(System.Windows.Forms.IWin32Window,Leadtools.RasterImage,Leadtools.WinForms.RasterClipboardCopyFlags)" /> also lets
            you copy region data or the palette of the <see cref="T:Leadtools.RasterImage" /> through the use of
            <see cref="T:Leadtools.WinForms.RasterClipboardCopyFlags" />.</p>
        <p>The <see cref="M:Leadtools.WinForms.RasterClipboard.Paste(System.Windows.Forms.IWin32Window)" /> method lets you create an <see cref="T:Leadtools.RasterImage" /> from the data
            currently in the Windows clipboard.</p>
        <p>You can use the <see cref="P:Leadtools.WinForms.RasterClipboard.IsReady" /> property to check if any compatible data is currently
            in the Windows clipboard.  You can use this property to update the user interface of your application by
            enabling/disabling the Paste menu item for example.</p>
        <p>
          <b>Note:</b> since the <see cref="T:Leadtools.RasterImage" /> implements standard .NET serialization, you can use the
            .NET <see cref="T:System.Windows.Forms.Clipboard" /> class to use the Windows clipboard.  For more information and an example, refer to
            <see cref="T:Leadtools.Topics.RasterImageSerialization">RasterImage Serialization</see>.</p>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterClipboard.Paste(System.Windows.Forms.IWin32Window)">
      <summary>
            Copies image data from the clipboard.
            </summary>
      <param name="owner">Handle to the active window.</param>
      <returns>A reference to a new RasterImage object created using the data in the Windows clipboard.</returns>
      <keywords>DDB|Windows Device Dependent Bitmaps|Device Dependent Bitmaps|DIB|Windows Device Independent Bitmaps|Device Independent Bitmaps|Windows Metafile|WMF|Clipboard|Windows Clipboard</keywords>
      <remarks>
            The image on the clipboard must be a DIB, DDB, or a WMF.<br />
            The image will contain the same <see cref="P:Leadtools.RasterImage.Width" />, <see cref="P:Leadtools.RasterImage.Height" />, and <see cref="P:Leadtools.RasterImage.BitsPerPixel" /> as the image contained in the clipboard.<br />
            The <see cref="P:Leadtools.RasterImage.Order" /> will be set to <see cref="T:Leadtools.RasterByteOrder">RasterByteOrder.Bgr</see>. If the copied image is not in <b>Bgr</b> 
            order, it is up to you to change its color <b>Order</b> using <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommand" />.<br />
            To determine whether a region was pasted, use <see cref="P:Leadtools.RasterImage.HasRegion" />.
            </remarks>
      <example>
        <code lang="VB">      Public Sub RasterClipboard_Paste(ByVal viewer As RasterImageViewer)
         If RasterClipboard.IsReady Then
            ''' Copy the bitmap from the clipboard 
            viewer.Image = RasterClipboard.Paste(viewer)
            Console.WriteLine("Paste is Successful")
         Else
            Console.WriteLine("Paste Failed")
         End If
      End Sub</code>
        <code lang="CS">      public void RasterClipboard_Paste(RasterImageViewer viewer)
      {
         if (RasterClipboard.IsReady)
         {
            /// Copy the bitmap from the clipboard 
            viewer.Image = RasterClipboard.Paste(viewer);
            Console.WriteLine("Paste is Successful");
         }
         else
         {
            Console.WriteLine("Paste Failed");
         }
      }</code>
        <!--RasterClipboard.RasterClipboard_Paste-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterClipboard.Copy(System.Windows.Forms.IWin32Window,Leadtools.RasterImage,Leadtools.WinForms.RasterClipboardCopyFlags)">
      <summary>
            Copies the RGB or raster image data from a specified image to the Windows clipboard.
            </summary>
      <param name="owner">Handle to the active window.</param>
      <param name="image">The image to be copied.</param>
      <param name="flags">Indicates how image data is placed on the clipboard.</param>
      <remarks>
            The clipboard will contain the same <see cref="P:Leadtools.RasterImage.Width" />, <see cref="P:Leadtools.RasterImage.Height" />, 
            <see cref="P:Leadtools.RasterImage.BitsPerPixel" />, and color <see cref="P:Leadtools.RasterImage.Order" /> as the image.
            </remarks>
      <example>
        <code lang="VB">      Public Sub RasterClipboard_Copy(ByVal viewer As RasterImageViewer)
         Dim codec As RasterCodecs = New RasterCodecs()
         ' Load a bitmap, keeping its own bits per pixel
         Dim image As RasterImage = codec.Load(Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp"))

         ' Copy the bitmap to the clipboard
         RasterClipboard.Copy(viewer, image, RasterClipboardCopyFlags.Empty Or RasterClipboardCopyFlags.Dib)
         ' Dispose the original bitmap, leaving the copy in the clipboard
         image.Dispose()

         MessageBox.Show("Image copied to clipboard")
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void RasterClipboard_Copy(RasterImageViewer viewer)
      {
         RasterCodecs codec = new RasterCodecs();
         // Load a bitmap, keeping its own bits per pixel
         RasterImage image = codec.Load(Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp"));

         // Copy the bitmap to the clipboard
         RasterClipboard.Copy(viewer, image, RasterClipboardCopyFlags.Empty | RasterClipboardCopyFlags.Dib);
         // Dispose the original bitmap, leaving the copy in the clipboard
         image.Dispose();

         MessageBox.Show("Image copied to clipboard");
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--RasterClipboard.RasterClipboard_Copy-->
      </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterClipboard.IsReady">
      <summary>
            Determines whether the Windows clipboard contains an image that can be copied using <see cref="M:Leadtools.WinForms.RasterClipboard.Paste(System.Windows.Forms.IWin32Window)" />.
            </summary>
      <value>true if the clipboard contains an image that can be copied, false otherwise.</value>
      <noremarks />
      <example>Refer to <see cref="M:Leadtools.WinForms.RasterClipboard.Paste(System.Windows.Forms.IWin32Window)" />.</example>
    </member>
    <member name="T:Leadtools.WinForms.RasterViewerInteractiveStatus">
      <summary>
            The status of the interactive mode.
            </summary>
      <noremarks />
      <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.IsInteractiveModeBusy" />.</example>
    </member>
    <member name="F:Leadtools.WinForms.RasterViewerInteractiveStatus.Begin">
      <summary>
            The interactive mode has started.
            </summary>
    </member>
    <member name="F:Leadtools.WinForms.RasterViewerInteractiveStatus.Working">
      <summary>
            The interactive mode is in progress.
            </summary>
    </member>
    <member name="F:Leadtools.WinForms.RasterViewerInteractiveStatus.End">
      <summary>
            The interactive mode ended or has been canceled.
            </summary>
    </member>
    <member name="T:Leadtools.WinForms.RasterViewerInteractiveMode">
      <summary>
            Values for the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode" /> property.
            </summary>
      <remarks>
            The <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode" /> property controls user interaction with the control's display.
            </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.WinForms.RasterViewerInteractiveMode.None">
      <summary>
            Default, no user interaction.
            </summary>
    </member>
    <member name="F:Leadtools.WinForms.RasterViewerInteractiveMode.Pan">
      <summary>
            Allows the user to pan the image using the mouse.
            </summary>
    </member>
    <member name="F:Leadtools.WinForms.RasterViewerInteractiveMode.CenterAt">
      <summary>
            Centers the image at the mouse coordinates for the last user click.
            </summary>
    </member>
    <member name="F:Leadtools.WinForms.RasterViewerInteractiveMode.ZoomTo">
      <summary>
            Zooms the image to the rectangle created by the user.
            </summary>
    </member>
    <member name="F:Leadtools.WinForms.RasterViewerInteractiveMode.Region">
      <summary>
        <para>Creates a region based on user interaction.</para>
        <para>The type of region created depends on the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveRegionType" /> property.</para>
      </summary>
    </member>
    <member name="F:Leadtools.WinForms.RasterViewerInteractiveMode.MagnifyGlass">
      <summary>
            Starts the <see cref="F:Leadtools.WinForms.RasterViewerInteractiveMode.MagnifyGlass" />.
            </summary>
    </member>
    <member name="F:Leadtools.WinForms.RasterViewerInteractiveMode.Floater">
      <summary>
            Starts moving the <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterImage" />.
            </summary>
    </member>
    <member name="F:Leadtools.WinForms.RasterViewerInteractiveMode.Page">
      <summary>
            Allows the user to change the current page in the image using the mouse.
            </summary>
    </member>
    <member name="F:Leadtools.WinForms.RasterViewerInteractiveMode.Scale">
      <summary>
            Allows the user to change the current scale factor of the image using the mouse.
            </summary>
    </member>
    <member name="F:Leadtools.WinForms.RasterViewerInteractiveMode.UserRectangle">
      <summary>
            User-defined rectangle. You should subscribe to the <see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveUserRectangle">RasterImageViewer.InteractiveUserRectangle</see> event to add your custom code to handle the
            rectangle drawn.
            </summary>
    </member>
    <member name="T:Leadtools.WinForms.RasterViewerInteractiveRegionType">
      <summary>
            Values for the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveRegionType" /> property.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="F:Leadtools.WinForms.RasterViewerInteractiveRegionType.Rectangle">
      <summary>
            Create a rectangle region.
            </summary>
    </member>
    <member name="F:Leadtools.WinForms.RasterViewerInteractiveRegionType.Ellipse">
      <summary>
            Create an elliptical region.
            </summary>
    </member>
    <member name="F:Leadtools.WinForms.RasterViewerInteractiveRegionType.Freehand">
      <summary>
            Create a freehand region.
            </summary>
    </member>
    <member name="T:Leadtools.WinForms.RasterImageViewer">
      <summary>
            Represents a Leadtools ImageViewer control for displaying an image.
            </summary>
      <keywords>Raster Image Viewer|Image Viewer Control|Viewer Control | Windows Forms|Viewers</keywords>
      <remarks>
            The <b>RasterImageViewer</b> is used to display graphics from a bitmap, metafile, icon, JPEG, GIF or PNG (or any other image file format supported by Leadtools) file.<br />
            Set the <see cref="P:Leadtools.WinForms.RasterImageViewer.Image" /> property to an <see cref="T:Leadtools.RasterImage" /> object to be displayed.<br />
            The <b>RasterImageViewer</b> control can automatically handle zooming and scrolling.<br />
            For information on using Annotations with the <b>RasterImageViewer</b>, refer to <see cref="T:AN.Topics.ImplementingAnnotations">Implementing Annotations</see></remarks>
      <example>
        <code lang="VB">      Public Sub RasterImageViewer_RasterImageViewer()
         Dim form As MyForm1 = New MyForm1()
         form.ShowDialog()
      End Sub

      Private Class MyForm1 : Inherits Form
         Private theViewer As RasterImageViewer

         Public Sub New()
            ' Create the raster viewer
            theViewer = New RasterImageViewer()
            theViewer.Dock = DockStyle.Fill
            theViewer.DoubleBuffer = True
            theViewer.BorderStyle = BorderStyle.Fixed3D
            theViewer.AutoResetScaleFactor = True
            theViewer.AutoResetScrollPosition = True
            theViewer.HorizontalAlignMode = RasterPaintAlignMode.Center
            theViewer.VerticalAlignMode = RasterPaintAlignMode.Far
            theViewer.FrameSize = New SizeF(10, 5)
            theViewer.FrameColor = Color.Red
            theViewer.FramesIsPartOfImage = True
            theViewer.FrameShadowSize = New SizeF(5, 5)
            theViewer.FrameShadowColor = Color.Blue
            theViewer.AutoScroll = True
            theViewer.UseDpi = True

            ' Set the paint properties
            Dim p As RasterPaintProperties = New RasterPaintProperties()
            p.PaintDisplayMode = RasterPaintDisplayModeFlags.Bicubic
            p.PaintEngine = RasterPaintEngine.GdiPlus
            p.UsePaintPalette = True
            theViewer.PaintProperties = p

            theViewer.AnimateRegion = True
            theViewer.EnableTimer = True
            theViewer.EnableScrollingInterface = True

            Controls.Add(theViewer)
            theViewer.BringToFront()

            ' load an image into the viewer
            Dim codecs As RasterCodecs = New RasterCodecs()
            theViewer.Image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Sample1.cmp"))
            codecs.Dispose()

            Text = String.Format("Size mode = {0}, double click to change", theViewer.SizeMode)

            AddHandler theViewer.DoubleClick, AddressOf theViewer_DoubleClick
         End Sub

         Private Sub theViewer_DoubleClick(ByVal sender As Object, ByVal e As EventArgs)
            Select Case theViewer.SizeMode
               Case RasterPaintSizeMode.Normal
                  theViewer.SizeMode = RasterPaintSizeMode.Stretch

               Case RasterPaintSizeMode.Stretch
                  theViewer.SizeMode = RasterPaintSizeMode.Fit

               Case RasterPaintSizeMode.Fit
                  theViewer.SizeMode = RasterPaintSizeMode.FitAlways

               Case RasterPaintSizeMode.FitAlways
                  theViewer.SizeMode = RasterPaintSizeMode.FitWidth

               Case RasterPaintSizeMode.FitWidth
                  theViewer.SizeMode = RasterPaintSizeMode.Normal
            End Select

            Text = String.Format("Size mode = {0}, double click to change", theViewer.SizeMode)

            MyBase.OnDoubleClick(e)
         End Sub
      End Class

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      public void RasterImageViewer_RasterImageViewer()
      {
         MyForm1 form = new MyForm1();
         form.ShowDialog();
      }

      class MyForm1 : Form
      {
         RasterImageViewer theViewer;

         public MyForm1()
         {
            // Create the raster viewer
            theViewer = new RasterImageViewer();
            theViewer.Dock = DockStyle.Fill;
            theViewer.DoubleBuffer = true;
            theViewer.BorderStyle = BorderStyle.Fixed3D;
            theViewer.AutoResetScaleFactor = true;
            theViewer.AutoResetScrollPosition= true;
            theViewer.HorizontalAlignMode = RasterPaintAlignMode.Center;
            theViewer.VerticalAlignMode = RasterPaintAlignMode.Far;
            theViewer.FrameSize = new SizeF(10,5);
            theViewer.FrameColor = Color.Red;
            theViewer.FramesIsPartOfImage = true;
            theViewer.FrameShadowSize = new SizeF(5, 5);
            theViewer.FrameShadowColor = Color.Blue;
            theViewer.AutoScroll = true;
            theViewer.UseDpi = true;

            // Set the paint properties
            RasterPaintProperties p = new RasterPaintProperties();
            p.PaintDisplayMode = RasterPaintDisplayModeFlags.Bicubic;
            p.PaintEngine = RasterPaintEngine.GdiPlus;
            p.UsePaintPalette = true;
            theViewer.PaintProperties = p;

            theViewer.AnimateRegion = true;
            theViewer.EnableTimer = true;
            theViewer.EnableScrollingInterface = true;

            Controls.Add(theViewer);
            theViewer.BringToFront();

            // load an image into the viewer
            RasterCodecs codecs = new RasterCodecs();
            theViewer.Image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Sample1.cmp"));
            codecs.Dispose();

            Text = string.Format("Size mode = {0}, double click to change", theViewer.SizeMode);

            theViewer.DoubleClick += new EventHandler(theViewer_DoubleClick);
         }

         void theViewer_DoubleClick(object sender, EventArgs e)
         {
            switch (theViewer.SizeMode)
            {
               case RasterPaintSizeMode.Normal:
                  theViewer.SizeMode = RasterPaintSizeMode.Stretch;
                  break;

               case RasterPaintSizeMode.Stretch:
                  theViewer.SizeMode = RasterPaintSizeMode.Fit;
                  break;

               case RasterPaintSizeMode.Fit:
                  theViewer.SizeMode = RasterPaintSizeMode.FitAlways;
                  break;

               case RasterPaintSizeMode.FitAlways:
                  theViewer.SizeMode = RasterPaintSizeMode.FitWidth;
                  break;

               case RasterPaintSizeMode.FitWidth:
                  theViewer.SizeMode = RasterPaintSizeMode.Normal;
                  break;
            }

            Text = string.Format("Size mode = {0}, double click to change", theViewer.SizeMode);

            base.OnDoubleClick(e);
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--RasterImageViewer.RasterImageViewer-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.#ctor">
      <summary>
            Initializes a new instance of the RasterImageViewer class.
            </summary>
      <noremarks />
      <example>Refer to <see cref="T:Leadtools.WinForms.RasterImageViewer" />.</example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.Dispose(System.Boolean)">
      <summary> 
            Clean up any resources being used.
            </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnDoubleBufferChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.DoubleBufferChanged" /> event.
            </summary>
      <param name="e">An EventArgs that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnDoubleBufferChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnDoubleBufferChanged</b> in a derived class, be sure to call the base class's <b>OnDoubleBufferChanged</b> method so that registered delegates receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnBorderStyleChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.BorderStyleChanged" /> event.
            </summary>
      <param name="e">An EventArgs that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnBorderStyleChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnBorderStyleChanged</b> in a derived class, be sure to call the base class's <b>OnBorderStyleChanged</b> method so that registered delegates receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnScaleFactorChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.ScaleFactorChanged" /> event.
            </summary>
      <param name="e">An EventArgs that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnScaleFactorChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnScaleFactorChanged</b> in a derived class, be sure to call the base class's <b>OnScaleFactorChanged</b> method so that registered delegates receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnSourceRectangleChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.SourceRectangleChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
        <p>Raising an event invokes the event handler through a delegate.</p>
        <p>The <b>OnSourceRectangleChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
        <p>
          <b>Notes to Inheritors:</b> When overriding <b>OnSourceRectangleChanged</b> in a derived class, be sure to call
            the base class's <b>OnSourceRectangleChanged</b> method so that registered delegates receive the event.</p>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnAutoResetScaleFactorChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.AutoResetScaleFactorChanged" /> event.
            </summary>
      <param name="e">An EventArgs that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnAutoResetScaleFactorChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnAutoResetScaleFactorChanged</b> in a derived class, be sure to call the base class's <b>OnAutoResetScaleFactorChanged</b> method so that registered delegates receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnAutoResetScrollPositionChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.AutoResetScrollPositionChanged" /> event.
            </summary>
      <param name="e">An EventArgs that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnAutoResetScrollPositionChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnAutoResetScrollPositionChanged</b> in a derived class, be sure to call the base class's <b>OnAutoResetScrollPositionChanged</b> method so that registered delegates receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnSizeModeChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.SizeModeChanged" /> event.
            </summary>
      <param name="e">An EventArgs that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnSizeModeChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnSizeModeChanged</b> in a derived class, be sure to call the base class's <b>OnSizeModeChanged</b> method so that registered delegates receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnHorizontalAlignModeChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.HorizontalAlignModeChanged" /> event.
            </summary>
      <param name="e">An EventArgs that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnHorizontalAlignModeChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnHorizontalAlignModeChanged</b> in a derived class, be sure to call the base class's <b>OnHorizontalAlignModeChanged</b> method so that registered delegates receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnVerticalAlignModeChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.VerticalAlignModeChanged" /> event.
            </summary>
      <param name="e">An EventArgs that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnVerticalAlignModeChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnVerticalAlignModeChanged</b> in a derived class, be sure to call the base class's <b>OnVerticalAlignModeChanged</b> method so that registered delegates receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnFrameSizeChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.FrameSizeChanged" /> event.
            </summary>
      <param name="e">An EventArgs that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnFrameSizeChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnFrameSizeChanged</b> in a derived class, be sure to call the base class's <b>OnFrameSizeChanged</b> method so that registered delegates receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnFrameColorChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.FrameColorChanged" /> event.
            </summary>
      <param name="e">An EventArgs that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnFrameColorChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnFrameColorChanged</b> in a derived class, be sure to call the base class's <b>OnFrameColorChanged</b> method so that registered delegates receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.RedirectPaint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Drawing2D.Matrix)">
      <summary>
            Displays the contents of the <see cref="T:Leadtools.WinForms.RasterImageViewer" /> in the given Graphics object.
            </summary>
      <param name="graphics">The Graphics object used to paint.</param>
      <param name="src">Rectangle which determines the portion of the image to paint.</param>
      <param name="dest">Rectangle which determines where the image is placed, and how it is scaled.</param>
      <param name="destClip">Rectangle which clips the image display.</param>
      <param name="transform">The matrix is used to transform from physical to logical coordinates</param>
      <remarks>
        <para>
            Use this function to paint the contents of the <see cref="T:Leadtools.WinForms.RasterImageViewer" /> onto any <see cref="T:System.Drawing.Graphics" /> object.
            The contents of the RasterImageViewer includes
            the <see cref="P:Leadtools.WinForms.RasterImageViewer.Image" /> and anything painted in the  <see cref="E:Leadtools.WinForms.RasterImageViewer.PostImagePaint" /> event handler.
            When using this function, pass either a valid <i>transform</i> or a <i>dest</i> rectangle, but NOT BOTH.
            It is an error to pass both a <i>transform</i> and a <i>dest</i> rectangle.
            </para>
        <para>
            If you pass a <i>transform</i>matrix, it is applied to the <i>graphics</i> object before any painting takes place.
            If you pass a <i>dest</i> rectangle, internally a transform is constructed from <i>src</i> and <i>dest</i> and it is applied to the <i>graphics</i> object before any painting takes place.
            Passing <i>Rectangle.Empty</i> for the src rectangle gives the default, which is equivalent to the size of the <see cref="P:Leadtools.WinForms.RasterImageViewer.Image" />.
            Passing <i>Rectangle.Empty</i> for the <i>destClip</i> rectangle is equivalent to passing same <see cref="T:System.Drawing.Rectangle" /> as <i>dst</i>.
            Passing <i>null</i> for the transform argument means that <i>src</i> and <i>dest</i> are used to create a transform.
            </para>
      </remarks>
      <example>
        <code lang="VB">      Private Class MyForm2 : Inherits Form
         Private Class MyPanel : Inherits Panel
            Protected Overrides Sub OnPaintBackground(ByVal pe As PaintEventArgs)
               ' do nothing
            End Sub
         End Class

         Private viewer As RasterImageViewer
         Private panel As MyPanel

         Public Sub New(ByVal title As String)
            Text = title
            Size = New Size(750, 450)

            ' Create the raster viewer
            viewer = New RasterImageViewer()
            viewer.DoubleBuffer = True
            viewer.Dock = DockStyle.Fill

            ' Load an image into the viewer
            Dim codecs As RasterCodecs = New RasterCodecs()
            viewer.Image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Sample1.cmp"))
            codecs.Dispose()

            ' Create the panel
            panel = New MyPanel()
            panel.Parent = Me
            panel.Width = 400
            panel.Height = 400
            panel.Dock = DockStyle.Right
            panel.BackColor = Color.Beige
            panel.BorderStyle = BorderStyle.Fixed3D

            Controls.Add(panel)
            panel.BringToFront()

            Controls.Add(viewer)
            viewer.BringToFront()

            AddHandler panel.Paint, AddressOf panel_Paint
            AddHandler viewer.PostImagePaint, AddressOf viewer_PostImagePaint
            AddHandler viewer.RedirectImagePaint, AddressOf viewer_RedirectImagePaint
         End Sub

         Private Sub viewer_RedirectImagePaint(ByVal sender As Object, ByVal e As EventArgs)
            panel.Invalidate()
         End Sub

         Private Sub panel_Paint(ByVal sender As Object, ByVal e As PaintEventArgs)
            If Not viewer.Image Is Nothing Then
               Dim dx As Integer = viewer.Image.Width \ 2
               Dim dy As Integer = viewer.Image.Height \ 2
               Dim dest As Rectangle = viewer.SourceRectangle

               ' move center of image to origin
               Dim m1 As Matrix = New Matrix(1, 0, 0, 1, -dx, -dy)

               ' mirror the image
               Dim m2 As Matrix = New Matrix(-1, 0, 0, 1, 0, 0)
               m1.Multiply(m2, MatrixOrder.Append)

               ' move back to original location
               Dim m3 As Matrix = New Matrix(1, 0, 0, 1, dx, dy)
               m1.Multiply(m3, MatrixOrder.Append)

               ' scale image to fit on panel
               Dim scaleX As Single = CSng(panel.Width) / CSng(viewer.Image.Width)
               Dim scaleY As Single = CSng(panel.Height) / CSng(viewer.Image.Height)
               Dim m4 As Matrix = New Matrix(scaleX, 0, 0, scaleY, 0, 0)
               m1.Multiply(m4, MatrixOrder.Append)

               ' display contents of RaserImageViewer on panel
               viewer.RedirectPaint(e.Graphics, Rectangle.Empty, Rectangle.Empty, Rectangle.Empty, m1)
            End If
         End Sub

         Private Sub viewer_PostImagePaint(ByVal sender As Object, ByVal e As PaintEventArgs)
            Dim graphics As Graphics = e.Graphics
            Dim graphicsState As GraphicsState = graphics.Save()

            Dim font As Font = New Font("Arial", 16)
            e.Graphics.DrawString("This text stays with the window", font, Brushes.Yellow, New PointF(100, 100))

            graphics.MultiplyTransform(viewer.Transform)
            e.Graphics.DrawString("This text stays with the image.", font, Brushes.White, New PointF(100, 200))

            graphics.Restore(graphicsState)
            graphics.Flush()
         End Sub
      End Class

      Public Sub RasterImageViewer_RedirectPaint(ByVal title As String)
         Dim form As MyForm2 = New MyForm2(title)
         form.ShowDialog()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MyForm2 : Form
      {
         class MyPanel : Panel
         {
            protected override void  OnPaintBackground(PaintEventArgs pe)
            {
               // do nothing
            }
         }

         RasterImageViewer viewer;
         MyPanel panel;

         public MyForm2(string title)
         {
            Text = title;
            Size = new Size(750, 450);

            // Create the raster viewer
            viewer = new RasterImageViewer();
            viewer.DoubleBuffer = true;
            viewer.Dock = DockStyle.Fill;

            // Load an image into the viewer
            RasterCodecs codecs = new RasterCodecs();
            viewer.Image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Sample1.cmp"));
            codecs.Dispose();

            // Create the panel
            panel = new MyPanel();
            panel.Parent = this;
            panel.Width = 400;
            panel.Height = 400;
            panel.Dock = DockStyle.Right;
            panel.BackColor = Color.Beige;
            panel.BorderStyle = BorderStyle.Fixed3D;

            Controls.Add(panel);
            panel.BringToFront();

            Controls.Add(viewer);
            viewer.BringToFront();

            panel.Paint += new PaintEventHandler(panel_Paint);
            viewer.PostImagePaint += new PaintEventHandler(viewer_PostImagePaint);
            viewer.RedirectImagePaint += new EventHandler(viewer_RedirectImagePaint);
         }

         void viewer_RedirectImagePaint(object sender, EventArgs e)
         {
            panel.Invalidate();
         }

         void panel_Paint(object sender, PaintEventArgs e)
         {
            if(viewer.Image != null)
            {
               int dx = viewer.Image.Width / 2;
               int dy = viewer.Image.Height / 2;
               Rectangle dest = viewer.SourceRectangle;

               // move center of image to origin
               Matrix m1 = new Matrix(1,0,0,1,-dx,-dy);

               // mirror the image
               Matrix m2 = new Matrix(-1, 0, 0, 1, 0, 0);
               m1.Multiply(m2, MatrixOrder.Append);

               // move back to original location
               Matrix m3 = new Matrix(1, 0, 0, 1, dx, dy);
               m1.Multiply(m3, MatrixOrder.Append);

               // scale image to fit on panel
               float scaleX = (float)panel.Width / (float)viewer.Image.Width;
               float scaleY = (float)panel.Height / (float)viewer.Image.Height;
               Matrix m4 = new Matrix(scaleX, 0, 0, scaleY, 0, 0);
               m1.Multiply(m4, MatrixOrder.Append);

               // display contents of RaserImageViewer on panel
               viewer.RedirectPaint(
                  e.Graphics,
                  Rectangle.Empty, //_viewer.SourceRectangle,
                  Rectangle.Empty,
                  Rectangle.Empty, //e.ClipRectangle, 
                  m1);
            }
         }

         private void viewer_PostImagePaint(object sender, PaintEventArgs e)
         {
            Graphics graphics = e.Graphics;
            GraphicsState graphicsState = graphics.Save();

            Font font = new Font("Arial", 16);
            e.Graphics.DrawString("This text stays with the window", font, Brushes.Yellow, new PointF(100,100));

            graphics.MultiplyTransform(viewer.Transform);
            e.Graphics.DrawString("This text stays with the image.", font, Brushes.White, new PointF(100,200));

            graphics.Restore(graphicsState);
            graphics.Flush();
         }
      }

      public void RasterImageViewer_RedirectPaint(string title)
      {
         MyForm2 form = new MyForm2(title);
         form.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--RasterImageViewer.RedirectPaint-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnRedirectImagePaint(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.RedirectImagePaint" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnPreImagePaint(System.Windows.Forms.PaintEventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.PreImagePaint" /> event.
            </summary>
      <param name="e">An <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnPostImagePaint(System.Windows.Forms.PaintEventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.PostImagePaint" /> event.
            </summary>
      <param name="e">A <b>PaintEventArgs</b> that contains the event data.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnFramesIsPartOfImageChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.FramesIsPartOfImageChanged" /> event.
            </summary>
      <param name="e">An EventArgs that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnFramesIsPartOfImageChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnFramesIsPartOfImageChanged</b> in a derived class, be sure to call the base class's <b>OnFramesIsPartOfImageChanged</b> method so that registered delegates receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnFrameShadowSizeChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.FrameShadowSizeChanged" /> event.
            </summary>
      <param name="e">An EventArgs that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnFrameShadowSizeChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnFrameShadowSizeChanged</b> in a derived class, be sure to call the base class's <b>OnFrameShadowSizeChanged</b> method so that registered delegates receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnFrameShadowColorChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.FrameShadowColorChanged" /> event.
            </summary>
      <param name="e">An EventArgs that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnFrameShadowColorChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnFrameShadowColorChanged</b> in a derived class, be sure to call the base class's <b>OnFrameShadowColorChanged</b> method so that registered delegates receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnTransformChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.TransformChanged" /> event.
            </summary>
      <param name="e">An EventArgs that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnTransformChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnTransformChanged</b> in a derived class, be sure to call the base class's <b>OnTransformChanged</b> method so that registered delegates receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.BeginUpdate">
      <summary>
            Prevents the control from drawing until the <see cref="M:Leadtools.WinForms.RasterImageViewer.EndUpdate" /> method is called.
            </summary>
      <remarks>
            When you want to disable repainting of the viewer, call <b>BeginUpdate</b>.<br />
            When you are ready to resume painting call <see cref="M:Leadtools.WinForms.RasterImageViewer.EndUpdate" />.
            </remarks>
      <example>
        <code lang="VB">      ''' 
      ' center the loaded image in the middle of rasterImageViewer if the image smaller than the viewer size 
      Private Sub centerImage(ByVal viewer As RasterImageViewer)
         ' do center only when RasterViewerSizeMode == Normal
         If viewer.SizeMode = RasterPaintSizeMode.Normal Then
            If viewer.IsImageAvailable = True Then
               If Not viewer.Image Is Nothing Then
                  Dim viewerWidth As Integer = viewer.Right - viewer.Left
                  Dim viewerHeight As Integer = viewer.Bottom - viewer.Top
                  Dim imageWidth As Integer = CInt(viewer.LogicalViewRectangle.Width * viewer.ScaleFactor)
                  Dim imageHeight As Integer = CInt(viewer.LogicalViewRectangle.Height * viewer.ScaleFactor)
                  If imageWidth &lt; viewerWidth Then
                     viewer.BorderPadding.Left = (viewerWidth - imageWidth) \ 2
                  Else
                     viewer.BorderPadding.Left = 0
                  End If

                  If imageHeight &lt; viewerHeight Then
                     viewer.BorderPadding.Top = (viewerHeight - imageHeight) \ 2
                  Else
                     viewer.BorderPadding.Top = 0
                  End If
               End If
            End If
         End If
      End Sub

      Private Sub viewer_TransformedChanged(ByVal sender As Object, ByVal e As EventArgs)
         Dim viewer As RasterImageViewer = CType(IIf(TypeOf sender Is RasterImageViewer, sender, Nothing), RasterImageViewer)
         Dim s As String = String.Format("Transform: {0} {1} {2} {3} {4} {5}", viewer.Transform.Elements(0), viewer.Transform.Elements(1), _
                                         viewer.Transform.Elements(2), viewer.Transform.Elements(3), viewer.Transform.Elements(4), _
                                         viewer.Transform.Elements(5))

         Console.WriteLine(s)
      End Sub

      Public Sub RasterImageViewer_BeginUpdate(ByVal viewer As RasterImageViewer)
         AddHandler viewer.TransformChanged, AddressOf viewer_TransformedChanged

         viewer.BeginUpdate() ' suspend painting of the image
         viewer.ScaleFactor = viewer.ScaleFactor * 0.9F
         centerImage(viewer)
         viewer.EndUpdate() ' start painting of the image

         RemoveHandler viewer.TransformChanged, AddressOf viewer_TransformedChanged
      End Sub</code>
        <code lang="CS">      /// 
      // center the loaded image in the middle of rasterImageViewer if the image smaller than the viewer size 
      private void centerImage(RasterImageViewer viewer)
      {
         // do center only when RasterViewerSizeMode == Normal
         if (viewer.SizeMode == RasterPaintSizeMode.Normal)
         {
            if (viewer.IsImageAvailable == true)
            {
               if (viewer.Image != null)
               {
                  int viewerWidth = viewer.Right - viewer.Left;
                  int viewerHeight = viewer.Bottom - viewer.Top;
                  int imageWidth = (int)(viewer.LogicalViewRectangle.Width * viewer.ScaleFactor);
                  int imageHeight = (int)(viewer.LogicalViewRectangle.Height * viewer.ScaleFactor);
                  if (imageWidth &lt; viewerWidth)
                     viewer.BorderPadding.Left = (viewerWidth - imageWidth) / 2;
                  else
                     viewer.BorderPadding.Left = 0;

                  if (imageHeight &lt; viewerHeight)
                     viewer.BorderPadding.Top = (viewerHeight - imageHeight) / 2;
                  else
                     viewer.BorderPadding.Top = 0;
               }
            }
         }
      }

      private void viewer_TransformedChanged(object sender, EventArgs e)
      {
         RasterImageViewer viewer = sender as RasterImageViewer;
         string s = string.Format("Transform: {0} {1} {2} {3} {4} {5}",
            viewer.Transform.Elements[0],
            viewer.Transform.Elements[1],
            viewer.Transform.Elements[2],
            viewer.Transform.Elements[3],
            viewer.Transform.Elements[4],
            viewer.Transform.Elements[5]);

         Console.WriteLine(s);
      }

      public void RasterImageViewer_BeginUpdate(RasterImageViewer viewer)
      {
         viewer.TransformChanged += new EventHandler(viewer_TransformedChanged);

         viewer.BeginUpdate();  // suspend painting of the image 
         viewer.ScaleFactor = viewer.ScaleFactor * 0.9F;
         centerImage(viewer);
         viewer.EndUpdate(); // start painting of the image 

         viewer.TransformChanged -= new EventHandler(viewer_TransformedChanged);
      }</code>
        <!--RasterImageViewer.BeginUpdate-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.EndUpdate">
      <summary>
            Resumes drawing which was disabled by a call to <see cref="M:Leadtools.WinForms.RasterImageViewer.BeginUpdate" />.
            </summary>
      <remarks>
            When you want to disable repainting of the viewer, call <see cref="M:Leadtools.WinForms.RasterImageViewer.BeginUpdate" />.<br />
            When you are ready to resume painting call <b>EndUpdate</b>.
            </remarks>
      <example>Refer to <see cref="M:Leadtools.WinForms.RasterImageViewer.BeginUpdate" />.</example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.CenterAtPoint(System.Drawing.Point)">
      <summary>
            Centers the image display at the specified point.
            </summary>
      <param name="pt">The point at which to center the image display, in client coordinates.</param>
      <noremarks />
      <example>
        <code lang="VB">      Sub ZoomAndCenter(ByVal viewer As RasterImageViewer, ByVal scaleFactor As Double)
         ' Minimum and maximum scale factors allowed (change if you have to)
         Const minimumScaleFactor As Double = 0.05
         Const maximumScaleFactor As Double = 11
         ' Normalize the scale factor based on min and max
         scaleFactor = Math.Max(minimumScaleFactor, Math.Min(maximumScaleFactor, scaleFactor))

         ' Check if we need to change the scale factor for the viewer
         If (viewer.ScaleFactor &lt;&gt; scaleFactor) Then
            ' Get the current center in logical units
            ' We will use this point later to re-center the viewer

            ' Get what you see in physical coordinates
            Dim rc As Rectangle = Rectangle.Intersect(viewer.PhysicalViewRectangle, viewer.ClientRectangle)
            ' Get the center of what you see in physical coordinates
            Dim center As New PointF(rc.Left + rc.Width \ 2, rc.Top + rc.Height \ 2)
            Dim t As New Transformer(viewer.Transform)
            ' Get the center of what you see in logical coordinates
            center = t.PointToLogical(center)

            ' Set the new scale factor
            viewer.ScaleFactor = scaleFactor

            ' Bring the original center into the view center

            t = New Transformer(viewer.Transform)
            ' Get the center of what you saw before the zoom in physical coordinates
            center = t.PointToPhysical(center)
            ' Bring the old center into the center of the view
            viewer.CenterAtPoint(Point.Round(center))
         End If
      End Sub</code>
        <code lang="CS">      void ZoomAndCenter(RasterImageViewer viewer, double scaleFactor)
      {
         // Minimum and maximum scale factors allowed (change if you have to)
         const double minimumScaleFactor = 0.05;
         const double maximumScaleFactor = 11;
         // Normalize the scale factor based on min and max
         scaleFactor = Math.Max(minimumScaleFactor, Math.Min(maximumScaleFactor, scaleFactor));

         // Check if we need to change the scale factor for the viewer
         if(viewer.ScaleFactor != scaleFactor)
         {
            // Get the current center in logical units
            // We will use this point later to re-center the viewer

            // Get what you see in physical coordinates
            Rectangle rc = Rectangle.Intersect(viewer.PhysicalViewRectangle, viewer.ClientRectangle);
            // Get the center of what you see in physical coordinates
            PointF center = new PointF(rc.Left + rc.Width / 2, rc.Top + rc.Height / 2);
            Transformer t = new Transformer(viewer.Transform);
            // Get the center of what you see in logical coordinates
            center = t.PointToLogical(center);

            // Set the new scale factor
            viewer.ScaleFactor = scaleFactor;

            // Bring the original center into the view center

            t = new Transformer(viewer.Transform);
            // Get the center of what you saw before the zoom in physical coordinates
            center = t.PointToPhysical(center);
            // Bring the old center into the center of the view
            viewer.CenterAtPoint(Point.Round(center));
         }
      }</code>
        <!--RasterImageViewer.CenterAtPoint-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.ZoomToRectangle(System.Drawing.Rectangle)">
      <summary>
            Zooms the image to the specified rectangle.
            </summary>
      <param name="rc">The rectangle to which the image should be zoomed, in client coordinates.</param>
      <noremarks />
      <example>
        <code lang="VB">      Public Sub RasterImageViewer_ZoomToRectangle(ByVal viewer As RasterImageViewer)
         Dim rectSize As Integer = 200
         Dim left As Integer = (viewer.ClientRectangle.Right - viewer.ClientRectangle.Left - rectSize) \ 2
         Dim top As Integer = (viewer.ClientRectangle.Bottom - viewer.ClientRectangle.Top - rectSize) \ 2
         Dim rcZoom As Rectangle = New Rectangle(left, top, rectSize, rectSize)
         viewer.ZoomToRectangle(rcZoom)
      End Sub</code>
        <code lang="CS">      public void RasterImageViewer_ZoomToRectangle(RasterImageViewer viewer)
      {
         int rectSize = 200;
         int left = (viewer.ClientRectangle.Right - viewer.ClientRectangle.Left - rectSize) / 2;
         int top =  (viewer.ClientRectangle.Bottom - viewer.ClientRectangle.Top - rectSize) / 2;
         Rectangle rcZoom = new Rectangle(left, top, rectSize, rectSize);
         viewer.ZoomToRectangle(rcZoom);
      }</code>
        <!--RasterImageViewer.ZoomToRectangle-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnAutoScrollChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.AutoScrollChanged" /> event.
            </summary>
      <param name="e">An EventArgs that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnAutoScrollChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnAutoScrollChanged</b> in a derived class, be sure to call the base class's <b>OnAutoScrollChanged</b> method so that registered delegates receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.WndProc(System.Windows.Forms.Message@)">
      <summary>
            Overrides <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)">Control.WndProc</see>.
            </summary>
      <param name="m">The Windows <see cref="T:System.Windows.Forms.Message" /> to process.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnScrollViewer(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.ScrollViewer" /> event.
            </summary>
      <param name="e">An EventArgs that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnScrollViewer</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnScrollViewer</b> in a derived class, be sure to call the base class's <b>OnScroll</b> method so that registered delegates receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnAutoDisposeImagesChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.AutoDisposeImagesChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnAutoDisposeImagesChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnAutoDisposeImagesChanged</b> in a derived class, be sure to call the base class's <b>OnAutoDisposeImagesChanged</b> method so that registered delegates receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnImageChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.ImageChanged" /> event.
            </summary>
      <param name="e">An EventArgs that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnImageChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnImageChanged</b> in a derived class, be sure to call the base class's <b>OnImageChanged</b> method so that registered delegates receive the event.<br />
            Do not confuse this with <see cref="M:Leadtools.RasterImage.OnChanged(Leadtools.RasterImageChangedEventArgs)" />.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnPaintPropertiesChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.PaintPropertiesChanged" /> event.
            </summary>
      <param name="e">An EventArgs that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnPaintPropertiesChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnPaintPropertiesChanged</b> in a derived class, be sure to call the base class's <b>OnPaintPropertiesChanged</b> method so that registered delegates receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnSizeChanged(System.EventArgs)">
      <summary>
            Occurs when the size of the control has changed.
            </summary>
      <param name="e">An EventArgs that contains the event data.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnPaint(System.Windows.Forms.PaintEventArgs)">
      <summary>
            Overrides <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)">Control.OnPaint</see>.
            </summary>
      <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnAnimateRegionChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.AnimateRegionChanged" /> event.
            </summary>
      <param name="e">An EventArgs that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnAnimateRegionChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnAnimateRegionChanged</b> in a derived class, be sure to call the base class's <b>OnAnimateRegionChanged</b> method so that registered delegates receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.SetInteractiveModeCursor(Leadtools.WinForms.RasterViewerInteractiveMode,System.Windows.Forms.Cursor,System.Windows.Forms.Cursor)">
      <summary>
            Sets the mouse cursors associated with an interactive mode
            </summary>
      <param name="interactiveMode">A <see cref="T:Leadtools.WinForms.RasterViewerInteractiveMode" /> enumeration member that specifies the interactive mode to set the mouse cursors for.</param>
      <param name="idleCursor">A <see cref="P:Leadtools.WinForms.RasterImageViewer.Cursor" /> that defines the mouse cursor to use when the interactive mode is idle.</param>
      <param name="workingCursor">A <see cref="P:Leadtools.WinForms.RasterImageViewer.Cursor" /> that defines the mouse cursor to use when the interactive mode is working.</param>
      <remarks>
        <para>Use this method to set different mouse cursors for each interactive mode used in this <see cref="T:Leadtools.WinForms.RasterImageViewer" />.
            A value of <strong>null</strong> (<strong>Nothing</strong> in Visual Basic) for any of the cursors instructs the viewer
            to use the default cursor set in the <see cref="P:Leadtools.WinForms.RasterImageViewer.Cursor" /> property either by the designer or through code.</para>
        <para>By default, all the interactive modes have a cursor value of <strong>null</strong> (<strong>Nothing</strong> in Visual Basic) and
            changing the interactive mode will not change the mouse cursor unless you call this method first to set the desired
            cursors to use.</para>
        <para>The idle cursor is used when the interactive mode is not working, in other words, when the user has set the interactive
            mode to a value but has not clicked the mouse button to initiate it yet. The working cursor is used when the interactive mode
            is working, in other words, when the user has clicked and start dragging the mouse button.</para>
        <para>Note that when you call this method, the current interactive mode will be canceled if it is working.</para>
      </remarks>
      <example>
        <code lang="VB">      &lt;StructLayout(LayoutKind.Sequential, Pack:=1)&gt; _
      Private Class ICONINFO
         Public fIcon As Boolean
         Public xHotspot As Integer
         Public yHotspot As Integer
         Public hbmMask As IntPtr
         Public hbmColor As IntPtr
      End Class
      &lt;DllImport("user32.dll")&gt; _
      Private Shared Function CreateIconIndirect(ByVal piconinfo As ICONINFO) As IntPtr
      End Function

      &lt;DllImport("user32.dll")&gt; _
      Private Shared Function GetIconInfo(ByVal hIcon As IntPtr, &lt;Out()&gt; ByRef piconinfo As ICONINFO) As Boolean
      End Function

      &lt;DllImport("user32.dll")&gt; _
      Private Shared Function DestroyIcon(ByVal handle As IntPtr) As Boolean
      End Function

      Private Sub SetInteractiveModeCursorExample(ByVal viewer As RasterImageViewer)
         Dim idleCursor As Cursor = Cursors.Cross
         Dim workingCursor As Cursor = Nothing

         ' Create an empty cursor to use when the magnifying glass is on
         ' Use the same size as the Cross cursor

         Using btmp As New Bitmap(idleCursor.Size.Width, idleCursor.Size.Height)
            Using g As Graphics = Graphics.FromImage(btmp)
               g.Clear(Color.Transparent)
            End Using

            Dim iconInfo As New ICONINFO()
            Dim hIcon As IntPtr = btmp.GetHicon()
            GetIconInfo(hIcon, iconInfo)
            iconInfo.xHotspot = btmp.Width \ 2
            iconInfo.yHotspot = btmp.Height \ 2
            iconInfo.fIcon = False

            Dim hCursor As IntPtr = CreateIconIndirect(iconInfo)
            workingCursor = New Cursor(hCursor)

            DestroyIcon(hIcon)
         End Using

         viewer.SetInteractiveModeCursor(RasterViewerInteractiveMode.MagnifyGlass, idleCursor, workingCursor)

         ' Not set the interactive mode to magnify glass
         viewer.InteractiveMode = RasterViewerInteractiveMode.MagnifyGlass
      End Sub</code>
        <code lang="CS">      [StructLayout(LayoutKind.Sequential, Pack = 1)]
      private class ICONINFO
      {
         public bool fIcon;
         public int xHotspot;
         public int yHotspot;
         public IntPtr hbmMask;
         public IntPtr hbmColor;
      }
      [DllImport("user32.dll")]
      private static extern IntPtr CreateIconIndirect([Out] ICONINFO piconinfo);

      [DllImport("user32.dll")]
      private static extern bool GetIconInfo(IntPtr hIcon, [In, Out] ICONINFO piconinfo);

      [DllImport("user32.dll")]
      private extern static bool DestroyIcon(IntPtr handle);

      private void SetInteractiveModeCursorExample(RasterImageViewer viewer)
      {
         Cursor idleCursor = Cursors.Cross;
         Cursor workingCursor = null;

         // Create an empty cursor to use when the magnifying glass is on
         // Use the same size as the Cross cursor

         using(Bitmap btmp = new Bitmap(idleCursor.Size.Width, idleCursor.Size.Height))
         {
            using(Graphics g = Graphics.FromImage(btmp))
            {
               g.Clear(Color.Transparent);
            }

            ICONINFO iconInfo = new ICONINFO();
            IntPtr hIcon = btmp.GetHicon();
            GetIconInfo(hIcon, iconInfo);
            iconInfo.xHotspot = btmp.Width / 2;
            iconInfo.yHotspot = btmp.Height / 2;
            iconInfo.fIcon = false;

            IntPtr hCursor = CreateIconIndirect(iconInfo);
            workingCursor = new Cursor(hCursor);

            DestroyIcon(hIcon);
         }

         viewer.SetInteractiveModeCursor(RasterViewerInteractiveMode.MagnifyGlass, idleCursor, workingCursor);

         // Not set the interactive mode to magnify glass
         viewer.InteractiveMode = RasterViewerInteractiveMode.MagnifyGlass;
      }</code>
        <!--RasterImageViewer.SetInteractiveModeCursor-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnInteractiveModeChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveModeChanged" /> event.
            </summary>
      <param name="e">An EventArgs that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnInteractiveModeChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnInteractiveModeChanged</b> in a derived class, be sure to call the base class's <b>OnInteractiveModeChanged</b> method so that registered delegates receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnInteractiveRegionTypeChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveRegionTypeChanged" /> event.
            </summary>
      <param name="e">An EventArgs that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnInteractiveRegionTypeChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnInteractiveRegionTypeChanged</b> in a derived class, be sure to call the base class's <b>OnInteractiveRegionTypeChanged</b> method so that registered delegates receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnInteractiveRegionCombineModeChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveRegionCombineModeChanged" /> event.
            </summary>
      <param name="e">An EventArgs that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnInteractiveRegionCombineModeChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnInteractiveRegionCombineModeChanged</b> in a derived class, be sure to call the base class's <b>OnInteractiveRegionCombineModeChanged</b> method so that registered delegates receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
      <summary>
            Occurs when the user presses a mouse button. 
            </summary>
      <param name="e">A MouseEventArgs that contains the event data.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
      <summary>
            Occurs when the user moves the mouse over the control.
            </summary>
      <param name="e">A MouseEventArgs that contains the event data.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
      <summary>
            Occurs when the user releases a mouse button.
            </summary>
      <param name="e">A MouseEventArgs that contains the event data.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnLostFocus(System.EventArgs)">
      <summary>
            Occurs when the control loses focus.
            </summary>
      <param name="e">An EventArgs that contains the event data.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnInteractivePan(Leadtools.WinForms.RasterViewerLineEventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.InteractivePan" /> event.
            </summary>
      <param name="e">A <see cref="T:Leadtools.WinForms.RasterViewerLineEventArgs" /> that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnInteractivePan</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnInteractivePan</b> in a derived class, be sure to call the base class's <b>OnInteractivePan</b> method so that registered delegates receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnInteractivePage(Leadtools.WinForms.RasterViewerLineEventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.InteractivePage" /> event.
            </summary>
      <param name="e">A <see cref="T:Leadtools.WinForms.RasterViewerLineEventArgs" /> that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnInteractivePage</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnInteractivePage</b> in a derived class, be sure to call the base class's <b>OnInteractivePage</b> method so that registered delegates receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnInteractiveScale(Leadtools.WinForms.RasterViewerLineEventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveScale" /> event.
            </summary>
      <param name="e">A <see cref="T:Leadtools.WinForms.RasterViewerLineEventArgs" /> that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnInteractiveScale</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnInteractiveScale</b> in a derived class, be sure to call the base class's <b>OnInteractiveScale</b> method so that registered delegates receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnInteractiveMagnifyGlass(Leadtools.WinForms.RasterViewerLineEventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveMagnifyGlass" /> event.
            </summary>
      <param name="e">A <see cref="T:Leadtools.WinForms.RasterViewerLineEventArgs" /> that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnInteractiveMagnifyGlass</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnInteractiveMagnifyGlass</b> in a derived class, be sure to call the base class's <b>OnInteractiveMagnifyGlass</b> method so that registered delegates receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnInteractiveCenterAt(Leadtools.WinForms.RasterViewerPointEventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveCenterAt" /> event.
            </summary>
      <param name="e">A RasterViewerPointEventArgs that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnInteractiveCenterAt</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnInteractiveCenterAt</b> in a derived class, be sure to call the base class's <b>OnInteractiveCenterAt</b> method so that registered delegates receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnInteractiveZoomTo(Leadtools.WinForms.RasterViewerRectangleEventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveZoomTo" /> event.
            </summary>
      <param name="e">A RasterViewerRectangleEventArgs that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnInteractiveZoomTo</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnInteractiveZoomTo</b> in a derived class, be sure to call the base class's <b>OnInteractiveZoomTo</b> method so that registered delegates receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnInteractiveRegionRectangle(Leadtools.WinForms.RasterViewerRectangleEventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveRegionRectangle" /> event.
            </summary>
      <param name="e">A RasterViewerRectangleEventArgs that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnInteractiveRegionRectangle</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnInteractiveRegionRectangle</b> in a derived class, be sure to call the base class's <b>OnInteractiveRegionRectangle</b> method so that registered delegates receive the event.
            </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.IsInteractiveModeBusy" />.
            </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnInteractiveRegionEllipse(Leadtools.WinForms.RasterViewerRectangleEventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveRegionEllipse" /> event.
            </summary>
      <param name="e">A RasterViewerRectangleEventArgs that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnInteractiveRegionEllipse</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnInteractiveRegionEllipse</b> in a derived class, be sure to call the base class's <b>OnInteractiveRegionEllipse</b> method so that registered delegates receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnInteractiveUserRectangle(Leadtools.WinForms.RasterViewerRectangleEventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveUserRectangle" /> event.
            </summary>
      <param name="e">A <see cref="T:Leadtools.WinForms.RasterViewerRectangleEventArgs" /> object that contains the event data.</param>
      <remarks>
        <para>Raising an event invokes the event handler through a delegate. The <see cref="M:Leadtools.WinForms.RasterImageViewer.OnInteractiveUserRectangle(Leadtools.WinForms.RasterViewerRectangleEventArgs)" /> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</para>
        <para>
          <strong>Notes to Inheritors:</strong> When overriding <see cref="M:Leadtools.WinForms.RasterImageViewer.OnInteractiveUserRectangle(Leadtools.WinForms.RasterViewerRectangleEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:Leadtools.WinForms.RasterImageViewer.OnInteractiveUserRectangle(Leadtools.WinForms.RasterViewerRectangleEventArgs)" />
            method so that registered delegates receive the event.</para>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnInteractiveRegionFreehand(Leadtools.WinForms.RasterViewerPointsEventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveRegionFreehand" /> event.
            </summary>
      <param name="e">A RasterViewerPointsEventArgs that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnInteractiveRegionFreehand</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnInteractiveRegionFreehand</b> in a derived class, be sure to call the base class's <b>OnInteractiveRegionFreehand</b> method so that registered delegates receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnScrollPositionChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.ScrollPositionChanged" /> event.
            </summary>
      <param name="e">An EventArgs that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnScrollPositionChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnScrollPositionChanged</b> in a derived class, be sure to call the base class's <b>OnScrollPositionChanged</b> method so that registered delegates receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnMagnifyGlassChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.MagnifyGlassChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnMagnifyGlassChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnMagnifyGlassChanged</b> in a derived class, be sure to call the base class's <b>OnMagnifyGlassChanged</b> method so that registered delegates receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnFloaterImageChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.FloaterImageChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnFloaterImageChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnFloaterImageChanged</b> in a derived class, be sure to call the base class's <b>OnFloaterImageChanged</b> method so that registered delegates receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnFloaterPositionChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.FloaterPositionChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnFloaterPositionChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnFloaterPositionChanged</b> in a derived class, be sure to call the base class's <b>OnFloaterPositionChanged</b> method so that registered delegates receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnFloaterVisibleChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.FloaterVisibleChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnFloaterVisibleChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnFloaterVisibleChanged</b> in a derived class, be sure to call the base class's <b>OnFloaterVisibleChanged</b> method so that registered delegates receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnInteractiveFloater(Leadtools.WinForms.RasterViewerPointEventArgs)">
      <summary>
            Raises the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode" /> event.
            </summary>
      <param name="e">A <see cref="T:Leadtools.WinForms.RasterViewerPointEventArgs" /> that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnInteractiveMode</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnInteractiveMode</b> in a derived class, be sure to call the base class's <b>OnInteractiveMode</b> method so that registered delegates receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.CombineFloater(System.Boolean,Leadtools.ImageProcessing.CombineFastCommandFlags)">
      <summary>
            Combines the <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterImage" /> with the <see cref="P:Leadtools.WinForms.RasterImageViewer.Image" /> currently inside this <see cref="T:Leadtools.WinForms.RasterImageViewer" />.
            </summary>
      <param name="autoColorResolution">If true, automatically checks if the <see cref="P:Leadtools.RasterImage.BitsPerPixel" /> value of <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterImage" /> is different than that of <see cref="P:Leadtools.WinForms.RasterImageViewer.Image" /> and converts the <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterImage" /> prior to combining if necessary.</param>
      <param name="combineFlags">A <see cref="T:Leadtools.ImageProcessing.CombineFastCommandFlags" /> determining the source and destination operation used when combining the <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterImage" /> with the <see cref="P:Leadtools.WinForms.RasterImageViewer.Image" />.</param>
      <remarks>
        <p>This method will use the <see cref="T:Leadtools.ImageProcessing.CombineFastCommand" /> image processing command to combine the <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterImage" /> with <see cref="P:Leadtools.WinForms.RasterImageViewer.Image" />.  The <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterImage" /> will be combined at the position specified by <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterPosition" />.</p>
        <p>If the value of <i>autoColorResolution</i> is set to true and <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterImage" /> has a different bits/pixel value of <see cref="P:Leadtools.WinForms.RasterImageViewer.Image" />, this method will first use the <see cref="T:Leadtools.ImageProcessing.ColorResolutionCommand" /> image processing command to convert <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterImage" /> to the same bits/pixel of <see cref="P:Leadtools.WinForms.RasterImageViewer.Image" />.  If the value of <i>autoColorResolution</i> is false, no conversion will take place and this method might throw an exception of the bits/pixel value of the two images are not compatible.</p>
        <p>After you call this method, you can set the value of <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterImage" /> to null (Nothing in Visual Basic) to dispose it.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterImage" />.
            </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.RegionToFloater">
      <summary>
            Converts the image region to a floater.
            </summary>
      <remarks>
        <p>Call this method to convert the current region inside <see cref="P:Leadtools.WinForms.RasterImageViewer.Image" /> to a floater.  The <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterPosition" /> is automatically updated after you call this method.</p>
        <p>This method will not delete the region from <see cref="P:Leadtools.WinForms.RasterImageViewer.Image" />.  If you need to do that, call <see cref="M:Leadtools.RasterImage.MakeRegionEmpty" /> after you call this method.</p>
        <p>If the <see cref="P:Leadtools.WinForms.RasterImageViewer.Image" /> inside this <see cref="T:Leadtools.WinForms.RasterImageViewer" /> does not have a region, this method will do nothing.</p>
        <p>This method uses the <see cref="T:Leadtools.ImageProcessing.CopyRectangleCommand" /> image processing command to convert the image region to a floater image.</p>
      </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterImage" />.
            </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnAnimateFloaterChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.AnimateFloaterChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnAnimateFloaterChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnAnimateFloaterChanged</b> in a derived class, be sure to call the base class's <b>OnAnimateFloaterChanged</b> method so that registered delegates receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnEnableTimerChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.EnableTimerChanged" /> event.
            </summary>
      <param name="e">An EventArgs that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnEnableTimerChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnEnableTimerChanged</b> in a derived class, be sure to call the base class's <b>OnEnableTimerChanged</b> method so that registered delegates receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnWriteBindingData(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.WriteBindingData" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
        <p>Raising an event invokes the event handler through a delegate.</p>
        <p>The <b>OnWriteBindingData</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
        <p>
          <b>Notes to Inheritors:</b> When overriding <b>OnWriteBindingData</b> in a derived class, be sure to call
            the base class's <b>OnWriteBindingData</b> method so that registered delegates receive the event.</p>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnReadBindingData(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.ReadBindingData" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
        <p>Raising an event invokes the event handler through a delegate.</p>
        <p>The <b>OnReadBindingData</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
        <p>
          <b>Notes to Inheritors:</b> When overriding <b>OnReadBindingData</b> in a derived class, be sure to call
            the base class's <b>OnReadBindingData</b> method so that registered delegates receive the event.</p>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnInteractiveModeEnded(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveModeEnded" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnInteractiveModeEnded</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnInteractiveModeEnded</b> in a derived class, be sure to call the base class's <b>OnInteractiveModeEnded</b> method so that registered delegates receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnEnableScrollingInterfaceChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.EnableScrollingInterfaceChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
        <p>Raising an event invokes the event handler through a delegate.</p>
        <p>The <b>OnEnableScrollingInterfaceChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
        <p>
          <b>Notes to Inheritors:</b> When overriding <b>OnEnableScrollingInterfaceChanged</b> in a derived class, be sure to call
            the base class's <b>OnEnableScrollingInterfaceChanged</b> method so that registered delegates receive the event.</p>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.IsInputKey(System.Windows.Forms.Keys)">
      <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)">Control.IsInputKey</see>.
            </summary>
      <param name="keyData">One of the <see cref="T:System.Windows.Forms.Keys" /> values.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
      <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)">Control.OnKeyDown</see>.
            </summary>
      <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that contains the event data.</param>
      <noremarks />
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnUseDpiChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.UseDpiChanged" /> event.
            </summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
      <remarks>
        <p>Raising an event invokes the event handler through a delegate.</p>
        <p>The <b>OnUseDpiChanged</b> method also allows derived classes to handle the event without attaching a
            delegate. This is the preferred technique for handling the event in a derived class.</p>
        <p>
          <b>Notes to Inheritors:</b> When overriding <b>OnUseDpiChanged</b> in a derived class, be sure to call
            the base class's <b>OnUseDpiChanged</b> method so that registered delegates receive the event.</p>
      </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.GetTransformWithDpi">
      <summary>
            Return the transform of the viewer taking into account the DPI of the image.
            </summary>
      <returns>A <see cref="T:System.Drawing.Drawing2D.Matrix" /> object containing the values of the transform of the viewer taking into account the DPI of the image</returns>
      <remarks>
        <para>Use this instead of the <see cref="P:Leadtools.WinForms.RasterImageViewer.Transform" /> property when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.UseDpi" /> property is set to <strong>true</strong>.</para>
        <para>If the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.UseDpi" /> property is <strong>false</strong>, then the return value of this method is an exact copy of the <see cref="P:Leadtools.WinForms.RasterImageViewer.Transform" /> matrix.</para>
        <para>Note, since this method returns a copy of the matrix used inside this <see cref="T:Leadtools.WinForms.RasterImageViewer" /> object, you need to call <see cref="M:System.Drawing.Drawing2D.Matrix.Dispose">Matrix.Dispose</see> on the return object.</para>
      </remarks>
      <example>
        <code lang="VB">      Friend Class MyForm4 : Inherits Form
         Private _viewer As RasterImageViewer
         ' Are we currently rubber banding
         Private isRubberBanding As Boolean
         ' The current rubberband rectangle
         Private rubberBandingRectangle As Rectangle
         ' Flag to indicates if the rubber band rectangle is drawn
         Private isRubberBandingRectangleDrawn As Boolean
         ' Did we clicp the cursor?
         Private isCursorClipped As Boolean
         Private saveClipRectangle As Rectangle

         Public Sub New(ByVal title As String)
            Text = title
            Size = New Size(750, 450)

            ' Create the raster viewer
            _viewer = New RasterImageViewer()
            _viewer.DoubleBuffer = True
            _viewer.Dock = DockStyle.Fill

            ' Load an image into the viewer
            Dim codecs As RasterCodecs = New RasterCodecs()
            _viewer.Image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Sample1.cmp"))
            codecs.Dispose()

            Controls.Add(_viewer)
            _viewer.BringToFront()
            StartRubberBanding()
         End Sub

         ' Call this to start rubber banding on the viewer
         Private Sub StartRubberBanding()
            ' Subclass to the event we need
            AddHandler _viewer.MouseDown, AddressOf _viewer_MouseDown
            AddHandler _viewer.MouseMove, AddressOf _viewer_MouseMove
            AddHandler _viewer.MouseUp, AddressOf _viewer_MouseUp
            AddHandler _viewer.LostFocus, AddressOf _viewer_LostFocus
         End Sub

         ' Call this to stop rubber banding on the viewer
         Private Sub StopRubberBanding()
            ' Un-subclass to the events
            RemoveHandler _viewer.MouseDown, AddressOf _viewer_MouseDown
            RemoveHandler _viewer.MouseMove, AddressOf _viewer_MouseMove
            RemoveHandler _viewer.MouseUp, AddressOf _viewer_MouseUp
            RemoveHandler _viewer.LostFocus, AddressOf _viewer_LostFocus

            isRubberBanding = False
            rubberBandingRectangle = Rectangle.Empty
            isRubberBandingRectangleDrawn = False
            isCursorClipped = False
            saveClipRectangle = Rectangle.Empty
         End Sub

         ' Begins the rubber banding operation
         Private Sub BeginRubberBanding(ByVal x As Integer, ByVal y As Integer)
            rubberBandingRectangle = Rectangle.FromLTRB(x, y, x, y)

            isRubberBanding = True
            _viewer.Capture = True

            ' Clip the cursor
            ClipCursor(True)

            DrawRubberBandRectangle()
         End Sub

         ' Ends the rubber banding
         Private Sub EndRubberBanding()
            _viewer.Capture = False
            isRubberBanding = False

            If isRubberBandingRectangleDrawn Then
               DrawRubberBandRectangle()
            End If

            If isCursorClipped Then
               ClipCursor(False)
            End If
         End Sub

         Private Sub ClipCursor(ByVal clip As Boolean)
            If clip Then
               Dim rect As Rectangle = Rectangle.Intersect(FixRectangle(_viewer.PhysicalViewRectangle), _viewer.ClientRectangle)
               rect = _viewer.RectangleToScreen(rect)
               Dim parent As Control = _viewer.Parent
               Do While Not parent Is Nothing
                  rect = Rectangle.Intersect(rect, _viewer.Parent.RectangleToScreen(_viewer.Parent.ClientRectangle))
                  If TypeOf parent Is Form Then
                     Dim form As Form = TryCast(parent, Form)
                     If form.IsMdiChild Then
                        If Not form.Owner Is Nothing Then
                           rect = Rectangle.Intersect(rect, form.Owner.RectangleToScreen(form.Owner.ClientRectangle))
                        ElseIf Not form.Parent Is Nothing Then
                           rect = Rectangle.Intersect(rect, form.Parent.RectangleToScreen(form.Parent.ClientRectangle))
                        End If
                     End If
                  End If

                  parent = parent.Parent
               Loop

               rect.Height += 1
               rect.Width += 1

               saveClipRectangle = Cursor.Clip
               Cursor.Clip = rect
               isCursorClipped = True
            Else
               Cursor.Clip = saveClipRectangle
               isCursorClipped = False
               saveClipRectangle = Rectangle.Empty
            End If
         End Sub

         Private Shared Function FixRectangle(ByVal rect As Rectangle) As Rectangle
            If rect.Left &gt; rect.Right Then
               rect = Rectangle.FromLTRB(rect.Right, rect.Top, rect.Left, rect.Bottom)
            End If
            If rect.Top &gt; rect.Bottom Then
               rect = Rectangle.FromLTRB(rect.Left, rect.Bottom, rect.Right, rect.Top)
            End If

            Return rect
         End Function

         ' Draws the rubberband rectangle on the viewer
         Private Sub DrawRubberBandRectangle()
            Dim rect As Rectangle = FixRectangle(rubberBandingRectangle)
            rect.Width += 1
            rect.Height += 1
            rect = _viewer.RectangleToScreen(rect)
            ControlPaint.DrawReversibleFrame(rect, Color.Transparent, FrameStyle.Thick)

            isRubberBandingRectangleDrawn = Not isRubberBandingRectangleDrawn
         End Sub

         Private Sub _viewer_MouseDown(ByVal sender As Object, ByVal e As MouseEventArgs)
            _viewer.Focus()

            ' Cancel rubber banding if it is on
            If isRubberBanding Then
               EndRubberBanding()
            Else
               If _viewer.IsImageAvailable AndAlso e.Button = MouseButtons.Left Then
                  ' See if we click is on the image
                  Dim rect As Rectangle = _viewer.PhysicalViewRectangle
                  If rect.Contains(e.X, e.Y) Then
                     ' Start the rubber banding
                     BeginRubberBanding(e.X, e.Y)
                  End If
               End If
            End If
         End Sub

         Private Sub _viewer_MouseMove(ByVal sender As Object, ByVal e As MouseEventArgs)
            If isRubberBanding Then
               DrawRubberBandRectangle()

               rubberBandingRectangle = Rectangle.FromLTRB(rubberBandingRectangle.Left, rubberBandingRectangle.Top, e.X, e.Y)

               DrawRubberBandRectangle()
            End If
         End Sub

         Private Sub _viewer_MouseUp(ByVal sender As Object, ByVal e As MouseEventArgs)
            If isRubberBanding Then
               ' Save the rubberband rectangle
               Dim rect As Rectangle = rubberBandingRectangle

               EndRubberBanding()

               ' First, convert the rectangle to image coordinates

               rect = FixRectangle(rect)

               ' Must be at least 1 pixel in size
               If rect.Width &gt; 1 AndAlso rect.Height &gt; 1 Then
                  ' Get the transform matrix
                  ' This works even if the UseDpi property of the viewer is set to true
                  Using transform As Matrix = _viewer.GetTransformWithDpi()
                     Dim t As Transformer = New Transformer(transform)
                     rect = Rectangle.Round(t.RectangleToLogical(rect))
                     Dim lrect As LeadRect = New LeadRect(rect.Left, rect.Top, rect.Width, rect.Height)

                     ' Add this rectangle as a region
                     ' Note: no conversion or xform is needed
                     _viewer.Image.AddRectangleToRegion(Nothing, lrect, RasterRegionCombineMode.Set)
                  End Using
               End If
            End If
         End Sub

         Private Sub _viewer_LostFocus(ByVal sender As Object, ByVal e As EventArgs)
            If isRubberBanding Then
               EndRubberBanding()
            End If
         End Sub
      End Class

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MyForm4 : Form
      {
         private RasterImageViewer _viewer;
         // Are we currently rubber banding
         private bool isRubberBanding;
         // The current rubberband rectangle
         private Rectangle rubberBandingRectangle;
         // Flag to indicates if the rubber band rectangle is drawn
         private bool isRubberBandingRectangleDrawn;
         // Did we clicp the cursor?
         private bool isCursorClipped;
         private Rectangle saveClipRectangle;

         public MyForm4(string title)
         {
            Text = title;
            Size = new Size(750, 450);

            // Create the raster viewer
            _viewer = new RasterImageViewer();
            _viewer.DoubleBuffer = true;
            _viewer.Dock = DockStyle.Fill;

            // Load an image into the viewer
            RasterCodecs codecs = new RasterCodecs();
            _viewer.Image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Sample1.cmp"));
            codecs.Dispose();

            Controls.Add(_viewer);
            _viewer.BringToFront();
            StartRubberBanding();
         }

         // Call this to start rubber banding on the viewer
         private void StartRubberBanding()
         {
            // Subclass to the event we need
            _viewer.MouseDown += new MouseEventHandler(_viewer_MouseDown);
            _viewer.MouseMove += new MouseEventHandler(_viewer_MouseMove);
            _viewer.MouseUp += new MouseEventHandler(_viewer_MouseUp);
            _viewer.LostFocus += new EventHandler(_viewer_LostFocus);
         }

         // Call this to stop rubber banding on the viewer
         private void StopRubberBanding()
         {
            // Un-subclass to the events
            _viewer.MouseDown -= new MouseEventHandler(_viewer_MouseDown);
            _viewer.MouseMove -= new MouseEventHandler(_viewer_MouseMove);
            _viewer.MouseUp -= new MouseEventHandler(_viewer_MouseUp);
            _viewer.LostFocus -= new EventHandler(_viewer_LostFocus);

            isRubberBanding = false;
            rubberBandingRectangle = Rectangle.Empty;
            isRubberBandingRectangleDrawn = false;
            isCursorClipped = false;
            saveClipRectangle = Rectangle.Empty;
         }

         // Begins the rubber banding operation
         private void BeginRubberBanding(int x, int y)
         {
            rubberBandingRectangle = Rectangle.FromLTRB(x, y, x, y);

            isRubberBanding = true;
            _viewer.Capture = true;

            // Clip the cursor
            ClipCursor(true);

            DrawRubberBandRectangle();
         }

         // Ends the rubber banding
         private void EndRubberBanding()
         {
            _viewer.Capture = false;
            isRubberBanding = false;

            if (isRubberBandingRectangleDrawn)
               DrawRubberBandRectangle();

            if (isCursorClipped)
               ClipCursor(false);
         }

         private void ClipCursor(bool clip)
         {
            if (clip)
            {
               Rectangle rect = Rectangle.Intersect(FixRectangle(_viewer.PhysicalViewRectangle), _viewer.ClientRectangle);
               rect = _viewer.RectangleToScreen(rect);
               Control parent = _viewer.Parent;
               while (parent != null)
               {
                  rect = Rectangle.Intersect(rect, _viewer.Parent.RectangleToScreen(_viewer.Parent.ClientRectangle));
                  if (parent is Form)
                  {
                     Form form = parent as Form;
                     if (form.IsMdiChild)
                     {
                        if (form.Owner != null)
                           rect = Rectangle.Intersect(rect, form.Owner.RectangleToScreen(form.Owner.ClientRectangle));
                        else if (form.Parent != null)
                           rect = Rectangle.Intersect(rect, form.Parent.RectangleToScreen(form.Parent.ClientRectangle));
                     }
                  }

                  parent = parent.Parent;
               }

               rect.Height += 1;
               rect.Width += 1;

               saveClipRectangle = Cursor.Clip;
               Cursor.Clip = rect;
               isCursorClipped = true;
            }
            else
            {
               Cursor.Clip = saveClipRectangle;
               isCursorClipped = false;
               saveClipRectangle = Rectangle.Empty;
            }
         }

         private static Rectangle FixRectangle(Rectangle rect)
         {
            if (rect.Left &gt; rect.Right)
               rect = Rectangle.FromLTRB(rect.Right, rect.Top, rect.Left, rect.Bottom);
            if (rect.Top &gt; rect.Bottom)
               rect = Rectangle.FromLTRB(rect.Left, rect.Bottom, rect.Right, rect.Top);

            return rect;
         }

         // Draws the rubberband rectangle on the viewer
         private void DrawRubberBandRectangle()
         {
            Rectangle rect = FixRectangle(rubberBandingRectangle);
            rect.Width++;
            rect.Height++;
            rect = _viewer.RectangleToScreen(rect);
            ControlPaint.DrawReversibleFrame(rect, Color.Transparent, FrameStyle.Thick);

            isRubberBandingRectangleDrawn = !isRubberBandingRectangleDrawn;
         }

         private void _viewer_MouseDown(object sender, MouseEventArgs e)
         {
            _viewer.Focus();

            // Cancel rubber banding if it is on
            if (isRubberBanding)
               EndRubberBanding();
            else
            {
               if (_viewer.IsImageAvailable &amp;&amp; e.Button == MouseButtons.Left)
               {
                  // See if we click is on the image
                  Rectangle rect = _viewer.PhysicalViewRectangle;
                  if (rect.Contains(e.X, e.Y))
                  {
                     // Start the rubber banding
                     BeginRubberBanding(e.X, e.Y);
                  }
               }
            }
         }

         private void _viewer_MouseMove(object sender, MouseEventArgs e)
         {
            if (isRubberBanding)
            {
               DrawRubberBandRectangle();

               rubberBandingRectangle = Rectangle.FromLTRB(
                  rubberBandingRectangle.Left,
                  rubberBandingRectangle.Top,
                  e.X,
                  e.Y);

               DrawRubberBandRectangle();
            }
         }

         private void _viewer_MouseUp(object sender, MouseEventArgs e)
         {
            if (isRubberBanding)
            {
               // Save the rubberband rectangle
               Rectangle rect = rubberBandingRectangle;

               EndRubberBanding();

               // First, convert the rectangle to image coordinates

               rect = FixRectangle(rect);

               // Must be at least 1 pixel in size
               if (rect.Width &gt; 1 &amp;&amp; rect.Height &gt; 1)
               {
                  // Get the transform matrix
                  // This works even if the UseDpi property of the viewer is set to true
                  using (Matrix transform = _viewer.GetTransformWithDpi())
                  {
                     Transformer t = new Transformer(transform);
                     rect = Rectangle.Round(t.RectangleToLogical(rect));
                     LeadRect lrect = new LeadRect(rect.Left, rect.Top, rect.Width, rect.Height);

                     lrect = _viewer.Image.RectangleToImage(RasterViewPerspective.TopLeft, lrect);

                     // Add this rectangle as a region
                     // Note: no conversion or xform is needed
                     _viewer.Image.AddRectangleToRegion(null, lrect, RasterRegionCombineMode.Set);
                  }
               }
            }
         }

         private void _viewer_LostFocus(object sender, EventArgs e)
         {
            if (isRubberBanding)
            {
               EndRubberBanding();
            }
         }
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--RasterImageViewer.GetTransformWithDpi-->
      </example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.ViewerToImageRectangle(System.Drawing.Rectangle,System.Boolean)">
      <summary>
            Converts a rectangle in viewer coordinates to image coordinates.
            </summary>
      <param name="rect">The rectangle in viewer coordinates.</param>
      <param name="accountForViewPerspective">
        <strong>true</strong> to return the coordinates in the current <see cref="P:Leadtools.WinForms.RasterImageViewer.Image" /> view perspective. <strong>false</strong> to return the coordinates in 
            top-left view perspective.</param>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> object containing the rectangle coordinates.</returns>
      <remarks>
        <para>This method converts a rectangle from viewer (physical) to image (logical) coordinates. The viewer coordinates is what you are currently seeing on the screen. It contains the current scale and
            scroll values (as well as any padding if set). For example, when you use the <see cref="T:Leadtools.WinForms.RasterViewerInteractiveMode">RasterViewerInteractiveMode.UserRectangle</see>, the value obtained from the
            <see cref="P:Leadtools.WinForms.RasterViewerRectangleEventArgs.Rectangle">RasterViewerRectangleEventArgs.Rectangle</see> parameter to the <see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveUserRectangle" /> event is in physical coordinates. If you
            need to convert this value to image coordinates (for example, to use it as a region or to find the exact pixel coordinate of this rectangle in the image) then you should use the
            <see cref="M:Leadtools.WinForms.RasterImageViewer.ViewerToImageRectangle(System.Drawing.Rectangle,System.Boolean)" /> method.</para>
        <para>When <paramref name="accountForViewPerspective" /> is set to <strong>true</strong>, the return rectangle value is in the same view perspective as the current image
            (<see cref="P:Leadtools.RasterImage.ViewPerspective">RasterImage.ViewPerspective</see>) which might not be necessary in top-left coordinates. If this value is <strong>false</strong>, the return value is
            always in top-left coordinates.</para>
        <para>To convert a rectangle from image (logical) to viewer (physical) coordinates, use the <see cref="M:Leadtools.WinForms.RasterImageViewer.ImageToViewerRectangle(System.Drawing.Rectangle,System.Boolean)" /> method.</para>
        <para>To convert a point from image to viewer coordinates and back, use <see cref="M:Leadtools.WinForms.RasterImageViewer.ImageToViewerPoint(System.Drawing.Point,System.Boolean)" /> and <see cref="M:Leadtools.WinForms.RasterImageViewer.ViewerToImagePoint(System.Drawing.Point,System.Boolean)" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveUserRectangle" />.</example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.ImageToViewerRectangle(System.Drawing.Rectangle,System.Boolean)">
      <summary>
            Converts a rectangle in image coordinates to viewer coordinates.
            </summary>
      <param name="rect">The rectangle in image coordinates.</param>
      <param name="accountForViewPerspective">
        <strong>true</strong> if <paramref name="rect" /> is already in the image view-perspective. <strong>false</strong> if <paramref name="rect" /> is in top-left
            coordinates.</param>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> object containing the rectangle coordinates.</returns>
      <remarks>
        <para>This method converts a rectangle from image (logical) to viewer (physical) coordinates. The viewer coordinates is what you are currently seeing on the screen. It contains the current scale and
            scroll values (as well as any padding if set). For example, when you use the <see cref="T:Leadtools.WinForms.RasterViewerInteractiveMode">RasterViewerInteractiveMode.UserRectangle</see>, the value obtained from the
            <see cref="P:Leadtools.WinForms.RasterViewerRectangleEventArgs.Rectangle">RasterViewerRectangleEventArgs.Rectangle</see> parameter to the <see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveUserRectangle" /> event is in physical coordinates. If you
            need to convert this value to image coordinates (for example, to use it as a region or to find the exact pixel coordinate of this rectangle in the image) then you should use the
            <see cref="M:Leadtools.WinForms.RasterImageViewer.ViewerToImageRectangle(System.Drawing.Rectangle,System.Boolean)" /> method.</para>
        <para>When <paramref name="accountForViewPerspective" /> is set to <strong>true</strong>, it is assumed that <paramref name="rect" /> is already in the correct view perspective of the
            as the current image (<see cref="P:Leadtools.RasterImage.ViewPerspective">RasterImage.ViewPerspective</see>), therefore, no conversion to top-left (which what the physical coordinates are always in) is performed.
            If however this value is <strong>false</strong>, then this method will convert <paramref name="rect" /> to top-left coordinates before converting it to physical coordinates.</para>
        <para>To convert a rectangle from viewer (physical) to image (logical) coordinates, use the <see cref="M:Leadtools.WinForms.RasterImageViewer.ViewerToImageRectangle(System.Drawing.Rectangle,System.Boolean)" /> method.</para>
        <para>To convert a point from image to viewer coordinates and back, use <see cref="M:Leadtools.WinForms.RasterImageViewer.ImageToViewerPoint(System.Drawing.Point,System.Boolean)" /> and <see cref="M:Leadtools.WinForms.RasterImageViewer.ViewerToImagePoint(System.Drawing.Point,System.Boolean)" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveUserRectangle" />.</example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.ViewerToImagePoint(System.Drawing.Point,System.Boolean)">
      <summary>
            Converts a point in viewer coordinates to image coordinates.
            </summary>
      <param name="point">The point in viewer coordinates.</param>
      <param name="accountForViewPerspective">
        <strong>true</strong> to return the coordinates in the current <see cref="P:Leadtools.WinForms.RasterImageViewer.Image" /> view perspective. <strong>false</strong> to return the coordinates in 
            top-left view perspective.</param>
      <returns>A <see cref="T:System.Drawing.Point" /> object containing the point coordinates.</returns>
      <remarks>
        <para>This method converts a point from viewer (physical) to image (logical) coordinates. The viewer coordinates is what you are currently seeing on the screen. It contains the current scale and
            scroll values (as well as any padding if set). For example, when you use the <see cref="T:Leadtools.WinForms.RasterViewerInteractiveMode">RasterViewerInteractiveMode.UserRectangle</see>, the value obtained from the
            <see cref="P:Leadtools.WinForms.RasterViewerRectangleEventArgs.Rectangle">RasterViewerRectangleEventArgs.Rectangle</see> parameter to the <see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveUserRectangle" /> event is in physical coordinates. If you
            need to convert this value to image coordinates (for example, to use it as a region or to find the exact pixel coordinate of this rectangle in the image) then you should use the
            <see cref="M:Leadtools.WinForms.RasterImageViewer.ViewerToImagePoint(System.Drawing.Point,System.Boolean)" /> or <see cref="M:Leadtools.WinForms.RasterImageViewer.ViewerToImageRectangle(System.Drawing.Rectangle,System.Boolean)" /> methods.</para>
        <para>When <paramref name="accountForViewPerspective" /> is set to <strong>true</strong>, the return point value is in the same view perspective as the current image
            (<see cref="P:Leadtools.RasterImage.ViewPerspective">RasterImage.ViewPerspective</see>) which might not be necessary in top-left coordinates. If this value is <strong>false</strong>, the return value is
            always in top-left coordinates.</para>
        <para>To convert a point from image (logical) to viewer (physical) coordinates, use the <see cref="M:Leadtools.WinForms.RasterImageViewer.ImageToViewerPoint(System.Drawing.Point,System.Boolean)" /> method.</para>
        <para>To convert a rectangle from image to viewer coordinates and back, use <see cref="M:Leadtools.WinForms.RasterImageViewer.ImageToViewerRectangle(System.Drawing.Rectangle,System.Boolean)" /> and <see cref="M:Leadtools.WinForms.RasterImageViewer.ViewerToImageRectangle(System.Drawing.Rectangle,System.Boolean)" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveUserRectangle" />.</example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.ImageToViewerPoint(System.Drawing.Point,System.Boolean)">
      <summary>
            Converts a point in image coordinates to viewer coordinates.
            </summary>
      <param name="point">The point in image coordinates.</param>
      <param name="accountForViewPerspective">
        <strong>true</strong> if <paramref name="point" /> is already in the image view-perspective. <strong>false</strong> if <paramref name="point" /> is in top-left
            coordinates.</param>
      <returns>A <see cref="T:System.Drawing.Point" /> object containing the point coordinates.</returns>
      <remarks>
        <para>This method converts a point from image (logical) to viewer (physical) coordinates. The viewer coordinates is what you are currently seeing on the screen. It contains the current scale and
            scroll values (as well as any padding if set). For example, when you use the <see cref="T:Leadtools.WinForms.RasterViewerInteractiveMode">RasterViewerInteractiveMode.UserRectangle</see>, the value obtained from the
            <see cref="P:Leadtools.WinForms.RasterViewerRectangleEventArgs.Rectangle">RasterViewerRectangleEventArgs.Rectangle</see> parameter to the <see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveUserRectangle" /> event is in physical coordinates. If you
            need to convert this value to image coordinates (for example, to use it as a region or to find the exact pixel coordinate of this rectangle in the image) then you should use the
            <see cref="M:Leadtools.WinForms.RasterImageViewer.ViewerToImageRectangle(System.Drawing.Rectangle,System.Boolean)" /> method.</para>
        <para>When <paramref name="accountForViewPerspective" /> is set to <strong>true</strong>, it is assumed that <paramref name="point" /> is already in the correct view perspective of the
            as the current image (<see cref="P:Leadtools.RasterImage.ViewPerspective">RasterImage.ViewPerspective</see>), therefore, no conversion to top-left (which what the physical coordinates are always in) is performed.
            If however this value is <strong>false</strong>, then this method will convert <paramref name="point" /> to top-left coordinates before converting it to physical coordinates.</para>
        <para>To convert a point from viewer (physical) to image (logical) coordinates, use the <see cref="M:Leadtools.WinForms.RasterImageViewer.ViewerToImagePoint(System.Drawing.Point,System.Boolean)" /> method.</para>
        <para>To convert a rectangle from image to viewer coordinates and back, use <see cref="M:Leadtools.WinForms.RasterImageViewer.ImageToViewerRectangle(System.Drawing.Rectangle,System.Boolean)" /> and <see cref="M:Leadtools.WinForms.RasterImageViewer.ViewerToImageRectangle(System.Drawing.Rectangle,System.Boolean)" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveUserRectangle" />.</example>
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.SetClientSizeCore(System.Int32,System.Int32)">
      <exclude />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnInteractiveModeMouseButtonChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveModeMouseButtonChanged" /> event.
            </summary>
      <param name="e">An EventArgs that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnInteractiveModeMouseButtonChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnInteractiveModeMouseButtonChanged</b> in a derived class, be sure to call the base class's <b>OnInteractiveModeMouseButtonChanged</b> method so that registered delegates receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="M:Leadtools.WinForms.RasterImageViewer.OnAutoInteractiveMagnifyGlassChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:Leadtools.WinForms.RasterImageViewer.AutoInteractiveMagnifyGlassChanged" /> event.
            </summary>
      <param name="e">An EventArgs that contains the event data.</param>
      <remarks>
            Raising an event invokes the event handler through a delegate.
            The <b>OnAutoInteractiveMagnifyGlassChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.
            <b>Notes to Inheritors:</b> When overriding <b>OnAutoInteractiveMagnifyGlassChanged</b> in a derived class, be sure to call the base class's <b>OnAutoInteractiveMagnifyGlassChanged</b> method so that registered delegates receive the event.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.DoubleBuffer">
      <summary>
            Enables or disables double buffer painting, which eliminates flicker.
            </summary>
      <value>true to enable double buffer painting, false to disable it.</value>
      <noremarks />
      <example>Refer to <see cref="T:Leadtools.WinForms.RasterImageViewer" />.</example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.DoubleBufferChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.DoubleBuffer" /> property changes.
            </summary>
      <event>The event handler receives an argument of type EventArgs.</event>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.DoubleBuffer" /> property is changed by either a programmatic modification or user interaction.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.BorderStyle">
      <summary>
            Sets the border style of the control.
            </summary>
      <value>The border style of the control.</value>
      <noremarks />
      <example>Refer to <see cref="T:Leadtools.WinForms.RasterImageViewer" />.</example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.BorderStyleChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.BorderStyle" /> property changes.
            </summary>
      <event>The event handler receives an argument of type EventArgs.</event>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.BorderStyle" /> property is changed by either a programmatic modification or user interaction.
            </remarks>
      <example>
        <code lang="VB">      Private Sub viewer_BorderStyleChanged(ByVal sender As Object, ByVal e As EventArgs)
         Dim viewer As RasterImageViewer = CType(IIf(TypeOf sender Is RasterImageViewer, sender, Nothing), RasterImageViewer)
         MessageBox.Show(viewer.BorderStyle.ToString())
      End Sub
      Public Sub RasterImageViewer_BorderStyleChanged(ByVal viewer As RasterImageViewer)
         AddHandler viewer.BorderStyleChanged, AddressOf viewer_BorderStyleChanged

         If viewer.BorderStyle = BorderStyle.Fixed3D Then
            viewer.BorderStyle = BorderStyle.FixedSingle
         Else
            viewer.BorderStyle = BorderStyle.Fixed3D
         End If

         RemoveHandler viewer.BorderStyleChanged, AddressOf viewer_BorderStyleChanged
      End Sub</code>
        <code lang="CS">      private void viewer_BorderStyleChanged(object sender, EventArgs e)
      {
         RasterImageViewer viewer = sender as RasterImageViewer;
         MessageBox.Show(viewer.BorderStyle.ToString());
      }
      public void RasterImageViewer_BorderStyleChanged(RasterImageViewer viewer)
      {
         viewer.BorderStyleChanged += new EventHandler(viewer_BorderStyleChanged);

         if(viewer.BorderStyle == BorderStyle.Fixed3D)
            viewer.BorderStyle = BorderStyle.FixedSingle;
         else
            viewer.BorderStyle = BorderStyle.Fixed3D;

         viewer.BorderStyleChanged -= new EventHandler(viewer_BorderStyleChanged);
      }</code>
        <!--RasterImageViewer.BorderStyleChanged-->
      </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.CreateParams">
      <summary>
            Overrides <see cref="P:System.Windows.Forms.Control.CreateParams">Control.CreateParams</see>.
            </summary>
      <value>
            Overrides <see cref="P:System.Windows.Forms.Control.CreateParams">Control.CreateParams</see>.
            </value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.ScaleFactor">
      <summary>
            The zoom factor used to display the image.
            </summary>
      <value>The zoom factor used to display the image.</value>
      <remarks>
            You can get and set this property when the <see cref="P:Leadtools.WinForms.RasterImageViewer.SizeMode" /> 
            property is <see cref="T:Leadtools.RasterPaintSizeMode">RasterPaintSizeMode.Normal</see>.<br />
            This property is read only when the <see cref="P:Leadtools.WinForms.RasterImageViewer.SizeMode" /> property 
            is set to any other value.
            When <see cref="P:Leadtools.WinForms.RasterImageViewer.SizeMode" /> is set to <see cref="T:Leadtools.RasterPaintSizeMode">RasterPaintSizeMode.Stretch</see>, 
            the zoom factor is the smallest of the Width or Height zoom factors (the aspect ratio is not preserved).
            </remarks>
      <example>
        <code lang="VB">      Public Sub RasterImageViewer_ScaleFactor(ByVal viewer As RasterImageViewer)
         viewer.ScaleFactor = viewer.ScaleFactor * 0.9F
         Dim s As String = String.Format("CurrentXScaleFactor {0}, CurrentYScaleFactor {1}", viewer.CurrentXScaleFactor, viewer.CurrentYScaleFactor)
         MessageBox.Show(s)
      End Sub</code>
        <code lang="CS">      public void RasterImageViewer_ScaleFactor(RasterImageViewer viewer)
      {
         viewer.ScaleFactor = viewer.ScaleFactor * 0.9f;
         string s = string.Format("CurrentXScaleFactor {0}, CurrentYScaleFactor {1}", viewer.CurrentXScaleFactor, viewer.CurrentYScaleFactor);
         MessageBox.Show(s);
      }</code>
        <!--RasterImageViewer.ScaleFactor-->
      </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.ScaleFactorChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.ScaleFactor" /> property changes.
            </summary>
      <event>The event handler receives an argument of type EventArgs.</event>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.ScaleFactor" /> property is changed by either a programmatic modification or user interaction.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.SourceRectangle">
      <summary>
            Represents the part of the image to use as the display source.
            </summary>
      <value>the coordinates of the source drawing area.</value>
      <remarks>
            The <see cref="P:Leadtools.WinForms.RasterImageViewer.SourceRectangle" /> determines which part of the <see cref="P:Leadtools.WinForms.RasterImageViewer.Image" /> gets painted.
            This property is used when the <see cref="T:Leadtools.WinForms.RasterImageViewer" /> paints or prints the <see cref="P:Leadtools.WinForms.RasterImageViewer.Image" />.
            Use an empty rectangle (<strong>Rectangle.Empty</strong>) to paint the whole image.
            </remarks>
      <noexample />
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.SourceRectangleChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.SourceRectangle" /> property changes.
            </summary>
      <remarks>
        <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.SourceRectangle" /> property is changed by either a programmatic
            modification or user interaction.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.AutoResetScaleFactor">
      <summary>
            Enables or disables the automatic reset of the <see cref="P:Leadtools.WinForms.RasterImageViewer.ScaleFactor" /> property.
            </summary>
      <value>true to enable automatic reset, false to disable it.</value>
      <remarks>When set to true, this will automatically reset the <see cref="P:Leadtools.WinForms.RasterImageViewer.ScaleFactor" /> property back to 1.0 when a new image is set to the viewer.</remarks>
      <example>Refer to <see cref="T:Leadtools.WinForms.RasterImageViewer" />.</example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.AutoResetScaleFactorChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.AutoResetScaleFactor" /> property changes.
            </summary>
      <event>The event handler receives an argument of type EventArgs.</event>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.AutoResetScaleFactor" /> property is changed by either a programmatic modification or user interaction.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.AutoResetScrollPosition">
      <summary>
            Enables or disables the automatic reset of the <b>ScrollPosition</b> property.
            </summary>
      <value>true to enable automatic reset, false to disable it.</value>
      <remarks>When set to true, this will automatically reset the <b>ScrollPosition</b> property back to (0,0) when a new image is set to the viewer.</remarks>
      <example>Refer to <see cref="T:Leadtools.WinForms.RasterImageViewer" />.</example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.AutoResetScrollPositionChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.AutoResetScrollPosition" /> property changes.
            </summary>
      <event>The event handler receives an argument of type EventArgs.</event>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.AutoResetScrollPosition" /> property is changed by either a programmatic modification or user interaction.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.SizeMode">
      <summary>
             Determines how the control displays the image and the automatic adjustments of the display rectangles.
             </summary>
      <value>Value which determines how the control displays the image and the automatic adjustments of the display rectangles.</value>
      <noremarks />
      <example>Refer to <see cref="T:Leadtools.WinForms.RasterImageViewer" />.</example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.SizeModeChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.SizeMode" /> property changes.
            </summary>
      <event>The event handler receives an argument of type EventArgs.</event>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.SizeMode" /> property is changed by either a programmatic modification or user interaction.
            </remarks>
      <example>
        <code lang="VB">      Private Sub viewer_SizeModeChanged(ByVal sender As Object, ByVal e As EventArgs)
         Dim viewer As RasterImageViewer = CType(IIf(TypeOf sender Is RasterImageViewer, sender, Nothing), RasterImageViewer)
         Dim s As String = String.Format("SizeModeChanged Event: {0}", viewer.SizeMode.ToString())
         MessageBox.Show(s)
      End Sub
      Public Sub RasterImageViewer_SizeModeChanged(ByVal viewer As RasterImageViewer)
         AddHandler viewer.SizeModeChanged, AddressOf viewer_SizeModeChanged

         Select Case viewer.SizeMode
            Case RasterPaintSizeMode.Fit
               viewer.SizeMode = RasterPaintSizeMode.FitAlways

            Case RasterPaintSizeMode.FitAlways
               viewer.SizeMode = RasterPaintSizeMode.FitWidth

            Case RasterPaintSizeMode.FitWidth
               viewer.SizeMode = RasterPaintSizeMode.Normal

            Case RasterPaintSizeMode.Normal
               viewer.SizeMode = RasterPaintSizeMode.Stretch

            Case RasterPaintSizeMode.Stretch
               viewer.SizeMode = RasterPaintSizeMode.Fit
         End Select

         RemoveHandler viewer.SizeModeChanged, AddressOf viewer_SizeModeChanged
      End Sub</code>
        <code lang="CS">      private void viewer_SizeModeChanged(object sender, EventArgs e)
      {
         RasterImageViewer viewer = sender as RasterImageViewer;
         string s = string.Format("SizeModeChanged Event: {0}", viewer.SizeMode.ToString());
         MessageBox.Show(s);
      }
      public void RasterImageViewer_SizeModeChanged(RasterImageViewer viewer)
      {
         viewer.SizeModeChanged += new EventHandler(viewer_SizeModeChanged);

         switch (viewer.SizeMode)
         {
            case RasterPaintSizeMode.Fit:
               viewer.SizeMode = RasterPaintSizeMode.FitAlways;
               break;

            case RasterPaintSizeMode.FitAlways:
               viewer.SizeMode = RasterPaintSizeMode.FitWidth;
               break;

            case RasterPaintSizeMode.FitWidth:
               viewer.SizeMode = RasterPaintSizeMode.Normal;
               break;

            case RasterPaintSizeMode.Normal:
               viewer.SizeMode = RasterPaintSizeMode.Stretch;
               break;

            case RasterPaintSizeMode.Stretch:
               viewer.SizeMode = RasterPaintSizeMode.Fit;
               break;
         }

         viewer.SizeModeChanged -= new EventHandler(viewer_SizeModeChanged);
      }</code>
        <!--RasterImageViewer.SizeModeChanged-->
      </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.HorizontalAlignMode">
      <summary>
            Gets or sets a value to determine how to center the image in the control's client area horizontally, 
            when the width of the destination rectangle is smaller than the width of the client area.
            </summary>
      <value>An <see cref="T:Leadtools.RasterPaintAlignMode" /> enumeration value that determine how to center the image in the control's client area horizontally, when the width of the destination rectangle is smaller than the width of the client area.</value>
      <remarks>
        <para>For example, this can be used to center a small image when it is displayed in a control that is larger
            than the image's dimensions (<see cref="P:Leadtools.RasterImage.Width" /> x <see cref="P:Leadtools.RasterImage.Height" />).</para>
        <para>This can also be used in conjunction with the <see cref="P:Leadtools.WinForms.RasterImageViewer.VerticalAlignMode" /> property, <see cref="P:Leadtools.WinForms.RasterImageViewer.SizeMode" /> 
            property and the <see cref="P:Leadtools.WinForms.RasterImageViewer.ScaleFactor" /> property to center an 
            image when the zoomed display dimensions are smaller than the control's dimensions.</para>
        <para>Note that <see cref="T:Leadtools.RasterPaintAlignMode">RasterPaintAlignMode.CenterAlways</see> is not currently supported for this control.</para>
      </remarks>
      <example>Refer to <see cref="T:Leadtools.WinForms.RasterImageViewer" />.</example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.HorizontalAlignModeChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.HorizontalAlignMode" /> property changes.
            </summary>
      <event>The event handler receives an argument of type EventArgs.</event>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.HorizontalAlignMode" /> property is changed by either a programmatic modification or user interaction.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.VerticalAlignMode">
      <summary>
            Gets or sets a value to determine how to center the image in the control's client area vertically, 
            when the height of the destination rectangle is smaller than the height of the client area.
            </summary>
      <value>An <see cref="T:Leadtools.RasterPaintAlignMode" /> enumeration value that determine how to center the image in the control's client area vertically, when the height of the destination rectangle is smaller than the height of the client area.</value>
      <remarks>
        <para>For example, this can be used to center a small image when it is displayed in a control that is larger
            than the image's dimensions (<see cref="P:Leadtools.RasterImage.Width" /> x <see cref="P:Leadtools.RasterImage.Height" />).</para>
        <para>This can also be used in conjunction with the <see cref="P:Leadtools.WinForms.RasterImageViewer.HorizontalAlignMode" /> property, <see cref="P:Leadtools.WinForms.RasterImageViewer.SizeMode" /> 
            property and the <see cref="P:Leadtools.WinForms.RasterImageViewer.ScaleFactor" /> property to center an 
            image when the zoomed display dimensions are smaller than the control's dimensions.</para>
        <para>Note that <see cref="T:Leadtools.RasterPaintAlignMode">RasterPaintAlignMode.CenterAlways</see> is not currently supported for this control.</para>
      </remarks>
      <example>Refer to <see cref="T:Leadtools.WinForms.RasterImageViewer" />.</example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.VerticalAlignModeChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.VerticalAlignMode" /> property changes.
            </summary>
      <event>The event handler receives an argument of type EventArgs.</event>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.VerticalAlignMode" /> property is changed by either a programmatic modification or user interaction.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.FrameSize">
      <summary>
            Specifies the thickness of the frame that you add to the Raster View Control.
            </summary>
      <value>The size of the frame, 0 to disable the frame.</value>
      <noremarks />
      <example>Refer to <see cref="T:Leadtools.WinForms.RasterImageViewer" />.</example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.FrameSizeChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.FrameSize" /> property changes.
            </summary>
      <event>The event handler receives an argument of type EventArgs.</event>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.FrameSize" /> property is changed by either a programmatic modification or user interaction.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.FrameColor">
      <summary>
            Specifies the border color of the frame that you add to the control.
            </summary>
      <value>The color of the border of the control's frame.</value>
      <noremarks />
      <example>Refer to <see cref="T:Leadtools.WinForms.RasterImageViewer" />.</example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.FrameColorChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.FrameColor" /> property changes.
            </summary>
      <event>The event handler receives an argument of type EventArgs.</event>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.FrameColor" /> property is changed by either a programmatic modification or user interaction.
            </remarks>
      <noexample />
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.RedirectImagePaint">
      <summary>
            Occurs after this <see cref="T:Leadtools.WinForms.RasterImageViewer" /> calls <see cref="M:Leadtools.WinForms.RasterImageViewer.RedirectPaint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Drawing2D.Matrix)" /> internally as of a paint event.
            </summary>
      <noremarks />
      <example>Refer to <see cref="M:Leadtools.WinForms.RasterImageViewer.RedirectPaint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Drawing2D.Matrix)" />.</example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.PreImagePaint">
      <summary>
            Occurs before immediately before the <see cref="T:Leadtools.WinForms.RasterImageViewer" /> does any painting.
            </summary>
      <noremarks />
      <noexample />
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.PostImagePaint">
      <summary>
            Occurs after painting the <see cref="P:Leadtools.WinForms.RasterImageViewer.Image" /> and the <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterImage" />.  
            Any additional painting should be done in this event.
            </summary>
      <noremarks />
      <example>Refer to <see cref="M:Leadtools.WinForms.RasterImageViewer.RedirectPaint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Drawing2D.Matrix)" />.</example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.FramesIsPartOfImage">
      <summary>
            Determines whether or not the frame is treated as part of the images's view.
            </summary>
      <value>true to treat the frame as part of the image, false otherwise.</value>
      <remarks>If the frame is treated as part of the image, then it will be scrolled along with the image when the client size is smaller than the display size.</remarks>
      <example>Refer to <see cref="T:Leadtools.WinForms.RasterImageViewer" />.</example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.FramesIsPartOfImageChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.FramesIsPartOfImage" /> property changes.
            </summary>
      <event>The event handler receives an argument of type EventArgs.</event>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.FramesIsPartOfImage" /> property is changed by either a programmatic modification or user interaction.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.FrameShadowSize">
      <summary>
            Specifies the thickness of the shadow for the frame that you add to the control.
            </summary>
      <value>The size of the shadow for the frame that you add to the control.</value>
      <remarks>Set to 0 to disable the frame's shadow.</remarks>
      <example>Refer to <see cref="T:Leadtools.WinForms.RasterImageViewer" />.</example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.FrameShadowSizeChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.FrameShadowSize" /> property changes.
            </summary>
      <event>The event handler receives an argument of type EventArgs.</event>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.FrameShadowSize" /> property is changed by either a programmatic modification or user interaction.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.FrameShadowColor">
      <summary>
            Specifies the shadow color of the frame that you add to the control.
            </summary>
      <value>The color of the shadow for the frame that you add to the control.</value>
      <noremarks />
      <example>Refer to <see cref="T:Leadtools.WinForms.RasterImageViewer" />.</example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.FrameShadowColorChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.FrameShadowColor" /> property changes.
            </summary>
      <event>The event handler receives an argument of type EventArgs.</event>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.FrameShadowColor" /> property is changed by either a programmatic modification or user interaction.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.Transform">
      <summary>
            Gets the display matrix for the viewer.
            </summary>
      <value>The display matrix for the viewer.</value>
      <remarks>
            Use the Transform property to get the current matrix which is used to transform the image display.<br />
            The matrix is used to transform from physical to logical coordinates and vice versa.
            </remarks>
      <example>Refer to <see cref="M:Leadtools.WinForms.RasterImageViewer.BeginUpdate" />.</example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.VScroll">
      <summary>
            Gets a value indicating whether the vertical scroll bar is visible.
            </summary>
      <value>
        <b>true</b> if the vertical scroll bar is visible; false otherwise.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.AutoScrollSmallChange" />.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.HScroll">
      <summary>
            Gets a value indicating whether the horizontal scroll bar is visible.
            </summary>
      <value>
        <b>true</b> if the horizontal scroll bar is visible; false otherwise.</value>
      <noremarks />
      <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.AutoScrollSmallChange" />.</example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.TransformChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.Transform" /> property changes.
            </summary>
      <event>The event handler receives an argument of type EventArgs.</event>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.Transform" /> property is changed by either a programmatic modification or user interaction.
            </remarks>
      <example>Refer to <see cref="M:Leadtools.WinForms.RasterImageViewer.BeginUpdate" />.</example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.BorderPadding">
      <summary>
            Gets the viewer border padding.
            </summary>
      <value>The viewer border padding.</value>
      <remarks>The BorderPadding is used to put an empty border around the image display.</remarks>
      <example>
        <code lang="VB">      Private Sub viewer_BorderPadding(ByVal sender As Object, ByVal e As EventArgs)
         Dim viewer As RasterImageViewer = CType(IIf(TypeOf sender Is RasterImageViewer, sender, Nothing), RasterImageViewer)
         MessageBox.Show(viewer.SizeMode.ToString())
      End Sub
      Public Sub RasterImageViewer_BorderPadding(ByVal viewer As RasterImageViewer)
         Dim b As ViewerBorderPadding = viewer.BorderPadding
         Dim s As String = String.Format("Border Padding: All {0}  Left {1}  Top {2}  Right {3}  Bottom {4}", b.All, b.Left, b.Top, b.Right, b.Bottom)
         Console.WriteLine(s)
         Console.WriteLine("Image Dpi: (" &amp; viewer.ImageDpiX &amp; ", " &amp; viewer.ImageDpiY &amp; ")")
         Console.WriteLine("Image Size: " &amp; viewer.ImageSize.Width &amp; ", " &amp; viewer.ImageSize.Height)

         s = String.Format("LogicalViewRectangle {0}", viewer.LogicalViewRectangle)
         Console.WriteLine(s)
         s = String.Format("PhysicalViewRectangle {0}", viewer.PhysicalViewRectangle)
         Console.WriteLine(s)

      End Sub</code>
        <code lang="CS">      private void viewer_BorderPadding(object sender, EventArgs e)
      {
         RasterImageViewer viewer = sender as RasterImageViewer;
         MessageBox.Show(viewer.SizeMode.ToString());
      }
      public void RasterImageViewer_BorderPadding(RasterImageViewer viewer)
      {
         ViewerBorderPadding b = viewer.BorderPadding;
         string s = string.Format("Border Padding: All {0}  Left {1}  Top {2}  Right {3}  Bottom {4}", b.All, b.Left, b.Top, b.Right, b.Bottom);
         Console.WriteLine(s);
         Console.WriteLine("Image Dpi: (" + viewer.ImageDpiX + ", " + viewer.ImageDpiY + ")");
         Console.WriteLine("Image Size: " + viewer.ImageSize.Width + ", " + viewer.ImageSize.Height);

         s = string.Format("LogicalViewRectangle {0}", viewer.LogicalViewRectangle);
         Console.WriteLine(s);
         s = string.Format("PhysicalViewRectangle {0}", viewer.PhysicalViewRectangle);
         Console.WriteLine(s);

      }</code>
        <!--RasterImageViewer.BorderPadding-->
      </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.ImageSize">
      <summary>
            Gets the size of the current image in the viewer.
            </summary>
      <value>The size of the current image in the viewer.</value>
      <noremarks />
      <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.BorderPadding" />.</example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.ImageDpiX">
      <summary>
            Gets the horizontal resolution of the of the current image in the viewer.
            </summary>
      <value>A value in dots per inch for the horizontal resolution supported of the current image in the viewer.</value>
      <noremarks />
      <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.BorderPadding" />.</example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.ImageDpiY">
      <summary>
            Gets the vertical resolution of the of the current image in the viewer.
            </summary>
      <value>A value in dots per inch for the vertical resolution supported of the current image in the viewer.</value>
      <noremarks />
      <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.BorderPadding" />.</example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.AutoScroll">
      <summary>
            Enables or disables scroll bars automatically appearing when the control contents are larger than its visible area
            </summary>
      <value>true to enable scroll bars, false otherwise.</value>
      <noremarks />
      <example>Refer to <see cref="T:Leadtools.WinForms.RasterImageViewer" />.</example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.AutoScrollChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.AutoScroll" /> property changes.
            </summary>
      <event>The event handler receives an argument of type EventArgs.</event>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.AutoScroll" /> property is changed by either a programmatic modification or user interaction.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.LogicalViewRectangle">
      <summary>
            Gets the logical view rectangle.
            </summary>
      <value>The logical view rectangle.</value>
      <remarks>
        <para>The logical view rectangle is the current viewing rectangle in image coordinates. The value of this property is the current pixel location
            (in top-left coordinates) of the left, top, right and bottom portion of the image being viewed on the screen.</para>
        <para>In <see cref="T:Leadtools.RasterPaintSizeMode">RasterPaintSizeMode.Fit</see>, the value of <see cref="P:Leadtools.WinForms.RasterImageViewer.LogicalViewRectangle" /> is always
            (0, 0, image width in pixels, image height in pixels) since the entire image is always visible.</para>
        <para>Since this property represents the values in image coordinates, if you change the <see cref="P:Leadtools.WinForms.RasterImageViewer.HorizontalAlignMode" /> or
            <see cref="P:Leadtools.WinForms.RasterImageViewer.VerticalAlignMode" /> mode to <see cref="T:Leadtools.RasterPaintAlignMode">RasterPaintAlignMode.Center</see> for example, the top and left values of
            the <see cref="P:Leadtools.WinForms.RasterImageViewer.LogicalViewRectangle" /> property will still be 0,0 since you are still viewing the entire image.</para>
        <para>In other size modes, for example <see cref="T:Leadtools.RasterPaintSizeMode">RasterPaintSizeMode.Normal</see>, only portion of the image is viewed due
            to scrolling and zooming setting, the value of <see cref="P:Leadtools.WinForms.RasterImageViewer.LogicalViewRectangle" /> will be the rectangle formed by the left, top, right and bottom pixel
            "clip" values into the image.</para>
      </remarks>
      <example>
        <code lang="VB">      Private Sub viewer_BorderPadding(ByVal sender As Object, ByVal e As EventArgs)
         Dim viewer As RasterImageViewer = CType(IIf(TypeOf sender Is RasterImageViewer, sender, Nothing), RasterImageViewer)
         MessageBox.Show(viewer.SizeMode.ToString())
      End Sub
      Public Sub RasterImageViewer_BorderPadding(ByVal viewer As RasterImageViewer)
         Dim b As ViewerBorderPadding = viewer.BorderPadding
         Dim s As String = String.Format("Border Padding: All {0}  Left {1}  Top {2}  Right {3}  Bottom {4}", b.All, b.Left, b.Top, b.Right, b.Bottom)
         Console.WriteLine(s)
         Console.WriteLine("Image Dpi: (" &amp; viewer.ImageDpiX &amp; ", " &amp; viewer.ImageDpiY &amp; ")")
         Console.WriteLine("Image Size: " &amp; viewer.ImageSize.Width &amp; ", " &amp; viewer.ImageSize.Height)

         s = String.Format("LogicalViewRectangle {0}", viewer.LogicalViewRectangle)
         Console.WriteLine(s)
         s = String.Format("PhysicalViewRectangle {0}", viewer.PhysicalViewRectangle)
         Console.WriteLine(s)

      End Sub</code>
        <code lang="CS">      private void viewer_BorderPadding(object sender, EventArgs e)
      {
         RasterImageViewer viewer = sender as RasterImageViewer;
         MessageBox.Show(viewer.SizeMode.ToString());
      }
      public void RasterImageViewer_BorderPadding(RasterImageViewer viewer)
      {
         ViewerBorderPadding b = viewer.BorderPadding;
         string s = string.Format("Border Padding: All {0}  Left {1}  Top {2}  Right {3}  Bottom {4}", b.All, b.Left, b.Top, b.Right, b.Bottom);
         Console.WriteLine(s);
         Console.WriteLine("Image Dpi: (" + viewer.ImageDpiX + ", " + viewer.ImageDpiY + ")");
         Console.WriteLine("Image Size: " + viewer.ImageSize.Width + ", " + viewer.ImageSize.Height);

         s = string.Format("LogicalViewRectangle {0}", viewer.LogicalViewRectangle);
         Console.WriteLine(s);
         s = string.Format("PhysicalViewRectangle {0}", viewer.PhysicalViewRectangle);
         Console.WriteLine(s);

      }</code>
        <!--RasterImageViewer.BorderPadding-->
      </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.PhysicalViewRectangle">
      <summary>
            Gets the physical view rectangle.
            </summary>
      <value>The physical view rectangle.</value>
      <remarks>
        <para>The physical view rectangle is the current viewing rectangle in viewer coordinates. The value of this property is current pixel location
            on the <see cref="T:Leadtools.WinForms.RasterImageViewer" /> control of the image top, left, right and bottom pixel values.</para>
        <para>For example, you are using <see cref="T:Leadtools.RasterPaintSizeMode">RasterPaintSizeMode.Normal</see> and the viewer has a vertical scroll bar, when
            the scroll bar value is at the top of the image, the Top value of <see cref="P:Leadtools.WinForms.RasterImageViewer.PhysicalViewRectangle" /> will be 0. If you scroll the image up (by
            dragging the vertical scroll bar down), the value of Top will become a negative value since the top of the image is painted outside the control
            coordinates.</para>
      </remarks>
      <example>
        <code lang="VB">      Private Sub viewer_BorderPadding(ByVal sender As Object, ByVal e As EventArgs)
         Dim viewer As RasterImageViewer = CType(IIf(TypeOf sender Is RasterImageViewer, sender, Nothing), RasterImageViewer)
         MessageBox.Show(viewer.SizeMode.ToString())
      End Sub
      Public Sub RasterImageViewer_BorderPadding(ByVal viewer As RasterImageViewer)
         Dim b As ViewerBorderPadding = viewer.BorderPadding
         Dim s As String = String.Format("Border Padding: All {0}  Left {1}  Top {2}  Right {3}  Bottom {4}", b.All, b.Left, b.Top, b.Right, b.Bottom)
         Console.WriteLine(s)
         Console.WriteLine("Image Dpi: (" &amp; viewer.ImageDpiX &amp; ", " &amp; viewer.ImageDpiY &amp; ")")
         Console.WriteLine("Image Size: " &amp; viewer.ImageSize.Width &amp; ", " &amp; viewer.ImageSize.Height)

         s = String.Format("LogicalViewRectangle {0}", viewer.LogicalViewRectangle)
         Console.WriteLine(s)
         s = String.Format("PhysicalViewRectangle {0}", viewer.PhysicalViewRectangle)
         Console.WriteLine(s)

      End Sub</code>
        <code lang="CS">      private void viewer_BorderPadding(object sender, EventArgs e)
      {
         RasterImageViewer viewer = sender as RasterImageViewer;
         MessageBox.Show(viewer.SizeMode.ToString());
      }
      public void RasterImageViewer_BorderPadding(RasterImageViewer viewer)
      {
         ViewerBorderPadding b = viewer.BorderPadding;
         string s = string.Format("Border Padding: All {0}  Left {1}  Top {2}  Right {3}  Bottom {4}", b.All, b.Left, b.Top, b.Right, b.Bottom);
         Console.WriteLine(s);
         Console.WriteLine("Image Dpi: (" + viewer.ImageDpiX + ", " + viewer.ImageDpiY + ")");
         Console.WriteLine("Image Size: " + viewer.ImageSize.Width + ", " + viewer.ImageSize.Height);

         s = string.Format("LogicalViewRectangle {0}", viewer.LogicalViewRectangle);
         Console.WriteLine(s);
         s = string.Format("PhysicalViewRectangle {0}", viewer.PhysicalViewRectangle);
         Console.WriteLine(s);

      }</code>
        <!--RasterImageViewer.BorderPadding-->
      </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.CurrentXScaleFactor">
      <summary>
            Gets or sets the current horizontal scale factor for the image display.
            </summary>
      <value>The current horizontal scale factor.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.ScaleFactor" />.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.CurrentYScaleFactor">
      <summary>
            Gets or sets the current vertical scale factor for the image display.
            </summary>
      <value>The current vertical scale factor.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.ScaleFactor" />.#endregion documentation
            </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.ScrollViewer">
      <summary>
            Occurs when either the horizontal or vertical scroll bar of the RasterImageViewer changes.
            </summary>
      <event>The event handler receives an argument of type EventArgs.</event>
      <remarks>
            This event is raised if the horizontal or vertical scroll bar of the RasterImageViewer changes, either through programmatic modification or user interaction.
            </remarks>
      <example>
        <code lang="VB">      Private Sub viewer_ScrollViewer(ByVal sender As Object, ByVal e As EventArgs)
         Dim viewer As RasterImageViewer = CType(IIf(TypeOf sender Is RasterImageViewer, sender, Nothing), RasterImageViewer)
         Dim s As String = String.Format("ScrollPosition: {0}", viewer.ScrollPosition)
         Console.WriteLine(s)
      End Sub
      Public Sub RasterImageViewer_ScrollViewer(ByVal viewer As RasterImageViewer)
         AddHandler viewer.ScrollViewer, AddressOf viewer_ScrollViewer

         MessageBox.Show("Scroll the image and the 'ScrollViewer' event gets fired")
         ' or do something in code to cause a scroll
      End Sub</code>
        <code lang="CS">      private void viewer_ScrollViewer(object sender, EventArgs e)
      {
         RasterImageViewer viewer = sender as RasterImageViewer;
         string s = string.Format("ScrollPosition: {0}", viewer.ScrollPosition);
         Console.WriteLine(s);
      }
      public void RasterImageViewer_ScrollViewer(RasterImageViewer viewer)
      {
         viewer.ScrollViewer += new EventHandler(viewer_ScrollViewer);

         MessageBox.Show("Scroll the image and the 'ScrollViewer' event gets fired");
         // or do something in code to cause a scroll
      }</code>
        <!--RasterImageViewer.ScrollViewer-->
      </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.AutoScrollSmallChange">
      <summary>
            Gets or sets the amount that the scroll bar is incremented or decremented for a small scroll.
            </summary>
      <value>The amount that the scroll bar is incremented or decremented.</value>
      <remarks>
            A <i>small scroll</i> (or a <i>line scroll</i>) occurs when the user clicks an arrow.
            </remarks>
      <example>
        <code lang="VB">      Private Class MyForm3 : Inherits Form
         Public viewer As RasterImageViewer
         Private panel As Panel
         Private myHScroll As HScrollBar
         Private myVScroll As VScrollBar
         Public Sub New(ByVal title As String)
            Text = title

            Me.Size = New Size(750, 450)

            panel = New Panel()
            panel.Dock = DockStyle.Fill
            Controls.Add(panel)

            ' Create the raster viewer
            viewer = New RasterImageViewer()
            viewer.Dock = DockStyle.Fill
            viewer.Width = 500
            viewer.DoubleBuffer = True
            panel.Controls.Add(viewer)

            ' Load an image into the viewer
            Dim codecs As RasterCodecs = New RasterCodecs()
            viewer.Image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Sample1.cmp"))
            codecs.Dispose()

            viewer.AutoScroll = False
            Dim size As Size = viewer.AutoScrollMinSize

            ' Create two scrollbar controls for scrolling

            myHScroll = New HScrollBar()
            myHScroll.Location = New Point(100, 50)
            myHScroll.Dock = DockStyle.Top
            myHScroll.Height *= 2
            myHScroll.Minimum = 0
            myHScroll.Maximum = viewer.Image.Width
            AddHandler myHScroll.ValueChanged, AddressOf hScroll_ValueChanged
            panel.Controls.Add(myHScroll)
            myHScroll.BringToFront()

            myVScroll = New VScrollBar()
            myVScroll.Dock = DockStyle.Left
            myVScroll.Location = New Point(100, 100)
            myVScroll.Width *= 2
            myVScroll.Minimum = 0
            myVScroll.Maximum = viewer.Image.Height
            AddHandler myVScroll.ValueChanged, AddressOf vScroll_ValueChanged
            panel.Controls.Add(myVScroll)
            myVScroll.BringToFront()

            viewer.BringToFront()

            OnSizeChanged(EventArgs.Empty)
         End Sub

         Private Sub vScroll_ValueChanged(ByVal sender As Object, ByVal e As EventArgs)
            viewer.ScrollPosition = New Point(myHScroll.Value, myVScroll.Value)
         End Sub

         Private Sub hScroll_ValueChanged(ByVal sender As Object, ByVal e As EventArgs)
            viewer.ScrollPosition = New Point(myHScroll.Value, myVScroll.Value)
         End Sub

         Protected Overrides Sub OnSizeChanged(ByVal e As EventArgs)
            If (Not myHScroll Is Nothing) AndAlso (Not myVScroll Is Nothing) Then
               myHScroll.SmallChange = viewer.AutoScrollSmallChange.Width
               myHScroll.LargeChange = viewer.AutoScrollLargeChange.Width
               myVScroll.SmallChange = viewer.AutoScrollSmallChange.Height
               myVScroll.LargeChange = viewer.AutoScrollLargeChange.Height

               Console.WriteLine("AutoScrollSmallChange  {0}", viewer.AutoScrollSmallChange)
               Console.WriteLine("AutoScrollLargeChange  {0}", viewer.AutoScrollLargeChange)
               Console.WriteLine("AutoScrollMinSize      {0}", viewer.AutoScrollMinSize)
               Console.WriteLine("SmallScrollChangeRatio {0}", viewer.SmallScrollChangeRatio)
               Console.WriteLine("HScroll                {0}", viewer.HScroll)
               Console.WriteLine("VScroll                {0}", viewer.VScroll)
               Console.WriteLine("")

               myHScroll.Enabled = viewer.HScroll
               myVScroll.Enabled = viewer.VScroll
            End If
            MyBase.OnSizeChanged(e)
         End Sub

      End Class

      Public Sub RasterImageViewer_HScroll(ByVal title As String)
         Dim form As MyForm3 = New MyForm3(title)
         form.ShowDialog()
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      class MyForm3 : Form
      {
         public RasterImageViewer viewer;
         Panel panel;
         HScrollBar hScroll;
         VScrollBar vScroll;
         public MyForm3(string title)
         {
            Text = title;

            Size = new Size(750, 450);

            panel = new Panel();
            panel.Dock = DockStyle.Fill;
            Controls.Add(panel);

            // Create the raster viewer
            viewer = new RasterImageViewer();
            viewer.Dock = DockStyle.Fill;
            viewer.Width = 500;
            viewer.DoubleBuffer = true;
            panel.Controls.Add(viewer);

            // Load an image into the viewer
            RasterCodecs codecs = new RasterCodecs();
            viewer.Image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "Sample1.cmp"));
            codecs.Dispose();

            viewer.AutoScroll = false;
            Size size = viewer.AutoScrollMinSize;

            // Create two scrollbar controls for scrolling

            hScroll = new HScrollBar();
            hScroll.Location = new Point(100, 50);
            hScroll.Dock = DockStyle.Top;
            hScroll.Height *= 2;
            hScroll.Minimum = 0;
            hScroll.Maximum = viewer.Image.Width;
            hScroll.ValueChanged += new EventHandler(hScroll_ValueChanged);
            panel.Controls.Add(hScroll);
            hScroll.BringToFront();

            vScroll = new VScrollBar();
            vScroll.Dock = DockStyle.Left;
            vScroll.Location = new Point(100, 100);
            vScroll.Width *= 2;
            vScroll.Minimum = 0;
            vScroll.Maximum = viewer.Image.Height;
            vScroll.ValueChanged += new EventHandler(vScroll_ValueChanged);
            panel.Controls.Add(vScroll);
            vScroll.BringToFront();

            viewer.BringToFront();

            OnSizeChanged(EventArgs.Empty);
         }

         void vScroll_ValueChanged(object sender, EventArgs e)
         {
            viewer.ScrollPosition = new Point(hScroll.Value, vScroll.Value);
         }

         void hScroll_ValueChanged(object sender, EventArgs e)
         {
            viewer.ScrollPosition = new Point(hScroll.Value, vScroll.Value);
         }

         protected override void OnSizeChanged(EventArgs e)
         {
            if((hScroll != null) &amp;&amp; (vScroll != null))
            {
               hScroll.SmallChange = viewer.AutoScrollSmallChange.Width;
               hScroll.LargeChange = viewer.AutoScrollLargeChange.Width;
               vScroll.SmallChange = viewer.AutoScrollSmallChange.Height;
               vScroll.LargeChange = viewer.AutoScrollLargeChange.Height;

               Console.WriteLine("AutoScrollSmallChange  {0}", viewer.AutoScrollSmallChange);
               Console.WriteLine("AutoScrollLargeChange  {0}", viewer.AutoScrollLargeChange);
               Console.WriteLine("AutoScrollMinSize      {0}", viewer.AutoScrollMinSize);
               Console.WriteLine("SmallScrollChangeRatio {0}", viewer.SmallScrollChangeRatio);
               Console.WriteLine("HScroll                {0}", viewer.HScroll);
               Console.WriteLine("VScroll                {0}", viewer.VScroll);
               Console.WriteLine("");

               hScroll.Enabled = viewer.HScroll;
               vScroll.Enabled = viewer.VScroll;
            }
            base.OnSizeChanged(e);
         }

      }

      public void RasterImageViewer_HScroll(string title)
      {
         MyForm3 form = new MyForm3(title);
         form.ShowDialog();
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--RasterImageViewer.HScroll-->
      </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.AutoScrollLargeChange">
      <summary>
            Gets or sets the amount that the scroll bar is incremented or decremented for a large scroll. 
            </summary>
      <value>The amount that the scroll bar is incremented or decremented.</value>
      <remarks>
            A <i>large scroll</i> occurs when the user clicks in the area between the thumb and an arrow.
            </remarks>
      <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.AutoScrollSmallChange" />.</example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.AutoScrollMinSize">
      <summary>
            Gets or sets the minimum size for the auto-scroll region.
            </summary>
      <value>The minimum size of the area that can be scrolled if scrollbars are shown.</value>
      <noremarks />
      <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.AutoScrollSmallChange" />.</example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.SmallScrollChangeRatio">
      <summary>
            Gets or sets the ratio of the <see cref="P:Leadtools.WinForms.RasterImageViewer.AutoScrollSmallChange" /> to the <see cref="P:Leadtools.WinForms.RasterImageViewer.AutoScrollLargeChange" />.
            </summary>
      <value>The ratio give bin dividing <see cref="P:Leadtools.WinForms.RasterImageViewer.AutoScrollSmallChange" /> by <see cref="P:Leadtools.WinForms.RasterImageViewer.AutoScrollLargeChange" />.</value>
      <noremarks />
      <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.AutoScrollSmallChange" />.</example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.AutoDisposeImages">
      <summary>
            Gets or sets a value indicating whether to auto dispose the old image when a new image is set into this <see cref="T:Leadtools.WinForms.RasterImageViewer" />.
            </summary>
      <value>true if the image in <see cref="P:Leadtools.WinForms.RasterImageViewer.Image" /> is automatically disposed when a new image is set; otherwise, false.  Default value is true.</value>
      <remarks>
            By default, whenever you set a new image into the <see cref="P:Leadtools.WinForms.RasterImageViewer.Image" /> property, the old image (if any) is disposed.  Set the value of this property to false to prevent disposing of the old image.
            </remarks>
      <example>
        <code lang="VB">      Private Sub viewer_ImageChanged(ByVal sender As Object, ByVal e As EventArgs)
         Dim viewer As RasterImageViewer = CType(IIf(TypeOf sender Is RasterImageViewer, sender, Nothing), RasterImageViewer)
         Dim s As String
         If Not viewer.Image Is Nothing Then
            s = String.Format("Image Changed: New Width {0}, NewHeight {1}", viewer.Image.Width, viewer.Image.Height)
         Else
            s = "No Image"
         End If
         Console.WriteLine(s)
      End Sub

      Public Sub RasterImageViewer_AutoDisposeImages(ByVal viewer As RasterImageViewer)
         ' Load two image2
         Dim codecs As RasterCodecs = New RasterCodecs()
         Dim file1 As String = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp")
         Dim file2 As String = Path.Combine(LEAD_VARS.ImagesDir, "Image2.cmp")

         AddHandler viewer.ImageChanged, AddressOf viewer_ImageChanged

         Dim image1 As RasterImage = codecs.Load(file1)
         Dim image2 As RasterImage = codecs.Load(file2)

         ' Make sure the AutoDisposeImages property of the viewer is set to true
         viewer.AutoDisposeImages = True

         ' Set the first image into the viewer
         viewer.Image = image1

         ' Now set the second image into the viewer (this disposes the first image since the AutoDisposeImages property is true)
         viewer.Image = image2

         ' Try to access the first image, it generates a NullReferenceException exception since the image has been disposed
         MessageBox.Show("Try to access the first image, it generates a NullReferenceException exception since the image has been disposed.")
         Try
            Dim width As Integer = image1.Width
            MessageBox.Show(String.Format("Width is {0} pixels", width))
         Catch ex As NullReferenceException
            MessageBox.Show(ex.Message)
         End Try

         ' Set the image to null (will dispose the second image as well)
         viewer.Image = Nothing

         ' Now re-load the two images
         image1 = codecs.Load(file1)
         image2 = codecs.Load(file2)

         ' Make sure the AutoDisposeImages property of the viewer is set to false
         viewer.AutoDisposeImages = False

         ' Set the first image into the viewer
         viewer.Image = image1

         ' Now set the second image into the viewer (this will not disposes the first image since the AutoDisposeImages property is false)
         viewer.Image = image2

         ' Try to access the first image, it should work fine this time
         Try
            Dim width As Integer = image1.Width
            MessageBox.Show(String.Format("Width is {0} pixels", width))
         Catch ex As NullReferenceException
            MessageBox.Show(ex.Message)
         End Try

         ' Set the image to null (will not dispose the second image)
         viewer.Image = Nothing

         ' We should now dispose the two images manually
         image1.Dispose()
         image2.Dispose()

         RemoveHandler viewer.ImageChanged, AddressOf viewer_ImageChanged
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      private void viewer_ImageChanged(object sender, EventArgs e)
      {
         RasterImageViewer viewer = sender as RasterImageViewer;
         string s;
         if (viewer.Image != null)
            s = string.Format("Image Changed: New Width {0}, NewHeight {1}", viewer.Image.Width, viewer.Image.Height);
         else s = "No Image";
         Console.WriteLine(s);
      }

      public void RasterImageViewer_AutoDisposeImages(RasterImageViewer viewer)
      {
         // Load two image2
         RasterCodecs codecs = new RasterCodecs();
         string file1 = Path.Combine(LEAD_VARS.ImagesDir, "Image1.cmp");
         string file2 = Path.Combine(LEAD_VARS.ImagesDir, "Image2.cmp");

         viewer.ImageChanged += new EventHandler(viewer_ImageChanged);

         RasterImage image1 = codecs.Load(file1);
         RasterImage image2 = codecs.Load(file2);

         // Make sure the AutoDisposeImages property of the viewer is set to true
         viewer.AutoDisposeImages = true;

         // Set the first image into the viewer
         viewer.Image = image1;

         // Now set the second image into the viewer (this disposes the first image since the AutoDisposeImages property is true)
         viewer.Image = image2;

         // Try to access the first image, it generates a NullReferenceException exception since the image has been disposed
         MessageBox.Show("Try to access the first image, it generates a NullReferenceException exception since the image has been disposed.");
         try
         {
            int width = image1.Width;
            MessageBox.Show(string.Format("Width is {0} pixels", width));
         }
         catch (NullReferenceException ex)
         {
            MessageBox.Show(ex.Message);
         }

         // Set the image to null (will dispose the second image as well)
         viewer.Image = null;

         // Now re-load the two images
         image1 = codecs.Load(file1);
         image2 = codecs.Load(file2);

         // Make sure the AutoDisposeImages property of the viewer is set to false
         viewer.AutoDisposeImages = false;

         // Set the first image into the viewer
         viewer.Image = image1;

         // Now set the second image into the viewer (this will not disposes the first image since the AutoDisposeImages property is false)
         viewer.Image = image2;

         // Try to access the first image, it should work fine this time
         try
         {
            int width = image1.Width;
            MessageBox.Show(string.Format("Width is {0} pixels", width));
         }
         catch (NullReferenceException ex)
         {
            MessageBox.Show(ex.Message);
         }

         // Set the image to null (will not dispose the second image)
         viewer.Image = null;

         // We should now dispose the two images manually
         image1.Dispose();
         image2.Dispose();

         viewer.ImageChanged -= new EventHandler(viewer_ImageChanged);
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--RasterImageViewer.AutoDisposeImages-->
      </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.AutoDisposeImagesChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.AutoDisposeImages" /> property changes.
            </summary>
      <event>The event handler receives an argument of type <see cref="T:System.EventArgs" />.</event>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.AutoDisposeImages" /> property is changed.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.Image">
      <summary>
            Gets or sets the image currently assigned for display by the control.
            </summary>
      <value>The image to be displayed.</value>
      <remarks>Set this property to an RasterImage object and the control will display it based on the current settings of the other properties of this class.</remarks>
      <example>Refer to <see cref="T:Leadtools.WinForms.RasterImageViewer" />.</example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.ImageChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.Image" /> property changes.
            </summary>
      <event>The event handler receives an argument of type EventArgs.</event>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.Image" /> property is changed by either a programmatic modification or user interaction.<br />
            Do not confuse this with the <a href="ms-xhelp:///?id=Leadtools~Leadtools.RasterImage~Changed_EV">RasterImage.Changed</a> event.
            </remarks>
      <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.AutoDisposeImages" />.</example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.PaintProperties">
      <summary>
            Gets or sets the <see cref="T:Leadtools.Drawing.RasterPaintProperties" /> which control the display.
            </summary>
      <value>The <see cref="T:Leadtools.Drawing.RasterPaintProperties" /> which control the display.</value>
      <noremarks />
      <example>Refer to <see cref="T:Leadtools.WinForms.RasterImageViewer" />.</example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.PaintPropertiesChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.PaintProperties" /> property changes.
            </summary>
      <event>The event handler receives an argument of type EventArgs.</event>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.PaintProperties" /> property is changed by either a programmatic modification or user interaction.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.AnimateRegion">
      <summary>
            Enables or disables animation of the image's region frame.
            </summary>
      <value>true to enable animation of the image's region frame, false for a static frame.</value>
      <noremarks />
      <example>Refer to <see cref="T:Leadtools.WinForms.RasterImageViewer" />.</example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.AnimateRegionChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.AnimateRegion" /> property changes.
            </summary>
      <event>The event handler receives an argument of type EventArgs.</event>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.AnimateRegion" /> property is changed by either a programmatic modification or user interaction.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode">
      <summary>
            Gets or sets the value that controls user interaction with the control's display.
            </summary>
      <value>The value which controls the user interaction with the control's display.</value>
      <remarks>
        <para>By default, the mouse left button starts and controls the interactive mode. To change this behavior, refer to
            <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveModeMouseButton" />.</para>
        <para>You can change the mouse cursor associated with a particular interative mode with the 
            <see cref="M:Leadtools.WinForms.RasterImageViewer.SetInteractiveModeCursor(Leadtools.WinForms.RasterViewerInteractiveMode,System.Windows.Forms.Cursor,System.Windows.Forms.Cursor)" /> method.</para>
      </remarks>
      <example>
        <code lang="VB">      Private Sub viewer_InteractiveModeChanged(ByVal sender As Object, ByVal e As EventArgs)
         Dim viewer As RasterImageViewer = CType(IIf(TypeOf sender Is RasterImageViewer, sender, Nothing), RasterImageViewer)
         Dim s As String = String.Format("InteractiveMode changed to: {0}", viewer.InteractiveMode.ToString())
         MessageBox.Show(s)
      End Sub
      Public Sub RasterImageViewer_InteractiveMode(ByVal viewer As RasterImageViewer)
         AddHandler viewer.InteractiveModeChanged, AddressOf viewer_InteractiveModeChanged
         AddHandler viewer.InteractivePan, AddressOf viewer_InteractivePan

         viewer.InteractiveRegionType = RasterViewerInteractiveRegionType.Ellipse
         viewer.InteractiveRegionCombineMode = RasterRegionCombineMode.Set

         Select Case viewer.InteractiveMode
            Case RasterViewerInteractiveMode.None
               viewer.InteractiveMode = RasterViewerInteractiveMode.Pan

            Case RasterViewerInteractiveMode.Pan
               viewer.InteractiveMode = RasterViewerInteractiveMode.MagnifyGlass

            Case RasterViewerInteractiveMode.MagnifyGlass
               viewer.InteractiveMode = RasterViewerInteractiveMode.Region

            Case RasterViewerInteractiveMode.Region
               viewer.InteractiveMode = RasterViewerInteractiveMode.None
         End Select
         RemoveHandler viewer.InteractiveModeChanged, AddressOf viewer_InteractiveModeChanged
      End Sub</code>
        <code lang="CS">      private void viewer_InteractiveModeChanged(object sender, EventArgs e)
      {
         RasterImageViewer viewer = sender as RasterImageViewer;
         string s = string.Format("InteractiveMode changed to: {0}", viewer.InteractiveMode.ToString());
         MessageBox.Show(s);
      }
      public void RasterImageViewer_InteractiveMode(RasterImageViewer viewer)
      {
         viewer.InteractiveModeChanged += new EventHandler(viewer_InteractiveModeChanged);
         viewer.InteractivePan += new EventHandler&lt;RasterViewerLineEventArgs&gt;(viewer_InteractivePan);

         viewer.InteractiveRegionType = RasterViewerInteractiveRegionType.Ellipse;
         viewer.InteractiveRegionCombineMode = RasterRegionCombineMode.Set;

         switch (viewer.InteractiveMode)
         {
            case RasterViewerInteractiveMode.None:
               viewer.InteractiveMode = RasterViewerInteractiveMode.Pan;
               break;

            case RasterViewerInteractiveMode.Pan:
               viewer.InteractiveMode = RasterViewerInteractiveMode.MagnifyGlass;
               break;

            case RasterViewerInteractiveMode.MagnifyGlass:
               viewer.InteractiveMode = RasterViewerInteractiveMode.Region;
               break;

            case RasterViewerInteractiveMode.Region:
               viewer.InteractiveMode = RasterViewerInteractiveMode.None;
               break;
         }
         viewer.InteractiveModeChanged -= new EventHandler(viewer_InteractiveModeChanged);
      }</code>
        <!--RasterImageViewer.InteractiveMode-->
      </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.InteractiveModeChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode" /> property changes.
            </summary>
      <event>The event handler receives an argument of type EventArgs.</event>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode" /> property is changed by either a programmatic modification or user interaction.
            </remarks>
      <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode" />.</example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.InteractiveRegionType">
      <summary>
            Gets or sets the value that determines the type of region to create when <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode" /> is set to <see cref="T:Leadtools.WinForms.RasterViewerInteractiveMode">RasterViewerInteractiveMode.Region</see></summary>
      <value>The type of region to create.</value>
      <noremarks />
      <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode" />.</example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.InteractiveRegionTypeChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveRegionType" /> property changes.
            </summary>
      <event>The event handler receives an argument of type EventArgs.</event>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveRegionType" /> property is changed by either a programmatic modification or user interaction.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.InteractiveRegionCombineMode">
      <summary>
            Gets or sets the region <see cref="T:Leadtools.RasterRegionCombineMode" /> to be used when the
            user creates regions interactively.
            </summary>
      <value>
            The <see cref="T:Leadtools.RasterRegionCombineMode" /> to be 
            used when the user creates regions interactively.
            </value>
      <noremarks />
      <example>Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode" />.</example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.InteractiveRegionCombineModeChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveRegionCombineMode" /> property changes.
            </summary>
      <event>The event handler receives an argument of type EventArgs.</event>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveRegionCombineMode" /> property is changed by either a programmatic modification or user interaction.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.IsInteractiveModeBusy">
      <summary>
            Determines if the control is currently performing an interactive operation.
            </summary>
      <value>
        <strong>true</strong> if the control is currently performing an interactive operation, <strong>false</strong> otherwise.</value>
      <remarks>
        <para>The type of interactive user operation is determined by the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode" /> property.</para>
      </remarks>
      <example>
        <code lang="VB">      Private Sub MyRasterViewerRectangleEventHandler(ByVal sender As Object, ByVal e As RasterViewerRectangleEventArgs)
         Dim viewer As RasterImageViewer = CType(IIf(TypeOf sender Is RasterImageViewer, sender, Nothing), RasterImageViewer)
         Dim ee As RasterViewerRectangleEventArgs = New RasterViewerRectangleEventArgs(e.Status, e.Rectangle)
         If ((e.Rectangle.Left &gt; e.Rectangle.Right) OrElse (e.Rectangle.Top &gt; e.Rectangle.Bottom)) AndAlso e.Status = RasterViewerInteractiveStatus.End Then
            e.Cancel = True
            viewer.Invalidate()
            If (Not viewer.IsInteractiveModeBusy) Then
               MessageBox.Show("Interactive mode (Rectangular region) cancelled")
               viewer.InteractiveMode = RasterViewerInteractiveMode.None
            End If
         End If
         Console.WriteLine("" &amp; e.Rectangle.Left &amp; ", " &amp; e.Rectangle.Top &amp; ", " &amp; e.Rectangle.Right &amp; ", " &amp; e.Rectangle.Bottom)
      End Sub

      Public Sub RasterImageViewer_IsInteractiveModeBusy(ByVal viewer As RasterImageViewer)
         AddHandler viewer.InteractiveRegionRectangle, AddressOf MyRasterViewerRectangleEventHandler
         viewer.InteractiveMode = RasterViewerInteractiveMode.Region
         viewer.InteractiveRegionType = RasterViewerInteractiveRegionType.Rectangle

         MessageBox.Show("Interactive mode set to draw a rectangular region." &amp; Constants.vbLf &amp; "If mouse is dragged up or to the left, interactive mode is cancelled")
      End Sub</code>
        <code lang="CS">      private void MyRasterViewerRectangleEventHandler(object sender, RasterViewerRectangleEventArgs e)
      {
         RasterImageViewer viewer = sender as RasterImageViewer;
        RasterViewerRectangleEventArgs ee = new RasterViewerRectangleEventArgs(e.Status, e.Rectangle);
        if (((e.Rectangle.Left &gt; e.Rectangle.Right) || (e.Rectangle.Top &gt; e.Rectangle.Bottom)) &amp;&amp; e.Status == RasterViewerInteractiveStatus.End)
        {
           e.Cancel = true;
           viewer.Invalidate();
           if(!viewer.IsInteractiveModeBusy)
           {
              MessageBox.Show("Interactive mode (Rectangular region) cancelled");
              viewer.InteractiveMode = RasterViewerInteractiveMode.None;
           }
        }
        Console.WriteLine(@"" + e.Rectangle.Left + ", " + e.Rectangle.Top + ", " + e.Rectangle.Right + ", " + e.Rectangle.Bottom);
      }

      public void RasterImageViewer_IsInteractiveModeBusy(RasterImageViewer viewer)
      {
         viewer.InteractiveRegionRectangle += new EventHandler&lt;RasterViewerRectangleEventArgs&gt;(MyRasterViewerRectangleEventHandler);
         viewer.InteractiveMode = RasterViewerInteractiveMode.Region;
         viewer.InteractiveRegionType = RasterViewerInteractiveRegionType.Rectangle;

         MessageBox.Show("Interactive mode set to draw a rectangular region.\nIf mouse is dragged up or to the left, interactive mode is cancelled");
      }</code>
        <!--RasterImageViewer.IsInteractiveModeBusy-->
      </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.InteractivePan">
      <summary>
            Occurs when the user performs interactive panning of the image display.
            </summary>
      <event>The event handler receives an argument of type <see cref="T:Leadtools.WinForms.RasterViewerLineEventArgs" />.</event>
      <remarks>
        <para>Occurs when the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode" /> property is set to <see cref="T:Leadtools.WinForms.RasterViewerInteractiveMode">RasterViewerInteractiveMode.Pan</see>
            or <see cref="T:Leadtools.WinForms.RasterViewerInteractiveMode">RasterViewerInteractiveMode.Scale</see>.</para>
      </remarks>
      <example>
        <code lang="VB">      Private Sub viewer_InteractivePan(ByVal sender As Object, ByVal e As RasterViewerLineEventArgs)
         Dim viewer As RasterImageViewer = CType(IIf(TypeOf sender Is RasterImageViewer, sender, Nothing), RasterImageViewer)
         If e.Status = RasterViewerInteractiveStatus.Begin Then
            viewer.Cursor = Cursors.Hand
         ElseIf e.Status = RasterViewerInteractiveStatus.End Then
            viewer.Cursor = Cursors.Default
         End If
         Console.WriteLine("InteractivePan: e.Begin {0}, e.End{1}, e.Status {2}, e.Cancel {3}", e.Begin, e.End, e.Status, e.Cancel)
      End Sub
      Public Sub RasterImageViewer_InteractivePan(ByVal viewer As RasterImageViewer)
         AddHandler viewer.InteractivePan, AddressOf viewer_InteractivePan
         viewer.InteractiveMode = RasterViewerInteractiveMode.Pan

         ' Do the panning

         ' After you are done, you must remove the event handler as in below
         ' viewer.InteractivePan -= new EventHandler&lt;RasterViewerLineEventArgs&gt;(viewer_InteractivePan);
      End Sub</code>
        <code lang="CS">      private void viewer_InteractivePan(object sender, RasterViewerLineEventArgs e)
      {
         RasterImageViewer viewer = sender as RasterImageViewer;
         if (e.Status == RasterViewerInteractiveStatus.Begin)
            viewer.Cursor = Cursors.Hand;
         else if (e.Status == RasterViewerInteractiveStatus.End)
            viewer.Cursor = Cursors.Default;
         Console.WriteLine("InteractivePan: e.Begin {0}, e.End{1}, e.Status {2}, e.Cancel {3}", e.Begin, e.End, e.Status, e.Cancel);
      }
      public void RasterImageViewer_InteractivePan(RasterImageViewer viewer)
      {
         viewer.InteractivePan += new EventHandler&lt;RasterViewerLineEventArgs&gt;(viewer_InteractivePan);
         viewer.InteractiveMode = RasterViewerInteractiveMode.Pan;

         // Do the panning

         // After you are done, you must remove the event handler as in below
         // viewer.InteractivePan -= new EventHandler&lt;RasterViewerLineEventArgs&gt;(viewer_InteractivePan);
      }</code>
        <!--RasterImageViewer.InteractivePan-->
      </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.InteractivePage">
      <summary>
            Occurs when the user performs interactive change of the current page using the mouse.
            </summary>
      <event>The event handler receives an argument of type <see cref="T:Leadtools.WinForms.RasterViewerLineEventArgs" />.</event>
      <remarks>
            Only occurs when the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode" /> property is set to <see cref="T:Leadtools.WinForms.RasterViewerInteractiveMode">RasterViewerInteractiveMode.Page</see>.
            </remarks>
      <example>
        <code lang="VB">      Private Sub viewer_InteractivePage(ByVal sender As Object, ByVal e As RasterViewerLineEventArgs)
         Dim viewer As RasterImageViewer = CType(IIf(TypeOf sender Is RasterImageViewer, sender, Nothing), RasterImageViewer)
         If e.Status = RasterViewerInteractiveStatus.Begin Then
            viewer.Cursor = Cursors.SizeNS
         ElseIf e.Status = RasterViewerInteractiveStatus.End Then
            viewer.Cursor = Cursors.Default
         End If
         Console.WriteLine("InteractivePage: e.Begin {0}, e.End{1}, e.Status {2}, e.Cancel {3}", e.Begin, e.End, e.Status, e.Cancel)
      End Sub
      Public Sub RasterImageViewer_InteractivePage(ByVal viewer As RasterImageViewer)
         ' Load a multipage file
         Dim codecs As RasterCodecs = New RasterCodecs()
         viewer.Image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "eye.gif"))
         codecs.Dispose()

         viewer.InteractiveMode = RasterViewerInteractiveMode.Page
         AddHandler viewer.InteractivePage, AddressOf viewer_InteractivePage

         MessageBox.Show("Drag mouse across image to view different pages")
         ' After you are done, you must remove the event handler as in below
         '
         ' viewer.InteractivePage -= new EventHandler&lt;RasterViewerLineEventArgs&gt;(viewer_InteractivePage);
      End Sub

   Public NotInheritable Class LEAD_VARS
      Public Const ImagesDir As String = "C:\Users\Public\Documents\LEADTOOLS Images"
   End Class</code>
        <code lang="CS">      private void viewer_InteractivePage(object sender, RasterViewerLineEventArgs e)
      {
         RasterImageViewer viewer = sender as RasterImageViewer;
         if (e.Status == RasterViewerInteractiveStatus.Begin)
            viewer.Cursor = Cursors.SizeNS;
         else if (e.Status == RasterViewerInteractiveStatus.End)
            viewer.Cursor = Cursors.Default;
         Console.WriteLine("InteractivePage: e.Begin {0}, e.End{1}, e.Status {2}, e.Cancel {3}", e.Begin, e.End, e.Status, e.Cancel);
      }
      public void RasterImageViewer_InteractivePage(RasterImageViewer viewer)
      {
         // Load a multipage file
         RasterCodecs codecs = new RasterCodecs();
         viewer.Image = codecs.Load(Path.Combine(LEAD_VARS.ImagesDir, "eye.gif"));
         codecs.Dispose();

         viewer.InteractiveMode = RasterViewerInteractiveMode.Page;
         viewer.InteractivePage += new EventHandler&lt;RasterViewerLineEventArgs&gt;(viewer_InteractivePage);

         MessageBox.Show("Drag mouse across image to view different pages");
         // After you are done, you must remove the event handler as in below
         //
         // viewer.InteractivePage -= new EventHandler&lt;RasterViewerLineEventArgs&gt;(viewer_InteractivePage);
      }

   static class LEAD_VARS
   {
      public const string ImagesDir = @"C:\Users\Public\Documents\LEADTOOLS Images";
   }</code>
        <!--RasterImageViewer.InteractivePage-->
      </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.InteractiveScale">
      <summary>
            Occurs when the user performs interactive change of the current scale factor using the mouse.
            </summary>
      <event>The event handler receives an argument of type <see cref="T:Leadtools.WinForms.RasterViewerLineEventArgs" />.</event>
      <remarks>
            Only occurs when the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode" /> property is set to <see cref="T:Leadtools.WinForms.RasterViewerInteractiveMode">RasterViewerInteractiveMode.Scale</see>.
            </remarks>
      <example>
        <code lang="VB">      Private Sub viewer_InteractiveScale(ByVal sender As Object, ByVal e As RasterViewerLineEventArgs)
         Dim viewer As RasterImageViewer = CType(IIf(TypeOf sender Is RasterImageViewer, sender, Nothing), RasterImageViewer)
         If e.Status = RasterViewerInteractiveStatus.Begin Then
            viewer.Cursor = Cursors.SizeAll
         ElseIf e.Status = RasterViewerInteractiveStatus.End Then
            viewer.Cursor = Cursors.Default
         End If
         Console.WriteLine("InteractiveScale: e.Begin {0}, e.End{1}, e.Status {2}, e.Cancel {3}", e.Begin, e.End, e.Status, e.Cancel)
      End Sub
      Public Sub RasterImageViewer_InteractiveScale(ByVal viewer As RasterImageViewer)
         viewer.InteractiveMode = RasterViewerInteractiveMode.Scale
         AddHandler viewer.InteractiveScale, AddressOf viewer_InteractiveScale

         ' Drag mouse across image to scale the image
         ' After you are done, you must remove the event handler as in below
         '
         ' viewer.InteractiveScale -= new EventHandler&lt;RasterViewerLineEventArgs&gt;(viewer_InteractiveScale);
      End Sub</code>
        <code lang="CS">      private void viewer_InteractiveScale(object sender, RasterViewerLineEventArgs e)
      {
         RasterImageViewer viewer = sender as RasterImageViewer;
         if (e.Status == RasterViewerInteractiveStatus.Begin)
            viewer.Cursor = Cursors.SizeAll;
         else if (e.Status == RasterViewerInteractiveStatus.End)
            viewer.Cursor = Cursors.Default;
         Console.WriteLine("InteractiveScale: e.Begin {0}, e.End{1}, e.Status {2}, e.Cancel {3}", e.Begin, e.End, e.Status, e.Cancel);
      }
      public void RasterImageViewer_InteractiveScale(RasterImageViewer viewer)
      {
         viewer.InteractiveMode = RasterViewerInteractiveMode.Scale;
         viewer.InteractiveScale += new EventHandler&lt;RasterViewerLineEventArgs&gt;(viewer_InteractiveScale);

         // Drag mouse across image to scale the image
         // After you are done, you must remove the event handler as in below
         //
         // viewer.InteractiveScale -= new EventHandler&lt;RasterViewerLineEventArgs&gt;(viewer_InteractiveScale);
      }</code>
        <!--RasterImageViewer.InteractiveScale-->
      </example>
      <noexample />
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.InteractiveMagnifyGlass">
      <summary>
            Occurs when the user is using the <see cref="P:Leadtools.WinForms.RasterImageViewer.MagnifyGlass" />.
            </summary>
      <event>The event handler receives an argument of type <see cref="T:Leadtools.WinForms.RasterViewerLineEventArgs" />.</event>
      <remarks>
            Only occurs when the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode" /> property is set to <see cref="T:Leadtools.WinForms.RasterViewerInteractiveMode">RasterViewerInteractiveMode.MagnifyGlass</see>.
            </remarks>
      <example>
        <code lang="VB">      Private Sub viewer_InteractiveMagnifyGlass(ByVal sender As Object, ByVal e As RasterViewerLineEventArgs)
         If e.Status = RasterViewerInteractiveStatus.Begin Then
            System.Windows.Forms.Cursor.Hide()
         ElseIf e.Status = RasterViewerInteractiveStatus.End Then
            System.Windows.Forms.Cursor.Show()
         End If
         Console.WriteLine("InteractiveMagnifyGlass: e.Begin {0}, e.End{1}, e.Status {2}, e.Cancel {3}", e.Begin, e.End, e.Status, e.Cancel)
      End Sub
      Public Sub RasterImageViewer_InteractiveMagnifyGlass(ByVal viewer As RasterImageViewer)
         viewer.InteractiveMode = RasterViewerInteractiveMode.MagnifyGlass
         AddHandler viewer.InteractiveMagnifyGlass, AddressOf viewer_InteractiveMagnifyGlass

         ' Drag mouse across image to see the magnifying glass
         ' After you are done, you must remove the event handler as in below
         '
         ' viewer.InteractiveMagnifyGlass -= new EventHandler&lt;RasterViewerLineEventArgs&gt;(viewer_InteractiveMagnifyGlass);
      End Sub</code>
        <code lang="CS">      private void viewer_InteractiveMagnifyGlass(object sender, RasterViewerLineEventArgs e)
      {
         if (e.Status == RasterViewerInteractiveStatus.Begin)
            System.Windows.Forms.Cursor.Hide();
         else if (e.Status == RasterViewerInteractiveStatus.End)
            System.Windows.Forms.Cursor.Show();
         Console.WriteLine("InteractiveMagnifyGlass: e.Begin {0}, e.End{1}, e.Status {2}, e.Cancel {3}", e.Begin, e.End, e.Status, e.Cancel);
      }
      public void RasterImageViewer_InteractiveMagnifyGlass(RasterImageViewer viewer)
      {
         viewer.InteractiveMode = RasterViewerInteractiveMode.MagnifyGlass;
         viewer.InteractiveMagnifyGlass += new EventHandler&lt;RasterViewerLineEventArgs&gt;(viewer_InteractiveMagnifyGlass);

         // Drag mouse across image to see the magnifying glass
         // After you are done, you must remove the event handler as in below
         //
         // viewer.InteractiveMagnifyGlass -= new EventHandler&lt;RasterViewerLineEventArgs&gt;(viewer_InteractiveMagnifyGlass);
      }</code>
        <!--RasterImageViewer.InteractiveMagnifyGlass-->
      </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.InteractiveCenterAt">
      <summary>
            Occurs when the user performs interactive center of the image display.
            </summary>
      <event>The event handler receives an argument of type RasterViewerPointEventArgs.</event>
      <remarks>
            Only occurs when the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode" /> property is set to <see cref="T:Leadtools.WinForms.RasterViewerInteractiveMode">RasterViewerInteractiveMode.CenterAt</see>.
            </remarks>
      <example>
        <code lang="VB">      Private Sub viewer_InteractiveCenterAt(ByVal sender As Object, ByVal e As RasterViewerPointEventArgs)
         Console.WriteLine("InteractiveCenterAt: e.Status {0}, e.Cancel {1}", e.Status, e.Cancel)
      End Sub
      Public Sub RasterImageViewer_InteractiveCenterAt(ByVal viewer As RasterImageViewer)
         viewer.InteractiveMode = RasterViewerInteractiveMode.CenterAt
         AddHandler viewer.InteractiveCenterAt, AddressOf viewer_InteractiveCenterAt

         ' Click mouse on image to see the center the image
         ' After you are done, you must remove the event handler as in below
         '
         ' viewer.InteractiveCenterAt -= new EventHandler&lt;RasterViewerPointEventArgs&gt;(viewer_InteractiveCenterAt);
      End Sub</code>
        <code lang="CS">      private void viewer_InteractiveCenterAt(object sender, RasterViewerPointEventArgs e)
      {
         Console.WriteLine("InteractiveCenterAt: e.Status {0}, e.Cancel {1}", e.Status, e.Cancel);
      }
      public void RasterImageViewer_InteractiveCenterAt(RasterImageViewer viewer)
      {
         viewer.InteractiveMode = RasterViewerInteractiveMode.CenterAt;
         viewer.InteractiveCenterAt += new EventHandler&lt;RasterViewerPointEventArgs&gt;(viewer_InteractiveCenterAt);

         // Click mouse on image to see the center the image
         // After you are done, you must remove the event handler as in below
         //
         // viewer.InteractiveCenterAt -= new EventHandler&lt;RasterViewerPointEventArgs&gt;(viewer_InteractiveCenterAt);
      }</code>
        <!--RasterImageViewer.InteractiveCenterAt-->
      </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.InteractiveZoomTo">
      <summary>
            Occurs when the user performs interactive center of the image display.
            </summary>
      <event>The event handler receives an argument of type RasterViewerRectangleEventArgs.</event>
      <remarks>
            Only occurs when the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode" /> property is set to <see cref="T:Leadtools.WinForms.RasterViewerInteractiveMode">RasterViewerInteractiveMode.ZoomTo</see>.
            </remarks>
      <example>
        <code lang="VB">      Private Sub viewer_InteractiveZoomTo(ByVal sender As Object, ByVal e As RasterViewerRectangleEventArgs)
         Console.WriteLine("InteractiveZoomTo: e.Rectangle {0}, e.Status {1}, e.Cancel {2}", e.Rectangle, e.Status, e.Cancel)
      End Sub
      Public Sub RasterImageViewer_InteractiveZoomTo(ByVal viewer As RasterImageViewer)
         viewer.InteractiveMode = RasterViewerInteractiveMode.ZoomTo
         AddHandler viewer.InteractiveZoomTo, AddressOf viewer_InteractiveZoomTo

         MessageBox.Show("Draw a rectangle with the mouse to cause a zoom")
         ' After you are done, you must remove the event handler as in below
         '
         ' viewer.InteractiveZoomTo -= new EventHandler&lt;RasterViewerRectangleEventArgs&gt;(viewer_InteractiveZoomTo);
      End Sub</code>
        <code lang="CS">      private void viewer_InteractiveZoomTo(object sender, RasterViewerRectangleEventArgs e)
      {
         Console.WriteLine("InteractiveZoomTo: e.Rectangle {0}, e.Status {1}, e.Cancel {2}", e.Rectangle, e.Status, e.Cancel);
      }
      public void RasterImageViewer_InteractiveZoomTo(RasterImageViewer viewer)
      {
         viewer.InteractiveMode = RasterViewerInteractiveMode.ZoomTo;
         viewer.InteractiveZoomTo += new EventHandler&lt;RasterViewerRectangleEventArgs&gt;(viewer_InteractiveZoomTo);

         MessageBox.Show("Draw a rectangle with the mouse to cause a zoom");
         // After you are done, you must remove the event handler as in below
         //
         // viewer.InteractiveZoomTo -= new EventHandler&lt;RasterViewerRectangleEventArgs&gt;(viewer_InteractiveZoomTo);
      }</code>
        <!--RasterImageViewer.InteractiveZoomTo-->
      </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.InteractiveRegionRectangle">
      <summary>
            Occurs when the user performs interactive creation of a rectangular region for the image.
            </summary>
      <event>The event handler receives an argument of type RasterViewerRectangleEventArgs.</event>
      <remarks>
            Only occurs when the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode" /> property is set to <see cref="T:Leadtools.WinForms.RasterViewerInteractiveMode">RasterViewerInteractiveMode.Region</see>
            and the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveRegionType" /> is set to <see cref="T:Leadtools.WinForms.RasterViewerInteractiveRegionType">RasterViewerInteractiveRegionType.Rectangle</see>.
            </remarks>
      <example>Refer to <see cref="T:Leadtools.WinForms.RasterViewerRectangleEventArgs" />.</example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.InteractiveRegionEllipse">
      <summary>
            Occurs when the user performs interactive creation of an elliptical region for the image.
            </summary>
      <event>The event handler receives an argument of type RasterViewerRectangleEventArgs.</event>
      <remarks>
            Only occurs when the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode" /> property is set to <see cref="T:Leadtools.WinForms.RasterViewerInteractiveMode">RasterViewerInteractiveMode.Region</see>
            and the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveRegionType" /> is set to <see cref="T:Leadtools.WinForms.RasterViewerInteractiveRegionType">RasterViewerInteractiveRegionType.Ellipse</see>.
            </remarks>
      <example>
        <code lang="VB">      Private Sub viewer_InteractiveRegionEllipse(ByVal sender As Object, ByVal e As RasterViewerRectangleEventArgs)
         Console.WriteLine("InteractiveRegionEllipse: e.Rectangle {0}, e.Status {1}, e.Cancel {2}", e.Rectangle, e.Status, e.Cancel)
      End Sub
      Public Sub RasterImageViewer_InteractiveRegionEllipse(ByVal viewer As RasterImageViewer)
         viewer.InteractiveMode = RasterViewerInteractiveMode.Region
         viewer.InteractiveRegionType = RasterViewerInteractiveRegionType.Ellipse
         AddHandler viewer.InteractiveRegionEllipse, AddressOf viewer_InteractiveRegionEllipse

         ' Draw the mouse on image to draw an elliptical region
         ' After you are done, you must remove the event handler as in below
         '
         ' viewer.InteractiveRegionEllipse -= new EventHandler&lt;RasterViewerRectangleEventArgs&gt;(viewer_InteractiveRegionEllipse);
      End Sub</code>
        <code lang="CS">      private void viewer_InteractiveRegionEllipse(object sender, RasterViewerRectangleEventArgs e)
      {
         Console.WriteLine("InteractiveRegionEllipse: e.Rectangle {0}, e.Status {1}, e.Cancel {2}", e.Rectangle, e.Status, e.Cancel);
      }
      public void RasterImageViewer_InteractiveRegionEllipse(RasterImageViewer viewer)
      {
         viewer.InteractiveMode = RasterViewerInteractiveMode.Region;
         viewer.InteractiveRegionType = RasterViewerInteractiveRegionType.Ellipse;
         viewer.InteractiveRegionEllipse += new EventHandler&lt;RasterViewerRectangleEventArgs&gt;(viewer_InteractiveRegionEllipse);

         // Draw the mouse on image to draw an elliptical region
         // After you are done, you must remove the event handler as in below
         //
         // viewer.InteractiveRegionEllipse -= new EventHandler&lt;RasterViewerRectangleEventArgs&gt;(viewer_InteractiveRegionEllipse);
      }</code>
        <!--RasterImageViewer.InteractiveRegionEllipse-->
      </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.InteractiveUserRectangle">
      <summary>
            Occurs when the user performs user-defined interactive drawing of a rectangle.
            </summary>
      <event>The event handler receives an argument of type <see cref="T:Leadtools.WinForms.RasterViewerRectangleEventArgs" />.</event>
      <remarks>
        <para>Only occur when the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode" /> property is set to <see cref="T:Leadtools.WinForms.RasterViewerInteractiveMode">RasterViewerInteractiveMode.UserRectangle</see>.</para>
        <para>Use the <see cref="T:Leadtools.WinForms.RasterViewerInteractiveMode">RasterViewerInteractiveMode.UserRectangle</see> and <see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveUserRectangle" /> to draw a rectangle on the surface of the viewer. The
            <see cref="T:Leadtools.WinForms.RasterImageViewer" /> object will handle mouse cursor down and up events, mouse movement, canceling (through the ESC key or when the control loses the focus) and clipping.</para>
        <para>The <see cref="E:Leadtools.WinForms.RasterImageViewer.InteractiveUserRectangle" /> event will occur everytime the user moves the mouse or clicks any of the buttons with the corresponding data in the
            <see cref="T:Leadtools.WinForms.RasterViewerRectangleEventArgs" /> of the event.</para>
        <para>You can use the user-defined rectangle interactive mode to perform additional interactive operations on the viewer not handled by any of the pre-defined <see cref="T:Leadtools.WinForms.RasterViewerInteractiveMode" />.</para>
        <para>You can use the <see cref="M:Leadtools.WinForms.RasterImageViewer.ViewerToImageRectangle(System.Drawing.Rectangle,System.Boolean)" /> and <see cref="M:Leadtools.WinForms.RasterImageViewer.ImageToViewerRectangle(System.Drawing.Rectangle,System.Boolean)" /> methods to convert a rectangle between image and viewer coordinates.</para>
      </remarks>
      <example>
        <code lang="VB">      Public Sub InteractiveUserRectangleExample(ByVal viewer As RasterImageViewer)
         ' Set the interactive mode of the viewer to user-defined rectangle
         viewer.InteractiveMode = RasterViewerInteractiveMode.UserRectangle
         ' Subscribe to the InteractiveUserRectangle event to know when the user has finished drawing a new rectangle
         AddHandler viewer.InteractiveUserRectangle, AddressOf viewer_InteractiveUserRectangle
      End Sub

      Private Sub viewer_InteractiveUserRectangle(ByVal sender As Object, ByVal e As RasterViewerRectangleEventArgs)
         ' Check the status of the event
         If (e.Status = RasterViewerInteractiveStatus.End AndAlso Not e.Cancel) Then
            ' The user has finished drawing a new rectangle (and the operation has not been canceled)

            ' Get the rectangle and convert it to image coordinates (with view-perspective)
            Dim viewer As RasterImageViewer = CType(sender, RasterImageViewer)
            Dim rect As Rectangle = e.Rectangle

            ' The user rectangle might have negative width or height (if the user starts the drawing from
            ' bottom-left corner for example), check for that
            If (rect.Left &gt; rect.Right) Then
               rect = Rectangle.FromLTRB(rect.Right, rect.Top, rect.Left, rect.Bottom)
            End If
            If (rect.Top &gt; rect.Bottom) Then
               rect = Rectangle.FromLTRB(rect.Left, rect.Bottom, rect.Right, rect.Top)
            End If

            ' Account for the view perspective of the image
            rect = viewer.ViewerToImageRectangle(rect, True)

            ' Set this as the region and invert the colors
            Dim image As RasterImage = viewer.Image

            Dim lrect As LeadRect = New LeadRect(rect.Left, rect.Top, rect.Width, rect.Height)
            image.AddRectangleToRegion(Nothing, lrect, RasterRegionCombineMode.Set)
            Dim cmd As New InvertCommand()
            cmd.Run(image)

            ' Remove the region
            image.MakeRegionEmpty()
         End If
      End Sub</code>
        <code lang="CS">      public void InteractiveUserRectangleExample(RasterImageViewer viewer)
      {
         // Set the interactive mode of the viewer to user-defined rectangle
         viewer.InteractiveMode = RasterViewerInteractiveMode.UserRectangle;
         // Subscribe to the InteractiveUserRectangle event to know when the user has finished drawing a new rectangle
         viewer.InteractiveUserRectangle += new EventHandler&lt;RasterViewerRectangleEventArgs&gt;(viewer_InteractiveUserRectangle);
      }

      private void viewer_InteractiveUserRectangle(object sender, RasterViewerRectangleEventArgs e)
      {
         // Check the status of the event
         if(e.Status == RasterViewerInteractiveStatus.End &amp;&amp; !e.Cancel)
         {
            // The user has finished drawing a new rectangle (and the operation has not been canceled)

            // Get the rectangle and convert it to image coordinates (with view-perspective)
            RasterImageViewer viewer = sender as RasterImageViewer;
            Rectangle rect = e.Rectangle;

            // The user rectangle might have negative width or height (if the user starts the drawing from
            // bottom-left corner for example), check for that
            if(rect.Left &gt; rect.Right)
               rect = Rectangle.FromLTRB(rect.Right, rect.Top, rect.Left, rect.Bottom);
            if(rect.Top &gt; rect.Bottom)
               rect = Rectangle.FromLTRB(rect.Left, rect.Bottom, rect.Right, rect.Top);

            // Account for the view perspective of the image
            rect = viewer.ViewerToImageRectangle(rect, true);

            // Set this as the region and invert the colors
            RasterImage image = viewer.Image;

            LeadRect ltRect = new LeadRect(rect.Left, rect.Top, rect.Width, rect.Height);
            image.AddRectangleToRegion(null, ltRect, RasterRegionCombineMode.Set);

            InvertCommand cmd = new InvertCommand();
            cmd.Run(image);

            // Remove the region
            image.MakeRegionEmpty();
         }
      }</code>
        <!--RasterImageViewer.InteractiveUserRectangle-->
      </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.InteractiveRegionFreehand">
      <summary>
            Occurs when the user performs interactive creation of a freehand region for the image.
            </summary>
      <event>The event handler receives an argument of type RasterViewerPointsEventArgs.</event>
      <remarks>
            Only occurs when the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode" /> property is set to <see cref="T:Leadtools.WinForms.RasterViewerInteractiveMode">RasterViewerInteractiveMode.Region</see>
            and the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveRegionType" /> is set to <see cref="T:Leadtools.WinForms.RasterViewerInteractiveRegionType">RasterViewerInteractiveRegionType.Freehand</see>.
            </remarks>
      <example>
        <code lang="VB">      Private Sub viewer_InteractiveRegionFreehand(ByVal sender As Object, ByVal e As RasterViewerPointsEventArgs)
         Console.WriteLine("InteractiveRegionFreehand: PointCount {0} e.Status {1}, e.Cancel {2}", e.Points.Count, e.Status, e.Cancel)
      End Sub
      Public Sub RasterImageViewer_InteractiveRegionFreehand(ByVal viewer As RasterImageViewer)
         viewer.InteractiveMode = RasterViewerInteractiveMode.Region
         viewer.InteractiveRegionType = RasterViewerInteractiveRegionType.Freehand
         AddHandler viewer.InteractiveRegionFreehand, AddressOf viewer_InteractiveRegionFreehand

         ' Draw the mouse on image to draw an elliptical region
         ' After you are done, you must remove the event handler as in below
         '
         ' viewer.InteractiveRegionFreehand -= new EventHandler&lt;RasterViewerPointsEventArgs&gt;(viewer_InteractiveRegionFreehand);
      End Sub</code>
        <code lang="CS">      private void viewer_InteractiveRegionFreehand(object sender, RasterViewerPointsEventArgs e)
      {
         Console.WriteLine("InteractiveRegionFreehand: PointCount {0} e.Status {1}, e.Cancel {2}", e.Points.Count, e.Status, e.Cancel);
      }
      public void RasterImageViewer_InteractiveRegionFreehand(RasterImageViewer viewer)
      {
         viewer.InteractiveMode = RasterViewerInteractiveMode.Region;
         viewer.InteractiveRegionType = RasterViewerInteractiveRegionType.Freehand;
         viewer.InteractiveRegionFreehand += new EventHandler&lt;RasterViewerPointsEventArgs&gt;(viewer_InteractiveRegionFreehand);

         // Draw the mouse on image to draw an elliptical region
         // After you are done, you must remove the event handler as in below
         //
         // viewer.InteractiveRegionFreehand -= new EventHandler&lt;RasterViewerPointsEventArgs&gt;(viewer_InteractiveRegionFreehand);
      }</code>
        <!--RasterImageViewer.InteractiveRegionFreehand-->
      </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.IsImageAvailable">
      <summary>
            Determines if the control currently has an <see cref="T:Leadtools.RasterImage" /> object available for display.
            </summary>
      <value>true if an image is available, false otherwise.</value>
      <remarks>If this property returns false, you should not attempt to read the <see cref="P:Leadtools.WinForms.RasterImageViewer.Image" /> property.</remarks>
      <example>Refer to <see cref="T:Leadtools.WinForms.ViewerBorderPadding" />.</example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.ScrollPosition">
      <summary>
            Gets or sets the location of the auto-scroll position.
            </summary>
      <value>A Point object that represents the auto-scroll position in pixels.</value>
      <noremarks />
      <example>
        <code lang="VB">      Private Sub viewer_ScrollViewer(ByVal sender As Object, ByVal e As EventArgs)
         Dim viewer As RasterImageViewer = CType(IIf(TypeOf sender Is RasterImageViewer, sender, Nothing), RasterImageViewer)
         Dim s As String = String.Format("ScrollPosition: {0}", viewer.ScrollPosition)
         Console.WriteLine(s)
      End Sub
      Public Sub RasterImageViewer_ScrollViewer(ByVal viewer As RasterImageViewer)
         AddHandler viewer.ScrollViewer, AddressOf viewer_ScrollViewer

         MessageBox.Show("Scroll the image and the 'ScrollViewer' event gets fired")
         ' or do something in code to cause a scroll
      End Sub</code>
        <code lang="CS">      private void viewer_ScrollViewer(object sender, EventArgs e)
      {
         RasterImageViewer viewer = sender as RasterImageViewer;
         string s = string.Format("ScrollPosition: {0}", viewer.ScrollPosition);
         Console.WriteLine(s);
      }
      public void RasterImageViewer_ScrollViewer(RasterImageViewer viewer)
      {
         viewer.ScrollViewer += new EventHandler(viewer_ScrollViewer);

         MessageBox.Show("Scroll the image and the 'ScrollViewer' event gets fired");
         // or do something in code to cause a scroll
      }</code>
        <!--RasterImageViewer.ScrollViewer-->
      </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.MagnifyGlass">
      <summary>
            Gets or sets the <see cref="T:Leadtools.WinForms.RasterMagnifyGlass" /> object used to perform Magnifying Glass operations for this <b>RasterImageViewer</b>.
            </summary>
      <value>
            The <see cref="T:Leadtools.WinForms.RasterMagnifyGlass" /> object used to perform Magnifying Glass operations for this <b>RasterImageViewer</b>.
            </value>
      <remarks>
        <para>Use the <see cref="P:Leadtools.WinForms.RasterImageViewer.AutoInteractiveMagnifyGlass" /> property to control whether the magnifying glass only appears when the
            current interactive button is down.</para>
        <para>You can derive your own class from <see cref="T:Leadtools.WinForms.RasterMagnifyGlass" />, and then
            set this property to an instance of that class to perform your own Magnifying Glass
            processing (for example, change the way the crosshair is displayed).</para>
      </remarks>
      <example>
        <code lang="VB">      Private Class MyRasterMagnifyGlass : Inherits RasterMagnifyGlass
         Public Sub New()
            Shape = RasterMagnifyGlassShape.Border3D
         End Sub
         Protected Overrides Sub OnPaintBorder(ByVal graphics As Graphics, ByVal centerPoint As Point)
            Dim width As Integer = (Size.Width - 2) \ 2
            Dim height As Integer = (Size.Height - 2) \ 2

            Dim rc As Rectangle = New Rectangle(centerPoint.X - width, centerPoint.Y - height, 2 * width, 2 * height)
            graphics.DrawRectangle(Pens.Blue, rc)
         End Sub

         Protected Overrides Sub OnPaintCrosshair(ByVal graphics As Graphics, ByVal centerPoint As Point)
            Dim width As Integer = (Size.Width - 2) \ 2
            Dim height As Integer = (Size.Height - 2) \ 2
            Dim p1 As Point = New Point(centerPoint.X - width, centerPoint.Y - height)
            Dim p2 As Point = New Point(centerPoint.X + width, centerPoint.Y + height)
            graphics.DrawLine(Pens.Red, p1, p2)

            p1 = New Point(centerPoint.X + width, centerPoint.Y - height)
            p2 = New Point(centerPoint.X - width, centerPoint.Y + height)
            graphics.DrawLine(Pens.Red, p1, p2)
         End Sub
      End Class

      Private Sub viewer_MagnifyGlassChanged(ByVal sender As Object, ByVal e As EventArgs)
         MessageBox.Show("Custom Magnify Glass being used -- red X for crosshair, blue for border")
      End Sub

      Public Sub RasterImageViewer_MagnifyGlass(ByVal viewer As RasterImageViewer)
         AddHandler viewer.MagnifyGlassChanged, AddressOf viewer_MagnifyGlassChanged
         viewer.MagnifyGlass = New MyRasterMagnifyGlass()
         viewer.InteractiveMode = RasterViewerInteractiveMode.MagnifyGlass

         RemoveHandler viewer.MagnifyGlassChanged, AddressOf viewer_MagnifyGlassChanged
      End Sub</code>
        <code lang="CS">      class MyRasterMagnifyGlass : RasterMagnifyGlass
      {
         public MyRasterMagnifyGlass()
         {
            Shape = RasterMagnifyGlassShape.Border3D;
         }
         protected override void OnPaintBorder(Graphics graphics, Point centerPoint)
         {
            int width = (Size.Width - 2) / 2;
            int height = (Size.Height - 2) / 2;

            Rectangle rc = new Rectangle(centerPoint.X - width, centerPoint.Y - height, 2*width, 2*height);
            graphics.DrawRectangle(Pens.Blue, rc);
         }

         protected override void OnPaintCrosshair(Graphics graphics, Point centerPoint)
         {
            int width = (Size.Width - 2) / 2;
            int height = (Size.Height - 2) / 2;
            Point p1 = new Point(centerPoint.X - width, centerPoint.Y - height);
            Point p2 = new Point(centerPoint.X + width, centerPoint.Y + height);
            graphics.DrawLine(Pens.Red, p1, p2);

            p1 = new Point(centerPoint.X + width, centerPoint.Y - height);
            p2 = new Point(centerPoint.X - width, centerPoint.Y + height);
            graphics.DrawLine(Pens.Red, p1, p2);
         }
      }

      private void viewer_MagnifyGlassChanged(object sender, EventArgs e)
      {
         MessageBox.Show("Custom Magnify Glass being used -- red X for crosshair, blue for border");
      }

      public void RasterImageViewer_MagnifyGlass(RasterImageViewer viewer)
      {
         viewer.MagnifyGlassChanged+= new EventHandler(viewer_MagnifyGlassChanged);
         viewer.MagnifyGlass = new MyRasterMagnifyGlass();
         viewer.InteractiveMode = RasterViewerInteractiveMode.MagnifyGlass;

         viewer.MagnifyGlassChanged -= new EventHandler(viewer_MagnifyGlassChanged);
      }</code>
        <!--RasterImageViewer.MagnifyGlass-->
      </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.ScrollPositionChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.ScrollPosition" /> property changes.
            </summary>
      <event>The event handler receives an argument of type EventArgs.</event>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.ScrollPosition" /> property is changed by either a programmatic modification or user interaction.
            </remarks>
      <noexample />
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.MagnifyGlassChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.MagnifyGlass" /> property changes.
            </summary>
      <event>The event handler receives an argument of type <see cref="T:System.EventArgs" />.</event>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.MagnifyGlass" /> property is changed.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.FloaterImage">
      <summary>
            Gets or sets the floater image.
            </summary>
      <value>A <see cref="T:Leadtools.RasterImage" /> object that represents the current floater image.</value>
      <remarks>
        <p>The <see cref="T:Leadtools.WinForms.RasterImageViewer" /> supports a floater image that can be dragged with the mouse when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode" /> is set to <see cref="T:Leadtools.WinForms.RasterViewerInteractiveMode">RasterViewerInteractiveMode.Floater</see></p>
        <p>If the value of the floater image has a region, then only the region will be painted.  This region can be animated by setting the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.AnimateFloater" /> property to true.</p>
        <p>The position of the floater can be manipulated with the <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterPosition" /> property.</p>
        <p>You can use the <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterVisible" /> property to control whether to view the floater.</p>
      </remarks>
      <example>
        <code lang="VB">      Private Sub viewer_InteractiveModeEnded(ByVal sender As Object, ByVal e As EventArgs)
         ' an interactive mode is done.  check if its drawing a region
         ' if so, convert the region to a floater and set the interactive
         ' mode so that we can drag the floater
         Dim viewer As RasterImageViewer = CType(IIf(TypeOf sender Is RasterImageViewer, sender, Nothing), RasterImageViewer)
         If viewer.InteractiveMode = RasterViewerInteractiveMode.Region Then
            viewer.EnableTimer = True
            viewer.RegionToFloater()
            viewer.FloaterVisible = True
            viewer.AnimateFloater = True
            viewer.InteractiveMode = RasterViewerInteractiveMode.Floater
            ' delete the region since we do not need it anymore
            viewer.Image.MakeRegionEmpty()

            MessageBox.Show("Move the floater around, double click anywhere on the viewer to combine it with the image")
         End If
      End Sub

      Private Sub viewer_DoubleClick(ByVal sender As Object, ByVal e As EventArgs)
         ' check if the interactive mode is Floater, if so, 
         ' combine the floater with the image.
         Dim viewer As RasterImageViewer = CType(IIf(TypeOf sender Is RasterImageViewer, sender, Nothing), RasterImageViewer)
         If viewer.InteractiveMode = RasterViewerInteractiveMode.Floater Then
            viewer.InteractiveMode = RasterViewerInteractiveMode.None
            viewer.CombineFloater(True, ImageProcessing.CombineFastCommandFlags.SourceCopy)

            ' get rid of the floater since we do not need it anymore
            viewer.FloaterImage = Nothing
            MessageBox.Show("The floater has been combined with the image")
         End If
      End Sub

      Public Sub RasterImageViewer_FloaterImage(ByVal viewer As RasterImageViewer)
         ' hook into the viewer InteractiveModeEnded and DoubleClick events
         AddHandler viewer.InteractiveModeEnded, AddressOf viewer_InteractiveModeEnded
         AddHandler viewer.DoubleClick, AddressOf viewer_DoubleClick

         ' first set the interactive mode to draw a freehand region
         viewer.InteractiveRegionType = RasterViewerInteractiveRegionType.Freehand
         viewer.InteractiveRegionCombineMode = RasterRegionCombineMode.Set
         viewer.InteractiveMode = RasterViewerInteractiveMode.Region

         MessageBox.Show("Draw a freehand region on the image")

      End Sub</code>
        <code lang="CS">      private void viewer_InteractiveModeEnded(object sender, EventArgs e)
      {
         // an interactive mode is done.  check if its drawing a region
         // if so, convert the region to a floater and set the interactive
         // mode so that we can drag the floater
         RasterImageViewer viewer = sender as RasterImageViewer;
         if (viewer.InteractiveMode == RasterViewerInteractiveMode.Region)
         {
            viewer.EnableTimer = true;
            viewer.RegionToFloater();
            viewer.FloaterVisible = true;
            viewer.AnimateFloater = true;
            viewer.InteractiveMode = RasterViewerInteractiveMode.Floater;
            // delete the region since we do not need it anymore
            viewer.Image.MakeRegionEmpty();

            MessageBox.Show("Move the floater around, double click anywhere on the viewer to combine it with the image");
         }
      }

      private void viewer_DoubleClick(object sender, EventArgs e)
      {
         // check if the interactive mode is Floater, if so, 
         // combine the floater with the image.
         RasterImageViewer viewer = sender as RasterImageViewer;
         if (viewer.InteractiveMode == RasterViewerInteractiveMode.Floater)
         {
            viewer.InteractiveMode = RasterViewerInteractiveMode.None;
            viewer.CombineFloater(true, ImageProcessing.CombineFastCommandFlags.SourceCopy);

            // get rid of the floater since we do not need it anymore
            viewer.FloaterImage = null;
            MessageBox.Show("The floater has been combined with the image");
         }
      }

      public void RasterImageViewer_FloaterImage(RasterImageViewer viewer)
      {
         // hook into the viewer InteractiveModeEnded and DoubleClick events
         viewer.InteractiveModeEnded += new EventHandler(viewer_InteractiveModeEnded);
         viewer.DoubleClick += new EventHandler(viewer_DoubleClick);

         // first set the interactive mode to draw a freehand region
         viewer.InteractiveRegionType = RasterViewerInteractiveRegionType.Freehand;
         viewer.InteractiveRegionCombineMode = RasterRegionCombineMode.Set;
         viewer.InteractiveMode = RasterViewerInteractiveMode.Region;

         MessageBox.Show("Draw a freehand region on the image");

      }</code>
        <!--RasterImageViewer.FloaterImage-->
      </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.FloaterImageChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterImage" /> property changes.
            </summary>
      <event>The event handler receives an argument of type <see cref="T:System.EventArgs" />.</event>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterImage" /> property is changed.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.FloaterPosition">
      <summary>
            Gets or sets the position of the floater.
            </summary>
      <value>A <see cref="T:System.Drawing.Point" /> object that represents the top-left position used when painting the <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterImage" />.</value>
      <remarks>
        <p>You can manually set the value of this property to control where the <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterImage" /> is painted.</p>
        <p>When the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode" /> of this <see cref="T:Leadtools.WinForms.RasterImageViewer" />is set to <see cref="T:Leadtools.WinForms.RasterViewerInteractiveMode">RasterViewerInteractiveMode.Floater</see>, the viewer will update the value of this property as the user drags the <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterImage" /> around.</p>
      </remarks>
      <example>
        <code lang="VB">      Private Sub viewer_InteractiveFloater(ByVal sender As Object, ByVal e As RasterViewerPointEventArgs)
         ' show information about the user interaction
         Dim viewer As RasterImageViewer = CType(IIf(TypeOf sender Is RasterImageViewer, sender, Nothing), RasterImageViewer)
         Console.WriteLine("Status: {0}, Canceled: {1}, Point: {2}, Floater Position: {3}", e.Status, e.Cancel, e.Point, viewer.FloaterPosition)
      End Sub
      Public Sub RasterImageViewer_FloaterPosition(ByVal viewer As RasterImageViewer)
         ' hook into the viewer InteractiveFloater event to get updated whenever the user moves the floater.
         AddHandler viewer.InteractiveFloater, AddressOf viewer_InteractiveFloater

         ' add a floater the viewer and start the floater interactive mode
         ' we are going to create the floater image manually as a red ellipse with a region.

         Dim palette As RasterColor() = New RasterColor() {}
         Dim floaterImage As RasterImage = New RasterImage(RasterMemoryFlags.Conventional, 200, 200, 24, RasterByteOrder.Bgr, _
                                                           RasterViewPerspective.TopLeft, palette, IntPtr.Zero, 0)
         Dim container As RasterImageGdiPlusGraphicsContainer = New RasterImageGdiPlusGraphicsContainer(floaterImage)

         Try
            container.Graphics.FillRectangle(Brushes.Black, 0, 0, floaterImage.ImageWidth, floaterImage.ImageHeight)
            container.Graphics.FillEllipse(Brushes.Red, 0, 0, floaterImage.ImageWidth, floaterImage.ImageHeight)
         Finally
            CType(container, IDisposable).Dispose()
         End Try

         floaterImage.AddColorToRegion(RasterColor.FromKnownColor(RasterKnownColor.Red), RasterRegionCombineMode.Set)

         viewer.FloaterImage = floaterImage
         viewer.FloaterVisible = True
         viewer.FloaterPosition = New Point(100, 100)
         viewer.InteractiveMode = RasterViewerInteractiveMode.Floater

         MessageBox.Show("Click and move the floater")
      End Sub</code>
        <code lang="CS">      private void viewer_InteractiveFloater(object sender, RasterViewerPointEventArgs e)
      {
         // show information about the user interaction
         RasterImageViewer viewer = sender as RasterImageViewer;
         Console.WriteLine("Status: {0}, Canceled: {1}, Point: {2}, Floater Position: {3}", e.Status, e.Cancel, e.Point, viewer.FloaterPosition);
      }
      public void RasterImageViewer_FloaterPosition(RasterImageViewer viewer)
      {
         // hook into the viewer InteractiveFloater event to get updated whenever the user moves the floater.
         viewer.InteractiveFloater += new EventHandler&lt;RasterViewerPointEventArgs&gt;(viewer_InteractiveFloater);

         // add a floater the viewer and start the floater interactive mode
         // we are going to create the floater image manually as a red ellipse with a region.

         RasterColor[]palette = new RasterColor[0];
         RasterImage floaterImage = new RasterImage(
            RasterMemoryFlags.Conventional,
            200,
            200,
            24,
            RasterByteOrder.Bgr,
            RasterViewPerspective.TopLeft,
            palette,
            IntPtr.Zero,
            0
            );

         using (RasterImageGdiPlusGraphicsContainer container = new RasterImageGdiPlusGraphicsContainer(floaterImage))
         {
            container.Graphics.FillRectangle(Brushes.Black, 0, 0, floaterImage.ImageWidth, floaterImage.ImageHeight);
            container.Graphics.FillEllipse(Brushes.Red, 0, 0, floaterImage.ImageWidth, floaterImage.ImageHeight);
         }

         floaterImage.AddColorToRegion(RasterColor.FromKnownColor(RasterKnownColor.Red), RasterRegionCombineMode.Set);

         viewer.FloaterImage = floaterImage;
         viewer.FloaterVisible = true;
         viewer.FloaterPosition = new Point(100, 100);
         viewer.InteractiveMode = RasterViewerInteractiveMode.Floater;

         MessageBox.Show("Click and move the floater");
      }</code>
        <!--RasterImageViewer.FloaterPosition-->
      </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.FloaterPositionChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterPosition" /> property changes.
            </summary>
      <event>The event handler receives an argument of type <see cref="T:System.EventArgs" />.</event>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterPosition" /> property is changed.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.FloaterVisible">
      <summary>
            Gets or sets a value indicating whether to paint the <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterImage" /></summary>
      <value>true if this <see cref="T:Leadtools.WinForms.RasterImageViewer" /> should paint the <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterImage" /> if available; otherwise, false.</value>
      <remarks>
            The <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterImage" /> is painted at the position specified by <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterPosition" />.
            </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterPosition" />.
            </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.FloaterVisibleChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterVisible" /> property changes.
            </summary>
      <event>The event handler receives an argument of type <see cref="T:System.EventArgs" />.</event>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterVisible" /> property is changed.
            </remarks>
      <noexample />
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.InteractiveFloater">
      <summary>
            Occurs when the user is using the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode" /> to move the <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterImage" />.
            </summary>
      <event>The event handler receives an argument of type <see cref="T:Leadtools.WinForms.RasterViewerPointEventArgs" />.</event>
      <remarks>
            Only occurs when the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode" /> property is set to <see cref="T:Leadtools.WinForms.RasterViewerInteractiveMode">RasterViewerInteractiveMode.Floater</see>.
            </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterPosition" />.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.AnimateFloater">
      <summary>
            Gets or sets a value indicating whether to animate the <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterImage" />.
            </summary>
      <value>true to enable animation of the <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterImage" /> if available; otherwise, false.</value>
      <noremarks />
      <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterImage" />.
            </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.AnimateFloaterChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.AnimateFloater" /> property changes.
            </summary>
      <event>The event handler receives an argument of type <see cref="T:System.EventArgs" />.</event>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.EnableTimer">
      <summary>
            Gets or sets a value indicating whether to enable the timer used when animating regions and floaters.
            </summary>
      <value>
        <b>true</b> timer is enabled; otherwise, false.
            Default value is <b>false</b>.</value>
      <remarks>
            When the timer is enabled:
            <list type="bullet"><item><description>the boundary of any region is animated</description></item><item><description>the boundary of any floater is animated</description></item></list></remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterImage" />.
            </example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.EnableTimerChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.EnableTimer" /> property changes.
            </summary>
      <event>The event handler receives an argument of type EventArgs.</event>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.EnableTimer" /> property is changed by either a programmatic modification or user interaction.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.BindingRasterCodecs">
      <summary>
            Gets or sets the <see cref="T:Leadtools.Codecs.RasterCodecs" /> object used with data binding.
            </summary>
      <value>The <see cref="T:Leadtools.Codecs.RasterCodecs" /> object used with data binding.</value>
      <noremarks />
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.BindingLoadBitsPerPixel">
      <summary>
            Gets or sets the image bits per pixel used when loading images from a data binding object.
            </summary>
      <value>The image bits per pixel used when loading images from a data binding object.</value>
      <remarks>
            Set this property to 0 to load the images using the bits/pixel value saved in the imege data.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.BindingSaveBitsPerPixel">
      <summary>
            Gets or sets the image bits per pixel used when saving images to a data binding object.
            </summary>
      <value>The image bits per pixel used when saving images to a data binding object.</value>
      <remarks>
            Set this property to 0 to automatically use the most compatible bits/pixel value with the image file format set in
            <see cref="P:Leadtools.WinForms.RasterImageViewer.BindingSaveImageFormat" />.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.BindingSaveImageFormat">
      <summary>
            Gets or sets the <see cref="T:Leadtools.RasterImageFormat" /> used when saving images to a data binding object.
            </summary>
      <value>the <see cref="T:Leadtools.RasterImageFormat" /> used when saving images to a data binding object.</value>
      <remarks>
        <see cref="P:Leadtools.WinForms.RasterImageViewer.BindingSaveBitsPerPixel" /> must be set to a value compatible with the image format used or 0 to automatically
            use the most compatible bits/pixel value.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.BindingData">
      <summary>
            Gets or sets the extra data used when saving image to a data binding object.
            </summary>
      <value>Byte array that contains the extra data used when saving image to a data binding object.</value>
      <remarks>
            The default implementation uses this property to save region and annotations data when the image is saved to
            a data binding object.
            </remarks>
      <noexample />
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.WriteBindingData">
      <summary>
            Occurs before writing <see cref="P:Leadtools.WinForms.RasterImageViewer.BindingData" /> to a data binding object.
            </summary>
      <remarks>
        <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.BindingData" /> is acquired 
            by data binding process to write the data to a data binding object.</p>
      </remarks>
      <noexample />
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.ReadBindingData">
      <summary>
            Occurs before reading <see cref="P:Leadtools.WinForms.RasterImageViewer.BindingData" /> from a data binding object.
            </summary>
      <remarks>
        <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.BindingData" /> is acquired 
            by data binding process to read data from a data binding object.</p>
      </remarks>
      <noexample />
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.InteractiveModeEnded">
      <summary>
            Occurs when the operation of the current <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode" /> ended successfully.
            </summary>
      <event>The event handler receives an argument of type <see cref="T:System.EventArgs" />.</event>
      <noremarks />
      <example>
            Refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.FloaterImage" />.
            </example>
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.EnableScrollingInterface">
      <summary>
            Gets or sets a value indicating whether the control automatically processes the keyboard and mousewheel.
            </summary>
      <value>
        <b>true</b> if the control automatically processes the keyboard and the mousewheel; otherwise, false.
            Default value is <b>false</b>.</value>
      <remarks>
        <p>When automatic keyboard and mousewheel processing is enabled, the <see cref="T:Leadtools.WinForms.RasterImageViewer" /> Control will process
            the following keys:
            <list type="table"><listheader><term>Key</term><description>Event</description></listheader><item><term><see cref="F:System.Windows.Forms.Keys.Up" /></term><description>Scrolls up.</description></item><item><term><see cref="F:System.Windows.Forms.Keys.Down" /></term><description>Scrolls down.</description></item><item><term><see cref="F:System.Windows.Forms.Keys.Left" /></term><description>Scrolls left.</description></item><item><term><see cref="F:System.Windows.Forms.Keys.Right" /></term><description>Scrolls right.</description></item><item><term><see cref="F:System.Windows.Forms.Keys.PageUp" /></term><description>Scrolls up one page.</description></item><item><term><see cref="F:System.Windows.Forms.Keys.PageDown" /></term><description>Scrolls down one page.</description></item><item><term><see cref="F:System.Windows.Forms.Keys.Home" /></term><description>Scrolls back to 0, 0.</description></item><item><term><see cref="F:System.Windows.Forms.Keys.End" /></term><description>Scrolls down to maximum width and height.</description></item></list></p>
        <p>The scrolling is only valid of the value of <see cref="P:Leadtools.WinForms.RasterImageViewer.AutoScroll" /> is set to <b>true</b></p>
        <p>Holding down the control key while pressing up, down, left or right will scroll by a page to the
            appropriate direction.</p>
      </remarks>
      <example>Refer to <see cref="T:Leadtools.WinForms.RasterImageViewer" />.</example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.EnableScrollingInterfaceChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.EnableScrollingInterface" /> property changes.
            </summary>
      <remarks>
        <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.EnableScrollingInterface" /> property is changed by either a programmatic
            modification or user interaction.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.UseDpi">
      <summary>
            Gets or sets a value that indicates whether LEAD's automated scaling properties are used to account for the physical resolution of the bitmap.
            </summary>
      <value>
        <b>true</b> Account for the physical resolution.
            Default value is <b>false</b>.</value>
      <remarks>
            The physical resolution of an image is measured in dots per inch (DPI). 
            When you load an image, the <see cref="P:Leadtools.RasterImage.XResolution" /> and <see cref="P:Leadtools.RasterImage.YResolution" /> properties are updated 
            with the DPI values for the horizontal and vertical resolution. Some images have different horizontal and vertical resolutions.
            For example, the horizontal resolution of a fax image is typically twice its vertical resolution (for example 200 by 100).
            In such cases, the displayed images will appear elongated if you do not account for the resolution.
            If the values of the <see cref="P:Leadtools.RasterImage.XResolution" /> property and the <see cref="P:Leadtools.RasterImage.YResolution" /> property are not equal, 
            set the <see cref="P:Leadtools.WinForms.RasterImageViewer.UseDpi" /> property to true to have LEAD's 
            automated scaling properties account for the physical resolution of the image.
            </remarks>
      <example>Refer to <see cref="T:Leadtools.WinForms.RasterImageViewer" />.</example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.UseDpiChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.UseDpi" /> property changes.
            </summary>
      <remarks>
        <p>This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.UseDpi" /> property is changed by either a programmatic modification
            or user interaction.</p>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.InteractiveModeMouseButton">
      <summary>
            Gets or sets the current mouse button associated with the viewer interactive.
            </summary>
      <value>A <see cref="T:System.Windows.Forms.MouseButtons" /> enumeration member that specify the current mouse button associated with the viewer interactive. Default value is <see cref="T:System.Windows.Forms.MouseButtons">MouseButtons.Left</see>.</value>
      <remarks>
        <para>Use this property to change the mouse button responsible for controlling the current interactive mode (<see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode" />) of this
            <see cref="T:Leadtools.WinForms.RasterImageViewer" />. Be careful when setting the value of this property to <see cref="T:System.Windows.Forms.MouseButtons">MouseButtons.Right</see> since
            this might conflict with any context menu strips you have attached to the viewer.</para>
      </remarks>
      <example>For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode" />.</example>
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.InteractiveModeMouseButtonChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveModeMouseButton" /> property changes.
            </summary>
      <event>The event handler receives an argument of type EventArgs.</event>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveModeMouseButton" /> property is changed by either a programmatic modification or user interaction.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.AutoInteractiveMagnifyGlass">
      <summary>
            Gets or sets a value that indicate whether to always show the magnify glass when the interactive mode is set to magnify glass.
            </summary>
      <value>
        <strong>true</strong> to always show the magnify glass when the interactive mode is set to magnify glass. <strong>false</strong>, otherwise. Default value is <strong>false</strong>.</value>
      <remarks>
        <para>The <see cref="T:Leadtools.WinForms.RasterImageViewer" /> class supports a magnify glass interactive mode. When selecting this mode
            in <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode" />, a magnify glass will appear to show in better zoomed in details, the parts of the image beneath
            the mouse cursor.</para>
        <para>When the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.AutoInteractiveMagnifyGlass" /> is <strong>false</strong> (the default), the magnify glass
            will appear when the user clicks the current interactive mode mouse button (left by default). The magnify glass will continue
            to appear as the user holds button down and moves the mouse. When the user lets go of the button, the magnify glass will
            disappear.</para>
        <para>If the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.AutoInteractiveMagnifyGlass" /> is <strong>true</strong> (and the current
            <see cref="P:Leadtools.WinForms.RasterImageViewer.InteractiveMode" /> is <see cref="T:Leadtools.WinForms.RasterViewerInteractiveMode">RasterViewerInteractiveMode.MagnifyGlass</see>), then the
            magnify glass will automatically appear as soon as the mouse cursor hovers over the viewer
            (provided there is an image in the viewer). The user can move the mouse and the hence, the magnify glass without having to hold
            down the current interactive mouse button.</para>
      </remarks>
      <noexample />
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.AutoInteractiveMagnifyGlassChanged">
      <summary>
            Occurs when the value of the <see cref="P:Leadtools.WinForms.RasterImageViewer.AutoInteractiveMagnifyGlass" /> property changes.
            </summary>
      <event>The event handler receives an argument of type EventArgs.</event>
      <remarks>
            This event is raised if the <see cref="P:Leadtools.WinForms.RasterImageViewer.AutoInteractiveMagnifyGlass" /> property is changed by either a programmatic modification or user interaction.
            </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.Cursor">
      <summary>
            Gets or sets the cursor that is displayed when the mouse pointer is over the control.
            </summary>
      <value>A <see cref="P:Leadtools.WinForms.RasterImageViewer.Cursor" /> that represents the cursor to display when the mouse pointer is over the control.</value>
      <remarks>
        <para>For more information, refer to <see cref="P:System.Windows.Forms.Control.Cursor">Control.Cursor</see>.</para>
      </remarks>
      <noexample />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.CausesValidation">
      <exclude />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.Font">
      <exclude />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.ForeColor">
      <exclude />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.ImeMode">
      <exclude />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.RightToLeft">
      <exclude />
    </member>
    <member name="P:Leadtools.WinForms.RasterImageViewer.Text">
      <exclude />
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.ChangeUICues">
      <exclude />
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.ControlAdded">
      <exclude />
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.ControlRemoved">
      <exclude />
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.ImeModeChanged">
      <exclude />
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.FontChanged">
      <exclude />
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.ForeColorChanged">
      <exclude />
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.RightToLeftChanged">
      <exclude />
    </member>
    <member name="E:Leadtools.WinForms.RasterImageViewer.TextChanged">
      <exclude />
    </member>
    <member name="T:Leadtools.WinForms.RasterImageListSelectionMode">
      <summary>
            Values for the <see cref="P:Leadtools.WinForms.RasterImageList.SelectionMode">RasterImageList.SelectionMode</see> property.
            </summary>
      <remarks>
            Specifies whether automatic item selection is allowed.  If automatic item selection is enabled,
            items are automatically selected and de-selected when the user clicks on them using the mouse.
            </remarks>
      <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageList.SelectionMode">RasterImageList.SelectionMode</see>.
            </example>
    </member>
    <member name="F:Leadtools.WinForms.RasterImageListSelectionMode.None">
      <summary>
            Automatic selection is disabled, selection is manual
            </summary>
    </member>
    <member name="F:Leadtools.WinForms.RasterImageListSelectionMode.Single">
      <summary>
            Automatic selection of single items is enabled
            </summary>
    </member>
    <member name="F:Leadtools.WinForms.RasterImageListSelectionMode.Multi">
      <summary>
            Automatic selection of multiple items is enabled.  The user can select multiple items using the mouse and the
            CTRL and SHIFT keys.
            </summary>
    </member>
    <member name="T:Leadtools.WinForms.RasterImageListViewStyle">
      <summary>
            Values for the <see cref="P:Leadtools.WinForms.RasterImageList.ViewStyle">RasterImageList.ViewStyle</see> property.
            </summary>
      <remarks>
            For more information about item appearance, refer to <see cref="T:Leadtools.Topics.RasterImageListAppearance">RasterImageList Appearance</see>.
            </remarks>
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterImageList">RasterImageList.ViewStyle</see>.
            </example>
    </member>
    <member name="F:Leadtools.WinForms.RasterImageListViewStyle.Normal">
      <summary>
            Normal items.  For a visual representation, refer to <see cref="T:Leadtools.Topics.RasterImageListAppearance">RasterImageList Appearance</see>.
            </summary>
    </member>
    <member name="F:Leadtools.WinForms.RasterImageListViewStyle.Explorer">
      <summary>
            Use Windows Explorer style items.  For a visual representation, refer to <see cref="T:Leadtools.Topics.RasterImageListAppearance">RasterImageList Appearance</see>.
            </summary>
    </member>
    <member name="F:Leadtools.WinForms.RasterImageListViewStyle.Button">
      <summary>
            Use button style items.  For a visual representation, refer to <see cref="T:Leadtools.Topics.RasterImageListAppearance">RasterImageList Appearance</see>.
            </summary>
    </member>
    <member name="F:Leadtools.WinForms.RasterImageListViewStyle.OwnerDraw">
      <summary>
            The user is responsible for drawing the items.  For more information and an example, refer to the
            <see cref="E:Leadtools.WinForms.RasterImageList.DrawItem">RasterImageList.DrawItem</see> event.
            </summary>
    </member>
    <member name="T:Leadtools.WinForms.RasterImageListScrollStyle">
      <summary>
            Values for the <see cref="P:Leadtools.WinForms.RasterImageList.ScrollStyle">RasterImageList.ScrollStyle</see> property.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="P:Leadtools.WinForms.RasterImageList.ScrollStyle">RasterImageList.ScrollStyle</see>.
            </example>
    </member>
    <member name="F:Leadtools.WinForms.RasterImageListScrollStyle.Horizontal">
      <summary>
            The control has a horizontal scrollbar.
            </summary>
    </member>
    <member name="F:Leadtools.WinForms.RasterImageListScrollStyle.Vertical">
      <summary>
            The control has a vertical scrollbar.
            </summary>
    </member>
    <member name="T:Leadtools.WinForms.RasterThumbnailBrowserLoadFlags">
      <summary>
            Used in the <see cref="M:Leadtools.WinForms.RasterThumbnailBrowser.LoadThumbnails(System.String,System.String,Leadtools.WinForms.RasterThumbnailBrowserLoadFlags)" /> to control how the
            <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser" /> loads the thumbnails.
            </summary>
      <noremarks />
      <example>
            For an example, refer to <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser" />.
            </example>
    </member>
    <member name="F:Leadtools.WinForms.RasterThumbnailBrowserLoadFlags.None">
      <summary>
            Default mode. The method will return immediately and the thumbnails are loaded in a background thread.
            </summary>
    </member>
    <member name="F:Leadtools.WinForms.RasterThumbnailBrowserLoadFlags.Block">
      <summary>
            The method will not return until all thumbnails are loaded.
            </summary>
    </member>
    <member name="F:Leadtools.WinForms.RasterThumbnailBrowserLoadFlags.OnlyValidImageFiles">
      <summary>
            Only valid image files are loaded.  Any file that contains data not recognized by the
            <see cref="P:Leadtools.WinForms.RasterThumbnailBrowser.Codecs" /> object as a valid image file will not be loaded.
            </summary>
    </member>
    <member name="F:Leadtools.WinForms.RasterThumbnailBrowserLoadFlags.AllDirectories">
      <summary>
            Load image files in current directory and all subdirectories. If this flag is not set only image files in the current directory will be loaded.
            </summary>
    </member>
    <member name="F:Leadtools.WinForms.RasterThumbnailBrowserLoadFlags.ExpandMultiPageFile">
      <summary>
            A <see cref="T:Leadtools.WinForms.RasterImageListItem" /> will be created and added to the <see cref="T:Leadtools.WinForms.RasterThumbnailBrowser" /> for each page found in the image file if it is a multipage file.
            </summary>
    </member>
  </members>
</doc>